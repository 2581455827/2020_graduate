///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        14/Dec/2019  17:04:04 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\ZMain\TI2530DB\ZMain.c    /
//    Command line       =  -f C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀ /
//                          í\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg         /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f C:\Users\25814\Desktop\202 /
//                          0±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó²¼þ²¿·Ö\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ /
//                          f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0             /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\202 /
//                          0±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó²¼þ²¿·Ö\Projects\zstack\ZM /
//                          ain\TI2530DB\ZMain.c -D NWK_AUTO_POLL -D ZAPP_P1  /
//                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\EndDeviceEB\List\ -lA                           /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\EndDeviceEB\List\ --diag_suppress Pe001,Pa010   /
//                          -o C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀ /
//                          í\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\EndDeviceEB\Obj\ -e --no_code_motion         /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀ /
//                          í\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\ -I C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_Î /
//                          ÂÈª¹ÜÀí\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\Source\ -I                          /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\ZMain\TI2530DB\ -I                     /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\hal\include\ -I       /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\hal\target\CC2530EB\  /
//                          -I C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀ /
//                          í\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\mac\include\ -I    /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\mac\high_level\ -I    /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\mac\low_level\srf04\  /
//                          -I C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀ /
//                          í\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\mac\low_level\srf0 /
//                          4\single_chip\ -I C:\Users\25814\Desktop\2020±ÏÉè /
//                          \²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó²¼þ²¿·Ö\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mt\ /
//                           -I C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹Ü /
//                          Àí\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\osal\include\ -I  /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\services\saddr\ -I    /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\services\sdata\ -I    /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\af\ -I          /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\nwk\ -I         /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sapi\ -I        /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sec\ -I         /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sys\ -I         /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\zdo\ -I         /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\zmac\ -I              /
//                          C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\zmac\f8w\ -Ohz        /
//    List file          =  C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó /
//                          ²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\EndDeviceEB\List\ZMain.s51                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZMain

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP

        PUBLIC ??main?relay
        FUNCTION ??main?relay,0203H
        FUNCTION ??zmain_ext_addr?relay,0203H
        PUBWEAK CLKCONCMD
        PUBWEAK CLKCONSTA
        PUBWEAK P0INP
        PUBWEAK P1DIR
        PUBWEAK SLEEPCMD
        PUBWEAK SLEEPSTA
        PUBWEAK _A_P1
        PUBLIC main
        FUNCTION main,0a1a03H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION zmain_ext_addr,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 23, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_int_disable    SYMBOL "osal_int_disable"
HalAdcCheckVdd      SYMBOL "HalAdcCheckVdd"
InitBoard           SYMBOL "InitBoard"
HalDriverInit       SYMBOL "HalDriverInit"
osal_nv_init        SYMBOL "osal_nv_init"
ZMacInit            SYMBOL "ZMacInit"
zgInit              SYMBOL "zgInit"
osal_init_system    SYMBOL "osal_init_system"
osal_int_enable     SYMBOL "osal_int_enable"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_start_system   SYMBOL "osal_start_system"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_read        SYMBOL "osal_nv_read"
osal_memcmp         SYMBOL "osal_memcmp"
HalFlashRead        SYMBOL "HalFlashRead"
osal_memcpy         SYMBOL "osal_memcpy"
osal_nv_write       SYMBOL "osal_nv_write"
ZMacSetReq          SYMBOL "ZMacSetReq"
osal_rand           SYMBOL "osal_rand"
??HalAdcCheckVdd?relay SYMBOL "?relay", HalAdcCheckVdd
??HalDriverInit?relay SYMBOL "?relay", HalDriverInit
??HalFlashRead?relay SYMBOL "?relay", HalFlashRead
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??InitBoard?relay   SYMBOL "?relay", InitBoard
??ZMacInit?relay    SYMBOL "?relay", ZMacInit
??ZMacSetReq?relay  SYMBOL "?relay", ZMacSetReq
??osal_init_system?relay SYMBOL "?relay", osal_init_system
??osal_int_disable?relay SYMBOL "?relay", osal_int_disable
??osal_int_enable?relay SYMBOL "?relay", osal_int_enable
??osal_memcmp?relay SYMBOL "?relay", osal_memcmp
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_nv_init?relay SYMBOL "?relay", osal_nv_init
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_system?relay SYMBOL "?relay", osal_start_system
??zgInit?relay      SYMBOL "?relay", zgInit
main                SYMBOL "main"
??main?relay        SYMBOL "?relay", main

        EXTERN osal_int_disable
        FUNCTION osal_int_disable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcCheckVdd
        FUNCTION HalAdcCheckVdd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN InitBoard
        FUNCTION InitBoard,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalDriverInit
        FUNCTION HalDriverInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_init
        FUNCTION osal_nv_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacInit
        FUNCTION ZMacInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgInit
        FUNCTION zgInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_init_system
        FUNCTION osal_init_system,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_int_enable
        FUNCTION osal_int_enable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_system
        FUNCTION osal_start_system,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalFlashRead
        FUNCTION HalFlashRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalAdcCheckVdd?relay
        FUNCTION ??HalAdcCheckVdd?relay,00H
        EXTERN ??HalDriverInit?relay
        FUNCTION ??HalDriverInit?relay,00H
        EXTERN ??HalFlashRead?relay
        FUNCTION ??HalFlashRead?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??InitBoard?relay
        FUNCTION ??InitBoard?relay,00H
        EXTERN ??ZMacInit?relay
        FUNCTION ??ZMacInit?relay,00H
        EXTERN ??ZMacSetReq?relay
        FUNCTION ??ZMacSetReq?relay,00H
        EXTERN ??osal_init_system?relay
        FUNCTION ??osal_init_system?relay,00H
        EXTERN ??osal_int_disable?relay
        FUNCTION ??osal_int_disable?relay,00H
        EXTERN ??osal_int_enable?relay
        FUNCTION ??osal_int_enable?relay,00H
        EXTERN ??osal_memcmp?relay
        FUNCTION ??osal_memcmp?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_nv_init?relay
        FUNCTION ??osal_nv_init?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_system?relay
        FUNCTION ??osal_start_system?relay,00H
        EXTERN ??zgInit?relay
        FUNCTION ??zgInit?relay,00H
        EXTERN aExtendedAddress

// C:\Users\25814\Desktop\2020±ÏÉè\²ÜÎÄ²©_ÎÂÈª¹ÜÀí\Ó²¼þ²¿·Ö\Projects\zstack\ZMain\TI2530DB\ZMain.c
//    1 /**************************************************************************************************
//    2   Filename:       ZMain.c
//    3   Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
//    4   Revision:       $Revision: 23835 $ V1.0 ALD Andy
//    5 
//    6   Description:    Startup and shutdown code for ZStack
//    7   Notes:          This version targets the Chipcon CC2530
//    8 
//    9 
//   10   Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at https://aldsz.taobao.com
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 
//   45 #ifndef NONWK
//   46 #include "AF.h"
//   47 #endif
//   48 #include "hal_adc.h"

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09dH
// unsigned char volatile __sfr SLEEPSTA
SLEEPSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09eH
// unsigned char volatile __sfr CLKCONSTA
CLKCONSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEPCMD
SLEEPCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCONCMD
CLKCONCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   49 #include "hal_flash.h"
//   50 #include "hal_lcd.h"
//   51 #include "hal_led.h"
//   52 #include "hal_drivers.h"
//   53 #include "OnBoard.h"
//   54 #include "OSAL.h"
//   55 #include "OSAL_Nv.h"
//   56 #include "ZComDef.h"
//   57 #include "ZMAC.h" 
//   58 
//   59 
//   60 
//   61 /*********************************************************************
//   62  * LOCAL FUNCTIONS
//   63  */
//   64 
//   65 static void zmain_ext_addr( void );
//   66 #if defined ZCL_KEY_ESTABLISH
//   67 static void zmain_cert_init( void );
//   68 #endif
//   69 static void zmain_dev_info( void );
//   70 static void zmain_vdd_check( void );
//   71 
//   72 #ifdef LCD_SUPPORTED
//   73 static void zmain_lcd_init( void );
//   74 #endif
//   75 
//   76 extern uint8 AppTitle[]; //Ó¦ÓÃ³ÌÐòÃû³Æ
//   77 
//   78 /*********************************************************************
//   79  * @fn      main
//   80  * @brief   First function called after startup.
//   81  * @return  don't care
//   82  */
//   83 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   84 int main( void )
main:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function main
        CODE
//   85 {
        FUNCALL main, osal_int_disable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, InitBoard
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, HalDriverInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, osal_nv_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, ZMacInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, zmain_ext_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, zgInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, osal_init_system
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, osal_int_enable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, InitBoard
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, osal_start_system
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Auto size: 0
//   86  // Turn off interrupts
//   87   osal_int_disable( INTS_ALL );
        ; Setup parameters for call to function osal_int_disable
        MOV     R1,#-0x1
        LCALL   ??osal_int_disable?relay
//   88   
//   89   // Initialization for board related stuff such as LEDs
//   90   HAL_BOARD_INIT();
        ANL     0xbe,#0xfb
??main_0:
        MOV     A,0x9d
        MOV     C,0xE0 /* A   */.6
        JNC     ??main_0
        NOP
        MOV     R0,#-0x8
        MOV     R1,#0x1
??main_1:
        NOP
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??main_1
        MOV     0xc6,#0x0
??main_2:
        MOV     A,0x9e
        JNZ     ??main_2
        ORL     0xbe,#0x4
        MOV     DPTR,#0x6270
        MOV     A,#0x8
        MOVX    @DPTR,A
        CLR     0x90.0
        ORL     0xfe,#0x1
        CLR     0x90.1
        ORL     0xfe,#0x2
        CLR     0x90.4
        ORL     0xfe,#0x10
        ORL     0x8f,#0x1
//   91 
//   92   // Make sure supply voltage is high enough to run
//   93   zmain_vdd_check();
        MOV     R6,#0x10
??main_3:
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4a
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??main_3
        DEC     R6
        MOV     A,R6
        JNZ     ??main_3
//   94   // Initialize board I/O
//   95   InitBoard( OB_COLD );
        ; Setup parameters for call to function InitBoard
        MOV     R1,#0x0
        LCALL   ??InitBoard?relay
//   96 
//   97   // Initialze HAL drivers
//   98   HalDriverInit();
        ; Setup parameters for call to function HalDriverInit
        LCALL   ??HalDriverInit?relay
//   99 
//  100   // Initialize NV System
//  101   osal_nv_init( NULL );
        ; Setup parameters for call to function osal_nv_init
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??osal_nv_init?relay
//  102 
//  103   // Initialize the MAC
//  104   ZMacInit();
        ; Setup parameters for call to function ZMacInit
        LCALL   ??ZMacInit?relay
//  105 
//  106   // Determine the extended address
//  107   zmain_ext_addr();
        ; Setup parameters for call to function zmain_ext_addr
        LCALL   ??zmain_ext_addr?relay
//  108 
//  109 #if defined ZCL_KEY_ESTABLISH
//  110   // Initialize the Certicom certificate information.
//  111   zmain_cert_init();
//  112 #endif
//  113 
//  114   // Initialize basic NV items
//  115   zgInit();
        ; Setup parameters for call to function zgInit
        LCALL   ??zgInit?relay
//  116 
//  117 #ifndef NONWK
//  118   // Since the AF isn't a task, call it's initialization routine
//  119   afInit();
//  120 #endif
//  121 
//  122   // Initialize the operating system
//  123   osal_init_system();
        ; Setup parameters for call to function osal_init_system
        LCALL   ??osal_init_system?relay
//  124 
//  125   // Allow interrupts
//  126   osal_int_enable( INTS_ALL );
        ; Setup parameters for call to function osal_int_enable
        MOV     R1,#-0x1
        LCALL   ??osal_int_enable?relay
//  127 
//  128   // Final board initialization
//  129   InitBoard( OB_READY );
        ; Setup parameters for call to function InitBoard
        MOV     R1,#0x2
        LCALL   ??InitBoard?relay
//  130 
//  131   // Display information about this device
//  132   zmain_dev_info();
//  133 
//  134   /* Display the device info on the LCD */
//  135 #ifdef LCD_SUPPORTED
//  136   zmain_lcd_init();
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x0
        MOV     R2,#`?<Constant "TexasInstruments">` & 0xff
        MOV     R3,#(`?<Constant "TexasInstruments">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  137 #endif
//  138 
//  139 #ifdef WDT_IN_PM1
//  140   /* If WDT is used, this is a good place to enable it. */
//  141   WatchDogEnable( WDTIMX );
//  142 #endif
//  143    P1_2 = 0;
        CLR     0x90.2
//  144   osal_start_system(); // No Return from here
        ; Setup parameters for call to function osal_start_system
        LCALL   ??osal_start_system?relay
//  145 
//  146   return 0;  // Shouldn't get here.
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE SLEEPCMD
        REQUIRE SLEEPSTA
        REQUIRE CLKCONCMD
        REQUIRE CLKCONSTA
        REQUIRE _A_P1
        REQUIRE P1DIR
        REQUIRE P0INP
//  147 } // main()
//  148 
//  149 /*********************************************************************
//  150  * @fn      zmain_vdd_check
//  151  * @brief   Check if the Vdd is OK to run the processor.
//  152  * @return  Return if Vdd is ok; otherwise, flash LED, then reset
//  153  *********************************************************************/
//  154 static void zmain_vdd_check( void )
//  155 {
//  156   uint8 cnt = 16;
//  157   
//  158   do {
//  159     while (!HalAdcCheckVdd(VDD_MIN_RUN));
//  160   } while (--cnt);
//  161 }
//  162 
//  163 /**************************************************************************************************
//  164  * @fn          zmain_ext_addr
//  165  *
//  166  * @brief       Execute a prioritized search for a valid extended address and write the results
//  167  *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
//  168  *
//  169  * input parameters
//  170  *
//  171  * None.
//  172  *
//  173  * output parameters
//  174  *
//  175  * None.
//  176  *
//  177  * @return      None.
//  178  **************************************************************************************************
//  179  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  180 static void zmain_ext_addr(void)
zmain_ext_addr:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function zmain_ext_addr
        CODE
//  181 {
        FUNCALL zmain_ext_addr, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  182   uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff
        MOV     DPL,#`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff
        MOV     A,#0x8
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  183   uint8 writeNV = TRUE;
//  184 
//  185   // First check whether a non-erased extended address exists in the OSAL NV.
//  186   if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
//  187       (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
//  188       (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
        ; Setup parameters for call to function osal_nv_item_init
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     ??zmain_ext_addr_0
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,#aExtendedAddress & 0xff
        MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     ??zmain_ext_addr_0
        ; Setup parameters for call to function osal_memcmp
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#aExtendedAddress & 0xff
        MOV     R2,#(aExtendedAddress >> 8) & 0xff
        MOV     R3,#0x0
        LCALL   ??osal_memcmp?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??zmain_ext_addr_1 & 0xFFFF
//  189   {
//  190     // Attempt to read the extended address from the location on the lock bits page
//  191     // where the programming tools know to reserve it.
//  192     HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
??zmain_ext_addr_0:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#aExtendedAddress & 0xff
        MOV     R5,#(aExtendedAddress >> 8) & 0xff
        MOV     R2,#-0x18
        MOV     R3,#0x7
        MOV     R1,#0x7f
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  193 
//  194     if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#aExtendedAddress & 0xff
        MOV     R2,#(aExtendedAddress >> 8) & 0xff
        MOV     R3,#0x0
        LCALL   ??osal_memcmp?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JZ      ??zmain_ext_addr_2
//  195     {
//  196       // Attempt to read the extended address from the designated location in the Info Page.
//  197       if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#0xc
        MOV     R2,#0x78
        MOV     R3,#0x0
        LCALL   ??osal_memcmp?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     ??zmain_ext_addr_3
//  198       {
//  199         osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#0xc
        MOV     ?V0 + 1,#0x78
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#aExtendedAddress & 0xff
        MOV     R3,#(aExtendedAddress >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  200       }
//  201       else  // No valid extended address was found.
//  202       {
//  203         uint8 idx;
//  204         
//  205 #if !defined ( NV_RESTORE )
//  206         writeNV = FALSE;  // Make this a temporary IEEE address
//  207 #endif
//  208 
//  209         /* Attempt to create a sufficiently random extended address for expediency.
//  210          * Note: this is only valid/legal in a test environment and
//  211          *       must never be used for a commercial product.
//  212          */
//  213         for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
//  214         {
//  215           uint16 randy = osal_rand();
//  216           aExtendedAddress[idx++] = LO_UINT16(randy);
//  217           aExtendedAddress[idx++] = HI_UINT16(randy);
//  218         }
//  219         // Next-to-MSB identifies ZigBee devicetype.
//  220 #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
//  221         aExtendedAddress[idx++] = 0x10;
//  222 #elif ZG_BUILD_RTRONLY_TYPE
//  223         aExtendedAddress[idx++] = 0x20;
//  224 #else
//  225         aExtendedAddress[idx++] = 0x30;
//  226 #endif
//  227         // MSB has historical signficance.
//  228         aExtendedAddress[idx] = 0xF8;
//  229       }
//  230     }
//  231 
//  232     if (writeNV)
//  233     {
//  234       (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
??zmain_ext_addr_2:
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#aExtendedAddress & 0xff
        MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  235     }
//  236   }
//  237 
//  238   // Set the MAC PIB extended address according to results from above.
//  239   (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
??zmain_ext_addr_1:
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#aExtendedAddress & 0xff
        MOV     R3,#(aExtendedAddress >> 8) & 0xff
        MOV     R1,#-0x1e
        LCALL   ??ZMacSetReq?relay
//  240 }
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI CFA_XSP16 add(XSP16, 19)
??zmain_ext_addr_3:
        MOV     R6,#0x0
??zmain_ext_addr_4:
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     ?V0 + 0,R2
        MOV     R0,?V0 + 0
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     R6
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     A,R3
        MOVX    @DPTR,A
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x6
        JC      ??zmain_ext_addr_4
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,#0x30
        MOVX    @DPTR,A
        MOV     A,#0x1
        ADD     A,R6
        MOV     R0,A
        MOV     A,#aExtendedAddress & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(aExtendedAddress >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x8
        MOVX    @DPTR,A
        SJMP    ??zmain_ext_addr_1
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     ?V0 + 0,R6
        MOV     A,#aExtendedAddress & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(aExtendedAddress >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??main?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    main

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zmain_ext_addr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zmain_ext_addr

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TexasInstruments">`:
        DB "TexasInstruments"

        END
//  241 
//  242 #if defined ZCL_KEY_ESTABLISH
//  243 /**************************************************************************************************
//  244  * @fn          zmain_cert_init
//  245  *
//  246  * @brief       Initialize the Certicom certificate information.
//  247  *
//  248  * input parameters
//  249  *
//  250  * None.
//  251  *
//  252  * output parameters
//  253  *
//  254  * None.
//  255  *
//  256  * @return      None.
//  257  **************************************************************************************************
//  258  */
//  259 static void zmain_cert_init(void)
//  260 {
//  261   uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
//  262   uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
//  263     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  264     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  265     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  266     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  267     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  268     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
//  269   };
//  270 
//  271   (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
//  272   (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
//  273 
//  274   // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
//  275   // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
//  276   if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
//  277       (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
//  278       (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
//  279   {
//  280     // Attempt to read the certificate data from its corresponding location on the lock bits page.
//  281     HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
//  282                                          ZCL_KE_CA_PUBLIC_KEY_LEN);
//  283     // If the certificate data is not NULL, use it to update the corresponding NV items.
//  284     if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
//  285     {
//  286       (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
//  287       HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
//  288                                            ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
//  289       (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
//  290                           ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
//  291       HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
//  292                                         ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
//  293       (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
//  294     }
//  295   }
//  296 }
//  297 #endif
//  298 
//  299 /**************************************************************************************************
//  300  * @fn          zmain_dev_info
//  301  *
//  302  * @brief       This displays the IEEE (MSB to LSB) on the LCD.
//  303  *
//  304  * input parameters
//  305  *
//  306  * None.
//  307  *
//  308  * output parameters
//  309  *
//  310  * None.
//  311  *
//  312  * @return      None.
//  313  **************************************************************************************************
//  314  */
//  315 static void zmain_dev_info(void)
//  316 {
//  317 #ifdef LCD_SUPPORTED
//  318 
//  319 #endif
//  320 }
//  321 
//  322 #ifdef LCD_SUPPORTED
//  323 /*********************************************************************
//  324  * @fn      zmain_lcd_init
//  325  * @brief   Initialize LCD at start up.
//  326  * @return  none
//  327  *********************************************************************/
//  328 static void zmain_lcd_init ( void )
//  329 {
//  330 #ifdef SERIAL_DEBUG_SUPPORTED
//  331   {
//  332     HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
//  333 
//  334 #if defined( MT_MAC_FUNC )
//  335 #if defined( ZDO_COORDINATOR )
//  336       HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
//  337 #else
//  338       HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
//  339 #endif // ZDO
//  340 #elif defined( MT_NWK_FUNC )
//  341 #if defined( ZDO_COORDINATOR )
//  342       HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
//  343 #else
//  344       HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
//  345 #endif // ZDO
//  346 #endif // MT_FUNC
//  347   }
//  348 #endif // SERIAL_DEBUG_SUPPORTED
//  349 }
//  350 #endif
//  351 
//  352 /*********************************************************************
//  353 *********************************************************************/
// 
// 534 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
//   7 bytes in segment SFR_AN
//  25 bytes in segment XDATA_ROM_C
// 
// 546 bytes of CODE  memory
//  25 bytes of CONST memory
//   0 bytes of DATA  memory (+ 7 bytes shared)
//
//Errors: none
//Warnings: none
