###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         31/Dec/2019  20:11:32 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\Sa #
#                          mpleApp.c                                          #
#    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì #
#                          \”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg            #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f C:\Users\25814\Desktop\2020 #
#                          ±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤º˛≤ø∑÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8w #
#                          Config.cfg (-DZIGBEEPRO -DSECURE=0                 #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤º˛≤ø∑÷\Projects\zstack\Samp #
#                          les\SampleApp\Source\SampleApp.c -D NWK_AUTO_POLL  #
#                          -D ZAPP_P1 -D MT_TASK -D MT_SYS_FUNC -D            #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\List\ -lA C:\Users\25814\Desktop\2020± #
#                          œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤º˛≤ø∑÷\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\EndDeviceEB\List\            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\Obj\ -e --no_code_motion --debug       #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤º˛≤ø∑÷\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\ -I                        #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\Source\ -I C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ #
#                          ≤©_Œ¬»™π‹¿Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\include\ -I          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\include\ -I          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\high_level\ -I       #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤© #
#                          _Œ¬»™π‹¿Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\Components\mt\ -I       #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\osal\include\ -I         #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\saddr\ -I       #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\sdata\ -I       #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\af\ -I             #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\nwk\ -I            #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sapi\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sec\ -I            #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sys\ -I            #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\zdo\ -I            #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\ -I                 #
#                          C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\f8w\ -Ohz           #
#    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\List\SampleApp.lst                     #
#    Object file        =  C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\Obj\SampleApp.r51                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±œ…Ë\≤‹Œƒ≤©_Œ¬»™π‹¿Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          #include <stdio.h>
     79          #include <string.h>
     80          
     81          //MY DEVICE
     82          #include "DHT11.h"
     83          #include "rc522.h"
     84          #include "IC.h"
     85          
     86          /*********************************************************************
     87           * MACROS
     88           */
     89           
     90          #define TURBIDITY P0_6
     91          #define PUMP P1_3
     92          /*********************************************************************
     93           * CONSTANTS
     94           */
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          /*********************************************************************
    101           * GLOBAL VARIABLES
    102           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    103          uint8 AppTitle[] = "ALD2530 Example"; //”¶”√≥Ã–Ú√˚≥∆ 
   \                     AppTitle:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for AppTitle>`
   \   000010                REQUIRE __INIT_XDATA_I
    104          uint16 ReadTurData(void);
    105          uint16 ReadPhData(void);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          void myDelay(){
   \                     myDelay:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    107            for(int j =0;j<100;j++)
   \   000000   7A64         MOV     R2,#0x64
    108              for(int i = 0;i<0xffff;i++)
   \                     ??myDelay_0:
   \   000002   7800         MOV     R0,#0x0
   \   000004   7900         MOV     R1,#0x0
   \                     ??myDelay_1:
   \   000006   E8           MOV     A,R0
   \   000007   2401         ADD     A,#0x1
   \   000009   08           INC     R0
   \   00000A   E9           MOV     A,R1
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   68           XRL     A,R0
   \   000011   7003         JNZ     ??myDelay_2
   \   000013   74FF         MOV     A,#-0x1
   \   000015   69           XRL     A,R1
   \                     ??myDelay_2:
   \   000016   70EE         JNZ     ??myDelay_1
    109              {}
   \   000018   1A           DEC     R2
   \   000019   EA           MOV     A,R2
   \   00001A   70E6         JNZ     ??myDelay_0
    110          }
   \   00001C   02....       LJMP    ?BRET
    111          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    112          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    113          {
    114            SAMPLEAPP_PERIODIC_CLUSTERID,
    115            SAMPLEAPP_FLASH_CLUSTERID
    116          };
    117          

   \                                 In  segment XDATA_ROM_C, align 1
    118          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    119          {
    120            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    121            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    122            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    123            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    124            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    125            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    126            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    127            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    128            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    129          };
    130          
    131          // This is the Endpoint/Interface description.  It is defined here, but
    132          // filled-in in SampleApp_Init().  Another way to go would be to fill
    133          // in the structure here and make it a "const" (in code space).  The
    134          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    136          
    137          /*********************************************************************
    138           * EXTERNAL VARIABLES
    139           */
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL VARIABLES
    147           */
    148          
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151                                    // This variable will be received when
    152                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    164          
    165          #ifndef ZDO_COORDINATOR

   \                                 In  segment XDATA_I, align 1, keep-with-next
    166            byte state_fan = 1;
   \                     state_fan:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for state_fan>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167            byte state_beep = 1;
   \                     state_beep:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for state_beep>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168            byte recv_fan = 0;
   \                     recv_fan:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169            byte recv_beep = 0;
   \                     recv_beep:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          #endif
    171          /*********************************************************************
    172           * LOCAL FUNCTIONS
    173           */
    174          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    175          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    176          void SampleApp_SendPeriodicMessage( void );
    177          void SampleApp_SendFlashMessage( uint16 flashTime );
    178          void SampleApp_Send_P2P_Message(void);
    179          /*********************************************************************
    180           * NETWORK LAYER CALLBACKS
    181           */
    182          
    183          /*********************************************************************
    184           * PUBLIC FUNCTIONS
    185           */
    186           
    187          /*********************************************************************
    188           * @fn      SampleApp_Init
    189           *
    190           * @brief   Initialization function for the Generic App Task.
    191           *          This is called during initialization and should contain
    192           *          any application specific initialization (ie. hardware
    193           *          initialization/setup, table initialization, power up
    194           *          notificaiton ... ).
    195           *
    196           * @param   task_id - the ID assigned by OSAL.  This ID should be
    197           *                    used to send messages and set timers.
    198           *
    199           * @return  none
    200           */
    201          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    202          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    203          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    204            
    205           
    206            SampleApp_TaskID = task_id;   //osal∑÷≈‰µƒ»ŒŒÒIDÀÊ◊≈”√ªßÃÌº”»ŒŒÒµƒ‘ˆ∂‡∂¯∏ƒ±‰
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    207            SampleApp_NwkState = DEV_INIT;//…Ë±∏◊¥Ã¨…Ë∂®Œ™ZDO≤„÷–∂®“Âµƒ≥ı ºªØ◊¥Ã¨
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    208            SampleApp_TransID = 0;        //œ˚œ¢∑¢ÀÕID£®∂‡œ˚œ¢ ±”–À≥–Ú÷Æ∑÷£©
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    209            //ƒ£øÈ≥ı ºªØ
    210            P0SEL &=~0X40;
   \   000016   53F3BF       ANL     0xf3,#0xbf
    211            P0DIR &=~0x40;//◊«∂»ƒ£øÈ
   \   000019   53FDBF       ANL     0xfd,#0xbf
    212            P1DIR |=0x08;//ºÃµÁ∆˜ÀÆ±√
   \   00001C   43FE08       ORL     0xfe,#0x8
    213           
    214            //¥Æø⁄≈‰÷√
    215            MT_UartInit();
   \   00001F                ; Setup parameters for call to function MT_UartInit
   \   00001F   12....       LCALL   ??MT_UartInit?relay
    216            MT_UartRegisterTaskID(task_id);  
   \   000022                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000022   EE           MOV     A,R6
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   ??MT_UartRegisterTaskID?relay
    217            HalUARTWrite(0,"start",4);
   \   000027                ; Setup parameters for call to function HalUARTWrite
   \   000027   7C04         MOV     R4,#0x4
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A..         MOV     R2,#`?<Constant "start">` & 0xff
   \   00002D   7B..         MOV     R3,#(`?<Constant "start">` >> 8) & 0xff
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   ??HalUARTWrite?relay
    218            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n")); 
   \   000034                ; Setup parameters for call to function HalUARTWrite
   \   000034   7C0D         MOV     R4,#0xd
   \   000036   7D00         MOV     R5,#0x0
   \   000038   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   00003A   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   12....       LCALL   ??HalUARTWrite?relay
    219           
    220          
    221            // Device hardware initialization can be added here or in main() (Zmain.c).
    222            // If the hardware is application specific - add it here.
    223            // If the hardware is other parts of the device add it in main().
    224          
    225          #if defined ( BUILD_ALL_DEVICES )
    226            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    227            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    228            // together - if they are - we will start up a coordinator. Otherwise,
    229            // the device will start as a router.
    230            if ( readCoordinatorJumper() )
    231              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    232            else
    233              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    234          #endif // BUILD_ALL_DEVICES
    235          
    236          //∏√∂Œµƒ“‚Àº «£¨»Áπ˚…Ë÷√¡ÀHOLD_AUTO_START∫Í∂®“Â£¨Ω´ª·‘⁄∆Ù∂Ø–æ∆¨µƒ ±∫Úª·‘›Õ£∆Ù∂Ø
    237          //¡˜≥Ã£¨÷ª”–Õ‚≤ø¥•∑¢“‘∫Û≤≈ª·∆Ù∂Ø–æ∆¨°£∆‰ µæÕ «–Ë“™“ª∏ˆ∞¥≈•¥•∑¢À¸µƒ∆Ù∂Ø¡˜≥Ã°£  
    238          #if defined ( HOLD_AUTO_START )
    239            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    240            //  from starting the device and wait for the application to
    241            //  start the device.
    242            ZDOInitDevice(0);
    243          #endif
    244          
    245            // Setup for the periodic message's destination address …Ë÷√∑¢ÀÕ ˝æ›µƒ∑Ω Ω∫Õƒøµƒµÿ÷∑—∞÷∑ƒ£ Ω
    246            // Broadcast to everyone ∑¢ÀÕƒ£ Ω:π„≤•∑¢ÀÕ
    247            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//π„≤•
   \   000041   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000044   740F         MOV     A,#0xf
   \   000046   F0           MOVX    @DPTR,A
    248            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000047   A3           INC     DPTR
   \   000048   7414         MOV     A,#0x14
   \   00004A   F0           MOVX    @DPTR,A
    249            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//÷∏∂®ƒøµƒÕ¯¬Áµÿ÷∑Œ™π„≤•µÿ÷∑
   \   00004B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00004E   74FF         MOV     A,#-0x1
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   F0           MOVX    @DPTR,A
    250          
    251            // Setup for the flash command's destination address - Group 1 ◊È≤•∑¢ÀÕ
    252            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //◊È—∞÷∑
   \   000053   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000056   7401         MOV     A,#0x1
   \   000058   F0           MOVX    @DPTR,A
    253            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000059   A3           INC     DPTR
   \   00005A   7414         MOV     A,#0x14
   \   00005C   F0           MOVX    @DPTR,A
    254            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//◊È∫≈0x0001
   \   00005D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000060   7401         MOV     A,#0x1
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
    255          
    256            // Fill out the endpoint description. ∂®“Â±æ…Ë±∏”√¿¥Õ®–≈µƒAPS≤„∂Àµ„√Ë ˆ∑˚
    257            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000066   90....       MOV     DPTR,#SampleApp_epDesc
   \   000069   7414         MOV     A,#0x14
   \   00006B   F0           MOVX    @DPTR,A
    258            SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp √Ë ˆ∑˚µƒ»ŒŒÒID
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000073   F0           MOVX    @DPTR,A
    259            SampleApp_epDesc.simpleDesc
    260                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleAppºÚµ•√Ë ˆ∑˚
   \   000074   A3           INC     DPTR
   \   000075   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00007B   F0           MOVX    @DPTR,A
    261            SampleApp_epDesc.latencyReq = noLatencyReqs;    //—” ±≤ﬂ¬‘
   \   00007C   A3           INC     DPTR
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
    262          
    263            // Register the endpoint description with the AF
    264            afRegister( &SampleApp_epDesc );    //œÚAF≤„µ«º«√Ë ˆ∑˚
   \   00007F                ; Setup parameters for call to function afRegister
   \   00007F   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000081   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000083   12....       LCALL   ??afRegister?relay
    265          
    266            // Register for all key events - This app will handle all key events
    267            RegisterForKeys( SampleApp_TaskID ); // µ«º«À˘”–µƒ∞¥º¸ ¬º˛
   \   000086                ; Setup parameters for call to function RegisterForKeys
   \   000086   90....       MOV     DPTR,#SampleApp_TaskID
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   ??RegisterForKeys?relay
    268          
    269            // By default, all devices start out in Group 1
    270            SampleApp_Group.ID = 0x0001;//◊È∫≈
   \   00008E   90....       MOV     DPTR,#SampleApp_Group
   \   000091   7401         MOV     A,#0x1
   \   000093   F0           MOVX    @DPTR,A
   \   000094   A3           INC     DPTR
   \   000095   E4           CLR     A
   \   000096   F0           MOVX    @DPTR,A
    271            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//…Ë∂®◊È√˚
   \   000097                ; Setup parameters for call to function osal_memcpy
   \   000097   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00009A   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00009D   F5..         MOV     ?V0 + 2,A
   \   00009F   78..         MOV     R0,#?V0 + 0
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A4   7C07         MOV     R4,#0x7
   \   0000A6   7D00         MOV     R5,#0x0
   \   0000A8   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000AA   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000AC   12....       LCALL   ??osal_memcpy?relay
   \   0000AF   7403         MOV     A,#0x3
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
    272            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//∞—∏√◊Èµ«º«ÃÌº”µΩAPS÷–
   \   0000B4                ; Setup parameters for call to function aps_AddGroup
   \   0000B4   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B6   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B8   7914         MOV     R1,#0x14
   \   0000BA   12....       LCALL   ??aps_AddGroup?relay
    273          
    274          #if defined ( LCD_SUPPORTED )
    275            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //»Áπ˚÷ß≥÷LCD£¨œ‘ æÃ· æ–≈œ¢
   \   0000BD                ; Setup parameters for call to function HalLcdWriteString
   \   0000BD   7900         MOV     R1,#0x0
   \   0000BF   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000C1   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000C3   12....       LCALL   ??HalLcdWriteString?relay
    276          #endif
    277          }
   \   0000C6   7F03         MOV     R7,#0x3
   \   0000C8   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000CB                REQUIRE P0SEL
   \   0000CB                REQUIRE P0DIR
   \   0000CB                REQUIRE P1DIR
    278          
    279          /*********************************************************************
    280           * @fn      SampleApp_ProcessEvent
    281           *
    282           * @brief   Generic Application Task event processor.  This function
    283           *          is called to process all events for the task.  Events
    284           *          include timers, messages and any other user defined events.
    285           *
    286           * @param   task_id  - The OSAL assigned task ID.
    287           * @param   events - events to process.  This is a bit map and can
    288           *                   contain more than one event.
    289           *
    290           * @return  none
    291           */
    292          //”√ªß”¶”√»ŒŒÒµƒ ¬º˛¥¶¿Ì∫Ø ˝

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    293          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    294          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    295            afIncomingMSGPacket_t *MSGpkt;
    296            (void)task_id;  // Intentionally unreferenced parameter
    297          
    298            if ( events & SYS_EVENT_MSG ) //Ω” ’œµÕ≥œ˚œ¢‘ŸΩ¯––≈–∂œ
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    299            {
    300              //Ω” ’ Ù”⁄±æ”¶”√»ŒŒÒSampleAppµƒœ˚œ¢£¨“‘SampleApp_TaskID±Íº«
    301              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    302              while ( MSGpkt )
    303              {
    304                switch ( MSGpkt->hdr.event )
    305                {
    306                  // Received when a key is pressed
    307                  case KEY_CHANGE://∞¥º¸ ¬º˛
    308                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    309                    break;
    310          
    311                  // Received when a messages is received (OTA) for this endpoint
    312                case AF_INCOMING_MSG_CMD://Ω” ’ ˝æ› ¬º˛,µ˜”√∫Ø ˝AF_DataRequest()Ω” ’ ˝æ›
    313                    SampleApp_MessageMSGCB( MSGpkt );//µ˜”√ªÿµ˜∫Ø ˝∂‘ ’µΩµƒ ˝æ›Ω¯––¥¶¿Ì
    314                    break;
    315          
    316                  // Received whenever the device changes state in the network
    317                  case ZDO_STATE_CHANGE:
    318                    //÷ª“™Õ¯¬Á◊¥Ã¨∑¢…˙∏ƒ±‰£¨æÕÕ®π˝ZDO_STATE_CHANGE ¬º˛Õ®÷™À˘”–µƒ»ŒŒÒ°£
    319                    //Õ¨ ±ÕÍ≥…∂‘–≠µ˜∆˜£¨¬∑”…∆˜£¨÷’∂Àµƒ…Ë÷√
    320                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    321                    //if ( (SampleApp_NwkState == DEV_ZB_COORD)// µ—È÷––≠µ˜∆˜÷ªΩ” ’ ˝æ›À˘“‘»°œ˚∑¢ÀÕ ¬º˛
    322                    if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    323                    {
    324                      // Start sending the periodic message in a regular interval.
    325                      //’‚∏ˆ∂® ±∆˜÷ª «Œ™∑¢ÀÕ÷‹∆⁄–≈œ¢ø™∆Ùµƒ£¨…Ë±∏∆Ù∂Ø≥ı ºªØ∫Û¥”’‚¿Ôø™ º
    326                      //¥•∑¢µ⁄“ª∏ˆ÷‹∆⁄–≈œ¢µƒ∑¢ÀÕ£¨»ª∫Û÷‹∂¯∏¥ ºœ¬»•
    327                      osal_start_timerEx( SampleApp_TaskID,
    328                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    329                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    330                     
    331                    }
    332                    else
    333                    {
    334                        
    335                    }
    336                    break;
    337          
    338                  default:
    339                    break;
    340                }
    341          
    342                // Release the memory  ¬º˛¥¶¿ÌÕÍ¡À£¨ Õ∑≈œ˚œ¢’º”√µƒƒ⁄¥Ê
    343                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    344             
    345                // Next - if one is available ÷∏’Î÷∏œÚœ¬“ª∏ˆ∑≈‘⁄ª∫≥Â«¯µƒ¥˝¥¶¿Ìµƒ ¬º˛£¨
    346                //∑µªÿwhile ( MSGpkt )÷ÿ–¬¥¶¿Ì ¬º˛£¨÷±µΩª∫≥Â«¯√ª”–µ»¥˝¥¶¿Ì ¬º˛Œ™÷π
    347                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    348              }
    349          
    350              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    351              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    352            }
    353          
    354            // Send a message out - This event is generated by a timer
    355            //  (setup in SampleApp_Init()).
    356            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    357            {
    358              // Send the periodic message ¥¶¿Ì÷‹∆⁄–‘ ¬º˛£¨
    359              //¿˚”√SampleApp_SendPeriodicMessage()¥¶¿ÌÕÍµ±«∞µƒ÷‹∆⁄–‘ ¬º˛£¨»ª∫Û∆Ù∂Ø∂® ±∆˜
    360              //ø™∆Ùœ¬“ª∏ˆ÷‹∆⁄–‘ ¬«È£¨’‚—˘“ª÷÷—≠ª∑œ¬»•£¨“≤º¥ «…œ√ÊÀµµƒ÷‹∆⁄–‘ ¬º˛¡À£¨
    361              //ø…“‘◊ˆŒ™¥´∏–∆˜∂® ±≤…ºØ°¢…œ¥´»ŒŒÒ
    362              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    363              
    364              // Setup to send message again in normal period (+ a little jitter)
    365              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    366                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24E8         ADD     A,#-0x18
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3403         ADDC    A,#0x3
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    367          
    368              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    369              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    370            }
    371          
    372            // Discard unknown events
    373            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB                REQUIRE ?Subroutine1
   \   0000AB                ; // Fall through to label ?Subroutine1
    374          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    375          
    376          /*********************************************************************
    377           * Event Generation Functions
    378           */
    379          /*********************************************************************
    380           * @fn      SampleApp_HandleKeys
    381           *
    382           * @brief   Handles all key events for this device.
    383           *
    384           * @param   shift - true if in shift/alt.
    385           * @param   keys - bit field for key events. Valid entries:
    386           *                 HAL_KEY_SW_2
    387           *                 HAL_KEY_SW_1
    388           *
    389           * @return  none
    390           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    391          void SampleApp_HandleKeys( uint8 shift, uint8 keys )  
   \                     SampleApp_HandleKeys:
    392          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
    393            (void)shift;  // Intentionally unreferenced parameter
    394            
    395            if ( keys & HAL_KEY_SW_1 )
   \   00000B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000D   505D         JNC     ??SampleApp_HandleKeys_0
    396            {
    397              /* This key sends the Flash Command is sent to Group 1.
    398               * This device will not receive the Flash Command from this
    399               * device (even if it belongs to group 1).
    400               */
    401          #ifndef ZDO_COORDINATOR
    402             char str[] = "key";
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant "key">` >> 8) & 0xff
   \   00001C   7582..       MOV     DPL,#`?<Constant "key">` & 0xff
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    403             if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    404                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    405                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    406                                 sizeof(str),       //∑¢ÀÕ ˝æ›≥§∂»
    407                                 (uchar*)str,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    408                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    409                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    410                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
   \   000024                ; Setup parameters for call to function AF_DataRequest
   \   000024   75..1E       MOV     ?V0 + 0,#0x1e
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   8582..       MOV     ?V0 + 0,DPL
   \   00003F   8583..       MOV     ?V0 + 1,DPH
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..04       MOV     ?V0 + 0,#0x4
   \   00004A   75..00       MOV     ?V0 + 1,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..01       MOV     ?V0 + 0,#0x1
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7920         MOV     R1,#0x20
   \   00005C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00005E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000060   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000062   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000064   12....       LCALL   ??AF_DataRequest?relay
   \   000067   7409         MOV     A,#0x9
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
    411            {
    412            }
    413          #else
    414            
    415          #endif
    416            
    417            // SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
    418          
    419            }
    420          
    421            if ( keys & HAL_KEY_SW_6 )
    422            {
    423              /* The Flashr Command is sent to Group 1.
    424               * This key toggles this device in and out of group 1.
    425               * If this device doesn't belong to group 1, this application
    426               * will not receive the Flash command sent to group 1.
    427               */
    428            
    429             /*
    430              aps_Group_t *grp;
    431              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    432              if ( grp )
    433              {
    434                // Remove from the group
    435                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    436              }
    437              else
    438              {
    439                // Add to the flash group
    440                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    441              }
    442             */
    443            }
    444          }
   \                     ??SampleApp_HandleKeys_0:
   \   00006C   7404         MOV     A,#0x4
   \   00006E   80..         SJMP    ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine5_0
   \   000003                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    445          
    446          /*********************************************************************
    447           * LOCAL FUNCTIONS
    448           */
    449          
    450          /*********************************************************************
    451           * @fn      SampleApp_MessageMSGCB
    452           *
    453           * @brief   Data message processor callback.  This function processes
    454           *          any incoming data - probably from other devices.  So, based
    455           *          on cluster ID, perform the intended action.
    456           *
    457           * @param   none
    458           *
    459           * @return  none
    460           */
    461          //Ω” ’ ˝æ›£¨≤Œ ˝Œ™Ω” ’µΩµƒ ˝æ›

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    463          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    464            uint16 flashTime;
    465            unsigned short len = 4+3+2+1;
                                  ^
Warning[Pe177]: variable "len" was declared but never referenced
    466            byte buf[4+3+2+1]={0}; 
                        ^
Warning[Pe177]: variable "buf" was declared but never referenced
    467            
    468            switch ( pkt->clusterId ) //≈–∂œ¥ÿID
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6402         XRL     A,#0x2
   \   000010   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000014   703B         JNZ     ??SampleApp_MessageMSGCB_1
    469            {
    470              case SAMPLEAPP_PERIODIC_CLUSTERID: // ’µΩπ„≤• ˝æ›
    471               
    472          #ifndef ZDO_COORDINATOR 
    473                //Ω⁄µ„
    474          #else
    475                //–≠µ˜∆˜
    476                
    477                osal_memset(buf,0,len);
    478                osal_memcpy(buf, pkt->cmd.Data, len); //∏¥÷∆ ˝æ›µΩª∫≥Â«¯÷–
    479                HalUARTWrite(0,buf,sizeof(buf));
    480            
    481          #endif
    482                break;
    483          
    484              case SAMPLEAPP_FLASH_CLUSTERID: // ’µΩ◊È≤• ˝æ›  
    485                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    486                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   000016   EA           MOV     A,R2
   \   000017   2422         ADD     A,#0x22
   \   000019   F582         MOV     DPL,A
   \   00001B   EB           MOV     A,R3
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   F583         MOV     DPH,A
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F8           MOV     R0,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025                ; Setup parameters for call to function HalLedBlink
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   EA           MOV     A,R2
   \   000035   2400         ADD     A,#0x0
   \   000037   F5..         MOV     ?V0 + 0,A
   \   000039   E4           CLR     A
   \   00003A   39           ADDC    A,R1
   \   00003B   F5..         MOV     ?V0 + 1,A
   \   00003D   7402         MOV     A,#0x2
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?US_SHR
   \   000044   AC..         MOV     R4,?V0 + 0
   \   000046   AD..         MOV     R5,?V0 + 1
   \   000048   7B32         MOV     R3,#0x32
   \   00004A   7A04         MOV     R2,#0x4
   \   00004C   7908         MOV     R1,#0x8
   \   00004E   12....       LCALL   ??HalLedBlink?relay
    487                break;
    488            case SAMPLEAPP_P2P_CLUSTERID:
    489           
    490              break;
    491            }
    492          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000051   80..         SJMP    ??Subroutine5_0
    493          
    494          /*********************************************************************
    495           * @fn      SampleApp_SendPeriodicMessage
    496           *
    497           * @brief   Send the periodic message.
    498           *
    499           * @param   none
    500           *
    501           * @return  none
    502           */
    503          //∑÷Œˆ∑¢ÀÕ÷‹∆⁄–≈œ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    505          { 
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 80
   \   000005   74B0         MOV     A,#-0x50
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    506          #ifndef ZDO_COORDINATOR 
    507            //ªÒµ√µƒ ˝æ›Õ®π˝¥Æø⁄ ‰≥ˆµΩµÁƒ‘œ‘ æ  
    508            char str[4+3+2+1]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   C082         PUSH    DPL
   \   00000F   7406         MOV     A,#0x6
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   D082         POP     DPL
   \   00001D   740A         MOV     A,#0xa
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    509           //ªÒ»°Œ¬∂»
    510            char tempStr[64]={0};
   \   000022   90....       MOV     DPTR,#`?<Constant {0}>_1`
   \   000025   7440         MOV     A,#0x40
   \   000027   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    511            char tempData[6]={0};
   \   00002A   90....       MOV     DPTR,#`?<Constant {0}>_2`
   \   00002D   C082         PUSH    DPL
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   AC82         MOV     R4,DPL
   \   000037   AD83         MOV     R5,DPH
   \   000039   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   00003C   D082         POP     DPL
   \   00003E   7406         MOV     A,#0x6
   \   000040   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    512            HalUARTWrite(0,"read",sizeof("read"));
   \   000043                ; Setup parameters for call to function HalUARTWrite
   \   000043   7C05         MOV     R4,#0x5
   \   000045   FD           MOV     R5,A
   \   000046   7A..         MOV     R2,#`?<Constant "read">` & 0xff
   \   000048   7B..         MOV     R3,#(`?<Constant "read">` >> 8) & 0xff
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   ??HalUARTWrite?relay
    513            HalUARTWrite(0,"\n",1);
   \   00004E                ; Setup parameters for call to function HalUARTWrite
   \   00004E   7C01         MOV     R4,#0x1
   \   000050   7D00         MOV     R5,#0x0
   \   000052   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000054   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000056   7900         MOV     R1,#0x0
   \   000058   12....       LCALL   ??HalUARTWrite?relay
    514            HalUARTRead(0,tempStr,64);
                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00005B                ; Setup parameters for call to function HalUARTRead
   \   00005B   7C40         MOV     R4,#0x40
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   7410         MOV     A,#0x10
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   7900         MOV     R1,#0x0
   \   00006A   12....       LCALL   ??HalUARTRead?relay
    515            
    516            int i = 0;
   \   00006D   7800         MOV     R0,#0x0
   \   00006F   7900         MOV     R1,#0x0
   \   000071   8008         SJMP    ??SampleApp_SendPeriodicMessage_0
    517            while(tempStr[i]!=0xA1&&tempStr[i+1]!=0xE6){
    518              ++i;
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   000073   E8           MOV     A,R0
   \   000074   2401         ADD     A,#0x1
   \   000076   08           INC     R0
   \   000077   E9           MOV     A,R1
   \   000078   3400         ADDC    A,#0x0
   \   00007A   F9           MOV     R1,A
    519            };
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   00007B   7410         MOV     A,#0x10
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000083   E0           MOVX    A,@DPTR
   \   000084   64A1         XRL     A,#0xa1
   \   000086   600E         JZ      ??SampleApp_SendPeriodicMessage_2
   \   000088   7410         MOV     A,#0x10
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   64E6         XRL     A,#0xe6
   \   000094   70DD         JNZ     ??SampleApp_SendPeriodicMessage_1
    520            if(i==63){
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   000096   743F         MOV     A,#0x3f
   \   000098   68           XRL     A,R0
   \   000099   7001         JNZ     ??SampleApp_SendPeriodicMessage_3
   \   00009B   E9           MOV     A,R1
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   00009C   7025         JNZ     ??SampleApp_SendPeriodicMessage_4
    521              osal_memcpy(tempData,"00.0",4);
   \   00009E                ; Setup parameters for call to function osal_memcpy
   \   00009E   75....       MOV     ?V0 + 0,#`?<Constant "00.0">` & 0xff
   \   0000A1   75....       MOV     ?V0 + 1,#(`?<Constant "00.0">` >> 8) & 0xff
   \   0000A4   75..00       MOV     ?V0 + 2,#0x0
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AC   7C04         MOV     R4,#0x4
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   7403         MOV     A,#0x3
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   AA82         MOV     R2,DPL
   \   0000B7   AB83         MOV     R3,DPH
   \   0000B9   12....       LCALL   ??osal_memcpy?relay
   \   0000BC   7403         MOV     A,#0x3
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1   8054         SJMP    ??SampleApp_SendPeriodicMessage_5
    522          //     HalUARTWrite(0,"00.0",4);
    523            }
    524            else{
    525                int j;
    526                i-=4;    
   \                     ??SampleApp_SendPeriodicMessage_4:
   \   0000C3   E8           MOV     A,R0
   \   0000C4   24FC         ADD     A,#-0x4
   \   0000C6   F8           MOV     R0,A
   \   0000C7   E9           MOV     A,R1
   \   0000C8   34FF         ADDC    A,#-0x1
   \   0000CA   F9           MOV     R1,A
    527                for(j= 0;j<4;j++){
   \   0000CB   7A00         MOV     R2,#0x0
   \   0000CD   7B00         MOV     R3,#0x0
    528                  // ˝æ›Ω‚Œˆº∞ºÏ—È
    529                  /*
    530                  if(tempStr[i+j]<'0'||tempStr[i+j]>'9'||tempStr[i+j]!='.')
    531                    break;
    532                  */
    533                 tempData[j] = tempStr[i+j];
   \                     ??SampleApp_SendPeriodicMessage_6:
   \   0000CF   E8           MOV     A,R0
   \   0000D0   2A           ADD     A,R2
   \   0000D1   FC           MOV     R4,A
   \   0000D2   E9           MOV     A,R1
   \   0000D3   3B           ADDC    A,R3
   \   0000D4   FD           MOV     R5,A
   \   0000D5   7410         MOV     A,#0x10
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   E582         MOV     A,DPL
   \   0000DC   2C           ADD     A,R4
   \   0000DD   F582         MOV     DPL,A
   \   0000DF   E583         MOV     A,DPH
   \   0000E1   3D           ADDC    A,R5
   \   0000E2   F583         MOV     DPH,A
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   C0E0         PUSH    A
   \   0000E7   85..82       MOV     DPL,?XSP + 0
   \   0000EA   85..83       MOV     DPH,?XSP + 1
   \   0000ED   E582         MOV     A,DPL
   \   0000EF   2A           ADD     A,R2
   \   0000F0   F582         MOV     DPL,A
   \   0000F2   E583         MOV     A,DPH
   \   0000F4   3B           ADDC    A,R3
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   D0E0         POP     A
   \   0000F9   F0           MOVX    @DPTR,A
    534                }
   \   0000FA   EA           MOV     A,R2
   \   0000FB   2401         ADD     A,#0x1
   \   0000FD   0A           INC     R2
   \   0000FE   EB           MOV     A,R3
   \   0000FF   3400         ADDC    A,#0x0
   \   000101   FB           MOV     R3,A
   \   000102   C3           CLR     C
   \   000103   EA           MOV     A,R2
   \   000104   9404         SUBB    A,#0x4
   \   000106   EB           MOV     A,R3
   \   000107   9400         SUBB    A,#0x0
   \   000109   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00010B   65D0         XRL     A,PSW
   \   00010D   33           RLC     A
   \   00010E   40BF         JC      ??SampleApp_SendPeriodicMessage_6
    535                if(j<4){
    536                  //»Áπ˚≤∂ªÒµƒ ˝æ› «¬“¬Î,‘ÚΩ´ ˝æ›…Ë÷√Œ™00000
    537                  osal_memset(tempData, 0 ,5);
    538                }
    539                tempData[4]='\0';
   \   000110   7404         MOV     A,#0x4
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   E4           CLR     A
   \   000116   F0           MOVX    @DPTR,A
    540                //HalUARTWrite(0,tempData,5);
    541            }
    542           // HalUARTWrite(0,tempStr,64); 
    543            //HalUARTWrite(0,"\n",1); 
    544            //◊«∂»
    545            uint16 turbidity = ReadTurData();
   \                     ??SampleApp_SendPeriodicMessage_5:
   \   000117                ; Setup parameters for call to function ReadTurData
   \   000117   12....       LCALL   ??ReadTurData?relay
   \   00011A   8A..         MOV     ?V0 + 2,R2
   \   00011C   8B..         MOV     ?V0 + 3,R3
    546            // sprintf(str,"%4d",turbidity);
    547            //HalUARTWrite(0,str,4);  
    548            //ph÷µ
    549            int ph = ReadPhData();
    550            ph = (ph-86)/2+7;
    551            sprintf(str,"%4s%3d%2d",tempData,turbidity,ph);
   \   00011E                ; Setup parameters for call to function sprintf
   \   00011E                ; Setup parameters for call to function ReadPhData
   \   00011E   12....       LCALL   ??ReadPhData?relay
   \   000121   EA           MOV     A,R2
   \   000122   24AA         ADD     A,#-0x56
   \   000124   F8           MOV     R0,A
   \   000125   EB           MOV     A,R3
   \   000126   34FF         ADDC    A,#-0x1
   \   000128   F9           MOV     R1,A
   \   000129   7A02         MOV     R2,#0x2
   \   00012B   7B00         MOV     R3,#0x0
   \   00012D   12....       LCALL   ?S_DIV_MOD
   \   000130   E8           MOV     A,R0
   \   000131   2407         ADD     A,#0x7
   \   000133   F5..         MOV     ?V0 + 0,A
   \   000135   E9           MOV     A,R1
   \   000136   3400         ADDC    A,#0x0
   \   000138   F5..         MOV     ?V0 + 1,A
   \   00013A   78..         MOV     R0,#?V0 + 0
   \   00013C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013F   78..         MOV     R0,#?V0 + 2
   \   000141   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000144   7404         MOV     A,#0x4
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   8582..       MOV     ?V0 + 0,DPL
   \   00014C   8583..       MOV     ?V0 + 1,DPH
   \   00014F   78..         MOV     R0,#?V0 + 0
   \   000151   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000154   7C..         MOV     R4,#`?<Constant "%4s%3d%2d">` & 0xff
   \   000156   7D..         MOV     R5,#(`?<Constant "%4s%3d%2d">` >> 8) & 0xff
   \   000158   740C         MOV     A,#0xc
   \   00015A   12....       LCALL   ?XSTACK_DISP0_8
   \   00015D   AA82         MOV     R2,DPL
   \   00015F   AB83         MOV     R3,DPH
   \   000161   12....       LCALL   ??sprintf?relay
   \   000164   7406         MOV     A,#0x6
   \   000166   12....       LCALL   ?DEALLOC_XSTACK8
    552            HalUARTWrite(0,str,sizeof(str));
                                  ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000169                ; Setup parameters for call to function HalUARTWrite
   \   000169   7C0A         MOV     R4,#0xa
   \   00016B   7D00         MOV     R5,#0x0
   \   00016D   7406         MOV     A,#0x6
   \   00016F   12....       LCALL   ?XSTACK_DISP0_8
   \   000172   AA82         MOV     R2,DPL
   \   000174   AB83         MOV     R3,DPH
   \   000176   7900         MOV     R1,#0x0
   \   000178   12....       LCALL   ??HalUARTWrite?relay
    553            
    554             // µ˜”√AF_DataRequestΩ´ ˝æ›Œﬁœﬂπ„≤•≥ˆ»•
    555            if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    556                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    557                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    558                                 sizeof(str),       //∑¢ÀÕ ˝æ›≥§∂»
    559                                 (uchar*)str,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    560                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    561                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    562                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
   \   00017B                ; Setup parameters for call to function AF_DataRequest
   \   00017B   75..1E       MOV     ?V0 + 0,#0x1e
   \   00017E   78..         MOV     R0,#?V0 + 0
   \   000180   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000183   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000186   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000189   78..         MOV     R0,#?V0 + 0
   \   00018B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018E   7409         MOV     A,#0x9
   \   000190   12....       LCALL   ?XSTACK_DISP0_8
   \   000193   8582..       MOV     ?V0 + 0,DPL
   \   000196   8583..       MOV     ?V0 + 1,DPH
   \   000199   78..         MOV     R0,#?V0 + 0
   \   00019B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019E   75..0A       MOV     ?V0 + 0,#0xa
   \   0001A1   75..00       MOV     ?V0 + 1,#0x0
   \   0001A4   78..         MOV     R0,#?V0 + 0
   \   0001A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A9   75..01       MOV     ?V0 + 0,#0x1
   \   0001AC   78..         MOV     R0,#?V0 + 0
   \   0001AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B1   7920         MOV     R1,#0x20
   \   0001B3   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0001B5   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0001B7   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   0001B9   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   0001BB   12....       LCALL   ??AF_DataRequest?relay
   \   0001BE   7409         MOV     A,#0x9
   \   0001C0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C3   E9           MOV     A,R1
   \   0001C4   6007         JZ      ??SampleApp_SendPeriodicMessage_7
    563            {
    564            }
    565            else
    566            {
    567              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   0001C6                ; Setup parameters for call to function HalLedSet
   \   0001C6   7A01         MOV     R2,#0x1
   \   0001C8   7901         MOV     R1,#0x1
   \   0001CA   12....       LCALL   ??HalLedSet?relay
    568              // Error occurred in request to send.
    569            }
    570            if(turbidity<50){
   \                     ??SampleApp_SendPeriodicMessage_7:
   \   0001CD   C3           CLR     C
   \   0001CE   E5..         MOV     A,?V0 + 2
   \   0001D0   9432         SUBB    A,#0x32
   \   0001D2   E5..         MOV     A,?V0 + 3
   \   0001D4   9400         SUBB    A,#0x0
   \   0001D6   5004         JNC     ??SampleApp_SendPeriodicMessage_8
    571              PUMP = 1;
   \   0001D8   D293         SETB    0x90.3
   \   0001DA   8002         SJMP    ??SampleApp_SendPeriodicMessage_9
    572            }
    573            else 
    574              PUMP=0;
   \                     ??SampleApp_SendPeriodicMessage_8:
   \   0001DC   C293         CLR     0x90.3
    575          #elif defined ZDO_COORDINATOR
    576          
    577            
    578          
    579          #endif 
    580            
    581           
    582          }
   \                     ??SampleApp_SendPeriodicMessage_9:
   \   0001DE   7450         MOV     A,#0x50
   \   0001E0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E3   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   0001E6                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET
    583          
    584          /*********************************************************************
    585           * @fn      SampleApp_SendFlashMessage
    586           *
    587           * @brief   Send the flash message to group 1.
    588           *
    589           * @param   flashTime - in milliseconds
    590           *
    591           * @return  none
    592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75..1E       MOV     ?V0 + 0,#0x1e
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000008   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00000B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000013   7403         MOV     A,#0x3
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   8582..       MOV     ?V0 + 0,DPL
   \   00001B   8583..       MOV     ?V0 + 1,DPH
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..03       MOV     ?V0 + 0,#0x3
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..02       MOV     ?V0 + 0,#0x2
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7920         MOV     R1,#0x20
   \   000038   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00003A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003C   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   00003E   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000040   12....       LCALL   ??AF_DataRequest?relay
   \   000043   7409         MOV     A,#0x9
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   7403         MOV     A,#0x3
   \   00004A                REQUIRE ??Subroutine4_0
   \   00004A                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    593          void SampleApp_SendFlashMessage( uint16 flashTime )  
   \                     SampleApp_SendFlashMessage:
    594          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    595            uint8 buffer[3];
    596            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    597            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    598            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    599          
    600            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    601                                 SAMPLEAPP_FLASH_CLUSTERID,
    602                                 3,
    603                                 buffer,
    604                                 &SampleApp_TransID,
    605                                 AF_DISCV_ROUTE,
    606                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   02....       LJMP    ?Subroutine2 & 0xFFFF
    607            {
    608            }
    609            else
    610            {
    611              // Error occurred in request to send.
    612            }
    613          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    614          void SampleApp_Send_P2P_Message(void){
   \                     SampleApp_Send_P2P_Message:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    615            uchar cmd[3] ="LED";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "LED">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "LED">` & 0xff
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    616            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    617                                 SAMPLEAPP_FLASH_CLUSTERID,
    618                                 3,
    619                                 cmd,
    620                                 &SampleApp_TransID,
    621                                 AF_DISCV_ROUTE,
    622                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   02....       LJMP    ?Subroutine2 & 0xFFFF
    623            {
    624            }
    625          }
    626          /*********************************************************************
    627          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    628           uint16 ReadTurData( void )
   \                     ReadTurData:
    629          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    630            uint16 reading = 0;
    631            
    632            /* Enable channel */
    633            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    634            
    635            /* writing to this register starts the extra conversion */
    636            ADCCON3 = 0x86;// AVDD5 “˝Ω≈  00£∫ 64 ≥È»°¬ (7 ŒªENOB)  0110£∫ AIN6
   \   000003   75B686       MOV     0xb6,#-0x7a
    637            
    638            /* Wait for the conversion to be done */
    639            while (!(ADCCON1 & 0x80));
   \                     ??ReadTurData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadTurData_0
    640            
    641            /* Disable channel after done conversion */
    642            ADCCFG &= (0x40 ^ 0xFF); //∞¥Œª“ÏªÚ°£»Á1010^1111=0101£®∂˛Ω¯÷∆£©
   \   00000C   53F2BF       ANL     0xf2,#0xbf
    643            
    644            /* Read the result */
    645            reading = ADCL;
   \   00000F                REQUIRE ?Subroutine0
   \   00000F                REQUIRE ADCCFG
   \   00000F                REQUIRE ADCCON3
   \   00000F                REQUIRE ADCCON1
   \   00000F                REQUIRE ADCL
   \   00000F                REQUIRE ADCH
   \   00000F                ; // Fall through to label ?Subroutine0
    646            reading |= (int16) (ADCH << 8); 
    647            
    648            reading >>= 8;
    649            
    650            return (reading);
    651          } 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E5BA         MOV     A,0xba
   \   000002   E5BB         MOV     A,0xbb
   \   000004   FA           MOV     R2,A
   \   000005   E4           CLR     A
   \   000006   FB           MOV     R3,A
   \   000007   02....       LJMP    ?BRET
    652          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    653          uint16 ReadPhData( void )
   \                     ReadPhData:
    654          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    655            uint16 reading = 0;
    656            
    657            P0DIR &= ~0x20;  // …Ë÷√P0.5Œ™ ‰»Î∑Ω Ω
   \   000000   53FDDF       ANL     0xfd,#0xdf
    658            asm("NOP");asm("NOP");
   \   000003   00           NOP
   \   000004   00           NOP
    659            
    660            /* Clear ADC interrupt flag */
    661            ADCIF = 0;
   \   000005   C28D         CLR     0x88.5
    662            
    663            //ADCCON3 = (0x80 | HAL_ADC_DEC_064 | HAL_ADC_CHANNEL_5);
    664            ADCCON3 = (0x80 | 0x00 | 0x05);
   \   000007   75B685       MOV     0xb6,#-0x7b
    665            /* Wait for the conversion to finish */
    666            while ( !ADCIF );
   \                     ??ReadPhData_0:
   \   00000A   A28D         MOV     C,0x88.5
   \   00000C   50FC         JNC     ??ReadPhData_0
    667            
    668            asm("NOP");asm("NOP");
   \   00000E   00           NOP
   \   00000F   00           NOP
    669            
    670            /* Read the result */
    671            reading = ADCL;
   \   000010   80..         SJMP    ?Subroutine0
   \   000012                REQUIRE P0DIR
   \   000012                REQUIRE _A_TCON
   \   000012                REQUIRE ADCCON3
   \   000012                REQUIRE ADCL
   \   000012                REQUIRE ADCH
    672            reading |= (int16) (ADCH << 8);
    673            reading >>= 8;
    674            
    675            return reading;
    676          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 Example"
   \            35333020
   \            4578616D
   \            706C6500

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for state_fan>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for state_beep>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??myDelay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    myDelay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadTurData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadTurData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadPhData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadPhData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "start">`:
   \   000000   73746172     DB "start"
   \            7400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "key">`:
   \   000000   6B657900     DB "key"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000021   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000029   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000031   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000039   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "read">`:
   \   000000   72656164     DB "read"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "00.0">`:
   \   000000   30302E30     DB "00.0"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%4s%3d%2d">`:
   \   000000   25347325     DB "%4s%3d%2d"
   \            33642532
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED">`:
   \   000000   4C4544       DB 4CH, 45H, 44H

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadPhData                         0      0     92
     ReadTurData                        0      0     92
     SampleApp_HandleKeys               2      0     35
       -> AF_DataRequest                0      0     46
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     22
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0    113
       -> HalUARTWrite                  0      0    184
       -> HalUARTWrite                  0      0    184
       -> HalUARTRead                   0      0    184
       -> osal_memcpy                   0      0    190
       -> ReadTurData                   0      0    184
       -> ReadPhData                    0      0    184
       -> sprintf                       0      0    196
       -> HalUARTWrite                  0      0    184
       -> AF_DataRequest                0      0    202
       -> HalLedSet                     0      0    184
     SampleApp_Send_P2P_Message         2      0     22
       -> AF_DataRequest                0      0     44
     myDelay                            0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_TCON                                  1
     _A_P1                                    1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     P0DIR                                    1
     P1DIR                                    1
     AppTitle                                16
     myDelay                                 31
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     state_fan                                1
     state_beep                               1
     recv_fan                                 1
     recv_beep                                1
     SampleApp_Init                         203
     SampleApp_ProcessEvent                 171
     ?Subroutine1                             5
     SampleApp_HandleKeys                   112
     ??Subroutine4_0                          3
     ??Subroutine5_0                          5
     SampleApp_MessageMSGCB                  83
     SampleApp_SendPeriodicMessage          486
     ?Subroutine3                            11
     ?Subroutine2                            74
     SampleApp_SendFlashMessage              44
     SampleApp_Send_P2P_Message              34
     ReadTurData                             15
     ?Subroutine0                            10
     ReadPhData                              18
     ?<Initializer for AppTitle>             16
     ?<Initializer for state_fan>             1
     ?<Initializer for state_beep>            1
     ??myDelay?relay                          6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??ReadTurData?relay                      6
     ??ReadPhData?relay                       6
     ?<Constant "start">                      6
     ?<Constant "UartInit OK\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "key">                        4
     ?<Constant {0}>                         10
     ?<Constant {0}>_1                       64
     ?<Constant {0}>_2                        6
     ?<Constant "read">                       5
     ?<Constant "\n">                         2
     ?<Constant "00.0">                       5
     ?<Constant "%4s%3d%2d">                 10
     ?<Constant "LED">                        3

 
 1 305 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    10 bytes in segment SFR_AN
    18 bytes in segment XDATA_I
    18 bytes in segment XDATA_ID
   162 bytes in segment XDATA_ROM_C
    55 bytes in segment XDATA_Z
 
 1 383 bytes of CODE  memory
   162 bytes of CONST memory
     0 bytes of DATA  memory (+ 10 bytes shared)
    73 bytes of XDATA memory

Errors: none
Warnings: 4
