###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         03/Dec/2019  16:47:30 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Compon #
#                          ents\mac\low_level\srf04\mac_rx.c                  #
#    Command line       =  -f C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\T #
#                          ools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ             #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0   #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Components\mac\low_level\srf04\ma #
#                          c_rx.c -D NWK_AUTO_POLL -D ZAPP_P1 -D MT_TASK -D   #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\EndDevice #
#                          EB\List\ -lA C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ì #
#                          Ú_Á¸²Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\List\ --diag_suppress Pe001,Pa010 -o   #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\O #
#                          bj\ -e --no_code_motion --debug --core=plain       #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\202 #
#                          0±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\ -I C:\Users\25814\Desktop\2020±ÏÉè\¿µè #
#                          ÷ìÚ_Á¸²Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\Source\ -I C:\Users\25814\Desktop\2020±ÏÉè\¿µ #
#                          è÷ìÚ_Á¸²Ö\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\ZMain\TI2530DB\ -I                     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\hal\include\ -I                       #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\hal\target\CC2530EB\ -I               #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\include\ -I                       #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\high_level\ -I                    #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\low_level\srf04\ -I               #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\low_level\srf04\single_chip\ -I   #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mt\ -I C:\Users\25814\Desktop\2020±ÏÉ #
#                          è\¿µè÷ìÚ_Á¸²Ö\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\Components\osal\include\ -I  #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\services\saddr\ -I                    #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\services\sdata\ -I                    #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\af\ -I                          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sapi\ -I                        #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sec\ -I                         #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sys\ -I                         #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\zdo\ -I                         #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\zmac\ -I C:\Users\25814\Desktop\2020± #
#                          ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz  #
#    List file          =  C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\L #
#                          ist\mac_rx.lst                                     #
#    Object file        =  C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\O #
#                          bj\mac_rx.r51                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Components\mac\low_level\srf04\mac_rx.c
      1          /**************************************************************************************************
      2            Filename:       mac_rx.c
      3            Revised:        $Date: 2007-10-08 14:05:36 -0700 (Mon, 08 Oct 2007) $
      4            Revision:       $Revision: 15624 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_defs.h"
     47          #include "hal_types.h"
     48          
     49          /* OSAL */
     50          #include "OSAL.h"
     51          
     52          /* high-level */
     53          #include "mac_high_level.h"
     54          #include "mac_spec.h"
     55          
     56          /* MAC security */
     57          #include "mac_security.h"
     58          
     59          /* exported low-level */
     60          #include "mac_low_level.h"
     61          
     62          /* low-level specific */
     63          #include "mac_rx.h"
     64          #include "mac_tx.h"
     65          #include "mac_rx_onoff.h"
     66          #include "mac_radio.h"
     67          
     68          /* target specific */
     69          #include "mac_radio_defs.h"

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIRQF1
   \                     RFIRQF1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9b
   \   unsigned char volatile __sfr S1CON
   \                     S1CON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIRQF0
   \                     RFIRQF0:
   \   000000                DS 1
     70          #include "mac_autopend.h"
     71          
     72          /* debug */
     73          #include "mac_assert.h"
     74          
     75          
     76          /* ------------------------------------------------------------------------------------------------
     77           *                                            Defines
     78           * ------------------------------------------------------------------------------------------------
     79           */
     80          #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
     81          
     82          /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
     83          #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \
     84                                             MAC_FCF_FIELD_LEN      +  \
     85                                             MAC_SEQ_NUM_FIELD_LEN  +  \
     86                                             MAC_FCS_FIELD_LEN)
     87          
     88          /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
     89          #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
     90          
     91          /* addressing mode reserved value */
     92          #define ADDR_MODE_RESERVERED  1
     93          
     94          /* length of command frame identifier */
     95          #define CMD_FRAME_ID_LEN      1
     96          
     97          /* packet size mask is equal to the maximum value */
     98          #define PHY_PACKET_SIZE_MASK  0x7F
     99          
    100          /* value for promiscuous off, must not conflict with other mode variants from separate include files */
    101          #define PROMISCUOUS_MODE_OFF  0x00
    102          
    103          /* bit of proprietary FCS format that indicates if the CRC is OK */
    104          #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
    105          
    106          /* dummy length value for unused entry in lookup table */
    107          #define DUMMY_LEN   0xBE
    108          
    109          /* value for rxThresholdIntState */
    110          #define RX_THRESHOLD_INT_STATE_INACTIVE   0
    111          #define RX_THRESHOLD_INT_STATE_ACTIVE     1
    112          #define RX_THRESHOLD_INT_STATE_RESET      2
    113          
    114          
    115          /* ------------------------------------------------------------------------------------------------
    116           *                                             Macros
    117           * ------------------------------------------------------------------------------------------------
    118           */
    119          #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
    120          #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
    121          
    122          /*
    123           *  Macro for encoding frame control information into internal flags format.
    124           *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
    125           *  format *or* the specification changes, this macro will need to be modified.
    126           */
    127          #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
    128          
    129          /*
    130           *  The radio replaces the actual FCS with different information.  This proprietary FCS is
    131           *  the same length as the original and includes:
    132           *    1) the RSSI value
    133           *    2) the average correlation value (used for LQI)
    134           *    3) a CRC passed bit
    135           *
    136           *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
    137           */
    138          #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
    139          #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
    140          #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
    141          
    142          /*
    143           *  Macros for security control field.
    144           */
    145          #define SECURITY_LEVEL(s)                       (s & 0x07)
    146          #define KEY_IDENTIFIER_MODE(s)                  ((s & 0x18) >> 3)
    147          #define SECURITY_CONTROL_RESERVED(s)            ((s & 0xE0) >> 5)
    148          
    149          /* ------------------------------------------------------------------------------------------------
    150           *                                       Global Variables
    151           * ------------------------------------------------------------------------------------------------
    152           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint8 macRxActive;
   \                     macRxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint8 macRxFilter;
   \                     macRxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 macRxOutgoingAckFlag;
   \                     macRxOutgoingAckFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          
    157          
    158          /* ------------------------------------------------------------------------------------------------
    159           *                                       Local Constants
    160           * ------------------------------------------------------------------------------------------------
    161           */

   \                                 In  segment CODE_C, align 1
    162          static const uint8 CODE macRxAddrLen[] =
   \                     macRxAddrLen:
   \   000000   00           DB 0
   \   000001   BE           DB 190
   \   000002   04           DB 4
   \   000003   0A           DB 10
    163          {
    164            0,                                                /* no address */
    165            DUMMY_LEN,                                        /* reserved */
    166            MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
    167            MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
    168          };
    169          
    170          
    171          /* ------------------------------------------------------------------------------------------------
    172           *                                       Local Prototypes
    173           * ------------------------------------------------------------------------------------------------
    174           */
    175          static void rxHaltCleanupFinalStep(void);
    176          
    177          static void rxStartIsr(void);
    178          static void rxAddrIsr(void);
    179          
    180          #ifdef MAC_SECURITY
    181            static void rxSecurityHdrIsr(void);
    182          #endif
    183            
    184          static void rxPayloadIsr(void);
    185          static void rxDiscardIsr(void);
    186          static void rxFcsIsr(void);
    187          
    188          static void rxPrepPayload(void);
    189          static void rxDiscardFrame(void);
    190          static void rxDone(void);
    191          static void rxPostRxUpdates(void);
    192          
    193          
    194          /* ------------------------------------------------------------------------------------------------
    195           *                                         Local Variables
    196           * ------------------------------------------------------------------------------------------------
    197           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          static void    (* pFuncRxState)(void);
   \                     pFuncRxState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          static macRx_t  * pRxBuf;
   \                     pRxBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    200          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    201          static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
   \                     rxBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          static uint8  rxUnreadLen;
   \                     rxUnreadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          static uint8  rxNextLen;
   \                     rxNextLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          static uint8  rxPayloadLen;
   \                     rxPayloadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          static uint8  rxFilter;
   \                     rxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          static uint8  rxPromiscuousMode;
   \                     rxPromiscuousMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          static uint8  rxIsrActiveFlag;
   \                     rxIsrActiveFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          static uint8  rxResetFlag;
   \                     rxResetFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          static uint8  rxFifoOverflowCount;
   \                     rxFifoOverflowCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    210          
    211          #ifdef PACKET_FILTER_STATS
    212            uint32      rxCrcFailure = 0;
    213            uint32      rxCrcSuccess = 0;
    214          #endif /* PACKET_FILTER_STATS */
    215          
    216          #ifdef CC2591_COMPRESSION_WORKAROUND
    217            void macRxResetRssi(void);
    218          #endif
    219          
    220          /**************************************************************************************************
    221           * @fn          macRxInit
    222           *
    223           * @brief       Initialize receive variable states.
    224           *
    225           * @param       none
    226           *
    227           * @return      none
    228           **************************************************************************************************
    229           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    230          MAC_INTERNAL_API void macRxInit(void)
   \                     macRxInit:
    231          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    232            macRxFilter          = RX_FILTER_OFF;
   \   000004   90....       MOV     DPTR,#macRxFilter
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
    233            rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
   \   000009   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000C   F0           MOVX    @DPTR,A
    234            pRxBuf               = NULL; /* required for macRxReset() to function correctly */
   \   00000D   90....       MOV     DPTR,#pRxBuf
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
    235            macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
   \   000013   90....       MOV     DPTR,#macRxActive
   \   000016   12....       LCALL   ?Subroutine24 & 0xFFFF
    236            pFuncRxState         = &rxStartIsr;
   \                     ??CrossCallReturnLabel_38:
   \   000019   12....       LCALL   ??Subroutine33_0 & 0xFFFF
    237            macRxOutgoingAckFlag = 0;
    238            rxIsrActiveFlag      = 0;
   \                     ??CrossCallReturnLabel_54:
   \   00001C   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00001F   F0           MOVX    @DPTR,A
    239            rxResetFlag          = 0;
   \   000020   90....       MOV     DPTR,#rxResetFlag
   \   000023   F0           MOVX    @DPTR,A
    240            rxFifoOverflowCount  = 0;
   \   000024   90....       MOV     DPTR,#rxFifoOverflowCount
   \   000027   02....       LJMP    ?Subroutine0 & 0xFFFF
    241          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine38_0
   \   000001                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#pFuncRxState
   \   000004   74..         MOV     A,#??rxStartIsr?relay & 0xff
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   74..         MOV     A,#(??rxStartIsr?relay >> 8) & 0xff
   \   00000A   22           RET
    242          
    243          
    244          /**************************************************************************************************
    245           * @fn          macRxRadioPowerUpInit
    246           *
    247           * @brief       Initialization for after radio first powers up.
    248           *
    249           * @param       none
    250           *
    251           * @return      none
    252           **************************************************************************************************
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
   \                     macRxRadioPowerUpInit:
    255          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    256            /* set threshold at initial value */
    257            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   000004   906194       MOV     DPTR,#0x6194
   \   000007   7405         MOV     A,#0x5
   \   000009   12....       LCALL   ?Subroutine9 & 0xFFFF
    258          
    259            /* clear any accidental threshold interrupt that happened as part of power up sequence */
    260            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \                     ??CrossCallReturnLabel_9:
   \   00000C   75E9FB       MOV     0xe9,#-0x5
   \   00000F   A2E7         MOV     C,0xE0 /* A   */.7
   \   000011   92AF         MOV     0xa8.7,C
    261          
    262            /* enable threshold interrupts */
    263            MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
   \   000013   9061A3       MOV     DPTR,#0x61a3
   \   000016   E0           MOVX    A,@DPTR
   \   000017   D2E2         SETB    0xE0 /* A   */.2
   \   000019   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00001C                REQUIRE _A_IEN0
   \   00001C                REQUIRE S1CON
   \   00001C                REQUIRE RFIRQF0
    264          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E5A8         MOV     A,0xa8
   \   000003   C2AF         CLR     0xa8.7
   \   000005   759B00       MOV     0x9b,#0x0
   \   000008   22           RET
    265          
    266          
    267          /**************************************************************************************************
    268           * @fn          macRxTxReset
    269           *
    270           * @brief       Reset the receive state.
    271           *
    272           * @param       none
    273           *
    274           * @return      none
    275           **************************************************************************************************
    276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    277          MAC_INTERNAL_API void macRxTxReset(void)
   \                     macRxTxReset:
    278          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    279            /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
    280            macRxHardDisable();
   \   000004                ; Setup parameters for call to function macRxHardDisable
   \   000004   12....       LCALL   ??macRxHardDisable?relay
    281          
    282            /*
    283             *   Note : transmit does not require any reset logic
    284             *          beyond what macRxHardDisable() provides.
    285             */
    286          
    287            /* restore deault filter mode to off */
    288            macRxFilter = RX_FILTER_OFF;
   \   000007   90....       MOV     DPTR,#macRxFilter
   \   00000A   E4           CLR     A
   \   00000B   F0           MOVX    @DPTR,A
    289          
    290            /* return promiscuous mode to default off state */
    291            macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
   \   00000C                ; Setup parameters for call to function macRxPromiscuousMode
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??macRxPromiscuousMode?relay
    292          }
   \   000010   02....       LJMP    ??Subroutine38_0 & 0xFFFF
    293          
    294          
    295          /**************************************************************************************************
    296           * @fn          macRxHaltCleanup
    297           *
    298           * @brief       Cleanup up the receive logic after receiver is forced off.
    299           *
    300           * @param       none
    301           *
    302           * @return      none
    303           **************************************************************************************************
    304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          MAC_INTERNAL_API void macRxHaltCleanup(void)
   \                     macRxHaltCleanup:
    306          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    307            rxResetFlag = 1;
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
    308            if (!rxIsrActiveFlag)
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??CrossCallReturnLabel_36
    309            {
    310              rxHaltCleanupFinalStep();
   \   000010                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000010   12....       LCALL   ?Subroutine23 & 0xFFFF
    311              rxResetFlag = 0;
    312            }
    313          }
   \                     ??CrossCallReturnLabel_36:
   \   000013   02....       LJMP    ??Subroutine38_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ??rxHaltCleanupFinalStep?relay
   \   000003   90....       MOV     DPTR,#rxResetFlag
   \   000006   E4           CLR     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    314          
    315          
    316          /*=================================================================================================
    317           * @fn          rxHaltCleanupFinalStep
    318           *
    319           * @brief       Required cleanup if receiver is halted in the middle of a receive.
    320           *
    321           * @param       none
    322           *
    323           * @return      none
    324           *=================================================================================================
    325           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    326          static void rxHaltCleanupFinalStep(void)
   \                     rxHaltCleanupFinalStep:
    327          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    328            /* cancel any upcoming ACK transmit complete callback */
    329            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000004   9061A4       MOV     DPTR,#0x61a4
   \   000007   E0           MOVX    A,@DPTR
   \   000008   C2E0         CLR     0xE0 /* A   */.0
   \   00000A   F0           MOVX    @DPTR,A
    330          
    331            /* set start of frame threshold */
    332            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00000B   906194       MOV     DPTR,#0x6194
   \   00000E   7405         MOV     A,#0x5
   \   000010   F0           MOVX    @DPTR,A
    333          
    334            /* flush the receive FIFO */
    335            MAC_RADIO_FLUSH_RX_FIFO();
   \   000011   75E1ED       MOV     0xe1,#-0x13
   \   000014   75E1ED       MOV     0xe1,#-0x13
    336          
    337            /* clear any receive interrupt that happened to squeak through */
    338            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   000017   E5A8         MOV     A,0xa8
   \   000019   C2AF         CLR     0xa8.7
   \   00001B   759B00       MOV     0x9b,#0x0
   \   00001E   75E9FB       MOV     0xe9,#-0x5
   \   000021   A2E7         MOV     C,0xE0 /* A   */.7
   \   000023   92AF         MOV     0xa8.7,C
    339          
    340            /* if data buffer has been allocated, free it */
    341            if (pRxBuf != NULL)
   \   000025   90....       MOV     DPTR,#pRxBuf
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   E8           MOV     A,R0
   \   00002E   49           ORL     A,R1
   \   00002F   6007         JZ      ??rxHaltCleanupFinalStep_0
    342            {
    343              MEM_FREE((uint8 **)&pRxBuf);
   \   000031                ; Setup parameters for call to function macDataRxMemFree
   \   000031   7A..         MOV     R2,#pRxBuf & 0xff
   \   000033   7B..         MOV     R3,#(pRxBuf >> 8) & 0xff
   \   000035   12....       LCALL   ??macDataRxMemFree?relay
    344            }
    345            /* MEM_FREE() sets parameter to NULL. */
    346          
    347            pFuncRxState = &rxStartIsr;
   \                     ??rxHaltCleanupFinalStep_0:
   \   000038   90....       MOV     DPTR,#pFuncRxState
   \   00003B   74..         MOV     A,#??rxStartIsr?relay & 0xff
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   74..         MOV     A,#(??rxStartIsr?relay >> 8) & 0xff
   \   000041   F0           MOVX    @DPTR,A
    348          
    349            /* if receive was active, perform the post receive updates */
    350            if (macRxActive || macRxOutgoingAckFlag)
   \   000042   90....       MOV     DPTR,#macRxActive
   \   000045   E0           MOVX    A,@DPTR
   \   000046   7006         JNZ     ??rxHaltCleanupFinalStep_1
   \   000048   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   600C         JZ      ??rxHaltCleanupFinalStep_2
    351            {
    352              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxHaltCleanupFinalStep_1:
   \   00004E   90....       MOV     DPTR,#macRxActive
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    353              macRxOutgoingAckFlag = 0;
   \   000053   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000056   F0           MOVX    @DPTR,A
    354          
    355              rxPostRxUpdates();
   \   000057                ; Setup parameters for call to function rxPostRxUpdates
   \   000057   12....       LCALL   ??rxPostRxUpdates?relay
    356            }
    357          }
   \                     ??rxHaltCleanupFinalStep_2:
   \   00005A   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   \   00005D                REQUIRE RFST
   \   00005D                REQUIRE _A_IEN0
   \   00005D                REQUIRE S1CON
   \   00005D                REQUIRE RFIRQF0
    358          
    359          
    360          /**************************************************************************************************
    361           * @fn          macRxThresholdIsr
    362           *
    363           * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
    364           *              It implements a state machine for receiving a packet.
    365           *
    366           * @param       none
    367           *
    368           * @return      none
    369           **************************************************************************************************
    370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    371          MAC_INTERNAL_API void macRxThresholdIsr(void)
   \                     macRxThresholdIsr:
    372          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    373            /* if currently reseting, do not execute receive ISR logic */
    374            if (rxResetFlag)
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   E0           MOVX    A,@DPTR
   \   000008   701D         JNZ     ??CrossCallReturnLabel_37
    375            {
    376              return;
    377            }
    378          
    379            /*
    380             *  Call the function that handles the current receive state.
    381             *  A flag is set for the duration of the call to indicate
    382             *  the ISR is executing.  This is necessary for the reset
    383             *  logic so it does not perform a reset in the middle of
    384             *  executing the ISR.
    385             */
    386            rxIsrActiveFlag = 1;
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    387            (*pFuncRxState)();
   \   000010                ; Setup parameters for indirect call
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000016   12....       LCALL   ?CALL_IND
    388            rxIsrActiveFlag = 0;
   \   000019   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00001C   E4           CLR     A
   \   00001D   F0           MOVX    @DPTR,A
    389          
    390            /* if a reset occurred during the ISR, peform cleanup here */
    391            if (rxResetFlag)
   \   00001E   90....       MOV     DPTR,#rxResetFlag
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6003         JZ      ??CrossCallReturnLabel_37
    392            {
    393              rxHaltCleanupFinalStep();
   \   000024                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000024   12....       LCALL   ?Subroutine23 & 0xFFFF
    394              rxResetFlag = 0;
    395            }
   \                     ??CrossCallReturnLabel_37:
   \   000027   02....       LJMP    ??Subroutine38_0 & 0xFFFF
    396          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    397          
    398          
    399          /*=================================================================================================
    400           * @fn          rxStartIsr
    401           *
    402           * @brief       First ISR state for receiving a packet - compute packet length, allocate
    403           *              buffer, initialize buffer.  Acknowledgements are handled immediately without
    404           *              allocating a buffer.
    405           *
    406           * @param       none
    407           *
    408           * @return      none
    409           *=================================================================================================
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          static void rxStartIsr(void)
   \                     rxStartIsr:
    412          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    413            uint8  addrLen;
    414            uint8  ackWithPending;
    415            uint8  dstAddrMode;
    416            uint8  srcAddrMode;
    417            uint8  mhrLen = 0;
   \   00000A   7F00         MOV     R7,#0x0
    418          
    419            MAC_ASSERT(!macRxActive); /* receive on top of receive */
   \   00000C   90....       MOV     DPTR,#macRxActive
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6003         JZ      ??rxStartIsr_0
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL   ??halAssertHandler?relay
    420          
    421            /* indicate rx is active */
    422            macRxActive = MAC_RX_ACTIVE_STARTED;
   \                     ??rxStartIsr_0:
   \   000015   90....       MOV     DPTR,#macRxActive
   \   000018   7481         MOV     A,#-0x7f
   \   00001A   F0           MOVX    @DPTR,A
    423          
    424            /*
    425             *  For bullet proof functionality, need to see if the receiver was just turned off.
    426             *  The logic to request turning off the receiver, disables interrupts and then checks
    427             *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
    428             *
    429             *  There is a small hole though.  It's possible to attempt turning off the receiver
    430             *  in the window from when the receive interrupt fires and the point where macRxActive
    431             *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
    432             *  macRxActive has been set.  If the receiver is off at this point, there is nothing
    433             *  in the RX fifo and the receive is simply aborted.
    434             *
    435             *  Also, there are some considerations in case a hard disable just happened.  Usually,
    436             *  the receiver will just be off at this point after a hard disable.  The check described
    437             *  above will account for this case too.  However, if a hard disable were immediately
    438             *  followed by an enable, the receiver would be on.  To catch this case, the receive
    439             *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
    440             */
    441            if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
   \   00001B   90....       MOV     DPTR,#macRxOnFlag
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   600D         JZ      ??rxStartIsr_1
   \   000021   906193       MOV     DPTR,#0x6193
   \   000024   E0           MOVX    A,@DPTR
   \   000025   A2E7         MOV     C,0xE0 /* A   */.7
   \   000027   4010         JC      ??rxStartIsr_2
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00002C   400B         JC      ??rxStartIsr_2
    442            {
    443              /* reset active flag */
    444              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxStartIsr_1:
   \   00002E   90....       MOV     DPTR,#macRxActive
   \   000031   E4           CLR     A
   \   000032   F0           MOVX    @DPTR,A
    445          
    446              /*
    447               *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
    448               *  the tiny, tiny window when macRxActive was not zero.
    449               */
    450              rxPostRxUpdates();
   \   000033                ; Setup parameters for call to function rxPostRxUpdates
   \   000033   12....       LCALL   ??rxPostRxUpdates?relay
    451          
    452              /* return immediately from here */
    453              return;
   \   000036   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    454            }
    455          
    456            /*
    457             *  If interrupts are held off for too long it's possible the previous "transmit done"
    458             *  callback is pending.  If this is the case, it needs to be completed before
    459             *  continuing with the receive logic.
    460             */
    461            MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
   \                     ??rxStartIsr_2:
   \   000039                ; Setup parameters for call to function macCspForceTxDoneIfPending
   \   000039   12....       LCALL   ??macCspForceTxDoneIfPending?relay
    462          
    463            /*
    464             *  It's possible receive logic is still waiting for confirmation of an ACK that went out
    465             *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
    466             *  That callback execute receive cleanup logic that will run at the completion
    467             *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
    468             */
    469            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   00003C   12....       LCALL   ?Subroutine8 & 0xFFFF
    470            macRxOutgoingAckFlag = 0;
    471          
    472            /*
    473             *  Make a module-local copy of macRxFilter.  This prevents the selected
    474             *  filter from changing in the middle of a receive.
    475             */
    476            rxFilter = macRxFilter;
   \                     ??CrossCallReturnLabel_52:
   \   00003F   90....       MOV     DPTR,#macRxFilter
   \   000042   E0           MOVX    A,@DPTR
   \   000043   90....       MOV     DPTR,#rxFilter
   \   000046   F0           MOVX    @DPTR,A
    477          
    478            /*-------------------------------------------------------------------------------
    479             *  Read initial frame information from FIFO.
    480             *
    481             *   This code is not triggered until the following are in the RX FIFO:
    482             *     frame length          - one byte containing length of MAC frame (excludes this field)
    483             *     frame control field   - two bytes defining frame type, addressing fields, control flags
    484             *     sequence number       - one byte unique sequence identifier
    485             *     additional two bytes  - these bytes are available in case the received frame is an ACK,
    486             *                             if so, the frame can be verified and responded to immediately,
    487             *                             if not an ACK, these bytes will be processed normally
    488             */
    489          
    490            /* read frame length, frame control field, and sequence number from FIFO */
    491            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
   \   000047                ; Setup parameters for call to function macMemReadRxFifo
   \   000047   7904         MOV     R1,#0x4
   \   000049   7A..         MOV     R2,#rxBuf & 0xff
   \   00004B   7B..         MOV     R3,#(rxBuf >> 8) & 0xff
   \   00004D   12....       LCALL   ??macMemReadRxFifo?relay
    492          
    493            /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
    494            rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
   \   000050   90....       MOV     DPTR,#rxBuf
   \   000053   E0           MOVX    A,@DPTR
   \   000054   547F         ANL     A,#0x7f
   \   000056   24FD         ADD     A,#-0x3
   \   000058   90....       MOV     DPTR,#rxUnreadLen
   \   00005B   F0           MOVX    @DPTR,A
    495          
    496            /*
    497             *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    498             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    499             *  the entire receive buffer is flushed.
    500             *
    501             *  In the case that this workaround is not needed, an assert is used to make sure the
    502             *  receive length field is not corrupted.  This is important because a corrupted receive
    503             *  length field is utterly fatal and, if not caught here, extremely hard to track down.
    504             */
    505            if (macChipVersion == REV_A)
   \   00005C   90....       MOV     DPTR,#macChipVersion
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   90....       MOV     DPTR,#rxUnreadLen
   \   000063   701D         JNZ     ??rxStartIsr_4
    506            {
    507              if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
    508                  (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
   \   000065   E0           MOVX    A,@DPTR
   \   000066   C3           CLR     C
   \   000067   947D         SUBB    A,#0x7d
   \   000069   500B         JNC     ??rxStartIsr_5
   \   00006B   90....       MOV     DPTR,#rxBuf + 1
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   5407         ANL     A,#0x7
   \   000071   C3           CLR     C
   \   000072   9404         SUBB    A,#0x4
   \   000074   4015         JC      ??rxStartIsr_6
    509              {
    510                MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_5:
   \   000076   75E1ED       MOV     0xe1,#-0x13
   \   000079   75E1ED       MOV     0xe1,#-0x13
    511                rxDone();
   \   00007C                ; Setup parameters for call to function rxDone
   \                     ??rxStartIsr_7:
   \   00007C   12....       LCALL   ??rxDone?relay
    512                return;
   \   00007F   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    513              }
    514            }
    515            else
    516            {
    517              /* radio supplied a corrupted receive buffer length */
    518              MAC_ASSERT(rxUnreadLen <= (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN));
   \                     ??rxStartIsr_4:
   \   000082   E0           MOVX    A,@DPTR
   \   000083   C3           CLR     C
   \   000084   947D         SUBB    A,#0x7d
   \   000086   4003         JC      ??rxStartIsr_6
   \   000088                ; Setup parameters for call to function halAssertHandler
   \   000088   12....       LCALL   ??halAssertHandler?relay
    519            }
    520          
    521          
    522          
    523            /*-------------------------------------------------------------------------------
    524             *  Process ACKs.
    525             *
    526             *  If this frame is an ACK, process it immediately and exit from here.
    527             *  If this frame is not an ACK and transmit is listening for an ACK, let
    528             *  the transmit logic know an non-ACK was received so transmit can complete.
    529             *
    530             *  In promiscuous mode ACKs are treated like any other frame.
    531             */
    532            if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
   \                     ??rxStartIsr_6:
   \   00008B   90....       MOV     DPTR,#rxBuf + 1
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   5407         ANL     A,#0x7
   \   000091   6402         XRL     A,#0x2
   \   000093   6003         JZ      $+5
   \   000095   02....       LJMP    ??rxStartIsr_8 & 0xFFFF
   \   000098   90....       MOV     DPTR,#rxPromiscuousMode
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   6003         JZ      $+5
   \   00009E   02....       LJMP    ??rxStartIsr_8 & 0xFFFF
    533            {
    534              halIntState_t  s;
    535              uint8 fcsBuf[MAC_FCF_FIELD_LEN];
    536              /*
    537               *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
    538               *  these two bytes will be the FCS.
    539               */
    540          
    541              /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
    542              MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
   \   0000A1                ; Setup parameters for call to function macMemReadRxFifo
   \   0000A1   7902         MOV     R1,#0x2
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   AA82         MOV     R2,DPL
   \   0000AB   AB83         MOV     R3,DPH
   \   0000AD   12....       LCALL   ??macMemReadRxFifo?relay
    543          
    544              /*
    545               *  This critical section ensures that the ACK timeout won't be triggered in the
    546               *  middle of receiving the ACK frame.
    547               */
    548              HAL_ENTER_CRITICAL_SECTION(s);
   \   0000B0   A2AF         MOV     C,0xa8.7
   \   0000B2   E4           CLR     A
   \   0000B3   33           RLC     A
   \   0000B4   F5..         MOV     ?V0 + 0,A
   \   0000B6   C2AF         CLR     0xa8.7
    549          
    550              /* see if transmit is listening for an ACK */
    551              if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   0000B8   90....       MOV     DPTR,#macTxActive
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   6486         XRL     A,#0x86
   \   0000BE   7071         JNZ     ??rxStartIsr_9
    552              {
    553                MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
   \   0000C0   90....       MOV     DPTR,#pMacDataTx
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F8           MOV     R0,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F9           MOV     R1,A
   \   0000C8   E8           MOV     A,R0
   \   0000C9   49           ORL     A,R1
   \   0000CA   7003         JNZ     ??rxStartIsr_10
   \   0000CC                ; Setup parameters for call to function halAssertHandler
   \   0000CC   12....       LCALL   ??halAssertHandler?relay
    554          
    555                /* record link quality metrics for the receive ACK */
    556                {
    557                  int8 rssiDbm;
    558                  uint8 corr;
    559          
    560                  rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
   \                     ??rxStartIsr_10:
   \   0000CF   85..82       MOV     DPL,?XSP + 0
   \   0000D2   85..83       MOV     DPH,?XSP + 1
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   24B7         ADD     A,#-0x49
   \   0000D8   FE           MOV     R6,A
    561                  MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    562                  corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
   \   0000D9   7401         MOV     A,#0x1
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   547F         ANL     A,#0x7f
   \   0000E1   FF           MOV     R7,A
    563          
    564                  pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   0000E2                ; Setup parameters for call to function macRadioComputeLQI
   \   0000E2   FA           MOV     R2,A
   \   0000E3   EE           MOV     A,R6
   \   0000E4   F9           MOV     R1,A
   \   0000E5   12....       LCALL   ??macRadioComputeLQI?relay
   \   0000E8   E9           MOV     A,R1
   \   0000E9   C0E0         PUSH    A
   \   0000EB   90....       MOV     DPTR,#pMacDataTx
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   2414         ADD     A,#0x14
   \   0000F1   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000F4   D0E0         POP     A
   \   0000F6   F0           MOVX    @DPTR,A
    565                  pMacDataTx->internal.correlation = corr;
   \   0000F7   90....       MOV     DPTR,#pMacDataTx
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   2415         ADD     A,#0x15
   \   0000FD   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000100   F0           MOVX    @DPTR,A
    566                  pMacDataTx->internal.rssi= rssiDbm;
   \   000101   90....       MOV     DPTR,#pMacDataTx
   \   000104   E0           MOVX    A,@DPTR
   \   000105   2416         ADD     A,#0x16
   \   000107   12....       LCALL   ?Subroutine17 & 0xFFFF
    567                }
   \                     ??CrossCallReturnLabel_26:
   \   00010A   F0           MOVX    @DPTR,A
    568          
    569                /*
    570                 *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
    571                 *  or ACK not received will check "macTxActive" flag before taking any actions.
    572                 */
    573                HAL_EXIT_CRITICAL_SECTION(s);
   \   00010B   E5..         MOV     A,?V0 + 0
   \   00010D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00010F   92AF         MOV     0xa8.7,C
    574          
    575                /*
    576                 *  An ACK was received so transmit logic needs to know.  If the FCS failed,
    577                 *  the transmit logic still needs to know.  In that case, treat the frame
    578                 *  as a non-ACK to complete the active transmit.
    579                 */
    580                if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
   \   000111   7401         MOV     A,#0x1
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   E0           MOVX    A,@DPTR
   \   000117   A2E7         MOV     C,0xE0 /* A   */.7
   \   000119   5011         JNC     ??rxStartIsr_11
    581                {
    582                  /* call transmit logic to indicate ACK was received */
    583                  macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
   \   00011B                ; Setup parameters for call to function macTxAckReceivedCallback
   \   00011B   90....       MOV     DPTR,#rxBuf + 1
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   5410         ANL     A,#0x10
   \   000121   FA           MOV     R2,A
   \   000122   90....       MOV     DPTR,#rxBuf + 3
   \   000125   E0           MOVX    A,@DPTR
   \   000126   F9           MOV     R1,A
   \   000127   12....       LCALL   ??macTxAckReceivedCallback?relay
   \   00012A   800B         SJMP    ??rxStartIsr_12
    584                }
    585                else
    586                {
    587                  macTxAckNotReceivedCallback();
   \                     ??rxStartIsr_11:
   \   00012C                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   00012C   12....       LCALL   ??macTxAckNotReceivedCallback?relay
   \   00012F   8006         SJMP    ??rxStartIsr_12
    588                }
    589              }
    590              else
    591              {
    592                HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??rxStartIsr_9:
   \   000131   E5..         MOV     A,?V0 + 0
   \   000133   A2E0         MOV     C,0xE0 /* A   */.0
   \   000135   92AF         MOV     0xa8.7,C
    593              }
    594          
    595              /* receive is done, exit from here */
    596              rxDone();
   \                     ??rxStartIsr_12:
   \   000137                ; Setup parameters for call to function rxDone
   \   000137   02....       LJMP    ??rxStartIsr_7 & 0xFFFF
    597              return;
    598            }
    599            else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \                     ??rxStartIsr_8:
   \   00013A   90....       MOV     DPTR,#macTxActive
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   6486         XRL     A,#0x86
   \   000140   7003         JNZ     ??rxStartIsr_13
    600            {
    601              macTxAckNotReceivedCallback();
   \   000142                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   000142   12....       LCALL   ??macTxAckNotReceivedCallback?relay
    602            }
    603          
    604            /*-------------------------------------------------------------------------------
    605             *  Apply filtering.
    606             *
    607             *  For efficiency, see if filtering is even 'on' before processing.  Also test
    608             *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
    609             *  do not apply filtering.
    610             */
    611            if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
   \                     ??rxStartIsr_13:
   \   000145   90....       MOV     DPTR,#rxFilter
   \   000148   E0           MOVX    A,@DPTR
   \   000149   6024         JZ      ??rxStartIsr_14
   \   00014B   90....       MOV     DPTR,#rxPromiscuousMode
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   701E         JNZ     ??rxStartIsr_14
    612            {
    613              if (/* filter all frames */
    614                   (rxFilter == RX_FILTER_ALL) ||
    615          
    616                   /* filter non-beacon frames */
    617                   ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
    618                    (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
    619          
    620                   /* filter non-command frames */
    621                   ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
    622                    ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
   \   000151   90....       MOV     DPTR,#rxFilter
   \   000154   E0           MOVX    A,@DPTR
   \   000155   6401         XRL     A,#0x1
   \   000157   7003         JNZ     $+5
   \   000159   02....       LJMP    ??rxStartIsr_15 & 0xFFFF
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   6402         XRL     A,#0x2
   \   00015F   6003         JZ      $+5
   \   000161   02....       LJMP    ??rxStartIsr_16 & 0xFFFF
   \   000164   90....       MOV     DPTR,#rxBuf + 1
   \   000167   E0           MOVX    A,@DPTR
   \   000168   5407         ANL     A,#0x7
   \   00016A   6003         JZ      $+5
   \   00016C   02....       LJMP    ??rxStartIsr_15 & 0xFFFF
    623              {
    624                /* discard rest of frame */
    625                rxDiscardFrame();
    626                return;
    627              }
    628            }
    629          
    630            /*-------------------------------------------------------------------------------
    631             *  Compute length of addressing fields.  Compute payload length.
    632             */
    633          
    634            /* decode addressing modes */
    635            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \                     ??rxStartIsr_14:
   \   00016F   90....       MOV     DPTR,#rxBuf + 2
   \   000172   E0           MOVX    A,@DPTR
   \   000173   F8           MOV     R0,A
   \   000174   13           RRC     A
   \   000175   13           RRC     A
   \   000176   543F         ANL     A,#0x3f
   \   000178   5403         ANL     A,#0x3
   \   00017A   F5..         MOV     ?V0 + 3,A
    636            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \   00017C   E8           MOV     A,R0
   \   00017D   C4           SWAP    A
   \   00017E   13           RRC     A
   \   00017F   13           RRC     A
   \   000180   5403         ANL     A,#0x3
   \   000182   F5..         MOV     ?V0 + 4,A
    637          
    638            /*
    639            *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    640             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    641             *  the entire receive buffer is flushed.
    642             */
    643            if (macChipVersion == REV_A)
   \   000184   90....       MOV     DPTR,#macChipVersion
   \   000187   E0           MOVX    A,@DPTR
   \   000188   7012         JNZ     ??rxStartIsr_17
    644            {
    645              if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
   \   00018A   7401         MOV     A,#0x1
   \   00018C   65..         XRL     A,?V0 + 4
   \   00018E   7003         JNZ     $+5
   \   000190   02....       LJMP    ??rxStartIsr_5 & 0xFFFF
   \   000193   7401         MOV     A,#0x1
   \   000195   65..         XRL     A,?V0 + 3
   \   000197   7003         JNZ     $+5
   \   000199   02....       LJMP    ??rxStartIsr_5 & 0xFFFF
    646              {
    647                MAC_RADIO_FLUSH_RX_FIFO();
    648                rxDone();
    649                return;
    650              }
    651            }
    652          
    653            /*
    654             *  Compute the addressing field length.  A lookup table based on addressing
    655             *  mode is used for efficiency.  If the source address is present and the
    656             *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
    657             *  length is adjusted to match the smaller length.
    658             */
    659            addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
   \                     ??rxStartIsr_17:
   \   00019C   85....       MOV     ?V0 + 0,?V0 + 4
   \   00019F   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0001A2   F8           MOV     R0,A
   \   0001A3   85....       MOV     ?V0 + 0,?V0 + 3
   \   0001A6   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0001A9   28           ADD     A,R0
   \   0001AA   FE           MOV     R6,A
    660            if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
   \   0001AB   E5..         MOV     A,?V0 + 4
   \   0001AD   600A         JZ      ??rxStartIsr_18
   \   0001AF   90....       MOV     DPTR,#rxBuf + 1
   \   0001B2   E0           MOVX    A,@DPTR
   \   0001B3   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001B5   5002         JNC     ??rxStartIsr_18
    661            {
    662              addrLen -= MAC_PAN_ID_FIELD_LEN;
   \   0001B7   1E           DEC     R6
   \   0001B8   1E           DEC     R6
    663            }
    664          
    665            /*
    666             *  If there are not enough unread bytes to include the computed address
    667             *  plus FCS field, the frame is corrupted and must be discarded.
    668             */
    669            if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
   \                     ??rxStartIsr_18:
   \   0001B9   90....       MOV     DPTR,#rxUnreadLen
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   FA           MOV     R2,A
   \   0001BE   8E..         MOV     ?V0 + 0,R6
   \   0001C0   E5..         MOV     A,?V0 + 0
   \   0001C2   2402         ADD     A,#0x2
   \   0001C4   F8           MOV     R0,A
   \   0001C5   E4           CLR     A
   \   0001C6   3400         ADDC    A,#0x0
   \   0001C8   F9           MOV     R1,A
   \   0001C9   EA           MOV     A,R2
   \   0001CA   98           SUBB    A,R0
   \   0001CB   E4           CLR     A
   \   0001CC   99           SUBB    A,R1
   \   0001CD   C3           CLR     C
   \   0001CE   65D0         XRL     A,PSW
   \   0001D0   33           RLC     A
   \   0001D1   4051         JC      ??rxStartIsr_15
    670            {
    671              /* discard frame and exit */
    672              rxDiscardFrame();
    673              return;
    674            }
    675          
    676            /* aux security header plus payload length is equal to unread bytes minus
    677             * address length, minus the FCS
    678             */
    679            rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   C3           CLR     C
   \   0001D5   9E           SUBB    A,R6
   \   0001D6   24FE         ADD     A,#-0x2
   \   0001D8   90....       MOV     DPTR,#rxPayloadLen
   \   0001DB   12....       LCALL   ?Subroutine6 & 0xFFFF
    680          
    681            /*-------------------------------------------------------------------------------
    682             *  Allocate memory for the incoming frame.
    683             */
    684            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \                     ??CrossCallReturnLabel_4:
   \   0001DE   5002         JNC     ??rxStartIsr_19
    685            {
    686              /* increase the allocation size of MAC header for security */
    687              mhrLen = MAC_MHR_LEN;
   \   0001E0   7F25         MOV     R7,#0x25
    688            }
    689          
    690            pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + mhrLen + rxPayloadLen);
   \                     ??rxStartIsr_19:
   \   0001E2                ; Setup parameters for call to function macDataRxMemAlloc
   \   0001E2   8F..         MOV     ?V0 + 0,R7
   \   0001E4   90....       MOV     DPTR,#rxPayloadLen
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   F8           MOV     R0,A
   \   0001E9   E5..         MOV     A,?V0 + 0
   \   0001EB   28           ADD     A,R0
   \   0001EC   F8           MOV     R0,A
   \   0001ED   E4           CLR     A
   \   0001EE   3400         ADDC    A,#0x0
   \   0001F0   F9           MOV     R1,A
   \   0001F1   E8           MOV     A,R0
   \   0001F2   2435         ADD     A,#0x35
   \   0001F4   FA           MOV     R2,A
   \   0001F5   E9           MOV     A,R1
   \   0001F6   3400         ADDC    A,#0x0
   \   0001F8   FB           MOV     R3,A
   \   0001F9   12....       LCALL   ??macDataRxMemAlloc?relay
   \   0001FC   90....       MOV     DPTR,#pRxBuf
   \   0001FF   12....       LCALL   ??Subroutine39_0 & 0xFFFF
    691            if (pRxBuf == NULL)
   \                     ??CrossCallReturnLabel_78:
   \   000202   F8           MOV     R0,A
   \   000203   A3           INC     DPTR
   \   000204   E0           MOVX    A,@DPTR
   \   000205   F9           MOV     R1,A
   \   000206   E8           MOV     A,R0
   \   000207   49           ORL     A,R1
   \   000208   7020         JNZ     ??rxStartIsr_20
    692            {
    693              /* Cancel the outgoing TX ACK */
    694              MAC_RADIO_CANCEL_TX_ACK();
   \   00020A   75E1E8       MOV     0xe1,#-0x18
   \   00020D   8015         SJMP    ??rxStartIsr_15
    695          
    696              /* buffer allocation failed, discard the frame and exit*/
    697              rxDiscardFrame();
    698              return;
    699            }
   \                     ??rxStartIsr_16:
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   6403         XRL     A,#0x3
   \   000212   6003         JZ      $+5
   \   000214   02....       LJMP    ??rxStartIsr_14 & 0xFFFF
   \   000217   90....       MOV     DPTR,#rxBuf + 1
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   5407         ANL     A,#0x7
   \   00021D   6403         XRL     A,#0x3
   \   00021F   7003         JNZ     $+5
   \   000221   02....       LJMP    ??rxStartIsr_14 & 0xFFFF
   \                     ??rxStartIsr_15:
   \   000224                ; Setup parameters for call to function rxDiscardFrame
   \   000224   12....       LCALL   ??rxDiscardFrame?relay
   \   000227   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    700          
    701            /*-------------------------------------------------------------------------------
    702             *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
    703             */
    704            ackWithPending = 0;
   \                     ??rxStartIsr_20:
   \   00022A   7F00         MOV     R7,#0x0
    705            if (!rxPromiscuousMode)
   \   00022C   90....       MOV     DPTR,#rxPromiscuousMode
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   700A         JNZ     ??rxStartIsr_21
    706            {
    707              macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
   \   000232   90....       MOV     DPTR,#rxBuf + 1
   \   000235   E0           MOVX    A,@DPTR
   \   000236   5420         ANL     A,#0x20
   \   000238   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00023B   F0           MOVX    @DPTR,A
    708            }
    709          
    710            /*-------------------------------------------------------------------------------
    711             *  Process any ACK request.
    712             */
    713            if (macRxOutgoingAckFlag)
   \                     ??rxStartIsr_21:
   \   00023C   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   6055         JZ      ??rxStartIsr_22
    714            {
    715              halIntState_t  s;
    716          
    717              /*
    718               *  This critical section ensures that the callback ISR is initiated within time
    719               *  to guarantee correlation with the strobe.
    720               */
    721              HAL_ENTER_CRITICAL_SECTION(s);
   \   000242   A2AF         MOV     C,0xa8.7
   \   000244   E4           CLR     A
   \   000245   33           RLC     A
   \   000246   F5..         MOV     ?V0 + 0,A
   \   000248   C2AF         CLR     0xa8.7
    722          
    723              /* Do not ack data packet with pending more data */
    724              if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
   \   00024A   90....       MOV     DPTR,#rxBuf + 1
   \   00024D   E0           MOVX    A,@DPTR
   \   00024E   5407         ANL     A,#0x7
   \   000250   6403         XRL     A,#0x3
   \   000252   7026         JNZ     ??rxStartIsr_23
    725              {
    726                if( macRxCheckMACPendingCallback())
   \   000254                ; Setup parameters for call to function macRxCheckMACPendingCallback
   \   000254   12....       LCALL   ??macRxCheckMACPendingCallback?relay
   \   000257   E9           MOV     A,R1
   \   000258   600A         JZ      ??rxStartIsr_24
    727                {
    728                  /* Check is any mac data pending for end devices */
    729                  ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \                     ??rxStartIsr_25:
   \   00025A   7F04         MOV     R7,#0x4
    730                }
    731                else
    732                {
    733                  if( macSrcMatchIsEnabled )
    734                  {
    735                    /* When autopend is enabled, check if allpending is set to true */
    736                    if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
    737                    {
    738                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    739                    }
    740                  }
    741                  else
    742                  {
    743                    /* When autopend is disabled, check the application pending callback */
    744                    if( macRxCheckPendingCallback() )
    745                    {
    746                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    747                    }
    748                  }
    749                }
    750              }
    751          
    752              if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
    753              {
    754                MAC_RADIO_TX_ACK_PEND();
   \   00025C   90618A       MOV     DPTR,#0x618a
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   D2E2         SETB    0xE0 /* A   */.2
   \   000262   801C         SJMP    ??rxStartIsr_26
    755              }
   \                     ??rxStartIsr_24:
   \   000264   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   000267   E0           MOVX    A,@DPTR
   \   000268   600A         JZ      ??rxStartIsr_27
   \   00026A                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   00026A   12....       LCALL   ??MAC_SrcMatchCheckAllPending?relay
   \   00026D   E9           MOV     A,R1
   \   00026E   64FE         XRL     A,#0xfe
   \   000270   7008         JNZ     ??rxStartIsr_23
   \   000272   80E6         SJMP    ??rxStartIsr_25
   \                     ??rxStartIsr_27:
   \   000274                ; Setup parameters for call to function macRxCheckPendingCallback
   \   000274   12....       LCALL   ??macRxCheckPendingCallback?relay
   \   000277   E9           MOV     A,R1
   \   000278   70E0         JNZ     ??rxStartIsr_25
    756              else
    757              {
    758                MAC_RADIO_TX_ACK();
   \                     ??rxStartIsr_23:
   \   00027A   90618A       MOV     DPTR,#0x618a
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   C2E2         CLR     0xE0 /* A   */.2
    759              }
   \                     ??rxStartIsr_26:
   \   000280   12....       LCALL   ?Subroutine9 & 0xFFFF
    760          
    761          
    762              /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
    763              MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
   \                     ??CrossCallReturnLabel_10:
   \   000283   7591FE       MOV     0x91,#-0x2
   \   000286   A2E7         MOV     C,0xE0 /* A   */.7
   \   000288   92AF         MOV     0xa8.7,C
   \   00028A   9061A4       MOV     DPTR,#0x61a4
   \   00028D   E0           MOVX    A,@DPTR
   \   00028E   D2E0         SETB    0xE0 /* A   */.0
   \   000290   F0           MOVX    @DPTR,A
    764              HAL_EXIT_CRITICAL_SECTION(s);
   \   000291   E5..         MOV     A,?V0 + 0
   \   000293   A2E0         MOV     C,0xE0 /* A   */.0
   \   000295   92AF         MOV     0xa8.7,C
    765            }
    766          
    767           /*-------------------------------------------------------------------------------
    768            *  Populate the receive buffer going up to high-level.
    769            */
    770          
    771            /* configure the payload buffer
    772             * save MAC header pointer regardless of security status.
    773             */
    774            pRxBuf->mhr.p   = pRxBuf->msdu.p   = (uint8 *) (pRxBuf + 1);
   \                     ??rxStartIsr_22:
   \   000297   90....       MOV     DPTR,#pRxBuf
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   2435         ADD     A,#0x35
   \   00029D   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0002A0   FA           MOV     R2,A
   \   0002A1   A3           INC     DPTR
   \   0002A2   E0           MOVX    A,@DPTR
   \   0002A3   F583         MOV     DPH,A
   \   0002A5   8A82         MOV     DPL,R2
   \   0002A7   A3           INC     DPTR
   \   0002A8   A3           INC     DPTR
   \   0002A9   E8           MOV     A,R0
   \   0002AA   F0           MOVX    @DPTR,A
   \   0002AB   A3           INC     DPTR
   \   0002AC   E9           MOV     A,R1
   \   0002AD   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0002B0   E0           MOVX    A,@DPTR
   \   0002B1   FA           MOV     R2,A
   \   0002B2   A3           INC     DPTR
   \   0002B3   E0           MOVX    A,@DPTR
   \   0002B4   FB           MOV     R3,A
   \   0002B5   90....       MOV     DPTR,#pRxBuf
   \   0002B8   E0           MOVX    A,@DPTR
   \   0002B9   2432         ADD     A,#0x32
   \   0002BB   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    775            pRxBuf->mhr.len = pRxBuf->msdu.len =  rxPayloadLen;
   \                     ??CrossCallReturnLabel_58:
   \   0002BE   90....       MOV     DPTR,#rxPayloadLen
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   C0E0         PUSH    A
   \   0002C4   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0002C7   D0E0         POP     A
   \   0002C9   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0002CC   A3           INC     DPTR
   \   0002CD   A3           INC     DPTR
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   C0E0         PUSH    A
   \   0002D1   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0002D4   D0E0         POP     A
   \   0002D6   12....       LCALL   ?Subroutine6 & 0xFFFF
    776          
    777            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \                     ??CrossCallReturnLabel_5:
   \   0002D9   5042         JNC     ??CrossCallReturnLabel_56
    778            {
    779              /* Copy FCF and sequence number to RX buffer */
    780              pRxBuf->mhr.len = MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN;
   \   0002DB   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0002DE   7403         MOV     A,#0x3
   \   0002E0   F0           MOVX    @DPTR,A
    781              osal_memcpy(pRxBuf->mhr.p, &rxBuf[1], pRxBuf->mhr.len);
   \   0002E1                ; Setup parameters for call to function osal_memcpy
   \   0002E1   75....       MOV     ?V0 + 0,#(rxBuf + 1) & 0xff
   \   0002E4   75....       MOV     ?V0 + 1,#((rxBuf + 1) >> 8) & 0xff
   \   0002E7   75..00       MOV     ?V0 + 2,#0x0
   \   0002EA   78..         MOV     R0,#?V0 + 0
   \   0002EC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002EF   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0002F2   E0           MOVX    A,@DPTR
   \   0002F3   FC           MOV     R4,A
   \   0002F4   7D00         MOV     R5,#0x0
   \   0002F6   90....       MOV     DPTR,#pRxBuf
   \   0002F9   E0           MOVX    A,@DPTR
   \   0002FA   2432         ADD     A,#0x32
   \   0002FC   18           DEC     R0
   \   0002FD   18           DEC     R0
   \   0002FE   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000301   E0           MOVX    A,@DPTR
   \   000302   FA           MOV     R2,A
   \   000303   A3           INC     DPTR
   \   000304   E0           MOVX    A,@DPTR
   \   000305   FB           MOV     R3,A
   \   000306   12....       LCALL   ??osal_memcpy?relay
   \   000309   7403         MOV     A,#0x3
   \   00030B   12....       LCALL   ?DEALLOC_XSTACK8
    782              pRxBuf->mhr.p += pRxBuf->mhr.len;
   \   00030E   90....       MOV     DPTR,#pRxBuf
   \   000311   E0           MOVX    A,@DPTR
   \   000312   2432         ADD     A,#0x32
   \   000314   12....       LCALL   ?Subroutine11 & 0xFFFF
    783            }
   \                     ??CrossCallReturnLabel_14:
   \   000317   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00031A   12....       LCALL   ??Subroutine35_0 & 0xFFFF
    784          
    785            /* set internal values */
    786            pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
   \                     ??CrossCallReturnLabel_56:
   \   00031D   90....       MOV     DPTR,#pRxBuf
   \   000320   E0           MOVX    A,@DPTR
   \   000321   241A         ADD     A,#0x1a
   \   000323   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000326   E5..         MOV     A,?V0 + 4
   \   000328   12....       LCALL   ??Subroutine40_0 & 0xFFFF
    787            pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
   \                     ??CrossCallReturnLabel_79:
   \   00032B   2423         ADD     A,#0x23
   \   00032D   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000330   E5..         MOV     A,?V0 + 3
   \   000332   F0           MOVX    @DPTR,A
    788            pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
   \   000333                ; Setup parameters for call to function macMcuOverflowCapture
   \   000333   12....       LCALL   ??macMcuOverflowCapture?relay
   \   000336   8A..         MOV     ?V0 + 0,R2
   \   000338   8B..         MOV     ?V0 + 1,R3
   \   00033A   8C..         MOV     ?V0 + 2,R4
   \   00033C   8D..         MOV     ?V0 + 3,R5
   \   00033E   90....       MOV     DPTR,#pRxBuf
   \   000341   E0           MOVX    A,@DPTR
   \   000342   2424         ADD     A,#0x24
   \   000344   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000347   78..         MOV     R0,#?V0 + 0
   \   000349   12....       LCALL   ?L_MOV_TO_X
    789            pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
   \   00034C                ; Setup parameters for call to function macMcuTimerCapture
   \   00034C   12....       LCALL   ??macMcuTimerCapture?relay
   \   00034F   90....       MOV     DPTR,#pRxBuf
   \   000352   E0           MOVX    A,@DPTR
   \   000353   2428         ADD     A,#0x28
   \   000355   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    790            pRxBuf->internal.frameType    = MAC_FRAME_TYPE(&rxBuf[1]);
   \                     ??CrossCallReturnLabel_59:
   \   000358   90....       MOV     DPTR,#rxBuf + 1
   \   00035B   E0           MOVX    A,@DPTR
   \   00035C   5407         ANL     A,#0x7
   \   00035E   C0E0         PUSH    A
   \   000360   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000363   A3           INC     DPTR
   \   000364   D0E0         POP     A
   \   000366   F0           MOVX    @DPTR,A
    791            pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
   \   000367   90....       MOV     DPTR,#rxBuf + 3
   \   00036A   E0           MOVX    A,@DPTR
   \   00036B   C0E0         PUSH    A
   \   00036D   90....       MOV     DPTR,#pRxBuf
   \   000370   E0           MOVX    A,@DPTR
   \   000371   2431         ADD     A,#0x31
   \   000373   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000376   D0E0         POP     A
   \   000378   F0           MOVX    @DPTR,A
    792            pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
   \   000379   90....       MOV     DPTR,#rxBuf + 1
   \   00037C   E0           MOVX    A,@DPTR
   \   00037D   5478         ANL     A,#0x78
   \   00037F   F8           MOV     R0,A
   \   000380   A3           INC     DPTR
   \   000381   E0           MOVX    A,@DPTR
   \   000382   C4           SWAP    A
   \   000383   540F         ANL     A,#0xf
   \   000385   5403         ANL     A,#0x3
   \   000387   48           ORL     A,R0
   \   000388   4F           ORL     A,R7
   \   000389   C0E0         PUSH    A
   \   00038B   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00038E   D0E0         POP     A
   \   000390   F0           MOVX    @DPTR,A
    793          
    794            /*-------------------------------------------------------------------------------
    795             *  If the processing the addressing fields does not require more bytes from
    796             *  the FIFO go directly address processing function.  Otherwise, configure
    797             *  interrupt to jump there once bytes are received.
    798             */
    799            if (addrLen == 0)
   \   000391   EE           MOV     A,R6
   \   000392   7005         JNZ     ??rxStartIsr_28
    800            {
    801              /* no addressing fields to read, prepare for payload interrupts */
    802              pFuncRxState = &rxPayloadIsr;
   \   000394   12....       LCALL   ?Subroutine7 & 0xFFFF
    803              rxPrepPayload();
    804            }
   \                     ??CrossCallReturnLabel_7:
   \   000397   801B         SJMP    ??rxStartIsr_3
    805            else
    806            {
    807              /* need to read and process addressing fields, prepare for address interrupt */
    808              rxNextLen = addrLen;
   \                     ??rxStartIsr_28:
   \   000399   90....       MOV     DPTR,#rxNextLen
   \   00039C   12....       LCALL   ?Subroutine6 & 0xFFFF
    809              if (MAC_SEC_ENABLED(&rxBuf[1]))
   \                     ??CrossCallReturnLabel_6:
   \   00039F   90....       MOV     DPTR,#rxNextLen
   \   0003A2   E0           MOVX    A,@DPTR
   \   0003A3   4001         JC      ??rxStartIsr_29
    810              {
    811                /* When security is enabled, read off security control field as well */
    812                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
    813              }
    814              else
    815              {
    816                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   0003A5   14           DEC     A
   \                     ??rxStartIsr_29:
   \   0003A6   906194       MOV     DPTR,#0x6194
   \   0003A9   F0           MOVX    @DPTR,A
    817              }
    818              pFuncRxState = &rxAddrIsr;
   \   0003AA   90....       MOV     DPTR,#pFuncRxState
   \   0003AD   74..         MOV     A,#??rxAddrIsr?relay & 0xff
   \   0003AF   F0           MOVX    @DPTR,A
   \   0003B0   A3           INC     DPTR
   \   0003B1   74..         MOV     A,#(??rxAddrIsr?relay >> 8) & 0xff
   \   0003B3   F0           MOVX    @DPTR,A
   \                     ??rxStartIsr_3:
   \   0003B4   7402         MOV     A,#0x2
   \   0003B6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003B9   7F05         MOV     R7,#0x5
   \   0003BB   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0003BE                REQUIRE RFST
   \   0003BE                REQUIRE _A_IEN0
   \   0003BE                REQUIRE S1CON
   \   0003BE                REQUIRE RFIRQF1
    819            }
    820          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   74..         MOV     A,#macRxAddrLen & 0xff
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   F582         MOV     DPL,A
   \   000006   74..         MOV     A,#(macRxAddrLen >> 8) & 0xff
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F583         MOV     DPH,A
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2434         ADD     A,#0x34
   \   000006   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine32_0
   \   000001                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   9061A4       MOV     DPTR,#0x61a4
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C2E0         CLR     0xE0 /* A   */.0
   \   000006                REQUIRE ??Subroutine33_0
   \   000006                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#rxBuf + 1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   A2E3         MOV     C,0xE0 /* A   */.3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006                REQUIRE ??Subroutine35_0
   \   000006                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   EA           MOV     A,R2
   \   000005                REQUIRE ??Subroutine36_0
   \   000005                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#pRxBuf
   \   000004   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine37_0
   \   000001                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#pFuncRxState
   \   000003   74..         MOV     A,#??rxPayloadIsr?relay & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#(??rxPayloadIsr?relay >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A                ; Setup parameters for call to function rxPrepPayload
   \   00000A                ; Setup parameters for call to function rxPrepPayload
   \   00000A   12....       LCALL   ??rxPrepPayload?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2A           ADD     A,R2
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   EF           MOV     A,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   2434         ADD     A,#0x34
   \   000005   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   90....       MOV     DPTR,#pRxBuf
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FA           MOV     R2,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004                REQUIRE ??Subroutine40_0
   \   000004                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function macRxCompleteCallback
   \   000001   90....       MOV     DPTR,#pRxBuf
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    821          
    822          
    823          /*=================================================================================================
    824           * @fn          rxAddrIsr
    825           *
    826           * @brief       Receive ISR state for decoding address.  Reads and stores the address information
    827           *              from the incoming packet.
    828           *
    829           * @param       none
    830           *
    831           * @return      none
    832           *=================================================================================================
    833           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242A         ADD     A,#0x2a
   \   000006                REQUIRE ??Subroutine34_0
   \   000006                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    834          static void rxAddrIsr(void)
   \                     rxAddrIsr:
    835          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    836            uint8 buf[MAX_ADDR_FIELDS_LEN];
    837            uint8 dstAddrMode;
    838            uint8 srcAddrMode;
    839          #ifdef MAC_SECURITY  
    840            uint8 securityControl;
    841          #endif /* MAC_SECURITY */  
    842            uint8  * p;
    843          
    844            MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
   \   00000A   90....       MOV     DPTR,#rxNextLen
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??rxAddrIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL   ??halAssertHandler?relay
    845          
    846            /*  read out address fields into local buffer in one shot */
    847            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \                     ??rxAddrIsr_0:
   \   000013                ; Setup parameters for call to function macMemReadRxFifo
   \   000013   12....       LCALL   ?Subroutine12 & 0xFFFF
    848          
    849            /* set pointer to buffer with addressing fields */
    850            p = buf;
   \                     ??CrossCallReturnLabel_16:
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   AC82         MOV     R4,DPL
   \   00001E   AD83         MOV     R5,DPH
    851          
    852            /* destination address */
    853            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \   000020   90....       MOV     DPTR,#rxBuf + 2
   \   000023   E0           MOVX    A,@DPTR
   \   000024   13           RRC     A
   \   000025   13           RRC     A
   \   000026   543F         ANL     A,#0x3f
   \   000028   5403         ANL     A,#0x3
   \   00002A   FE           MOV     R6,A
    854            if (dstAddrMode != SADDR_MODE_NONE)
   \   00002B   6064         JZ      ??rxAddrIsr_1
    855            {
    856              pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
   \   00002D   90....       MOV     DPTR,#pRxBuf
   \   000030   E0           MOVX    A,@DPTR
   \   000031   242C         ADD     A,#0x2c
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   3400         ADDC    A,#0x0
   \   000038   F9           MOV     R1,A
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FC           MOV     R4,A
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FB           MOV     R3,A
   \   000048   EC           MOV     A,R4
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000050   8882         MOV     DPL,R0
   \   000052   8983         MOV     DPH,R1
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FA           MOV     R2,A
   \   000056   12....       LCALL   ?Subroutine5 & 0xFFFF
    857              p += MAC_PAN_ID_FIELD_LEN;
    858              if (dstAddrMode == SADDR_MODE_EXT)
   \                     ??CrossCallReturnLabel_62:
   \   000059   7403         MOV     A,#0x3
   \   00005B   6E           XRL     A,R6
   \   00005C   7016         JNZ     ??rxAddrIsr_2
    859              {
    860                sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
   \   00005E                ; Setup parameters for call to function sAddrExtCpy
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   AC82         MOV     R4,DPL
   \   000065   AD83         MOV     R5,DPH
   \   000067   90....       MOV     DPTR,#pRxBuf
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   241B         ADD     A,#0x1b
   \   00006D   12....       LCALL   ?Subroutine20 & 0xFFFF
    861                p += MAC_EXT_ADDR_FIELD_LEN;
   \                     ??CrossCallReturnLabel_30:
   \   000070   740A         MOV     A,#0xa
   \   000072   8016         SJMP    ??rxAddrIsr_3
    862              }
    863              else
    864              {
    865                pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_2:
   \   000074   7402         MOV     A,#0x2
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FA           MOV     R2,A
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000083   241B         ADD     A,#0x1b
   \   000085   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    866                p += MAC_SHORT_ADDR_FIELD_LEN;
   \                     ??CrossCallReturnLabel_60:
   \   000088   7404         MOV     A,#0x4
   \                     ??rxAddrIsr_3:
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   AC82         MOV     R4,DPL
   \   00008F   AD83         MOV     R5,DPH
    867              }
    868            }
    869          
    870            /* sources address */
    871            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \                     ??rxAddrIsr_1:
   \   000091   90....       MOV     DPTR,#rxBuf + 2
   \   000094   E0           MOVX    A,@DPTR
   \   000095   C4           SWAP    A
   \   000096   13           RRC     A
   \   000097   13           RRC     A
   \   000098   5403         ANL     A,#0x3
   \   00009A   FE           MOV     R6,A
    872            if (srcAddrMode != SADDR_MODE_NONE)
   \   00009B   603D         JZ      ??CrossCallReturnLabel_61
    873            {
    874              if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
   \   00009D   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   A2E6         MOV     C,0xE0 /* A   */.6
   \   0000A3   4016         JC      ??rxAddrIsr_4
    875              {
    876                pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
   \   0000A5   8C82         MOV     DPL,R4
   \   0000A7   8D83         MOV     DPH,R5
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   FA           MOV     R2,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000AF   12....       LCALL   ?Subroutine5 & 0xFFFF
    877                p += MAC_PAN_ID_FIELD_LEN;
   \                     ??CrossCallReturnLabel_63:
   \   0000B2   EC           MOV     A,R4
   \   0000B3   2402         ADD     A,#0x2
   \   0000B5   0C           INC     R4
   \   0000B6   0C           INC     R4
   \   0000B7   ED           MOV     A,R5
   \   0000B8   3400         ADDC    A,#0x0
   \   0000BA   FD           MOV     R5,A
    878              }
    879              if (srcAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_4:
   \   0000BB   7403         MOV     A,#0x3
   \   0000BD   6E           XRL     A,R6
   \   0000BE   700B         JNZ     ??rxAddrIsr_5
    880              {
    881                sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
   \   0000C0                ; Setup parameters for call to function sAddrExtCpy
   \   0000C0   90....       MOV     DPTR,#pRxBuf
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   2412         ADD     A,#0x12
   \   0000C6   12....       LCALL   ?Subroutine20 & 0xFFFF
    882              }
   \                     ??CrossCallReturnLabel_31:
   \   0000C9   800F         SJMP    ??CrossCallReturnLabel_61
    883              else
    884              {
    885                pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_5:
   \   0000CB   8C82         MOV     DPL,R4
   \   0000CD   8D83         MOV     DPH,R5
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   FA           MOV     R2,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   12....       LCALL   ?Subroutine15 & 0xFFFF
    886              }
    887            }
   \                     ??CrossCallReturnLabel_23:
   \   0000D5   2412         ADD     A,#0x12
   \   0000D7   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    888          
    889          #ifdef MAC_SECURITY
    890            if (MAC_SEC_ENABLED(&rxBuf[1]))
    891            {
    892              uint8 keyIdMode;
    893          
    894              if (MAC_FRAME_VERSION(&rxBuf[1]) == 0)
    895              {
    896                /* MAC_UNSUPPORTED_LEGACY - Cancel the outgoing TX ACK.
    897                 * It may be too late but we have to try.
    898                 */
    899                MAC_RADIO_CANCEL_TX_ACK();
    900          
    901                /* clean up after unsupported security legacy */
    902                macRxHaltCleanup();
    903                return;
    904              }
    905          
    906              /* Copy addressing fields to RX buffer */
    907              osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
    908              pRxBuf->mhr.p   += rxNextLen;
    909              pRxBuf->mhr.len += rxNextLen;
    910          
    911              /*-------------------------------------------------------------------------------
    912               *  Prepare for auxiliary security header interrupts.
    913               */
    914          
    915              /* read out security control field from FIFO (threshold set so bytes are guaranteed to be there) */
    916              MAC_RADIO_READ_RX_FIFO(&securityControl, MAC_SEC_CONTROL_FIELD_LEN);
    917          
    918              /* Copy security fields to MHR buffer */
    919              *pRxBuf->mhr.p   = securityControl;
    920              pRxBuf->mhr.p   += MAC_SEC_CONTROL_FIELD_LEN;
    921              pRxBuf->mhr.len += MAC_SEC_CONTROL_FIELD_LEN;
    922          
    923              /* store security level and key ID mode */
    924              pRxBuf->sec.securityLevel = SECURITY_LEVEL(securityControl);
    925              pRxBuf->sec.keyIdMode = keyIdMode = KEY_IDENTIFIER_MODE(securityControl);
    926          
    927              /* Corrupted RX frame, should never occur. */
    928              if ((keyIdMode > MAC_KEY_ID_MODE_8)
    929              /* Get the next RX length according to AuxLen table minus security control field.
    930               * The security control length is counted already.
    931               */
    932              || ((macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN) >= rxPayloadLen)
    933              /* Security Enabled subfield is one, but the Security Level in the header is zero:
    934               * MAC_UNSUPPORTED_SECURITY - Cancel the outgoing TX ACK.
    935               */
    936              || (pRxBuf->sec.securityLevel == MAC_SEC_LEVEL_NONE))
    937              {
    938                /* It may be too late but we have to try. */
    939                MAC_RADIO_CANCEL_TX_ACK();
    940          
    941                /* clean up after unsupported security or corrupted RX frame. */
    942                macRxHaltCleanup();
    943                return;
    944              }
    945          
    946              /* get the next RX length according to AuxLen table minus security control field.
    947               * The sceurity control length is counted already.
    948               */
    949              rxNextLen = macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN;
    950              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
    951              pFuncRxState = &rxSecurityHdrIsr;
    952            }
    953            else
    954          #endif /* MAC_SECURITY */
    955            {
    956              /* clear security level */
    957              pRxBuf->sec.securityLevel = MAC_SEC_LEVEL_NONE;
   \                     ??CrossCallReturnLabel_61:
   \   0000DA   90....       MOV     DPTR,#pRxBuf
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   240F         ADD     A,#0xf
   \   0000E0   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000E3   E4           CLR     A
   \   0000E4   F0           MOVX    @DPTR,A
    958          
    959              /*-------------------------------------------------------------------------------
    960               *  Prepare for payload interrupts.
    961               */
    962              pFuncRxState = &rxPayloadIsr;
   \   0000E5   12....       LCALL   ?Subroutine7 & 0xFFFF
    963              rxPrepPayload();
    964            }
    965          }
   \                     ??CrossCallReturnLabel_8:
   \   0000E8   7414         MOV     A,#0x14
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000ED                REQUIRE ?Subroutine1
   \   0000ED                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??sAddrExtCpy?relay
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   90....       MOV     DPTR,#pRxBuf
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   EA           MOV     A,R2
   \   000003   2400         ADD     A,#0x0
   \   000005   E4           CLR     A
   \   000006   39           ADDC    A,R1
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV     DPTR,#rxNextLen
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   AA82         MOV     R2,DPL
   \   00000D   AB83         MOV     R3,DPH
   \   00000F   12....       LCALL   ??macMemReadRxFifo?relay
   \   000012   22           RET
    966          
    967          
    968          #ifdef MAC_SECURITY
    969          /*=================================================================================================
    970           * @fn          rxSecurityHdrIsr
    971           *
    972           * @brief       Receive ISR state for reading out and storing the auxiliary security header.
    973           *
    974           * @param       none
    975           *
    976           * @return      none
    977           *=================================================================================================
    978           */
    979          static void rxSecurityHdrIsr(void)
    980          {
    981            uint8 buf[MAC_FRAME_COUNTER_LEN + MAC_KEY_ID_8_LEN];
    982          
    983            /* read out frame counter and key ID */
    984            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
    985          
    986            /* Incoming frame counter */
    987            macFrameCounter = BUILD_UINT32(buf[0], buf[1], buf[2], buf[3]);
    988            if (rxNextLen - MAC_FRAME_COUNTER_LEN > 0)
    989            {
    990              /* Explicit mode */
    991              osal_memcpy(pRxBuf->sec.keySource, &buf[MAC_FRAME_COUNTER_LEN], rxNextLen - MAC_FRAME_COUNTER_LEN - 1);
    992              pRxBuf->sec.keyIndex = buf[rxNextLen - MAC_KEY_INDEX_LEN];
    993            }
    994          
    995            /* Copy security fields to RX buffer */
    996            osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
    997            pRxBuf->mhr.p   += rxNextLen;
    998            pRxBuf->mhr.len += rxNextLen;
    999          
   1000            /* Update payload pointer and payload length. The rxPayloadLen includes security header length
   1001             * and SCF byte. The security header and SCF length must be deducted from the rxPayloadLen.
   1002             */
   1003            rxPayloadLen    -= (rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
   1004            pRxBuf->msdu.len = rxPayloadLen;
   1005            pRxBuf->mhr.len += rxPayloadLen;
   1006          
   1007            /*-------------------------------------------------------------------------------
   1008             *  Prepare for payload interrupts.
   1009             */
   1010            pFuncRxState = &rxPayloadIsr;
   1011            rxPrepPayload();
   1012          }
   1013          #endif /* MAC_SECURITY */
   1014          
   1015          
   1016          /*=================================================================================================
   1017           * @fn          rxPrepPayload
   1018           *
   1019           * @brief       Common code to prepare for the payload ISR.
   1020           *
   1021           * @param       none
   1022           *
   1023           * @return      none
   1024           *=================================================================================================
   1025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1026          static void rxPrepPayload(void)
   \                     rxPrepPayload:
   1027          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1028            if (rxPayloadLen == 0)
   \   000004   90....       MOV     DPTR,#rxPayloadLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7011         JNZ     ??rxPrepPayload_0
   1029            {
   1030              MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
   \   00000A   906194       MOV     DPTR,#0x6194
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
   1031              pFuncRxState = &rxFcsIsr;
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   74..         MOV     A,#??rxFcsIsr?relay & 0xff
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   74..         MOV     A,#(??rxFcsIsr?relay >> 8) & 0xff
   \   000019   8016         SJMP    ??rxPrepPayload_1
   1032            }
   1033            else
   1034            {
   1035              rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxPrepPayload_0:
   \   00001B   C3           CLR     C
   \   00001C   9410         SUBB    A,#0x10
   \   00001E   5006         JNC     ??rxPrepPayload_2
   \   000020   E0           MOVX    A,@DPTR
   \   000021   90....       MOV     DPTR,#rxNextLen
   \   000024   8005         SJMP    ??rxPrepPayload_3
   \                     ??rxPrepPayload_2:
   \   000026   90....       MOV     DPTR,#rxNextLen
   \   000029   7410         MOV     A,#0x10
   \                     ??rxPrepPayload_3:
   \   00002B   F0           MOVX    @DPTR,A
   1036              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   14           DEC     A
   \   00002E   906194       MOV     DPTR,#0x6194
   1037            }
   \                     ??rxPrepPayload_1:
   \   000031   80..         SJMP    ?Subroutine0
   1038          }
   1039          
   1040          
   1041          /*=================================================================================================
   1042           * @fn          rxPayloadIsr
   1043           *
   1044           * @brief       Receive ISR state for reading out and storing the packet payload.
   1045           *
   1046           * @param       none
   1047           *
   1048           * @return      none
   1049           *=================================================================================================
   1050           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1051          static void rxPayloadIsr(void)
   \                     rxPayloadIsr:
   1052          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1053            MAC_RADIO_READ_RX_FIFO(pRxBuf->mhr.p, rxNextLen);
   \   000004                ; Setup parameters for call to function macMemReadRxFifo
   \   000004   90....       MOV     DPTR,#rxNextLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   90....       MOV     DPTR,#pRxBuf
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   2432         ADD     A,#0x32
   \   00000F   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   ??macMemReadRxFifo?relay
   1054            pRxBuf->mhr.p += rxNextLen;
   \   000018   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00001B   90....       MOV     DPTR,#rxNextLen
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000023   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   1055          
   1056            rxPayloadLen -= rxNextLen;
   \                     ??CrossCallReturnLabel_57:
   \   000026   90....       MOV     DPTR,#rxNextLen
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   90....       MOV     DPTR,#rxPayloadLen
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C3           CLR     C
   \   000030   98           SUBB    A,R0
   \   000031   F0           MOVX    @DPTR,A
   1057          
   1058            rxPrepPayload();
   \   000032                ; Setup parameters for call to function rxPrepPayload
   \   000032   12....       LCALL   ??rxPrepPayload?relay
   1059          }
   \   000035   80..         SJMP    ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2432         ADD     A,#0x32
   \   000006   F8           MOV     R0,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET
   1060          
   1061          
   1062          /*=================================================================================================
   1063           * @fn          rxFcsIsr
   1064           *
   1065           * @brief       Receive ISR state for handling the FCS.
   1066           *
   1067           * @param       none
   1068           *
   1069           * @return      none
   1070           *=================================================================================================
   1071           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1072          static void rxFcsIsr(void)
   \                     rxFcsIsr:
   1073          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1074            uint8 crcOK;
   1075            uint8 ackWithPending = 0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   1076          
   1077            /* read FCS, rxBuf is now available storage */
   1078            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
   \   000008                ; Setup parameters for call to function macMemReadRxFifo
   \   000008   7902         MOV     R1,#0x2
   \   00000A   7A..         MOV     R2,#rxBuf & 0xff
   \   00000C   7B..         MOV     R3,#(rxBuf >> 8) & 0xff
   \   00000E   12....       LCALL   ??macMemReadRxFifo?relay
   1079          
   1080            /*
   1081             *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
   1082             *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
   1083             *    1) the RSSI value
   1084             *    2) the average correlation value (used for LQI)
   1085             *    3) a CRC passed bit
   1086             */
   1087          
   1088            /* save the "CRC-is-OK" status */
   1089            crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
   \   000011   90....       MOV     DPTR,#rxBuf + 1
   \   000014   E0           MOVX    A,@DPTR
   \   000015   5480         ANL     A,#0x80
   \   000017   F5..         MOV     ?V0 + 1,A
   1090          
   1091            /*
   1092             *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
   1093             *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
   1094             *  a special variant of promiscuous mode is active.
   1095             */
   1096            if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
   \   000019   700B         JNZ     ??rxFcsIsr_0
   \   00001B   90....       MOV     DPTR,#rxPromiscuousMode
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6402         XRL     A,#0x2
   \   000021   6003         JZ      $+5
   \   000023   02....       LJMP    ??rxFcsIsr_1 & 0xFFFF
   1097            {
   1098              int8 rssiDbm;
   1099              uint8 corr;
   1100          
   1101          #ifdef PACKET_FILTER_STATS
   1102              rxCrcSuccess++;
   1103          #endif /* PACKET_FILTER_STATS */
   1104          
   1105              /*
   1106               *  As power saving optimization, set state variable to indicate physical receive
   1107               *  has completed and then request turning of the receiver.  This means the receiver
   1108               *  can be off (if other conditions permit) during execution of the callback function.
   1109               *
   1110               *  The receiver will be requested to turn off once again at the end of the receive
   1111               *  logic.  There is no harm in doing this.
   1112               */
   1113              macRxActive = MAC_RX_ACTIVE_DONE;
   \                     ??rxFcsIsr_0:
   \   000026   90....       MOV     DPTR,#macRxActive
   \   000029   7402         MOV     A,#0x2
   \   00002B   F0           MOVX    @DPTR,A
   1114              macRxOffRequest();
   \   00002C                ; Setup parameters for call to function macRxOffRequest
   \   00002C   12....       LCALL   ??macRxOffRequest?relay
   1115          
   1116              /* decode RSSI and correlation values */
   1117              rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
   \   00002F   90....       MOV     DPTR,#rxBuf
   \   000032   E0           MOVX    A,@DPTR
   \   000033   24B7         ADD     A,#-0x49
   \   000035   FF           MOV     R7,A
   1118              MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
   1119              corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   547F         ANL     A,#0x7f
   \   00003A   FE           MOV     R6,A
   1120          
   1121              /* Read the source matching result back */
   1122              if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
   \   00003B   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6009         JZ      ??rxFcsIsr_2
   \   000041                ; Setup parameters for call to function MAC_SrcMatchCheckResult
   \   000041   12....       LCALL   ??MAC_SrcMatchCheckResult?relay
   \   000044   E9           MOV     A,R1
   \   000045   6003         JZ      ??rxFcsIsr_2
   1123              {
   1124                /* This result will not overwrite the previously determined pRxBuf->internal.flags */
   1125                ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   000047   75..04       MOV     ?V0 + 0,#0x4
   1126              }
   1127          
   1128              /* record parameters that get passed up to high-level */
   1129              pRxBuf->internal.flags |= ( crcOK | ackWithPending );
   \                     ??rxFcsIsr_2:
   \   00004A   E5..         MOV     A,?V0 + 1
   \   00004C   45..         ORL     A,?V0 + 0
   \   00004E   F8           MOV     R0,A
   \   00004F   90....       MOV     DPTR,#pRxBuf
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F583         MOV     DPH,A
   \   000058   8982         MOV     DPL,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   48           ORL     A,R0
   \   000062   F0           MOVX    @DPTR,A
   1130              pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   000063                ; Setup parameters for call to function macRadioComputeLQI
   \   000063   EE           MOV     A,R6
   \   000064   FA           MOV     R2,A
   \   000065   EF           MOV     A,R7
   \   000066   F9           MOV     R1,A
   \   000067   12....       LCALL   ??macRadioComputeLQI?relay
   \   00006A   E9           MOV     A,R1
   \   00006B   C0E0         PUSH    A
   \   00006D   90....       MOV     DPTR,#pRxBuf
   \   000070   E0           MOVX    A,@DPTR
   \   000071   242E         ADD     A,#0x2e
   \   000073   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000076   D0E0         POP     A
   \   000078   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   1131              pRxBuf->mac.rssi = rssiDbm;
   \                     ??CrossCallReturnLabel_80:
   \   00007B   2430         ADD     A,#0x30
   \   00007D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000080   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   1132              pRxBuf->mac.correlation = corr;
   \                     ??CrossCallReturnLabel_81:
   \   000083   242F         ADD     A,#0x2f
   \   000085   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000088   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   1133          
   1134              /* set the MSDU pointer to point at start of data */
   1135              pRxBuf->mhr.p   = (uint8 *) (pRxBuf + 1);
   \                     ??CrossCallReturnLabel_82:
   \   00008B   2435         ADD     A,#0x35
   \   00008D   FA           MOV     R2,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   3400         ADDC    A,#0x0
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000096   12....       LCALL   ?Subroutine4 & 0xFFFF
   1136              pRxBuf->msdu.p += (pRxBuf->mhr.len - pRxBuf->msdu.len);
   \                     ??CrossCallReturnLabel_76:
   \   000099   2402         ADD     A,#0x2
   \   00009B   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00009E   90....       MOV     DPTR,#pRxBuf
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FC           MOV     R4,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F583         MOV     DPH,A
   \   0000A7   8C82         MOV     DPL,R4
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   FC           MOV     R4,A
   \   0000AF   EA           MOV     A,R2
   \   0000B0   C3           CLR     C
   \   0000B1   9C           SUBB    A,R4
   \   0000B2   FA           MOV     R2,A
   \   0000B3   95E0         SUBB    A,0xE0 /* A   */
   \   0000B5   FB           MOV     R3,A
   \   0000B6   8882         MOV     DPL,R0
   \   0000B8   8983         MOV     DPH,R1
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   2A           ADD     A,R2
   \   0000BC   FA           MOV     R2,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   3B           ADDC    A,R3
   \   0000C0   FB           MOV     R3,A
   \   0000C1   12....       LCALL   ?Subroutine4 & 0xFFFF
   1137          
   1138              /* finally... execute callback function */
   1139              macRxCompleteCallback(pRxBuf);
   \                     ??CrossCallReturnLabel_77:
   \   0000C4   FA           MOV     R2,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   FB           MOV     R3,A
   \   0000C8   12....       LCALL   ??macRxCompleteCallback?relay
   1140              pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \   0000CB   800A         SJMP    ??rxFcsIsr_3
   1141            }
   1142            else
   1143            {
   1144          #ifdef PACKET_FILTER_STATS
   1145              rxCrcFailure++;
   1146          #endif /* PACKET_FILTER_STATS */
   1147          
   1148              /*
   1149               *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
   1150               *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
   1151               *  slightly more efficient to do so.)
   1152               */
   1153              MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \                     ??rxFcsIsr_1:
   \   0000CD   12....       LCALL   ?Subroutine8 & 0xFFFF
   1154              macRxOutgoingAckFlag = 0;
   1155          
   1156              /* the CRC failed so the packet must be discarded */
   1157              MEM_FREE((uint8 **)&pRxBuf);
   \                     ??CrossCallReturnLabel_53:
   \   0000D0                ; Setup parameters for call to function macDataRxMemFree
   \   0000D0   7A..         MOV     R2,#pRxBuf & 0xff
   \   0000D2   7B..         MOV     R3,#(pRxBuf >> 8) & 0xff
   \   0000D4   12....       LCALL   ??macDataRxMemFree?relay
   1158              pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
   \                     ??rxFcsIsr_3:
   \   0000D7   90....       MOV     DPTR,#pRxBuf
   \   0000DA   E4           CLR     A
   \   0000DB   F0           MOVX    @DPTR,A
   \   0000DC   A3           INC     DPTR
   \   0000DD   F0           MOVX    @DPTR,A
   1159            }
   1160          
   1161            /* reset threshold level, reset receive state, and complete receive logic */
   1162            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   0000DE   12....       LCALL   ?Subroutine2 & 0xFFFF
   1163            pFuncRxState = &rxStartIsr;
   1164            rxDone();
   1165          }
   \                     ??CrossCallReturnLabel_0:
   \   0000E1   7F02         MOV     R7,#0x2
   \   0000E3   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine39_0
   \   000004                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   906194       MOV     DPTR,#0x6194
   \   000003   7405         MOV     A,#0x5
   \   000005   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000008   F0           MOVX    @DPTR,A
   \   000009                ; Setup parameters for call to function rxDone
   \   000009                ; Setup parameters for call to function rxDone
   \   000009   12....       LCALL   ??rxDone?relay
   \   00000C   22           RET
   1166          
   1167          
   1168          /*=================================================================================================
   1169           * @fn          rxDone
   1170           *
   1171           * @brief       Common exit point for receive.
   1172           *
   1173           * @param       none
   1174           *
   1175           * @return      none
   1176           *=================================================================================================
   1177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1178          static void rxDone(void)
   \                     rxDone:
   1179          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1180            /* Make sure the peak RSSI is reset */
   1181            COMPRESSION_WORKAROUND_RESET_RSSI();
   1182            
   1183            /* if the receive FIFO has overflowed, flush it here */
   1184            if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
   \   000004   906193       MOV     DPTR,#0x6193
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000A   500B         JNC     ??rxDone_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000F   4006         JC      ??rxDone_0
   1185            {
   1186              MAC_RADIO_FLUSH_RX_FIFO();
   \   000011   75E1ED       MOV     0xe1,#-0x13
   \   000014   75E1ED       MOV     0xe1,#-0x13
   1187            }
   1188          
   1189            /* mark receive as inactive */
   1190            macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxDone_0:
   \   000017   90....       MOV     DPTR,#macRxActive
   \   00001A   E4           CLR     A
   \   00001B   F0           MOVX    @DPTR,A
   1191          
   1192            /* if there is no outgoing ACK, run the post receive updates */
   1193            if (!macRxOutgoingAckFlag)
   \   00001C   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   7003         JNZ     ??rxDone_1
   1194            {
   1195              rxPostRxUpdates();
   \   000022                ; Setup parameters for call to function rxPostRxUpdates
   \   000022   12....       LCALL   ??rxPostRxUpdates?relay
   1196            }
   1197          }
   \                     ??rxDone_1:
   \   000025   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   \   000028                REQUIRE RFST
   1198          
   1199          
   1200          /**************************************************************************************************
   1201           * @fn          macRxAckTxDoneCallback
   1202           *
   1203           * @brief       Function called when the outoing ACK has completed transmitting.
   1204           *
   1205           * @param       none
   1206           *
   1207           * @return      none
   1208           **************************************************************************************************
   1209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1210          void macRxAckTxDoneCallback(void)
   \                     macRxAckTxDoneCallback:
   1211          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1212            macRxOutgoingAckFlag = 0;
   \   000004   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   1213          
   1214            /*
   1215             *  With certain interrupt priorities and timing conditions, it is possible this callback
   1216             *  could be executed before the primary receive logic completes.  To prevent this, the
   1217             *  post updates are only executed if receive logic is no longer active.  In the case the
   1218             *  post updates are not executed here, they will execute when the main receive logic
   1219             *  completes.
   1220             */
   1221            if (!macRxActive)
   \   000009   90....       MOV     DPTR,#macRxActive
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   7003         JNZ     ??macRxAckTxDoneCallback_0
   1222            {
   1223              rxPostRxUpdates();
   \   00000F                ; Setup parameters for call to function rxPostRxUpdates
   \   00000F   12....       LCALL   ??rxPostRxUpdates?relay
   1224            }
   1225          }
   \                     ??macRxAckTxDoneCallback_0:
   \   000012   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1226          
   1227          
   1228          /*=================================================================================================
   1229           * @fn          rxPostRxUpdates
   1230           *
   1231           * @brief       Updates that need to be performed once receive is complete.
   1232           *
   1233           *              It is not fatal to execute this function if somehow receive is active.  Under
   1234           *              certain timing/interrupt conditions a new receive may have started before this
   1235           *              function executes.  This should happen very rarely (if it happens at all) and
   1236           *              would cause no problems.
   1237           *
   1238           * @param       none
   1239           *
   1240           * @return      none
   1241           *=================================================================================================
   1242           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1243          static void rxPostRxUpdates(void)
   \                     rxPostRxUpdates:
   1244          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1245            /* turn off receiver if permitted */
   1246            macRxOffRequest();
   \   000004                ; Setup parameters for call to function macRxOffRequest
   \   000004   12....       LCALL   ??macRxOffRequest?relay
   1247          
   1248            /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
   1249            macRadioUpdateTxPower();
   \   000007                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000007   12....       LCALL   ??macRadioUpdateTxPower?relay
   1250          
   1251            /* initiate and transmit that was queued during receive */
   1252            macTxStartQueuedFrame();
   \   00000A                ; Setup parameters for call to function macTxStartQueuedFrame
   \   00000A   12....       LCALL   ??macTxStartQueuedFrame?relay
   1253          }
   \   00000D   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1254          
   1255          
   1256          /*=================================================================================================
   1257           * @fn          rxDiscardFrame
   1258           *
   1259           * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
   1260           *
   1261           * @param       none
   1262           *
   1263           * @return      none
   1264           *=================================================================================================
   1265           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1266          static void rxDiscardFrame(void)
   \                     rxDiscardFrame:
   1267          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1268            MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
   \   000004   90....       MOV     DPTR,#pFuncRxState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64..         XRL     A,#??rxStartIsr?relay & 0xff
   \   00000A   7004         JNZ     ??rxDiscardFrame_0
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   64..         XRL     A,#(??rxStartIsr?relay >> 8) & 0xff
   \                     ??rxDiscardFrame_0:
   \   000010   6003         JZ      ??rxDiscardFrame_1
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL   ??halAssertHandler?relay
   1269          
   1270            if (rxUnreadLen == 0)
   \                     ??rxDiscardFrame_1:
   \   000015   90....       MOV     DPTR,#rxUnreadLen
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7005         JNZ     ??rxDiscardFrame_2
   1271            {
   1272              rxDone();
   \   00001B                ; Setup parameters for call to function rxDone
   \   00001B   12....       LCALL   ??rxDone?relay
   \   00001E   8021         SJMP    ??rxDiscardFrame_3
   1273            }
   1274            else
   1275            {
   1276              rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxDiscardFrame_2:
   \   000020   C3           CLR     C
   \   000021   9410         SUBB    A,#0x10
   \   000023   5006         JNC     ??rxDiscardFrame_4
   \   000025   E0           MOVX    A,@DPTR
   \   000026   90....       MOV     DPTR,#rxNextLen
   \   000029   8005         SJMP    ??rxDiscardFrame_5
   \                     ??rxDiscardFrame_4:
   \   00002B   90....       MOV     DPTR,#rxNextLen
   \   00002E   7410         MOV     A,#0x10
   \                     ??rxDiscardFrame_5:
   \   000030   F0           MOVX    @DPTR,A
   1277              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000031   E0           MOVX    A,@DPTR
   \   000032   14           DEC     A
   \   000033   906194       MOV     DPTR,#0x6194
   \   000036   F0           MOVX    @DPTR,A
   1278              pFuncRxState = &rxDiscardIsr;
   \   000037   90....       MOV     DPTR,#pFuncRxState
   \   00003A   74..         MOV     A,#??rxDiscardIsr?relay & 0xff
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   74..         MOV     A,#(??rxDiscardIsr?relay >> 8) & 0xff
   \   000040   F0           MOVX    @DPTR,A
   1279            }
   1280          }
   \                     ??rxDiscardFrame_3:
   \   000041   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1281          
   1282          
   1283          /*=================================================================================================
   1284           * @fn          rxDiscardIsr
   1285           *
   1286           * @brief       Receive ISR state for discarding a packet.
   1287           *
   1288           * @param       none
   1289           *
   1290           * @return      none
   1291           *=================================================================================================
   1292           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1293          static void rxDiscardIsr(void)
   \                     rxDiscardIsr:
   1294          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 16
   \   000004   74F0         MOV     A,#-0x10
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1295            uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
   1296          
   1297            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \   000009                ; Setup parameters for call to function macMemReadRxFifo
   \   000009   12....       LCALL   ?Subroutine12 & 0xFFFF
   1298            rxUnreadLen -= rxNextLen;
   \                     ??CrossCallReturnLabel_17:
   \   00000C   90....       MOV     DPTR,#rxNextLen
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   90....       MOV     DPTR,#rxUnreadLen
   \   000014   E0           MOVX    A,@DPTR
   \   000015   C3           CLR     C
   \   000016   98           SUBB    A,R0
   \   000017   F0           MOVX    @DPTR,A
   1299          
   1300            /* read out and discard bytes until all bytes of packet are disposed of */
   1301            if (rxUnreadLen != 0)
   \   000018   6011         JZ      ??rxDiscardIsr_0
   1302            {
   1303              if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
   \   00001A   C3           CLR     C
   \   00001B   9410         SUBB    A,#0x10
   \   00001D   500F         JNC     ??CrossCallReturnLabel_1
   1304              {
   1305                rxNextLen = rxUnreadLen;
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   90....       MOV     DPTR,#rxNextLen
   \   000023   F0           MOVX    @DPTR,A
   1306                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000024   14           DEC     A
   \   000025   906194       MOV     DPTR,#0x6194
   \   000028   F0           MOVX    @DPTR,A
   \   000029   8003         SJMP    ??CrossCallReturnLabel_1
   1307              }
   1308            }
   1309            else
   1310            {
   1311              /* reset threshold level, reset receive state, and complete receive logic */
   1312              MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxDiscardIsr_0:
   \   00002B   12....       LCALL   ?Subroutine2 & 0xFFFF
   1313              pFuncRxState = &rxStartIsr;
   1314              rxDone();
   1315            }
   1316          }
   \                     ??CrossCallReturnLabel_1:
   \   00002E   7410         MOV     A,#0x10
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1317          
   1318          
   1319          /**************************************************************************************************
   1320           * @fn          macRxFifoOverflowIsr
   1321           *
   1322           * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
   1323           *              exception does not retrieve the good frames that are trapped in the RX FIFO.
   1324           *              It simply halts and cleanup the RX.
   1325           *
   1326           * @param       none
   1327           *
   1328           * @return      none
   1329           **************************************************************************************************
   1330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1331          MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
   \                     macRxFifoOverflowIsr:
   1332          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1333            rxFifoOverflowCount++; /* This flag is used for debug purpose only */
   \   000004   90....       MOV     DPTR,#rxFifoOverflowCount
   \   000007   E0           MOVX    A,@DPTR
   \   000008   04           INC     A
   \   000009   F0           MOVX    @DPTR,A
   1334            macRxHaltCleanup();
   \   00000A                ; Setup parameters for call to function macRxHaltCleanup
   \   00000A   12....       LCALL   ??macRxHaltCleanup?relay
   1335          }
   \   00000D   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1336          
   1337          
   1338          /**************************************************************************************************
   1339           * @fn          macRxPromiscuousMode
   1340           *
   1341           * @brief       Sets promiscuous mode - enabling or disabling it.
   1342           *
   1343           * @param       none
   1344           *
   1345           * @return      none
   1346           **************************************************************************************************
   1347           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1348          MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
   \                     macRxPromiscuousMode:
   1349          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1350            rxPromiscuousMode = mode;
   \   000007   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000A   F0           MOVX    @DPTR,A
   1351          
   1352            if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
   \   00000B   700A         JNZ     ??macRxPromiscuousMode_0
   1353            {
   1354              MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \   00000D   906180       MOV     DPTR,#0x6180
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   4405         ORL     A,#0x5
   \   000015   8013         SJMP    ??macRxPromiscuousMode_1
   1355            }
   1356            else
   1357            {
   1358              MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
   1359                         (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
   \                     ??macRxPromiscuousMode_0:
   \   000017   7402         MOV     A,#0x2
   \   000019   6E           XRL     A,R6
   \   00001A   6008         JZ      ??macRxPromiscuousMode_2
   \   00001C   7401         MOV     A,#0x1
   \   00001E   6E           XRL     A,R6
   \   00001F   6003         JZ      ??macRxPromiscuousMode_2
   \   000021                ; Setup parameters for call to function halAssertHandler
   \   000021   12....       LCALL   ??halAssertHandler?relay
   1360          
   1361              MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
   \                     ??macRxPromiscuousMode_2:
   \   000024   906180       MOV     DPTR,#0x6180
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C2E0         CLR     0xE0 /* A   */.0
   \                     ??macRxPromiscuousMode_1:
   \   00002A   F0           MOVX    @DPTR,A
   1362            }
   1363          }
   \   00002B   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxRadioPowerUpInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxRadioPowerUpInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxTxReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxTxReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxHaltCleanup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxHaltCleanup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxHaltCleanupFinalStep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxHaltCleanupFinalStep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxThresholdIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxThresholdIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxStartIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxStartIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxAddrIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxAddrIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxPrepPayload?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPrepPayload

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxPayloadIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPayloadIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxFcsIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxFcsIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxDone?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDone

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxAckTxDoneCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxAckTxDoneCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxPostRxUpdates?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPostRxUpdates

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxDiscardFrame?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxDiscardIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxFifoOverflowIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxFifoOverflowIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxPromiscuousMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxPromiscuousMode
   1364          
   1365          #ifdef CC2591_COMPRESSION_WORKAROUND
   1366          /**************************************************************************************************
   1367           * @fn          macRxResetRssi
   1368           *
   1369           * @brief       This function reset RSSI peak if the device is not actively in TX or RX.
   1370           *
   1371           * @param       none
   1372           *
   1373           * @return      none
   1374           **************************************************************************************************
   1375           */
   1376          void macRxResetRssi(void)
   1377          {
   1378            if ( !(macRxActive || macRxOutgoingAckFlag || macTxActive) )
   1379            {
   1380              COMPRESSION_WORKAROUND_RESET_RSSI();
   1381            }
   1382          }
   1383          #endif /* CC2591_COMPRESSION_WORKAROUND */
   1384          
   1385          /**************************************************************************************************
   1386           *                                  Compile Time Integrity Checks
   1387           **************************************************************************************************
   1388           */
   1389          
   1390          /* check for changes to the spec that would affect the source code */
   1391          #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \
   1392               (MAC_FCF_FIELD_LEN           !=  2    )   ||  \
   1393               (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \
   1394               (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \
   1395               (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \
   1396               (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \
   1397               (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \
   1398               (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \
   1399               (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
   1400          #error "ERROR!  Change to the spec that requires modification of source code."
   1401          #endif
   1402          
   1403          /* check for changes to the internal flags format */
   1404          #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \
   1405               (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \
   1406               (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \
   1407               (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \
   1408               (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \
   1409               (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
   1410          #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
   1411          #endif
   1412          
   1413          /* validate CRC OK bit optimization */
   1414          #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
   1415          #error "ERROR!  Optimization relies on these bits having the same position."
   1416          #endif
   1417          
   1418          #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
   1419          #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
   1420          #endif
   1421          
   1422          #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
   1423          #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
   1424          #endif
   1425          
   1426          
   1427          /**************************************************************************************************
   1428          */

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     macRxAckTxDoneCallback             2      0      0
       -> rxPostRxUpdates               4      0      0
     macRxFifoOverflowIsr               2      0      0
       -> macRxHaltCleanup              4      0      0
     macRxHaltCleanup                   2      0      0
       -> rxHaltCleanupFinalStep        4      0      0
     macRxInit                          2      0      0
     macRxPromiscuousMode               0      0      9
       -> halAssertHandler              0      0     18
     macRxRadioPowerUpInit              2      0      0
     macRxThresholdIsr                  2      0      0
       -> rxHaltCleanupFinalStep        4      0      0
     macRxTxReset                       2      0      0
       -> macRxHardDisable              4      0      0
       -> macRxPromiscuousMode          4      0      0
     rxAddrIsr                          0      0     29
       -> halAssertHandler              0      0     58
       -> macMemReadRxFifo              0      0     58
       -> sAddrExtCpy                   0      0     58
       -> sAddrExtCpy                   0      0     58
       -> rxPrepPayload                 0      0     58
     rxDiscardFrame                     2      0     15
       -> halAssertHandler              4      0      0
       -> rxDone                        4      0      0
     rxDiscardIsr                       2      0     16
       -> macMemReadRxFifo              4      0     32
       -> rxDone                        4      0     32
     rxDone                             2      0     16
       -> rxPostRxUpdates               4      0      0
     rxFcsIsr                           1      0     10
       -> macMemReadRxFifo              0      0     20
       -> macRxOffRequest               0      0     20
       -> MAC_SrcMatchCheckResult       0      0     20
       -> macRadioComputeLQI            0      0     20
       -> macRxCompleteCallback         0      0     20
       -> macDataRxMemFree              0      0     20
       -> rxDone                        0      0     20
     rxHaltCleanupFinalStep             2      0      0
       -> macDataRxMemFree              4      0      0
       -> rxPostRxUpdates               4      0      0
     rxPayloadIsr                       2      0      0
       -> macMemReadRxFifo              4      0      0
       -> rxPrepPayload                 4      0      0
     rxPostRxUpdates                    2      0     15
       -> macRxOffRequest               4      0      0
       -> macRadioUpdateTxPower         4      0      0
       -> macTxStartQueuedFrame         4      0      0
     rxPrepPayload                      2      0     29
     rxStartIsr                         1      0     18
       -> halAssertHandler              0      0     30
       -> rxPostRxUpdates               0      0     30
       -> macCspForceTxDoneIfPending
                                        0      0     30
       -> macMemReadRxFifo              0      0     30
       -> rxDone                        0      0     30
       -> halAssertHandler              0      0     30
       -> macMemReadRxFifo              0      0     30
       -> halAssertHandler              0      0     30
       -> macRadioComputeLQI            0      0     30
       -> macTxAckReceivedCallback      0      0     30
       -> macTxAckNotReceivedCallback
                                        0      0     30
       -> rxDone                        0      0     30
       -> macTxAckNotReceivedCallback
                                        0      0     30
       -> macDataRxMemAlloc             0      0     30
       -> rxDiscardFrame                0      0     30
       -> macRxCheckMACPendingCallback
                                        0      0     30
       -> MAC_SrcMatchCheckAllPending
                                        0      0     30
       -> macRxCheckPendingCallback     0      0     30
       -> osal_memcpy                   0      0     36
       -> macMcuOverflowCapture         0      0     30
       -> macMcuTimerCapture            0      0     30
       -> rxPrepPayload                 0      0     30


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     RFIRQF1                           1
     S1CON                             1
     _A_IEN0                           1
     RFST                              1
     RFIRQF0                           1
     macRxActive                       1
     macRxFilter                       1
     macRxOutgoingAckFlag              1
     macRxAddrLen                      4
     pFuncRxState                      2
     pRxBuf                            2
     rxBuf                             4
     rxUnreadLen                       1
     rxNextLen                         1
     rxPayloadLen                      1
     rxFilter                          1
     rxPromiscuousMode                 1
     rxIsrActiveFlag                   1
     rxResetFlag                       1
     rxFifoOverflowCount               1
     macRxInit                        42
     ??Subroutine33_0                  7
     ?Subroutine0                      1
     ??Subroutine38_0                  7
     ?Subroutine24                    11
     macRxRadioPowerUpInit            28
     ?Subroutine9                      9
     macRxTxReset                     19
     macRxHaltCleanup                 22
     ?Subroutine23                     9
     rxHaltCleanupFinalStep           93
     macRxThresholdIsr                42
     ?Subroutine28                     4
     ?Subroutine31                     9
     rxStartIsr                      958
     ?Subroutine22                    15
     ?Subroutine14                     4
     ?Subroutine26                    11
     ?Subroutine10                    10
     ?Subroutine25                     1
     ??Subroutine32_0                 10
     ?Subroutine8                      6
     ?Subroutine6                      8
     ??Subroutine34_0                  6
     ??Subroutine35_0                  5
     ??Subroutine36_0                  5
     ?Subroutine3                     10
     ?Subroutine18                     1
     ??Subroutine37_0                  4
     ?Subroutine13                     6
     ?Subroutine7                     14
     ?Subroutine21                    13
     ?Subroutine17                     5
     ?Subroutine16                     5
     ?Subroutine11                     9
     ?Subroutine30                    11
     ?Subroutine27                    13
     ??Subroutine39_0                  4
     ??Subroutine40_0                  6
     ?Subroutine5                      6
     rxAddrIsr                       237
     ?Subroutine1                      5
     ?Subroutine20                    10
     ?Subroutine15                     8
     ?Subroutine29                     9
     ?Subroutine12                    19
     rxPrepPayload                    51
     rxPayloadIsr                     55
     ?Subroutine19                    13
     rxFcsIsr                        230
     ?Subroutine4                      4
     ?Subroutine2                     13
     rxDone                           40
     macRxAckTxDoneCallback           21
     rxPostRxUpdates                  16
     rxDiscardFrame                   68
     rxDiscardIsr                     54
     macRxFifoOverflowIsr             16
     macRxPromiscuousMode             46
     ??macRxInit?relay                 6
     ??macRxRadioPowerUpInit?relay     6
     ??macRxTxReset?relay              6
     ??macRxHaltCleanup?relay          6
     ??rxHaltCleanupFinalStep?relay    6
     ??macRxThresholdIsr?relay         6
     ??rxStartIsr?relay                6
     ??rxAddrIsr?relay                 6
     ??rxPrepPayload?relay             6
     ??rxPayloadIsr?relay              6
     ??rxFcsIsr?relay                  6
     ??rxDone?relay                    6
     ??macRxAckTxDoneCallback?relay    6
     ??rxPostRxUpdates?relay           6
     ??rxDiscardFrame?relay            6
     ??rxDiscardIsr?relay              6
     ??macRxFifoOverflowIsr?relay      6
     ??macRxPromiscuousMode?relay      6

 
 2 364 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     4 bytes in segment CODE_C
     5 bytes in segment SFR_AN
    19 bytes in segment XDATA_Z
 
 2 476 bytes of CODE  memory
     0 bytes of DATA  memory (+ 5 bytes shared)
    19 bytes of XDATA memory

Errors: none
Warnings: none
