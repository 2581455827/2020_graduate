///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        26/Dec/2019  19:27:25 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Components\mt\MT_DEBUG.c                  /
//    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤ /
//                          ‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg         /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤ /
//                          ‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg        /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\202 /
//                          0±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\”≤º˛≤ø∑÷\Components\mt\MT_D /
//                          EBUG.c -D ZAPP_P1 -D MT_TASK -D MT_SYS_FUNC -D    /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\CoordinatorEB\List\ -lA                         /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\CoordinatorEB\List\ --diag_suppress             /
//                          Pe001,Pa010 -o C:\Users\25814\Desktop\2020±œ…Ë\¿Ó /
//                          ‘¥Ω‹_π˚‘∞º‡≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2530DB\CoordinatorEB\Obj\ -e            /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\ -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞ /
//                          º‡≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\C /
//                          C2530DB\..\Source\ -I C:\Users\25814\Desktop\2020 /
//                          ±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\”≤º˛≤ø∑÷\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\  /
//                          -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤ /
//                          ‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\hal\include\ -I    /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\hal\target\CC2530EB\  /
//                          -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤ /
//                          ‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\mac\include\ -I    /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\mac\high_level\ -I    /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\mac\low_level\srf04\  /
//                          -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤ /
//                          ‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\mac\low_level\srf0 /
//                          4\single_chip\ -I C:\Users\25814\Desktop\2020±œ…Ë /
//                          \¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mt\ /
//                           -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡ /
//                          ≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\osal\include\ -I  /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\services\saddr\ -I    /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\services\sdata\ -I    /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\af\ -I          /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\nwk\ -I         /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sapi\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sec\ -I         /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sys\ -I         /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\zdo\ -I         /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\zmac\ -I              /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\zmac\f8w\ -Ohz        /
//    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\” /
//                          ≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\CoordinatorEB\List\MT_DEBUG.s51                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_DEBUG

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??MT_ProcessDebugMsg?relay
        FUNCTION ??MT_ProcessDebugMsg?relay,0203H
        PUBLIC ??MT_ProcessDebugStr?relay
        FUNCTION ??MT_ProcessDebugStr?relay,0203H
        PUBLIC MT_ProcessDebugMsg
        FUNCTION MT_ProcessDebugMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC MT_ProcessDebugStr
        FUNCTION MT_ProcessDebugStr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_msg_allocate   SYMBOL "osal_msg_allocate"
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_mem_free       SYMBOL "osal_mem_free"
??MT_BuildAndSendZToolResponse?relay SYMBOL "?relay", MT_BuildAndSendZToolResponse
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
MT_ProcessDebugMsg  SYMBOL "MT_ProcessDebugMsg"
??MT_ProcessDebugMsg?relay SYMBOL "?relay", MT_ProcessDebugMsg
MT_ProcessDebugStr  SYMBOL "MT_ProcessDebugStr"
??MT_ProcessDebugStr?relay SYMBOL "?relay", MT_ProcessDebugStr

        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??MT_BuildAndSendZToolResponse?relay
        FUNCTION ??MT_BuildAndSendZToolResponse?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H

// C:\Users\25814\Desktop\2020±œ…Ë\¿Ó‘¥Ω‹_π˚‘∞º‡≤‚\”≤º˛≤ø∑÷\Components\mt\MT_DEBUG.c
//    1 /***************************************************************************************************
//    2   Filename:       MT.c
//    3   Revised:        $Date: 2011-06-07 14:34:55 -0700 (Tue, 07 Jun 2011) $
//    4   Revision:       $Revision: 26241 $
//    5 
//    6   Description:
//    7 
//    8   Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License").  You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product.  Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 
//   44 #include "ZComDef.h"
//   45 #include "MT.h"
//   46 #include "MT_DEBUG.h"
//   47 #include "MT_UART.h"
//   48 #include "mac_main.h"
//   49 #include "mac_data.h"
//   50 #include "mac_rx.h"
//   51 #include "mac_tx.h"
//   52 #include "nwk_globals.h"
//   53 
//   54 /***************************************************************************************************
//   55  * LOCAL FUNCTIONs
//   56  ***************************************************************************************************/
//   57 
//   58 #if defined (MT_DEBUG_FUNC)
//   59 static void MT_DebugSetThreshold(uint8 *pBuf);
//   60 static void MT_DebugMacDataDump(void);
//   61 #endif
//   62 
//   63 #if defined (MT_DEBUG_FUNC)
//   64 /***************************************************************************************************
//   65  * @fn      MT_DebugProcessing
//   66  *
//   67  * @brief   Process all the DEBUG commands that are issued by test tool
//   68  *
//   69  * @param   pBuf - pointer to received buffer
//   70  *
//   71  * @return  status
//   72  ***************************************************************************************************/
//   73 uint8 MT_DebugCommandProcessing(uint8 *pBuf)
//   74 {
//   75   uint8 status = MT_RPC_SUCCESS;
//   76 
//   77   switch (pBuf[MT_RPC_POS_CMD1])
//   78   {
//   79     case MT_DEBUG_SET_THRESHOLD:
//   80       MT_DebugSetThreshold(pBuf);
//   81       break;
//   82 
//   83   case MT_DEBUG_MAC_DATA_DUMP:
//   84       MT_DebugMacDataDump();
//   85       break;
//   86 
//   87     default:
//   88       status = MT_RPC_ERR_COMMAND_ID;
//   89       break;
//   90   }
//   91 
//   92   return status;
//   93 }
//   94 
//   95 /***************************************************************************************************
//   96  * @fn      MT_DebugSetThreshold
//   97  *
//   98  * @brief   Process Debug Set Threshold
//   99  *
//  100  * @param   pBuf - pointer to received buffer
//  101  *
//  102  * @return  void
//  103  ***************************************************************************************************/
//  104 static void MT_DebugSetThreshold(uint8 *pBuf)
//  105 {
//  106   uint8 retValue = ZSuccess;
//  107   uint8 cmdId;
//  108 
//  109   /* parse header */
//  110   cmdId = pBuf[MT_RPC_POS_CMD1];
//  111   pBuf += MT_RPC_FRAME_HDR_SZ;
//  112 
//  113   /* Populate info */
//  114   debugCompId = *pBuf++;
//  115   debugThreshold = *pBuf++;
//  116 
//  117   /* Build and send back the response */
//  118   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG), cmdId, 1, &retValue);
//  119 }
//  120 
//  121 /***************************************************************************************************
//  122  * @fn      MT_DebugMacDataDump
//  123  *
//  124  * @brief   Process the debug MAC Data Dump request.
//  125  *
//  126  * @param   pBuf - pointer to received buffer
//  127  *
//  128  * @return  void
//  129  ***************************************************************************************************/
//  130 static void MT_DebugMacDataDump(void)
//  131 {
//  132   uint8 buf[sizeof(mtDebugMacDataDump_t)];
//  133   uint8 *pBuf = buf;
//  134 
//  135 #ifdef PACKET_FILTER_STATS
//  136   *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 0);
//  137   *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 1);
//  138   *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 2);
//  139   *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 3);
//  140   *pBuf++ = BREAK_UINT32(rxCrcFailure, 0);
//  141   *pBuf++ = BREAK_UINT32(rxCrcFailure, 1);
//  142   *pBuf++ = BREAK_UINT32(rxCrcFailure, 2);
//  143   *pBuf++ = BREAK_UINT32(rxCrcFailure, 3);
//  144   *pBuf++ = BREAK_UINT32(rxCrcSuccess, 0);
//  145   *pBuf++ = BREAK_UINT32(rxCrcSuccess, 1);
//  146   *pBuf++ = BREAK_UINT32(rxCrcSuccess, 2);
//  147   *pBuf++ = BREAK_UINT32(rxCrcSuccess, 3);
//  148 #endif
//  149 #if defined HAL_MCU_CC2530
//  150   *pBuf++ = FSMSTAT0;
//  151   *pBuf++ = FSMSTAT1;
//  152 #else
//  153   *pBuf++ = macSpiReadReg(FSMSTAT0);
//  154   *pBuf++ = macSpiReadReg(FSMSTAT1);
//  155 #endif
//  156   *pBuf++ = macData.rxCount;
//  157   *pBuf++ = macData.directCount;
//  158   *pBuf++ = macMain.state;
//  159   *pBuf++ = macRxActive;
//  160   *pBuf   = macTxActive;
//  161 
//  162   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG),
//  163                                        MT_DEBUG_MAC_DATA_DUMP, sizeof(buf), buf);
//  164 }
//  165 #endif
//  166 
//  167 /***************************************************************************************************
//  168  * @fn      MT_ProcessDebugMsg
//  169  *
//  170  * @brief   Build and send a debug message.
//  171  *
//  172  * @param   byte *data - pointer to the data portion of the debug message
//  173  *
//  174  * @return  void
//  175  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  176 void MT_ProcessDebugMsg( mtDebugMsg_t *msg )
MT_ProcessDebugMsg:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MT_ProcessDebugMsg
        CODE
//  177 {
        FUNCALL MT_ProcessDebugMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessDebugMsg, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessDebugMsg, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  178   byte *msg_ptr;
//  179   byte dataLen;
//  180   uint8 buf[11];
//  181   uint8 *pBuf;
//  182 
//  183   /* Calculate the data length based */
//  184   dataLen = 5 + (msg->numParams * sizeof ( uint16 ));
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        ADD     A,#0x5
        MOV     R6,A
//  185 
//  186   /* Get a message buffer to build the debug message */
//  187   msg_ptr = osal_msg_allocate( (byte)(SPI_0DATA_MSG_LEN + dataLen + 1) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,#0x6
        ADD     A,R6
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  188   if ( msg_ptr )
        MOV     A,R2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??MT_ProcessDebugMsg_0 & 0xFFFF
//  189   {
//  190     /* Build the message */
//  191     pBuf = buf;
//  192     *pBuf++ = msg->compID;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  193     *pBuf++ = msg->severity;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  194     *pBuf++ = msg->numParams;
        MOV     A,?V0 + 0
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
//  195 
//  196     if ( msg->numParams >= 1 )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??MT_ProcessDebugMsg_1
//  197     {
//  198       *pBuf++ = LO_UINT16( msg->param1 );
        MOV     A,?V0 + 0
        ADD     A,#0x5
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  199       *pBuf++ = HI_UINT16( msg->param1 );
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
//  200     }
//  201 
//  202     if ( msg->numParams >= 2 )
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x2
        JC      ??MT_ProcessDebugMsg_2
//  203     {
//  204       *pBuf++ = LO_UINT16( msg->param2 );
        MOV     A,?V0 + 0
        ADD     A,#0x7
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  205       *pBuf++ = HI_UINT16( msg->param2 );
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
//  206     }
//  207 
//  208     if ( msg->numParams == 3 )
??MT_ProcessDebugMsg_2:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??MT_ProcessDebugMsg_1
//  209     {
//  210       *pBuf++ = LO_UINT16( msg->param3 );
        MOV     A,?V0 + 0
        ADD     A,#0x9
        LCALL   ?Subroutine0 & 0xFFFF
//  211       *pBuf++ = HI_UINT16( msg->param3 );
//  212     }
??CrossCallReturnLabel_0:
        INC     DPTR
        INC     R0
        MOV     R1,DPH
//  213 
//  214     *pBuf++ = LO_UINT16( msg->timestamp );
??MT_ProcessDebugMsg_1:
        MOV     A,?V0 + 0
        ADD     A,#0xb
        LCALL   ?Subroutine0 & 0xFFFF
//  215     *pBuf++ = HI_UINT16( msg->timestamp );
//  216 
//  217 #ifdef MT_UART_DEFAULT_PORT
//  218     /* Debug message is set to AREQ CMD 0x80 for now */
//  219     /* Build and send back the response */
//  220     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), 0x80, dataLen, buf);
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R3,A
        MOV     R2,#-0x80
        MOV     R1,#0x48
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  221 #endif
//  222     osal_msg_deallocate( msg_ptr );
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_msg_deallocate?relay
//  223   }
//  224 }
??MT_ProcessDebugMsg_0:
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
//  225 
//  226 /***************************************************************************************************
//  227  * @fn      MT_ProcessDebugStr
//  228  *
//  229  * @brief   Build and send a debug string.
//  230  *
//  231  * @param   byte *dstr - pointer to the data portion of the debug message
//  232  *
//  233  * @return  void
//  234  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  235 void MT_ProcessDebugStr(mtDebugStr_t *dstr)
MT_ProcessDebugStr:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function MT_ProcessDebugStr
        CODE
//  236 {
        FUNCALL MT_ProcessDebugStr, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessDebugStr, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessDebugStr, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  237   byte *msg_ptr;
//  238 
//  239   /* Get a message buffer to build the debug message */
//  240   msg_ptr = osal_mem_alloc( (byte)(SPI_0DATA_MSG_LEN + dstr->strLen) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x5
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  241   if ( msg_ptr )
        MOV     A,R6
        ORL     A,R7
        JZ      ??MT_ProcessDebugStr_0
//  242   {
//  243 #ifdef MT_UART_DEFAULT_PORT
//  244     /* Debug message is set to AREQ CMD 0x80 for now */
//  245     /* Build and send back the response */
//  246     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), MT_DEBUG_MSG, dstr->strLen, dstr->pString);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R2,#-0x80
        MOV     R1,#0x48
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  247 #endif
//  248     osal_mem_free( msg_ptr );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  249   }
//  250 }
??MT_ProcessDebugStr_0:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ProcessDebugMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ProcessDebugMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ProcessDebugStr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ProcessDebugStr

        END
//  251 
//  252 /**************************************************************************************************
//  253  */
// 
// 423 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
// 
// 435 bytes of CODE memory
//
//Errors: none
//Warnings: none
