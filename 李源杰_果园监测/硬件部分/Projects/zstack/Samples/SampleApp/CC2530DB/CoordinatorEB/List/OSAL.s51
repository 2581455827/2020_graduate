///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        03/Dec/2019  17:11:02 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Components\osal\common\OSAL.c                 /
//    Command line       =  -f C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó² /
//                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wCoord.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó² /
//                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg            /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\202 /
//                          0±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿·Ö\Components\osal\common /
//                          \OSAL.c -D ZAPP_P1 -D MT_TASK -D MT_SYS_FUNC -D   /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinatorEB\List\ -lA C:\Users\25814\Desktop\2020 /
//                          ±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿·Ö\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\CoordinatorEB\List\           /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinatorEB\Obj\ -e --no_code_motion --debug      /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\   /
//                          -I C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó² /
//                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\Source\ -I C:\Users\25814\Desktop\2020±ÏÉè\¿µ /
//                          è÷ìÚ_Á¸²Ö\Ó²¼þ²¿·Ö\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\include\ -I           /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\include\ -I           /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\high_level\ -I        /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\ -I   /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\singl /
//                          e_chip\ -I C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ /
//                          _Á¸²Ö\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\mt\ -I         /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\osal\include\ -I          /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\saddr\ -I        /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\sdata\ -I        /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\af\ -I              /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\nwk\ -I             /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sapi\ -I            /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sec\ -I             /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sys\ -I             /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\zdo\ -I             /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\ -I                  /
//                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\f8w\ -Ohz            /
//    List file          =  C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ² /
//                          ¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinatorEB\List\OSAL.s51                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OSAL

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?C_GPTR_LOAD
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??_ltoa?relay
        FUNCTION ??_ltoa?relay,0203H
        PUBLIC ??osal_buffer_uint24?relay
        FUNCTION ??osal_buffer_uint24?relay,0203H
        PUBLIC ??osal_buffer_uint32?relay
        FUNCTION ??osal_buffer_uint32?relay,0203H
        PUBLIC ??osal_build_uint16?relay
        FUNCTION ??osal_build_uint16?relay,0203H
        PUBLIC ??osal_build_uint32?relay
        FUNCTION ??osal_build_uint32?relay,0203H
        PUBLIC ??osal_clear_event?relay
        FUNCTION ??osal_clear_event?relay,0203H
        PUBLIC ??osal_init_system?relay
        FUNCTION ??osal_init_system?relay,0203H
        PUBLIC ??osal_int_disable?relay
        FUNCTION ??osal_int_disable?relay,0203H
        PUBLIC ??osal_int_enable?relay
        FUNCTION ??osal_int_enable?relay,0203H
        PUBLIC ??osal_isbufset?relay
        FUNCTION ??osal_isbufset?relay,0203H
        PUBLIC ??osal_isr_register?relay
        FUNCTION ??osal_isr_register?relay,0203H
        PUBLIC ??osal_memcmp?relay
        FUNCTION ??osal_memcmp?relay,0203H
        PUBLIC ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,0203H
        PUBLIC ??osal_memdup?relay
        FUNCTION ??osal_memdup?relay,0203H
        PUBLIC ??osal_memset?relay
        FUNCTION ??osal_memset?relay,0203H
        PUBLIC ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,0203H
        PUBLIC ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,0203H
        PUBLIC ??osal_msg_dequeue?relay
        FUNCTION ??osal_msg_dequeue?relay,0203H
        PUBLIC ??osal_msg_enqueue?relay
        FUNCTION ??osal_msg_enqueue?relay,0203H
        PUBLIC ??osal_msg_enqueue_max?relay
        FUNCTION ??osal_msg_enqueue_max?relay,0203H
        PUBLIC ??osal_msg_extract?relay
        FUNCTION ??osal_msg_extract?relay,0203H
        PUBLIC ??osal_msg_find?relay
        FUNCTION ??osal_msg_find?relay,0203H
        PUBLIC ??osal_msg_push?relay
        FUNCTION ??osal_msg_push?relay,0203H
        PUBLIC ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,0203H
        PUBLIC ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,0203H
        PUBLIC ??osal_rand?relay
        FUNCTION ??osal_rand?relay,0203H
        PUBLIC ??osal_revmemcpy?relay
        FUNCTION ??osal_revmemcpy?relay,0203H
        PUBLIC ??osal_run_system?relay
        FUNCTION ??osal_run_system?relay,0203H
        PUBLIC ??osal_self?relay
        FUNCTION ??osal_self?relay,0203H
        PUBLIC ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,0203H
        PUBLIC ??osal_start_system?relay
        FUNCTION ??osal_start_system?relay,0203H
        PUBLIC ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,0203H
        PUBWEAK _A_IEN0
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_5f5e100
        PUBLIC _ltoa
        FUNCTION _ltoa,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 55, STACK
        PUBLIC osal_buffer_uint24
        FUNCTION osal_buffer_uint24,0203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_build_uint16
        FUNCTION osal_build_uint16,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_build_uint32
        FUNCTION osal_build_uint32,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_clear_event
        FUNCTION osal_clear_event,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_init_system
        FUNCTION osal_init_system,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_int_disable
        FUNCTION osal_int_disable,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC osal_int_enable
        FUNCTION osal_int_enable,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC osal_isbufset
        FUNCTION osal_isbufset,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_isr_register
        FUNCTION osal_isr_register,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC osal_memcmp
        FUNCTION osal_memcmp,0203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC osal_memcpy
        FUNCTION osal_memcpy,0203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC osal_memdup
        FUNCTION osal_memdup,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC osal_memset
        FUNCTION osal_memset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC osal_msg_allocate
        FUNCTION osal_msg_allocate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_msg_deallocate
        FUNCTION osal_msg_deallocate,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_msg_dequeue
        FUNCTION osal_msg_dequeue,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_msg_enqueue
        FUNCTION osal_msg_enqueue,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_enqueue_max
        FUNCTION osal_msg_enqueue_max,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_extract
        FUNCTION osal_msg_extract,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_find
        FUNCTION osal_msg_find,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_msg_push
        FUNCTION osal_msg_push,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_receive
        FUNCTION osal_msg_receive,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_msg_send
        FUNCTION osal_msg_send,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_qHead
        PUBLIC osal_rand
        FUNCTION osal_rand,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_revmemcpy
        FUNCTION osal_revmemcpy,0203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_run_system
        FUNCTION osal_run_system,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_self
        FUNCTION osal_self,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_set_event
        FUNCTION osal_set_event,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_start_system
        FUNCTION osal_start_system,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_strlen
        FUNCTION osal_strlen,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
strlen              SYMBOL "strlen"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
memset              SYMBOL "memset"
_itoa               SYMBOL "_itoa"
strcpy              SYMBOL "strcpy"
strcat              SYMBOL "strcat"
Onboard_rand        SYMBOL "Onboard_rand"
osal_mem_free       SYMBOL "osal_mem_free"
osal_mem_init       SYMBOL "osal_mem_init"
osalTimerInit       SYMBOL "osalTimerInit"
osal_pwrmgr_init    SYMBOL "osal_pwrmgr_init"
osalInitTasks       SYMBOL "osalInitTasks"
osal_mem_kick       SYMBOL "osal_mem_kick"
osalTimeUpdate      SYMBOL "osalTimeUpdate"
Hal_ProcessPoll     SYMBOL "Hal_ProcessPoll"
??Hal_ProcessPoll?relay SYMBOL "?relay", Hal_ProcessPoll
??Onboard_rand?relay SYMBOL "?relay", Onboard_rand
??_itoa?relay       SYMBOL "?relay", _itoa
??memset?relay      SYMBOL "?relay", memset
??osalInitTasks?relay SYMBOL "?relay", osalInitTasks
??osalTimeUpdate?relay SYMBOL "?relay", osalTimeUpdate
??osalTimerInit?relay SYMBOL "?relay", osalTimerInit
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_mem_init?relay SYMBOL "?relay", osal_mem_init
??osal_mem_kick?relay SYMBOL "?relay", osal_mem_kick
??osal_pwrmgr_init?relay SYMBOL "?relay", osal_pwrmgr_init
??strcat?relay      SYMBOL "?relay", strcat
??strcpy?relay      SYMBOL "?relay", strcpy
??strlen?relay      SYMBOL "?relay", strlen
_ltoa               SYMBOL "_ltoa"
??_ltoa?relay       SYMBOL "?relay", _ltoa
osal_buffer_uint24  SYMBOL "osal_buffer_uint24"
??osal_buffer_uint24?relay SYMBOL "?relay", osal_buffer_uint24
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
??osal_buffer_uint32?relay SYMBOL "?relay", osal_buffer_uint32
osal_build_uint16   SYMBOL "osal_build_uint16"
??osal_build_uint16?relay SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
??osal_build_uint32?relay SYMBOL "?relay", osal_build_uint32
osal_clear_event    SYMBOL "osal_clear_event"
??osal_clear_event?relay SYMBOL "?relay", osal_clear_event
osal_init_system    SYMBOL "osal_init_system"
??osal_init_system?relay SYMBOL "?relay", osal_init_system
osal_int_disable    SYMBOL "osal_int_disable"
??osal_int_disable?relay SYMBOL "?relay", osal_int_disable
osal_int_enable     SYMBOL "osal_int_enable"
??osal_int_enable?relay SYMBOL "?relay", osal_int_enable
osal_isbufset       SYMBOL "osal_isbufset"
??osal_isbufset?relay SYMBOL "?relay", osal_isbufset
osal_isr_register   SYMBOL "osal_isr_register"
??osal_isr_register?relay SYMBOL "?relay", osal_isr_register
osal_memcmp         SYMBOL "osal_memcmp"
??osal_memcmp?relay SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_memdup         SYMBOL "osal_memdup"
??osal_memdup?relay SYMBOL "?relay", osal_memdup
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_dequeue    SYMBOL "osal_msg_dequeue"
??osal_msg_dequeue?relay SYMBOL "?relay", osal_msg_dequeue
osal_msg_enqueue    SYMBOL "osal_msg_enqueue"
??osal_msg_enqueue?relay SYMBOL "?relay", osal_msg_enqueue
osal_msg_enqueue_max SYMBOL "osal_msg_enqueue_max"
??osal_msg_enqueue_max?relay SYMBOL "?relay", osal_msg_enqueue_max
osal_msg_extract    SYMBOL "osal_msg_extract"
??osal_msg_extract?relay SYMBOL "?relay", osal_msg_extract
osal_msg_find       SYMBOL "osal_msg_find"
??osal_msg_find?relay SYMBOL "?relay", osal_msg_find
osal_msg_push       SYMBOL "osal_msg_push"
??osal_msg_push?relay SYMBOL "?relay", osal_msg_push
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
osal_rand           SYMBOL "osal_rand"
??osal_rand?relay   SYMBOL "?relay", osal_rand
osal_revmemcpy      SYMBOL "osal_revmemcpy"
??osal_revmemcpy?relay SYMBOL "?relay", osal_revmemcpy
osal_run_system     SYMBOL "osal_run_system"
??osal_run_system?relay SYMBOL "?relay", osal_run_system
osal_self           SYMBOL "osal_self"
??osal_self?relay   SYMBOL "?relay", osal_self
osal_set_event      SYMBOL "osal_set_event"
??osal_set_event?relay SYMBOL "?relay", osal_set_event
osal_start_system   SYMBOL "osal_start_system"
??osal_start_system?relay SYMBOL "?relay", osal_start_system
osal_strlen         SYMBOL "osal_strlen"
??osal_strlen?relay SYMBOL "?relay", osal_strlen

        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _itoa
        FUNCTION _itoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcpy
        FUNCTION strcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcat
        FUNCTION strcat,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_rand
        FUNCTION Onboard_rand,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_init
        FUNCTION osal_mem_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalTimerInit
        FUNCTION osalTimerInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_init
        FUNCTION osal_pwrmgr_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalInitTasks
        FUNCTION osalInitTasks,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_kick
        FUNCTION osal_mem_kick,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalTimeUpdate
        FUNCTION osalTimeUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_ProcessPoll
        FUNCTION Hal_ProcessPoll,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??Hal_ProcessPoll?relay
        FUNCTION ??Hal_ProcessPoll?relay,00H
        EXTERN ??Onboard_rand?relay
        FUNCTION ??Onboard_rand?relay,00H
        EXTERN ??_itoa?relay
        FUNCTION ??_itoa?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??osalInitTasks?relay
        FUNCTION ??osalInitTasks?relay,00H
        EXTERN ??osalTimeUpdate?relay
        FUNCTION ??osalTimeUpdate?relay,00H
        EXTERN ??osalTimerInit?relay
        FUNCTION ??osalTimerInit?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_mem_init?relay
        FUNCTION ??osal_mem_init?relay,00H
        EXTERN ??osal_mem_kick?relay
        FUNCTION ??osal_mem_kick?relay,00H
        EXTERN ??osal_pwrmgr_init?relay
        FUNCTION ??osal_pwrmgr_init?relay,00H
        EXTERN ??strcat?relay
        FUNCTION ??strcat?relay,00H
        EXTERN ??strcpy?relay
        FUNCTION ??strcpy?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H
        EXTERN tasksArr
        EXTERN tasksCnt
        EXTERN tasksEvents

// C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿·Ö\Components\osal\common\OSAL.c
//    1 /**************************************************************************************************
//    2   Filename:       OSAL.c
//    3   Revised:        $Date: 2011-05-27 09:03:48 -0700 (Fri, 27 May 2011) $
//    4   Revision:       $Revision: 26134 $
//    5 
//    6   Description:    This API allows the software components in the Z-stack to be written
//    7                   independently of the specifics of the operating system, kernel or tasking
//    8                   environment (including control loops or connect-to-interrupt systems).
//    9 
//   10 
//   11   Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
//   12 
//   13   IMPORTANT: Your use of this Software is limited to those specific rights
//   14   granted under the terms of a software license agreement between the user
//   15   who downloaded the software, his/her employer (which must be your employer)
//   16   and Texas Instruments Incorporated (the "License"). You may not use this
//   17   Software unless you agree to abide by the terms of the License. The License
//   18   limits your use, and you acknowledge, that the Software may not be modified,
//   19   copied or distributed unless embedded on a Texas Instruments microcontroller
//   20   or used solely and exclusively in conjunction with a Texas Instruments radio
//   21   frequency transceiver, which is integrated into your product. Other than for
//   22   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   23   works of, modify, distribute, perform, display or sell this Software and/or
//   24   its documentation for any purpose.
//   25 
//   26   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   27   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   28   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   29   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   30   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   31   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   32   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   33   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   34   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   35   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   36   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   37 
//   38   Should you have any questions regarding your right to use this Software,
//   39   contact Texas Instruments Incorporated at www.TI.com.
//   40 **************************************************************************************************/
//   41 
//   42 /*********************************************************************
//   43  * INCLUDES
//   44  */
//   45 
//   46 #include <string.h>
//   47 
//   48 #include "comdef.h"
//   49 #include "OSAL.h"
//   50 #include "OSAL_Tasks.h"
//   51 #include "OSAL_Memory.h"
//   52 #include "OSAL_PwrMgr.h"
//   53 #include "OSAL_Clock.h"
//   54 
//   55 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//   56 
//   57 /* HAL */
//   58 #include "hal_drivers.h"
//   59 
//   60 #ifdef IAR_ARMCM3_LM
//   61   #include "FreeRTOSConfig.h"
//   62   #include "osal_task.h"
//   63 #endif
//   64 
//   65 
//   66 /*********************************************************************
//   67  * MACROS
//   68  */
//   69 
//   70 /*********************************************************************
//   71  * CONSTANTS
//   72  */
//   73 
//   74 /*********************************************************************
//   75  * TYPEDEFS
//   76  */
//   77 
//   78 /*********************************************************************
//   79  * GLOBAL VARIABLES
//   80  */
//   81 
//   82 // Message Pool Definitions

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   83 osal_msg_q_t osal_qHead;
osal_qHead:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   84 
//   85 /*********************************************************************
//   86  * EXTERNAL VARIABLES
//   87  */
//   88 
//   89 /*********************************************************************
//   90  * EXTERNAL FUNCTIONS
//   91  */
//   92 
//   93 /*********************************************************************
//   94  * LOCAL VARIABLES
//   95  */
//   96 
//   97 // Index of active task

        RSEG XDATA_I:XDATA:NOROOT(0)
//   98 static uint8 activeTaskID = TASK_NO_TASK;
activeTaskID:
        DATA8
        DS 1
        REQUIRE `?<Initializer for activeTaskID>`
        REQUIRE __INIT_XDATA_I
//   99 
//  100 /*********************************************************************
//  101  * LOCAL FUNCTION PROTOTYPES
//  102  */
//  103 
//  104 /*********************************************************************
//  105  * HELPER FUNCTIONS
//  106  */
//  107 /* very ugly stub so Keil can compile */
//  108 #ifdef __KEIL__
//  109 char *  itoa ( int value, char * buffer, int radix )
//  110 {
//  111   return(buffer);
//  112 }
//  113 #endif
//  114 
//  115 /*********************************************************************
//  116  * @fn      osal_strlen
//  117  *
//  118  * @brief
//  119  *
//  120  *   Calculates the length of a string.  The string must be null
//  121  *   terminated.
//  122  *
//  123  * @param   char *pString - pointer to text string
//  124  *
//  125  * @return  int - number of characters
//  126  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  127 int osal_strlen( char *pString )
osal_strlen:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function osal_strlen
        CODE
//  128 {
        FUNCALL osal_strlen, strlen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  129   return (int)( strlen( pString ) );
        ; Setup parameters for call to function strlen
        LCALL   ??strlen?relay
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  130 }
//  131 
//  132 /*********************************************************************
//  133  * @fn      osal_memcpy
//  134  *
//  135  * @brief
//  136  *
//  137  *   Generic memory copy.
//  138  *
//  139  *   Note: This function differs from the standard memcpy(), since
//  140  *         it returns the pointer to the next destination uint8. The
//  141  *         standard memcpy() returns the original destination address.
//  142  *
//  143  * @param   dst - destination address
//  144  * @param   src - source address
//  145  * @param   len - number of bytes to copy
//  146  *
//  147  * @return  pointer to end of destination buffer
//  148  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  149 void *osal_memcpy( void *dst, const void GENERIC *src, unsigned int len )
osal_memcpy:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function osal_memcpy
        CODE
//  150 {
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        INC     DPTR
        MOVX    A,@DPTR
//  151   uint8 *pDst;
//  152   const uint8 GENERIC *pSrc;
//  153 
//  154   pSrc = src;
        MOV     R1,?V0 + 0
        MOV     R2,?V0 + 1
        MOV     R3,A
//  155   pDst = dst;
        MOV     DPL,R6
        MOV     DPH,R7
        SJMP    ??osal_memcpy_0
//  156 
//  157   while ( len-- )
//  158     *pDst++ = *pSrc++;
??osal_memcpy_1:
        LCALL   ?C_GPTR_LOAD
        MOVX    @DPTR,A
        MOV     A,R1
        ADD     A,#0x1
        INC     R1
        MOV     A,R2
        ADDC    A,#0x0
        MOV     R2,A
        INC     DPTR
??osal_memcpy_0:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_27:
        JNZ     ??osal_memcpy_1
//  159 
//  160   return ( pDst );
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  161 }
//  162 
//  163 /*********************************************************************
//  164  * @fn      osal_revmemcpy
//  165  *
//  166  * @brief   Generic reverse memory copy.  Starts at the end of the
//  167  *   source buffer, by taking the source address pointer and moving
//  168  *   pointer ahead "len" bytes, then decrementing the pointer.
//  169  *
//  170  *   Note: This function differs from the standard memcpy(), since
//  171  *         it returns the pointer to the next destination uint8. The
//  172  *         standard memcpy() returns the original destination address.
//  173  *
//  174  * @param   dst - destination address
//  175  * @param   src - source address
//  176  * @param   len - number of bytes to copy
//  177  *
//  178  * @return  pointer to end of destination buffer
//  179  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  180 void *osal_revmemcpy( void *dst, const void GENERIC *src, unsigned int len )
osal_revmemcpy:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function osal_revmemcpy
        CODE
//  181 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        LCALL   ?Subroutine12 & 0xFFFF
//  182   uint8 *pDst;
//  183   const uint8 GENERIC *pSrc;
//  184 
//  185   pSrc = src;
//  186   pSrc += (len-1);
??CrossCallReturnLabel_11:
        MOV     A,R1
        ADD     A,R4
        MOV     R1,A
        MOV     A,R2
        ADDC    A,R5
        MOV     R2,A
        MOV     A,R1
        ADD     A,#-0x1
        DEC     R1
        MOV     A,R2
        ADDC    A,#-0x1
        MOV     R2,A
//  187   pDst = dst;
        MOV     DPL,R6
        MOV     DPH,R7
        SJMP    ??osal_revmemcpy_0
//  188 
//  189   while ( len-- )
//  190     *pDst++ = *pSrc--;
??osal_revmemcpy_1:
        LCALL   ?C_GPTR_LOAD
        MOVX    @DPTR,A
        MOV     A,R1
        ADD     A,#-0x1
        DEC     R1
        MOV     A,R2
        ADDC    A,#-0x1
        MOV     R2,A
        INC     DPTR
??osal_revmemcpy_0:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_28:
        JNZ     ??osal_revmemcpy_1
//  191 
//  192   return ( pDst );
        MOV     R2,DPL
        MOV     R3,DPH
        LJMP    ??Subroutine26_0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  193 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R4
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     A,R6
        ORL     A,R7
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  194 
//  195 /*********************************************************************
//  196  * @fn      osal_memdup
//  197  *
//  198  * @brief   Allocates a buffer [with osal_mem_alloc()] and copies
//  199  *          the src buffer into the newly allocated space.
//  200  *
//  201  * @param   src - source address
//  202  * @param   len - number of bytes to copy
//  203  *
//  204  * @return  pointer to the new allocated buffer, or NULL if
//  205  *          allocation problem.
//  206  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  207 void *osal_memdup( const void GENERIC *src, unsigned int len )
osal_memdup:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function osal_memdup
        CODE
//  208 {
        FUNCALL osal_memdup, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_memdup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  209   uint8 *pDst;
//  210 
//  211   pDst = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  212   if ( pDst )
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??osal_memdup_0
//  213   {
//  214     VOID osal_memcpy( pDst, src, len );
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  215   }
//  216 
//  217   return ( (void *)pDst );
??osal_memdup_0:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  218 }
//  219 
//  220 /*********************************************************************
//  221  * @fn      osal_memcmp
//  222  *
//  223  * @brief
//  224  *
//  225  *   Generic memory compare.
//  226  *
//  227  * @param   src1 - source 1 addrexx
//  228  * @param   src2 - source 2 address
//  229  * @param   len - number of bytes to compare
//  230  *
//  231  * @return  TRUE - same, FALSE - different
//  232  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  233 uint8 osal_memcmp( const void GENERIC *src1, const void GENERIC *src2, unsigned int len )
osal_memcmp:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function osal_memcmp
        CODE
//  234 {
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 10,A
//  235   const uint8 GENERIC *pSrc1;
//  236   const uint8 GENERIC *pSrc2;
//  237 
//  238   pSrc1 = src1;
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 2,R3
//  239   pSrc2 = src2;
        MOV     ?V0 + 4,?V0 + 8
        MOV     ?V0 + 5,?V0 + 9
//  240 
//  241   while ( len-- )
??osal_memcmp_0:
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R4
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??osal_memcmp_1
//  242   {
//  243     if( *pSrc1++ != *pSrc2++ )
        MOV     R1,?V0 + 0
        MOV     R2,?V0 + 1
        MOV     R3,?V0 + 2
        MOV     A,R1
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,R2
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     ?V0 + 8,?V0 + 4
        MOV     ?V0 + 9,?V0 + 5
        MOV     A,?V0 + 4
        ADD     A,#0x1
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        LCALL   ?C_GPTR_LOAD
        MOV     R0,A
        MOV     R1,?V0 + 8
        MOV     R2,?V0 + 9
        MOV     R3,?V0 + 10
        LCALL   ?C_GPTR_LOAD
        XRL     A,R0
        JZ      ??osal_memcmp_0
//  244       return FALSE;
        MOV     R1,#0x0
        SJMP    ??osal_memcmp_2
//  245   }
//  246   return TRUE;
??osal_memcmp_1:
        MOV     R1,#0x1
??osal_memcmp_2:
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
//  247 }
//  248 
//  249 
//  250 /*********************************************************************
//  251  * @fn      osal_memset
//  252  *
//  253  * @brief
//  254  *
//  255  *   Set memory buffer to value.
//  256  *
//  257  * @param   dest - pointer to buffer
//  258  * @param   value - what to set each uint8 of the message
//  259  * @param   size - how big
//  260  *
//  261  * @return  pointer to destination buffer
//  262  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  263 void *osal_memset( void *dest, uint8 value, int len )
osal_memset:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function osal_memset
        CODE
//  264 {
        FUNCALL osal_memset, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  265   return memset( dest, value, len );
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,R6
        MOV     R4,?V0 + 0
        MOV     R5,#0x0
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock8
//  266 }
//  267 
//  268 /*********************************************************************
//  269  * @fn      osal_build_uint16
//  270  *
//  271  * @brief
//  272  *
//  273  *   Build a uint16 out of 2 bytes (0 then 1).
//  274  *
//  275  * @param   swapped - 0 then 1
//  276  *
//  277  * @return  uint16
//  278  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  279 uint16 osal_build_uint16( uint8 *swapped )
osal_build_uint16:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function osal_build_uint16
        CODE
//  280 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  281   return ( BUILD_UINT16( swapped[0], swapped[1] ) );
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x0
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock9
//  282 }
//  283 
//  284 /*********************************************************************
//  285  * @fn      osal_build_uint32
//  286  *
//  287  * @brief
//  288  *
//  289  *   Build a uint32 out of sequential bytes.
//  290  *
//  291  * @param   swapped - sequential bytes
//  292  * @param   len - number of bytes in the uint8 array
//  293  *
//  294  * @return  uint32
//  295  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  296 uint32 osal_build_uint32( uint8 *swapped, uint8 len )
osal_build_uint32:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function osal_build_uint32
        CODE
//  297 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  298   if ( len == 2 )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??osal_build_uint32_0
//  299     return ( BUILD_UINT32( swapped[0], swapped[1], 0L, 0L ) );
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        SJMP    ??osal_build_uint32_1
//  300   else if ( len == 3 )
??osal_build_uint32_0:
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??osal_build_uint32_2
//  301     return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], 0L ) );
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_19:
        SJMP    ??CrossCallReturnLabel_31
//  302   else if ( len == 4 )
??osal_build_uint32_2:
        MOV     A,#0x4
        XRL     A,R6
        MOV     DPL,R2
        MOV     DPH,R3
        JNZ     ??osal_build_uint32_3
//  303     return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], swapped[3] ) );
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 6,A
        MOV     A,#0x18
        SJMP    ??CrossCallReturnLabel_31
//  304   else
//  305     return ( (uint32)swapped[0] );
??osal_build_uint32_3:
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        MOV     R3,A
        MOV     R4,A
        MOV     R5,A
??osal_build_uint32_1:
        LJMP    ??Subroutine34_0 & 0xFFFF
        CFI EndBlock cfiBlock10
//  306 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     A,#0x10
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_2
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_3
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,#0x8
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
//  307 
//  308 #if !defined ( ZBIT ) && !defined ( ZBIT2 ) && !defined (UBIT)
//  309 /*********************************************************************
//  310  * @fn      _ltoa
//  311  *
//  312  * @brief
//  313  *
//  314  *   convert a long unsigned int to a string.
//  315  *
//  316  * @param  l - long to convert
//  317  * @param  buf - buffer to convert to
//  318  * @param  radix - 10 dec, 16 hex
//  319  *
//  320  * @return  pointer to buffer
//  321  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  322 unsigned char * _ltoa(unsigned long l, unsigned char *buf, unsigned char radix)
_ltoa:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function _ltoa
        CODE
//  323 {
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 31
        MOV     A,#-0x1f
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 55)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 10,R4
        MOV     ?V0 + 11,R5
//  324 #if defined( __GNUC__ )
//  325   return ( (char*)ltoa( l, buf, radix ) );
//  326 #else
//  327   unsigned char tmp1[10] = "", tmp2[10] = "", tmp3[10] = "";
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "">` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     DPH,#(`?<Constant "">_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant "">_1` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     DPH,#(`?<Constant "">_2` >> 8) & 0xff
        MOV     DPL,#`?<Constant "">_2` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  328   unsigned short num1, num2, num3;
//  329   unsigned char i;
//  330 
//  331   buf[0] = '\0';
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_21:
        CLR     A
        MOVX    @DPTR,A
//  332 
//  333   if ( radix == 10 )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??_ltoa_0 & 0xFFFF
//  334   {
//  335     num1 = l % 10000;
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,?V0 + 10
        MOV     ?V0 + 3,?V0 + 11
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
//  336     num2 = (l / 10000) % 10000;
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,?V0 + 10
        MOV     ?V0 + 7,?V0 + 11
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?UL_DIV_MOD
        MOV     R6,?V0 + 12
        MOV     R7,?V0 + 13
//  337     num3 = (unsigned short)(l / 100000000);
        MOV     DPTR,#__Constant_5f5e100
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     ?V0 + 2,?V0 + 8
        MOV     ?V0 + 3,?V0 + 9
//  338 
//  339     if (num3) _itoa(num3, tmp3, 10);
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??_ltoa_1
        ; Setup parameters for call to function _itoa
        MOV     R1,#0xa
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??_itoa?relay
//  340     if (num2) _itoa(num2, tmp2, 10);
??_ltoa_1:
        MOV     A,R6
        ORL     A,R7
        JZ      ??_ltoa_2
        ; Setup parameters for call to function _itoa
        MOV     R1,#0xa
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??_itoa?relay
//  341     if (num1) _itoa(num1, tmp1, 10);
??_ltoa_2:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??_ltoa_3
        ; Setup parameters for call to function _itoa
        MOV     R1,#0xa
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??_itoa?relay
//  342 
//  343     if (num3)
??_ltoa_3:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??_ltoa_4
//  344     {
//  345       strcpy((char*)buf, (char const*)tmp3);
        ; Setup parameters for call to function strcpy
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
//  346       for (i = 0; i < 4 - strlen((char const*)tmp2); i++)
??CrossCallReturnLabel_9:
        SJMP    ??CrossCallReturnLabel_4
//  347         strcat((char*)buf, "0");
??_ltoa_5:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "0">` & 0xff
        MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     ?V0 + 6,?V0 + 4
        ; Setup parameters for call to function strlen
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  348     }
??CrossCallReturnLabel_0:
        JC      ??_ltoa_5
//  349     strcat((char*)buf, (char const*)tmp2);
??_ltoa_4:
        ; Setup parameters for call to function strcat
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  350     if (num3 || num2)
??CrossCallReturnLabel_7:
        JNZ     ??_ltoa_6
        MOV     A,R6
        ORL     A,R7
        JZ      ??_ltoa_7
//  351     {
//  352       for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
??_ltoa_6:
        MOV     ?V0 + 4,#0x0
        SJMP    ??CrossCallReturnLabel_5
//  353         strcat((char*)buf, "0");
??_ltoa_8:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "0">` & 0xff
        MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     ?V0 + 6,?V0 + 4
        ; Setup parameters for call to function strlen
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
//  354     }
??CrossCallReturnLabel_1:
        JC      ??_ltoa_8
//  355     strcat((char*)buf, (char const*)tmp1);
??_ltoa_7:
        ; Setup parameters for call to function strcat
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  356     if (!num3 && !num2 && !num1)
??CrossCallReturnLabel_8:
        JNZ     ??_ltoa_9
        MOV     A,R6
        ORL     A,R7
        JNZ     ??_ltoa_9
??_ltoa_10:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??_ltoa_9
//  357       strcpy((char*)buf, "0");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "0">` & 0xff
        MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  358   }
??CrossCallReturnLabel_12:
        LCALL   ??strcpy?relay
//  359   else if ( radix == 16 )
//  360   {
//  361     num1 = l & 0x0000FFFF;
//  362     num2 = l >> 16;
//  363 
//  364     if (num2) _itoa(num2, tmp2, 16);
//  365     if (num1) _itoa(num1, tmp1, 16);
//  366 
//  367     if (num2)
//  368     {
//  369       strcpy((char*)buf,(char const*)tmp2);
//  370       for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
//  371         strcat((char*)buf, "0");
//  372     }
//  373     strcat((char*)buf, (char const*)tmp1);
//  374     if (!num2 && !num1)
//  375       strcpy((char*)buf, "0");
//  376   }
//  377   else
//  378     return NULL;
//  379 
//  380   return buf;
??_ltoa_9:
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,#0x1f
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI CFA_XSP16 add(XSP16, 55)
??_ltoa_0:
        MOVX    A,@DPTR
        XRL     A,#0x10
        JZ      $+5
        LJMP    ??_ltoa_11 & 0xFFFF
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x10
        MOV     R0,#?V0 + 8
        LCALL   ?UL_SHR
        MOV     R6,?V0 + 8
        MOV     R7,?V0 + 9
        MOV     A,R6
        ORL     A,R7
        JZ      ??_ltoa_12
        ; Setup parameters for call to function _itoa
        MOV     R1,#0x10
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??_itoa?relay
??_ltoa_12:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??_ltoa_13
        ; Setup parameters for call to function _itoa
        MOV     R1,#0x10
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??_itoa?relay
??_ltoa_13:
        MOV     A,R6
        ORL     A,R7
        JZ      ??_ltoa_14
        ; Setup parameters for call to function strcpy
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_10:
        SJMP    ??CrossCallReturnLabel_6
??_ltoa_15:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "0">` & 0xff
        MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     ?V0 + 2,?V0 + 4
        ; Setup parameters for call to function strlen
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strlen?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     A,#0x4
        CLR     C
        SUBB    A,?V0 + 6
        MOV     R0,A
        CLR     A
        SUBB    A,?V0 + 7
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        JC      ??_ltoa_15
??_ltoa_14:
        ; Setup parameters for call to function strcat
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ??strcat?relay
        MOV     A,R6
        ORL     A,R7
        JZ      $+5
        LJMP    ??_ltoa_9 & 0xFFFF
        LJMP    ??_ltoa_10 & 0xFFFF
??_ltoa_11:
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??CrossCallReturnLabel_13 & 0xFFFF
        CFI EndBlock cfiBlock21
//  381 #endif
//  382 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL   ??strcpy?relay
        MOV     ?V0 + 4,#0x0
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_34:
        INC     ?V0 + 4
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_8
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_4
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_5
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_6
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL   ??strcat?relay
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strlen?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     A,#0x4
        CLR     C
        SUBB    A,?V0 + 8
        MOV     R0,A
        CLR     A
        SUBB    A,?V0 + 9
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 6
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40
//  383 #endif // !defined(ZBIT) && !defined(ZBIT2)
//  384 
//  385 /*********************************************************************
//  386  * @fn        osal_rand
//  387  *
//  388  * @brief    Random number generator
//  389  *
//  390  * @param   none
//  391  *
//  392  * @return  uint16 - new random number
//  393  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  394 uint16 osal_rand( void )
osal_rand:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function osal_rand
        CODE
//  395 {
        FUNCALL osal_rand, Onboard_rand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  396   return ( Onboard_rand() );
        ; Setup parameters for call to function Onboard_rand
        LCALL   ??Onboard_rand?relay
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock41
//  397 }
//  398 
//  399 /*********************************************************************
//  400  * API FUNCTIONS
//  401  *********************************************************************/
//  402 
//  403 /*********************************************************************
//  404  * @fn      osal_msg_allocate
//  405  *
//  406  * @brief
//  407  *
//  408  *    This function is called by a task to allocate a message buffer
//  409  *    into which the task will encode the particular message it wishes
//  410  *    to send.  This common buffer scheme is used to strictly limit the
//  411  *    creation of message buffers within the system due to RAM size
//  412  *    limitations on the microprocessor.   Note that all message buffers
//  413  *    are a fixed size (at least initially).  The parameter len is kept
//  414  *    in case a message pool with varying fixed message sizes is later
//  415  *    created (for example, a pool of message buffers of size LARGE,
//  416  *    MEDIUM and SMALL could be maintained and allocated based on request
//  417  *    from the tasks).
//  418  *
//  419  *
//  420  * @param   uint8 len  - wanted buffer length
//  421  *
//  422  *
//  423  * @return  pointer to allocated buffer or NULL if allocation failed.
//  424  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  425 uint8 * osal_msg_allocate( uint16 len )
osal_msg_allocate:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI Function osal_msg_allocate
        CODE
//  426 {
        FUNCALL osal_msg_allocate, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  427   osal_msg_hdr_t *hdr;
//  428 
//  429   if ( len == 0 )
        MOV     A,R6
        ORL     A,R7
        JNZ     ??osal_msg_allocate_0
//  430     return ( NULL );
??osal_msg_allocate_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??osal_msg_allocate_2
//  431 
//  432   hdr = (osal_msg_hdr_t *) osal_mem_alloc( (short)(len + sizeof( osal_msg_hdr_t )) );
??osal_msg_allocate_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,R6
        ADD     A,#0x5
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  433   if ( hdr )
        MOV     A,R0
        ORL     A,R1
        JZ      ??osal_msg_allocate_1
//  434   {
//  435     hdr->next = NULL;
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  436     hdr->len = len;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  437     hdr->dest_id = TASK_NO_TASK;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  438     return ( (uint8 *) (hdr + 1) );
        MOV     A,R0
        ADD     A,#0x5
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
//  439   }
??osal_msg_allocate_2:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock42
//  440   else
//  441     return ( NULL );
//  442 }
//  443 
//  444 /*********************************************************************
//  445  * @fn      osal_msg_deallocate
//  446  *
//  447  * @brief
//  448  *
//  449  *    This function is used to deallocate a message buffer. This function
//  450  *    is called by a task (or processing element) after it has finished
//  451  *    processing a received message.
//  452  *
//  453  *
//  454  * @param   uint8 *msg_ptr - pointer to new message buffer
//  455  *
//  456  * @return  SUCCESS, INVALID_MSG_POINTER
//  457  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  458 uint8 osal_msg_deallocate( uint8 *msg_ptr )
osal_msg_deallocate:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI Function osal_msg_deallocate
        CODE
//  459 {
        FUNCALL osal_msg_deallocate, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  460   uint8 *x;
//  461 
//  462   if ( msg_ptr == NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??osal_msg_deallocate_0
//  463     return ( INVALID_MSG_POINTER );
        MOV     R1,#0x5
        SJMP    ??osal_msg_deallocate_1
//  464 
//  465   // don't deallocate queued buffer
//  466   if ( OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
??osal_msg_deallocate_0:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_23:
        JZ      ??osal_msg_deallocate_2
//  467     return ( MSG_BUFFER_NOT_AVAIL );
        MOV     R1,#0x4
        SJMP    ??osal_msg_deallocate_1
//  468 
//  469   x = (uint8 *)((uint8 *)msg_ptr - sizeof( osal_msg_hdr_t ));
//  470 
//  471   osal_mem_free( (void *)x );
??osal_msg_deallocate_2:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R2
        ADD     A,#-0x5
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  472 
//  473   return ( SUCCESS );
        MOV     R1,#0x0
        CFI EndBlock cfiBlock43
??osal_msg_deallocate_1:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  474 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock44 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock44
//  475 
//  476 /*********************************************************************
//  477  * @fn      osal_msg_send
//  478  *
//  479  * @brief
//  480  *
//  481  *    This function is called by a task to send a command message to
//  482  *    another task or processing element.  The sending_task field must
//  483  *    refer to a valid task, since the task ID will be used
//  484  *    for the response message.  This function will also set a message
//  485  *    ready event in the destination tasks event list.
//  486  *
//  487  *
//  488  * @param   uint8 destination task - Send msg to?  Task ID
//  489  * @param   uint8 *msg_ptr - pointer to new message buffer
//  490  * @param   uint8 len - length of data in message
//  491  *
//  492  * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
//  493  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  494 uint8 osal_msg_send( uint8 destination_task, uint8 *msg_ptr )
osal_msg_send:
        CFI Block cfiBlock45 Using cfiCommon0
        CFI Function osal_msg_send
        CODE
//  495 {
        FUNCALL osal_msg_send, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_send, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_send, osal_msg_enqueue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_send, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  496   if ( msg_ptr == NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??osal_msg_send_0
//  497     return ( INVALID_MSG_POINTER );
??osal_msg_send_1:
        MOV     R1,#0x5
        SJMP    ??osal_msg_send_2
//  498 
//  499   if ( destination_task >= tasksCnt )
??osal_msg_send_0:
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JC      ??osal_msg_send_3
//  500   {
//  501     osal_msg_deallocate( msg_ptr );
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL   ??osal_msg_deallocate?relay
//  502     return ( INVALID_TASK );
        MOV     R1,#0x3
        SJMP    ??osal_msg_send_2
//  503   }
//  504 
//  505   // Check the message header
//  506   if ( OSAL_MSG_NEXT( msg_ptr ) != NULL ||
//  507        OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
??osal_msg_send_3:
        MOV     A,R2
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     A,R3
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_48:
        JNZ     ??osal_msg_send_4
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_24:
        JZ      ??osal_msg_send_5
//  508   {
//  509     osal_msg_deallocate( msg_ptr );
??osal_msg_send_4:
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL   ??osal_msg_deallocate?relay
//  510     return ( INVALID_MSG_POINTER );
        SJMP    ??osal_msg_send_1
//  511   }
//  512 
//  513   OSAL_MSG_ID( msg_ptr ) = destination_task;
??osal_msg_send_5:
        MOV     A,R6
        MOVX    @DPTR,A
//  514 
//  515   // queue message
//  516   osal_msg_enqueue( &osal_qHead, msg_ptr );
        ; Setup parameters for call to function osal_msg_enqueue
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#osal_qHead & 0xff
        MOV     R3,#(osal_qHead >> 8) & 0xff
        LCALL   ??osal_msg_enqueue?relay
//  517 
//  518   // Signal the task that a message is waiting
//  519   osal_set_event( destination_task, SYS_EVENT_MSG );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  520 
//  521   return ( SUCCESS );
        MOV     R1,#0x0
??osal_msg_send_2:
        SJMP    ??Subroutine26_0
        CFI EndBlock cfiBlock45
//  522 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        MOV     A,R2
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     DPH,A
        MOVX    A,@DPTR
        CPL     A
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock49 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     C,0xE0 /* A   */.0
        CFI EndBlock cfiBlock49
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     0xa8.7,C
        CFI EndBlock cfiBlock50
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock51
//  523 
//  524 /*********************************************************************
//  525  * @fn      osal_msg_receive
//  526  *
//  527  * @brief
//  528  *
//  529  *    This function is called by a task to retrieve a received command
//  530  *    message. The calling task must deallocate the message buffer after
//  531  *    processing the message using the osal_msg_deallocate() call.
//  532  *
//  533  * @param   uint8 task_id - receiving tasks ID
//  534  *
//  535  * @return  *uint8 - message information or NULL if no message
//  536  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  537 uint8 *osal_msg_receive( uint8 task_id )
osal_msg_receive:
        CFI Block cfiBlock52 Using cfiCommon0
        CFI Function osal_msg_receive
        CODE
//  538 {
        FUNCALL osal_msg_receive, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_receive, osal_clear_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_receive, osal_msg_extract
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 3,R1
//  539   osal_msg_hdr_t *listHdr;
//  540   osal_msg_hdr_t *prevHdr = NULL;
        MOV     ?V0 + 4,#0x0
        MOV     ?V0 + 5,#0x0
//  541   osal_msg_hdr_t *foundHdr = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  542   halIntState_t   intState;
//  543 
//  544   // Hold off interrupts
//  545   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 2,A
        CLR     0xa8.7
//  546 
//  547   // Point to the top of the queue
//  548   listHdr = osal_qHead;
        MOV     DPTR,#osal_qHead
        SJMP    ??CrossCallReturnLabel_53
//  549 
//  550   // Look through the queue for a message that belongs to the asking task
//  551   while ( listHdr != NULL )
//  552   {
//  553     if ( (listHdr - 1)->dest_id == task_id )
//  554     {
//  555       if ( foundHdr == NULL )
//  556       {
//  557         // Save the first one
//  558         foundHdr = listHdr;
//  559       }
//  560       else
//  561       {
//  562         // Second msg found, stop looking
//  563         break;
//  564       }
//  565     }
//  566     if ( foundHdr == NULL )
??osal_msg_receive_0:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??osal_msg_receive_1
//  567     {
//  568       prevHdr = listHdr;
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
//  569     }
//  570     listHdr = OSAL_MSG_NEXT( listHdr );
??osal_msg_receive_1:
        MOV     A,?V0 + 0
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV     A,?V0 + 1
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_53:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??osal_msg_receive_2
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_54:
        MOVX    A,@DPTR
        XRL     A,?V0 + 3
        JNZ     ??osal_msg_receive_0
        MOV     A,R6
        ORL     A,R7
        JNZ     ??osal_msg_receive_3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        SJMP    ??osal_msg_receive_1
//  571   }
//  572 
//  573   // Is there more than one?
//  574   if ( listHdr != NULL )
//  575   {
//  576     // Yes, Signal the task that a message is waiting
//  577     osal_set_event( task_id, SYS_EVENT_MSG );
??osal_msg_receive_3:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#-0x80
        LCALL   ??osal_set_event?relay
        SJMP    ??osal_msg_receive_4
//  578   }
//  579   else
//  580   {
//  581     // No more
//  582     osal_clear_event( task_id, SYS_EVENT_MSG );
??osal_msg_receive_2:
        ; Setup parameters for call to function osal_clear_event
        MOV     R2,#0x0
        MOV     R3,#-0x80
        LCALL   ??osal_clear_event?relay
//  583   }
//  584 
//  585   // Did we find a message?
//  586   if ( foundHdr != NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??osal_msg_receive_5
//  587   {
//  588     // Take out of the link list
//  589     osal_msg_extract( &osal_qHead, foundHdr, prevHdr );
??osal_msg_receive_4:
        ; Setup parameters for call to function osal_msg_extract
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#osal_qHead & 0xff
        MOV     R3,#(osal_qHead >> 8) & 0xff
        LCALL   ??osal_msg_extract?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  590   }
//  591 
//  592   // Release interrupts
//  593   HAL_EXIT_CRITICAL_SECTION(intState);
??osal_msg_receive_5:
        MOV     A,?V0 + 2
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  594 
//  595   return ( (uint8*) foundHdr );
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock52
        REQUIRE _A_IEN0
//  596 }
//  597 
//  598 /**************************************************************************************************
//  599  * @fn          osal_msg_find
//  600  *
//  601  * @brief       This function finds in place an OSAL message matching the task_id and event
//  602  *              parameters.
//  603  *
//  604  * input parameters
//  605  *
//  606  * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
//  607  * @param       event - The OSAL event id that the enqueued OSAL message must match.
//  608  *
//  609  * output parameters
//  610  *
//  611  * None.
//  612  *
//  613  * @return      NULL if no match, otherwise an in place pointer to the matching OSAL message.
//  614  **************************************************************************************************
//  615  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  616 osal_event_hdr_t *osal_msg_find(uint8 task_id, uint8 event)
osal_msg_find:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI Function osal_msg_find
        CODE
//  617 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R2
        MOV     R0,A
//  618   osal_msg_hdr_t *pHdr;
//  619   halIntState_t intState;
//  620 
//  621   HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R4,A
        CLR     0xa8.7
//  622 
//  623   pHdr = osal_qHead;  // Point to the top of the queue.
        MOV     DPTR,#osal_qHead
        SJMP    ??CrossCallReturnLabel_55
//  624 
//  625   // Look through the queue for a message that matches the task_id and event parameters.
//  626   while (pHdr != NULL)
//  627   {
//  628     if (((pHdr-1)->dest_id == task_id) && (((osal_event_hdr_t *)pHdr)->event == event))
//  629     {
//  630       break;
//  631     }
//  632 
//  633     pHdr = OSAL_MSG_NEXT(pHdr);
??osal_msg_find_0:
        MOV     A,R2
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV     A,R3
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_41:
        JZ      ??osal_msg_find_1
        MOV     A,R2
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine31_0 & 0xFFFF
//  634   }
??CrossCallReturnLabel_56:
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??osal_msg_find_0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??osal_msg_find_0
//  635 
//  636   HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
??osal_msg_find_1:
        MOV     A,R4
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  637 
//  638   return (osal_event_hdr_t *)pHdr;
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock53
        REQUIRE _A_IEN0
//  639 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond54 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOV     A,R4
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond58 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond60) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond60) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond60) CFA_SP SP+-5
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        ADD     A,#-0x5
        MOV     DPL,A
        RET
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64
//  640 
//  641 /*********************************************************************
//  642  * @fn      osal_msg_enqueue
//  643  *
//  644  * @brief
//  645  *
//  646  *    This function enqueues an OSAL message into an OSAL queue.
//  647  *
//  648  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  649  * @param   void *msg_ptr  - OSAL message
//  650  *
//  651  * @return  none
//  652  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  653 void osal_msg_enqueue( osal_msg_q_t *q_ptr, void *msg_ptr )
osal_msg_enqueue:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI Function osal_msg_enqueue
        CODE
//  654 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  655   void *list;
//  656   halIntState_t intState;
//  657 
//  658   // Hold off interrupts
//  659   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R6,A
        CLR     0xa8.7
//  660 
//  661   OSAL_MSG_NEXT( msg_ptr ) = NULL;
        LCALL   ?Subroutine19 & 0xFFFF
//  662   // If first message in queue
//  663   if ( *q_ptr == NULL )
??CrossCallReturnLabel_29:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_50:
        JNZ     ??CrossCallReturnLabel_68
//  664   {
//  665     *q_ptr = msg_ptr;
        MOV     DPL,R2
        MOV     DPH,R3
        SJMP    ??CrossCallReturnLabel_61
//  666   }
//  667   else
//  668   {
//  669     // Find end of queue
//  670     for ( list = *q_ptr; OSAL_MSG_NEXT( list ) != NULL; list = OSAL_MSG_NEXT( list ) );
??osal_msg_enqueue_0:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_42:
        JNZ     ??osal_msg_enqueue_0
//  671 
//  672     // Add message to end of queue
//  673     OSAL_MSG_NEXT( list ) = msg_ptr;
        LCALL   ?Subroutine20 & 0xFFFF
//  674   }
??CrossCallReturnLabel_61:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  675 
//  676   // Re-enable interrupts
//  677   HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R6
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock65
        REQUIRE _A_IEN0
//  678 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        MOV     A,R0
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     A,R2
        ORL     A,R3
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond73 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker80 Using cfiCommon1
        CFI (cfiPicker80) NoFunction
        CFI (cfiPicker80) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiPicker80
//  679 
//  680 /*********************************************************************
//  681  * @fn      osal_msg_dequeue
//  682  *
//  683  * @brief
//  684  *
//  685  *    This function dequeues an OSAL message from an OSAL queue.
//  686  *
//  687  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  688  *
//  689  * @return  void * - pointer to OSAL message or NULL of queue is empty.
//  690  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  691 void *osal_msg_dequeue( osal_msg_q_t *q_ptr )
osal_msg_dequeue:
        CFI Block cfiBlock81 Using cfiCommon0
        CFI Function osal_msg_dequeue
        CODE
//  692 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  693   void *msg_ptr = NULL;
        MOV     R0,#0x0
        MOV     R1,#0x0
//  694   halIntState_t intState;
//  695 
//  696   // Hold off interrupts
//  697   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 0,A
        CLR     0xa8.7
//  698 
//  699   if ( *q_ptr != NULL )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??osal_msg_dequeue_0
//  700   {
//  701     // Dequeue message
//  702     msg_ptr = *q_ptr;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine33_0 & 0xFFFF
//  703     *q_ptr = OSAL_MSG_NEXT( msg_ptr );
??CrossCallReturnLabel_64:
        MOV     A,R0
        ADD     A,#-0x5
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  704     OSAL_MSG_NEXT( msg_ptr ) = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  705     OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
        MOV     A,R0
        ADD     A,#-0x1
        LCALL   ??Subroutine30_0 & 0xFFFF
//  706   }
??CrossCallReturnLabel_60:
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  707 
//  708   // Re-enable interrupts
//  709   HAL_EXIT_CRITICAL_SECTION(intState);
??osal_msg_dequeue_0:
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  710 
//  711   return msg_ptr;
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        CFI EndBlock cfiBlock81
        REQUIRE ?Subroutine2
        REQUIRE _A_IEN0
        ; // Fall through to label ?Subroutine2
//  712 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock82 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock82
//  713 
//  714 /*********************************************************************
//  715  * @fn      osal_msg_push
//  716  *
//  717  * @brief
//  718  *
//  719  *    This function pushes an OSAL message to the head of an OSAL
//  720  *    queue.
//  721  *
//  722  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  723  * @param   void *msg_ptr  - OSAL message
//  724  *
//  725  * @return  none
//  726  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  727 void osal_msg_push( osal_msg_q_t *q_ptr, void *msg_ptr )
osal_msg_push:
        CFI Block cfiBlock83 Using cfiCommon0
        CFI Function osal_msg_push
        CODE
//  728 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  729   halIntState_t intState;
//  730 
//  731   // Hold off interrupts
//  732   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     A,0xa8
        MOV     R6,A
        CLR     0xa8.7
//  733 
//  734   // Push message to head of queue
//  735   OSAL_MSG_NEXT( msg_ptr ) = *q_ptr;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV     A,R5
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  736   *q_ptr = msg_ptr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  737 
//  738   // Re-enable interrupts
//  739   HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        LJMP    ??Subroutine25_0 & 0xFFFF
        CFI EndBlock cfiBlock83
        REQUIRE _A_IEN0
//  740 }
//  741 
//  742 /*********************************************************************
//  743  * @fn      osal_msg_extract
//  744  *
//  745  * @brief
//  746  *
//  747  *    This function extracts and removes an OSAL message from the
//  748  *    middle of an OSAL queue.
//  749  *
//  750  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  751  * @param   void *msg_ptr  - OSAL message to be extracted
//  752  * @param   void *prev_ptr  - OSAL message before msg_ptr in queue
//  753  *
//  754  * @return  none
//  755  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  756 void osal_msg_extract( osal_msg_q_t *q_ptr, void *msg_ptr, void *prev_ptr )
osal_msg_extract:
        CFI Block cfiBlock84 Using cfiCommon0
        CFI Function osal_msg_extract
        CODE
//  757 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine33_0 & 0xFFFF
//  758   halIntState_t intState;
//  759 
//  760   // Hold off interrupts
//  761   HAL_ENTER_CRITICAL_SECTION(intState);
??CrossCallReturnLabel_66:
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 0,A
        CLR     0xa8.7
//  762 
//  763   if ( msg_ptr == *q_ptr )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R4
        XRL     A,R6
        JNZ     ??osal_msg_extract_0
        MOV     A,R5
        XRL     A,R7
??osal_msg_extract_0:
        JNZ     ??osal_msg_extract_1
//  764   {
//  765     // remove from first
//  766     *q_ptr = OSAL_MSG_NEXT( msg_ptr );
        LCALL   ?Subroutine21 & 0xFFFF
//  767   }
??CrossCallReturnLabel_39:
        MOV     A,R5
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??osal_msg_extract_2
//  768   else
//  769   {
//  770     // remove from middle
//  771     OSAL_MSG_NEXT( prev_ptr ) = OSAL_MSG_NEXT( msg_ptr );
??osal_msg_extract_1:
        LCALL   ?Subroutine21 & 0xFFFF
//  772   }
??CrossCallReturnLabel_40:
        MOV     A,R5
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
??osal_msg_extract_2:
        MOVX    @DPTR,A
//  773   OSAL_MSG_NEXT( msg_ptr ) = NULL;
        LCALL   ?Subroutine19 & 0xFFFF
//  774   OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
??CrossCallReturnLabel_30:
        MOV     A,R4
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R5
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  775 
//  776   // Re-enable interrupts
//  777   HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,?V0 + 0
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock84
        REQUIRE _A_IEN0
//  778 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        MOV     A,R0
        ADD     A,#-0x5
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
        CFI Block cfiCond89 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        MOV     DPL,A
        MOV     A,R1
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
        CFI Block cfiCond94 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond97) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond97) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond97) CFA_SP SP+-5
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond98) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond98) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond98) CFA_SP SP+-5
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker106 Using cfiCommon1
        CFI (cfiPicker106) NoFunction
        CFI (cfiPicker106) Picker
        ADDC    A,#-0x1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond107 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        MOV     A,R4
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond110 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond111) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond111) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond111) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond111) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond112) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker116 Using cfiCommon1
        CFI (cfiPicker116) NoFunction
        CFI (cfiPicker116) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_45:
        RET
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiPicker116

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond117 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_10
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond118) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_7
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_8
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond120) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond120) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond120) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond120) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_4
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond121) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond121) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_5
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_6
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_42
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_43
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_41
        CFI (cfiCond126) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond126) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond126) CFA_SP SP+-5
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_11
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_12
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond128) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond128) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond128) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_13
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_14
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_15
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_16
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker133 Using cfiCommon1
        CFI (cfiPicker133) NoFunction
        CFI (cfiPicker133) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond134 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker136 Using cfiCommon1
        CFI (cfiPicker136) NoFunction
        CFI (cfiPicker136) Picker
        MOV     A,R0
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R1
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiPicker136
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
        CFI Block cfiCond137 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker140 Using cfiCommon1
        CFI (cfiPicker140) NoFunction
        CFI (cfiPicker140) Picker
        ADDC    A,#-0x1
        MOV     DPH,A
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiPicker140
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
        CFI Block cfiCond141 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker147 Using cfiCommon1
        CFI (cfiPicker147) NoFunction
        CFI (cfiPicker147) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiPicker147
//  779 
//  780 /*********************************************************************
//  781  * @fn      osal_msg_enqueue_max
//  782  *
//  783  * @brief
//  784  *
//  785  *    This function enqueues an OSAL message into an OSAL queue if
//  786  *    the length of the queue is less than max.
//  787  *
//  788  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  789  * @param   void *msg_ptr  - OSAL message
//  790  * @param   uint8 max - maximum length of queue
//  791  *
//  792  * @return  TRUE if message was enqueued, FALSE otherwise
//  793  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  794 uint8 osal_msg_enqueue_max( osal_msg_q_t *q_ptr, void *msg_ptr, uint8 max )
osal_msg_enqueue_max:
        CFI Block cfiBlock148 Using cfiCommon0
        CFI Function osal_msg_enqueue_max
        CODE
//  795 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  796   void *list;
//  797   uint8 ret = FALSE;
        MOV     R7,#0x0
//  798   halIntState_t intState;
//  799 
//  800   // Hold off interrupts
//  801   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 0,A
        CLR     0xa8.7
//  802 
//  803   // If first message in queue
//  804   if ( *q_ptr == NULL )
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_51:
        JNZ     ??CrossCallReturnLabel_69
//  805   {
//  806     *q_ptr = msg_ptr;
        MOV     DPL,R2
        MOV     DPH,R3
        SJMP    ??CrossCallReturnLabel_63
//  807     ret = TRUE;
//  808   }
//  809   else
//  810   {
//  811     // Find end of queue or max
//  812     list = *q_ptr;
//  813     max--;
//  814     while ( (OSAL_MSG_NEXT( list ) != NULL) && (max > 0) )
??osal_msg_enqueue_max_0:
        MOV     A,R6
        JZ      ??osal_msg_enqueue_max_1
//  815     {
//  816       list = OSAL_MSG_NEXT( list );
        LCALL   ?Subroutine8 & 0xFFFF
//  817       max--;
??CrossCallReturnLabel_69:
        DEC     R6
//  818     }
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_43:
        JNZ     ??osal_msg_enqueue_max_0
//  819 
//  820     // Add message to end of queue if max not reached
//  821     if ( max != 0 )
        MOV     A,R6
        JZ      ??osal_msg_enqueue_max_1
//  822     {
//  823       OSAL_MSG_NEXT( list ) = msg_ptr;
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  824       ret = TRUE;
        INC     R7
//  825     }
//  826   }
//  827 
//  828   // Re-enable interrupts
//  829   HAL_EXIT_CRITICAL_SECTION(intState);
??osal_msg_enqueue_max_1:
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  830 
//  831   return ret;
        MOV     A,R7
        MOV     R1,A
        LJMP    ??Subroutine26_0 & 0xFFFF
        CFI EndBlock cfiBlock148
        REQUIRE _A_IEN0
//  832 }
//  833 
//  834 /*********************************************************************
//  835  * @fn      osal_set_event
//  836  *
//  837  * @brief
//  838  *
//  839  *    This function is called to set the event flags for a task. The
//  840  *    event passed in is OR'd into the task's event variable.
//  841  *
//  842  * @param   uint8 task_id - receiving tasks ID
//  843  * @param   uint8 event_flag - what event to set
//  844  *
//  845  * @return  SUCCESS, INVALID_TASK
//  846  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  847 uint8 osal_set_event( uint8 task_id, uint16 event_flag )
osal_set_event:
        CFI Block cfiBlock149 Using cfiCommon0
        CFI Function osal_set_event
        CODE
//  848 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R5,A
//  849   if ( task_id < tasksCnt )
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R5
        CLR     C
        SUBB    A,R0
        JNC     ??osal_set_event_0
//  850   {
//  851     halIntState_t   intState;
//  852     HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
        MOV     A,0xa8
        MOV     R6,A
        CLR     0xa8.7
//  853     tasksEvents[task_id] |= event_flag;  // Stuff the event bit(s)
        MOV     A,R5
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     DPTR,#tasksEvents
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R4
        MOV     DPH,A
        MOVX    A,@DPTR
        ORL     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R3
        MOVX    @DPTR,A
//  854     HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  855     return ( SUCCESS );
        MOV     R1,#0x0
        SJMP    ??osal_set_event_1
//  856   }
//  857    else
//  858   {
//  859     return ( INVALID_TASK );
??osal_set_event_0:
        MOV     R1,#0x3
//  860   }
??osal_set_event_1:
        LJMP    ??Subroutine26_0 & 0xFFFF
        CFI EndBlock cfiBlock149
        REQUIRE _A_IEN0
//  861 }
//  862 
//  863 /*********************************************************************
//  864  * @fn      osal_clear_event
//  865  *
//  866  * @brief
//  867  *
//  868  *    This function is called to clear the event flags for a task. The
//  869  *    event passed in is masked out of the task's event variable.
//  870  *
//  871  * @param   uint8 task_id - receiving tasks ID
//  872  * @param   uint8 event_flag - what event to clear
//  873  *
//  874  * @return  SUCCESS, INVALID_TASK
//  875  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  876 uint8 osal_clear_event( uint8 task_id, uint16 event_flag )
osal_clear_event:
        CFI Block cfiBlock150 Using cfiCommon0
        CFI Function osal_clear_event
        CODE
//  877 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  878   if ( task_id < tasksCnt )
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JNC     ??osal_clear_event_0
//  879   {
//  880     halIntState_t   intState;
//  881     HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
        MOV     A,0xa8
        MOV     R7,A
        CLR     0xa8.7
//  882     tasksEvents[task_id] &= ~(event_flag);   // Clear the event bit(s)
        MOV     A,R2
        CPL     A
        MOV     R4,A
        MOV     A,R3
        CPL     A
        MOV     R5,A
        MOV     A,R6
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_17:
        MOVX    A,@DPTR
        ANL     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,R5
        MOVX    @DPTR,A
//  883     HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  884     return ( SUCCESS );
        MOV     R1,#0x0
        SJMP    ??osal_clear_event_1
//  885   }
//  886    else
//  887   {
//  888     return ( INVALID_TASK );
??osal_clear_event_0:
        MOV     R1,#0x3
//  889   }
??osal_clear_event_1:
        LJMP    ??Subroutine26_0 & 0xFFFF
        CFI EndBlock cfiBlock150
        REQUIRE _A_IEN0
//  890 }
//  891 
//  892 /*********************************************************************
//  893  * @fn      osal_isr_register
//  894  *
//  895  * @brief
//  896  *
//  897  *   This function is called to register a service routine with an
//  898  *   interrupt. When the interrupt occurs, this service routine is called.
//  899  *
//  900  * @param   uint8 interrupt_id - Interrupt number
//  901  * @param   void (*isr_ptr)( uint8* ) - function pointer to ISR
//  902  *
//  903  * @return  SUCCESS, INVALID_INTERRUPT_ID,
//  904  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  905 uint8 osal_isr_register( uint8 interrupt_id, void (*isr_ptr)( uint8* ) )
osal_isr_register:
        CFI Block cfiBlock151 Using cfiCommon0
        CFI Function osal_isr_register
        CODE
//  906 {
        ; Saved register size: 0
        ; Auto size: 0
//  907   // Remove these statements when functionality is complete
//  908   (void)interrupt_id;
//  909   (void)isr_ptr;
//  910   return ( SUCCESS );
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock151
//  911 }
//  912 
//  913 /*********************************************************************
//  914  * @fn      osal_int_enable
//  915  *
//  916  * @brief
//  917  *
//  918  *   This function is called to enable an interrupt. Once enabled,
//  919  *   occurrence of the interrupt causes the service routine associated
//  920  *   with that interrupt to be called.
//  921  *
//  922  *   If INTS_ALL is the interrupt_id, interrupts (in general) are enabled.
//  923  *   If a single interrupt is passed in, then interrupts still have
//  924  *   to be enabled with another call to INTS_ALL.
//  925  *
//  926  * @param   uint8 interrupt_id - Interrupt number
//  927  *
//  928  * @return  SUCCESS or INVALID_INTERRUPT_ID
//  929  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  930 uint8 osal_int_enable( uint8 interrupt_id )
osal_int_enable:
        CFI Block cfiBlock152 Using cfiCommon0
        CFI Function osal_int_enable
        CODE
//  931 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  932 
//  933   if ( interrupt_id == INTS_ALL )
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??osal_int_enable_0
//  934   {
//  935     HAL_ENABLE_INTERRUPTS();
        SETB    0xa8.7
//  936     return ( SUCCESS );
        MOV     R1,#0x0
        SJMP    ??osal_int_enable_1
//  937   }
//  938   else
//  939   {
//  940     return ( INVALID_INTERRUPT_ID );
??osal_int_enable_0:
        MOV     R1,#0x7
??osal_int_enable_1:
        LJMP    ?BRET
        CFI EndBlock cfiBlock152
        REQUIRE _A_IEN0
//  941   }
//  942 }
//  943 
//  944 /*********************************************************************
//  945  * @fn      osal_int_disable
//  946  *
//  947  * @brief
//  948  *
//  949  *   This function is called to disable an interrupt. When a disabled
//  950  *   interrupt occurs, the service routine associated with that
//  951  *   interrupt is not called.
//  952  *
//  953  *   If INTS_ALL is the interrupt_id, interrupts (in general) are disabled.
//  954  *   If a single interrupt is passed in, then just that interrupt is disabled.
//  955  *
//  956  * @param   uint8 interrupt_id - Interrupt number
//  957  *
//  958  * @return  SUCCESS or INVALID_INTERRUPT_ID
//  959  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  960 uint8 osal_int_disable( uint8 interrupt_id )
osal_int_disable:
        CFI Block cfiBlock153 Using cfiCommon0
        CFI Function osal_int_disable
        CODE
//  961 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  962 
//  963   if ( interrupt_id == INTS_ALL )
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??osal_int_disable_0
//  964   {
//  965     HAL_DISABLE_INTERRUPTS();
        CLR     0xa8.7
//  966     return ( SUCCESS );
        MOV     R1,#0x0
        SJMP    ??osal_int_disable_1
//  967   }
//  968   else
//  969   {
//  970     return ( INVALID_INTERRUPT_ID );
??osal_int_disable_0:
        MOV     R1,#0x7
??osal_int_disable_1:
        LJMP    ?BRET
        CFI EndBlock cfiBlock153
        REQUIRE _A_IEN0
//  971   }
//  972 }
//  973 
//  974 /*********************************************************************
//  975  * @fn      osal_init_system
//  976  *
//  977  * @brief
//  978  *
//  979  *   This function initializes the "task" system by creating the
//  980  *   tasks defined in the task table (OSAL_Tasks.h).
//  981  *
//  982  * @param   void
//  983  *
//  984  * @return  SUCCESS
//  985  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  986 uint8 osal_init_system( void )
osal_init_system:
        CFI Block cfiBlock154 Using cfiCommon0
        CFI Function osal_init_system
        CODE
//  987 {
        FUNCALL osal_init_system, osal_mem_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osalTimerInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osal_pwrmgr_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osalInitTasks
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osal_mem_kick
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  988 
//  989   // Initialize the Memory Allocation System
//  990   osal_mem_init();
        ; Setup parameters for call to function osal_mem_init
        LCALL   ??osal_mem_init?relay
//  991 
//  992   // Initialize the message queue
//  993   osal_qHead = NULL;
        MOV     DPTR,#osal_qHead
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  994 
//  995   // Initialize the timers
//  996   osalTimerInit();
        ; Setup parameters for call to function osalTimerInit
        LCALL   ??osalTimerInit?relay
//  997 
//  998   // Initialize the Power Management System
//  999   osal_pwrmgr_init();
        ; Setup parameters for call to function osal_pwrmgr_init
        LCALL   ??osal_pwrmgr_init?relay
// 1000 
// 1001   // Initialize the system tasks.
// 1002   osalInitTasks();
        ; Setup parameters for call to function osalInitTasks
        LCALL   ??osalInitTasks?relay
// 1003 
// 1004   // Setup efficient search for the first free block of heap.
// 1005   osal_mem_kick();
        ; Setup parameters for call to function osal_mem_kick
        LCALL   ??osal_mem_kick?relay
// 1006 
// 1007   return ( SUCCESS );
        MOV     R1,#0x0
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock154
// 1008 }
// 1009 
// 1010 /*********************************************************************
// 1011  * @fn      osal_start_system
// 1012  *
// 1013  * @brief
// 1014  *
// 1015  *   This function is the main loop function of the task system (if
// 1016  *   ZBIT and UBIT are not defined). This Function doesn't return.
// 1017  *
// 1018  * @param   void
// 1019  *
// 1020  * @return  none
// 1021  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1022 void osal_start_system( void )
osal_start_system:
        CFI Block cfiBlock155 Using cfiCommon0
        CFI Function osal_start_system
        CODE
// 1023 {
        FUNCALL osal_start_system, osal_run_system
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1024 #if !defined ( ZBIT ) && !defined ( UBIT )
// 1025   for(;;)  // Forever Loop
// 1026 #endif
// 1027   {
// 1028    
// 1029     osal_run_system();
??osal_start_system_0:
        ; Setup parameters for call to function osal_run_system
        LCALL   ??osal_run_system?relay
        SJMP    ??osal_start_system_0
        CFI EndBlock cfiBlock155
// 1030   }
// 1031 }
// 1032 
// 1033 /*********************************************************************
// 1034  * @fn      osal_run_system
// 1035  *
// 1036  * @brief
// 1037  *
// 1038  *   This function will make one pass through the OSAL taskEvents table
// 1039  *   and call the task_event_processor() function for the first task that
// 1040  *   is found with at least one event pending. If there are no pending
// 1041  *   events (all tasks), this function puts the processor into Sleep.
// 1042  *
// 1043  * @param   void
// 1044  *
// 1045  * @return  none
// 1046  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1047 void osal_run_system( void )
osal_run_system:
        CFI Block cfiBlock156 Using cfiCommon0
        CFI Function osal_run_system
        CODE
// 1048 {
        FUNCALL osal_run_system, osalTimeUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_run_system, Hal_ProcessPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1049   
// 1050   
// 1051   uint8 idx = 0;
        MOV     ?V0 + 0,#0x0
// 1052   osalTimeUpdate();
        ; Setup parameters for call to function osalTimeUpdate
        LCALL   ??osalTimeUpdate?relay
// 1053   Hal_ProcessPoll();
        ; Setup parameters for call to function Hal_ProcessPoll
        LCALL   ??Hal_ProcessPoll?relay
// 1054 
// 1055   do {
// 1056     if (tasksEvents[idx])  // Task is highest priority that is ready.
??osal_run_system_0:
        MOV     A,?V0 + 0
        LCALL   ?Subroutine13 & 0xFFFF
// 1057     {
// 1058       break;
// 1059     }
// 1060   } while (++idx < tasksCnt);
??CrossCallReturnLabel_18:
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_49:
        JNZ     ??osal_run_system_1
        INC     ?V0 + 0
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R0
        JC      ??osal_run_system_0
// 1061 
// 1062   if (idx < tasksCnt)
??osal_run_system_1:
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R0
        JNC     ??osal_run_system_2
// 1063   {
// 1064     uint16 events;
// 1065     halIntState_t intState;
// 1066 
// 1067     HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     A,0xa8
        MOV     R4,A
        CLR     0xa8.7
// 1068     events = tasksEvents[idx];
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     R6,A
        CLR     A
        RLC     A
        MOV     R7,A
        MOV     DPTR,#tasksEvents
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine12 & 0xFFFF
// 1069     tasksEvents[idx] = 0;  // Clear the Events for this task.
??CrossCallReturnLabel_16:
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1070     HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R4
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
// 1071 
// 1072     activeTaskID = idx;
        MOV     A,?V0 + 0
        MOV     DPTR,#activeTaskID
        MOVX    @DPTR,A
// 1073     events = (tasksArr[idx])( idx, events );
        ; Setup parameters for indirect call
        MOV     R1,A
        MOV     A,#tasksArr & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#(tasksArr >> 8) & 0xff
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?CALL_IND
// 1074     activeTaskID = TASK_NO_TASK;
        MOV     DPTR,#activeTaskID
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1075 
// 1076     HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     A,0xa8
        MOV     R1,A
        CLR     0xa8.7
// 1077     tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
        MOV     DPTR,#tasksEvents
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        ORL     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R3
        MOVX    @DPTR,A
// 1078     HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
// 1079   }
// 1080 #if defined( POWER_SAVING )
// 1081   else  // Complete pass through all task events with no activity?
// 1082   {
// 1083     osal_pwrmgr_powerconserve();  // Put the processor/system into sleep
// 1084   }
// 1085 #endif
// 1086 
// 1087   /* Yield in case cooperative scheduling is being used. */
// 1088 #if defined (configUSE_PREEMPTION) && (configUSE_PREEMPTION == 0)
// 1089   {
// 1090     osal_task_yield();
// 1091   }
// 1092 #endif
// 1093   
// 1094 }
??osal_run_system_2:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock156
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond157 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker159 Using cfiCommon1
        CFI (cfiPicker159) NoFunction
        CFI (cfiPicker159) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiPicker159

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond160 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker162 Using cfiCommon1
        CFI (cfiPicker162) NoFunction
        CFI (cfiPicker162) Picker
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     DPTR,#tasksEvents
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiPicker162
// 1095 
// 1096 /*********************************************************************
// 1097  * @fn      osal_buffer_uint32
// 1098  *
// 1099  * @brief
// 1100  *
// 1101  *   Buffer an uint32 value - LSB first.
// 1102  *
// 1103  * @param   buf - buffer
// 1104  * @param   val - uint32 value
// 1105  *
// 1106  * @return  pointer to end of destination buffer
// 1107  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1108 uint8* osal_buffer_uint32( uint8 *buf, uint32 val )
osal_buffer_uint32:
        CFI Block cfiBlock163 Using cfiCommon0
        CFI Function osal_buffer_uint32
        CODE
// 1109 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
// 1110   *buf++ = BREAK_UINT32( val, 0 );
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 4
        LCALL   ?Subroutine17 & 0xFFFF
// 1111   *buf++ = BREAK_UINT32( val, 1 );
// 1112   *buf++ = BREAK_UINT32( val, 2 );
??CrossCallReturnLabel_25:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
// 1113   *buf++ = BREAK_UINT32( val, 3 );
        MOV     A,#0x18
        CFI EndBlock cfiBlock163
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
// 1114 
// 1115   return buf;
// 1116 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock164 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R0,#?V0 + 4
        LCALL   ?UL_SHR
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiBlock164
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
        CFI Block cfiBlock165 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock165
// 1117 
// 1118 /*********************************************************************
// 1119  * @fn      osal_buffer_uint24
// 1120  *
// 1121  * @brief
// 1122  *
// 1123  *   Buffer an uint24 value - LSB first. Note that type uint24 is
// 1124  *   typedef to uint32 in comdef.h
// 1125  *
// 1126  * @param   buf - buffer
// 1127  * @param   val - uint24 value
// 1128  *
// 1129  * @return  pointer to end of destination buffer
// 1130  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1131 uint8* osal_buffer_uint24( uint8 *buf, uint24 val )
osal_buffer_uint24:
        CFI Block cfiBlock166 Using cfiCommon0
        CFI Function osal_buffer_uint24
        CODE
// 1132 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
// 1133   *buf++ = BREAK_UINT32( val, 0 );
        MOV     ?V0 + 0,?V0 + 4
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 0
        LCALL   ?Subroutine17 & 0xFFFF
// 1134   *buf++ = BREAK_UINT32( val, 1 );
// 1135   *buf++ = BREAK_UINT32( val, 2 );
??CrossCallReturnLabel_26:
        MOV     A,#0x10
        SJMP    ?Subroutine3
        CFI EndBlock cfiBlock166
// 1136 
// 1137   return buf;
// 1138 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond167 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker169 Using cfiCommon1
        CFI (cfiPicker169) NoFunction
        CFI (cfiPicker169) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     ?V0 + 1,?V0 + 5
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        INC     DPTR
        RET
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiPicker169
// 1139 
// 1140 /*********************************************************************
// 1141  * @fn      osal_isbufset
// 1142  *
// 1143  * @brief
// 1144  *
// 1145  *   Is all of the array elements set to a value?
// 1146  *
// 1147  * @param   buf - buffer to check
// 1148  * @param   val - value to check each array element for
// 1149  * @param   len - length to check
// 1150  *
// 1151  * @return  TRUE if all "val"
// 1152  *          FALSE otherwise
// 1153  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1154 uint8 osal_isbufset( uint8 *buf, uint8 val, uint8 len )
osal_isbufset:
        CFI Block cfiBlock170 Using cfiCommon0
        CFI Function osal_isbufset
        CODE
// 1155 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R5,A
// 1156   uint8 x;
// 1157 
// 1158   if ( buf == NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??osal_isbufset_0
// 1159   {
// 1160     return ( FALSE );
??osal_isbufset_1:
        MOV     R1,#0x0
        SJMP    ??osal_isbufset_2
// 1161   }
// 1162 
// 1163   for ( x = 0; x < len; x++ )
??osal_isbufset_0:
        MOV     R0,#0x0
        SJMP    ??osal_isbufset_3
// 1164   {
// 1165     // Check for non-initialized value
// 1166     if ( buf[x] != val )
??osal_isbufset_4:
        MOV     ?V0 + 0,R0
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R5
        JNZ     ??osal_isbufset_1
// 1167     {
// 1168       return ( FALSE );
// 1169     }
// 1170   }
        INC     R0
??osal_isbufset_3:
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        JC      ??osal_isbufset_4
// 1171   return ( TRUE );
        MOV     R1,#0x1
??osal_isbufset_2:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock170
// 1172 }
// 1173 
// 1174 /*********************************************************************
// 1175  * @fn      osal_self
// 1176  *
// 1177  * @brief
// 1178  *
// 1179  *   This function returns the task ID of the current (active) task.
// 1180  *
// 1181  * @param   void
// 1182  *
// 1183  * @return   active task ID or TASK_NO_TASK if no task is active
// 1184  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1185 uint8 osal_self( void )
osal_self:
        CFI Block cfiBlock171 Using cfiCommon0
        CFI Function osal_self
        CODE
// 1186 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1187   return ( activeTaskID );
        MOV     DPTR,#activeTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock171
// 1188 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for activeTaskID>`:
        DATA8
        DB 255

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_strlen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_strlen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_memcpy?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_memcpy

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_revmemcpy?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_revmemcpy

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_memdup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_memdup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_memcmp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_memcmp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_memset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_memset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_build_uint16?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_build_uint16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_build_uint32?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_build_uint32

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_ltoa?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _ltoa

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_rand?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_rand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_allocate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_allocate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_deallocate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_deallocate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_receive?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_receive

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_find?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_find

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_enqueue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_enqueue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_dequeue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_dequeue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_push?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_push

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_extract?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_extract

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_enqueue_max?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_enqueue_max

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_set_event?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_set_event

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_clear_event?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_clear_event

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_isr_register?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_isr_register

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_int_enable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_int_enable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_int_disable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_int_disable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_init_system?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_init_system

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_start_system?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_start_system

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_run_system?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_run_system

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_buffer_uint32?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_buffer_uint32

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_buffer_uint24?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_buffer_uint24

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_isbufset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_isbufset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_self?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_self

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">_1`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">_2`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "0">`:
        DB "0"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_5f5e100:
        DD 100000000

        END
// 1189 
// 1190 /*********************************************************************
// 1191  */
// 
// 2 620 bytes in segment BANKED_CODE
//   192 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    40 bytes in segment XDATA_ROM_C
//     2 bytes in segment XDATA_Z
// 
// 2 813 bytes of CODE  memory
//    32 bytes of CONST memory (+ 8 bytes shared)
//     0 bytes of DATA  memory (+ 1 byte  shared)
//     3 bytes of XDATA memory
//
//Errors: none
//Warnings: none
