###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Dec/2019  23:31:27 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\Sa #
#                          mpleApp.c                                          #
#    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷ #
#                          \”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg            #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f C:\Users\25814\Desktop\2020 #
#                          ±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤º˛≤ø∑÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8w #
#                          Config.cfg (-DZIGBEEPRO -DSECURE=0                 #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤º˛≤ø∑÷\Projects\zstack\Samp #
#                          les\SampleApp\Source\SampleApp.c -D NWK_AUTO_POLL  #
#                          -D ZAPP_P1 -D MT_TASK -D MT_SYS_FUNC -D            #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\List\ -lA C:\Users\25814\Desktop\2020± #
#                          œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤º˛≤ø∑÷\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\EndDeviceEB\List\            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\Obj\ -e --no_code_motion --debug       #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤º˛≤ø∑÷\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\ -I                        #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\Source\ -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛ #
#                          Œ∞_…≠¡÷ª‘÷\”≤º˛≤ø∑÷\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\include\ -I          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\include\ -I          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\high_level\ -I       #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞ #
#                          _…≠¡÷ª‘÷\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\Components\mt\ -I       #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\osal\include\ -I         #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\saddr\ -I       #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\sdata\ -I       #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\af\ -I             #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\nwk\ -I            #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sapi\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sec\ -I            #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sys\ -I            #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\zdo\ -I            #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\ -I                 #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\f8w\ -Ohz           #
#    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\List\SampleApp.lst                     #
#    Object file        =  C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\Obj\SampleApp.r51                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          #include <stdio.h>
     79          #include <string.h>
     80          
     81          //MY DEVICE
     82          #include "DHT11.h"
     83           
     84          
     85          /*********************************************************************
     86           * MACROS
     87           */
     88           
     89          #define GAS P0_6
     90          #define FIRE P1_1
     91          #define BEEP P1_3
     92          /*********************************************************************
     93           * CONSTANTS
     94           */
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          /*********************************************************************
    101           * GLOBAL VARIABLES
    102           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    103          uint8 AppTitle[] = "ALD2530 Example"; //”¶”√≥Ã–Ú√˚≥∆ 
   \                     AppTitle:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for AppTitle>`
   \   000010                REQUIRE __INIT_XDATA_I
    104          uint16 ReadGasData(void);
    105          uint16 ReadHumidityData(void);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          void myDelay(){
   \                     myDelay:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    107            for(int j =0;j<100;j++)
   \   000000   7A64         MOV     R2,#0x64
    108              for(int i = 0;i<0xffff;i++)
   \                     ??myDelay_0:
   \   000002   7800         MOV     R0,#0x0
   \   000004   7900         MOV     R1,#0x0
   \                     ??myDelay_1:
   \   000006   E8           MOV     A,R0
   \   000007   2401         ADD     A,#0x1
   \   000009   08           INC     R0
   \   00000A   E9           MOV     A,R1
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   68           XRL     A,R0
   \   000011   7003         JNZ     ??myDelay_2
   \   000013   74FF         MOV     A,#-0x1
   \   000015   69           XRL     A,R1
   \                     ??myDelay_2:
   \   000016   70EE         JNZ     ??myDelay_1
    109              {}
   \   000018   1A           DEC     R2
   \   000019   EA           MOV     A,R2
   \   00001A   70E6         JNZ     ??myDelay_0
    110          }
   \   00001C   02....       LJMP    ?BRET
    111          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    112          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    113          {
    114            SAMPLEAPP_PERIODIC_CLUSTERID,
    115            SAMPLEAPP_FLASH_CLUSTERID
    116          };
    117          

   \                                 In  segment XDATA_ROM_C, align 1
    118          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    119          {
    120            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    121            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    122            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    123            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    124            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    125            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    126            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    127            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    128            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    129          };
    130          
    131          // This is the Endpoint/Interface description.  It is defined here, but
    132          // filled-in in SampleApp_Init().  Another way to go would be to fill
    133          // in the structure here and make it a "const" (in code space).  The
    134          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    136          
    137          /*********************************************************************
    138           * EXTERNAL VARIABLES
    139           */
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL VARIABLES
    147           */
    148          
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151                                    // This variable will be received when
    152                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    164          
    165           
    166          /*********************************************************************
    167           * LOCAL FUNCTIONS
    168           */
    169          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    170          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    171          void SampleApp_SendPeriodicMessage( void );
    172          void SampleApp_SendFlashMessage( uint16 flashTime );
    173          void SampleApp_Send_P2P_Message(void);
    174          /*********************************************************************
    175           * NETWORK LAYER CALLBACKS
    176           */
    177          
    178          /*********************************************************************
    179           * PUBLIC FUNCTIONS
    180           */
    181           
    182          /*********************************************************************
    183           * @fn      SampleApp_Init
    184           *
    185           * @brief   Initialization function for the Generic App Task.
    186           *          This is called during initialization and should contain
    187           *          any application specific initialization (ie. hardware
    188           *          initialization/setup, table initialization, power up
    189           *          notificaiton ... ).
    190           *
    191           * @param   task_id - the ID assigned by OSAL.  This ID should be
    192           *                    used to send messages and set timers.
    193           *
    194           * @return  none
    195           */
    196          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    198          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    199            
    200           
    201            SampleApp_TaskID = task_id;   //osal∑÷≈‰µƒ»ŒŒÒIDÀÊ◊≈”√ªßÃÌº”»ŒŒÒµƒ‘ˆ∂‡∂¯∏ƒ±‰
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    202            SampleApp_NwkState = DEV_INIT;//…Ë±∏◊¥Ã¨…Ë∂®Œ™ZDO≤„÷–∂®“Âµƒ≥ı ºªØ◊¥Ã¨
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    203            SampleApp_TransID = 0;        //œ˚œ¢∑¢ÀÕID£®∂‡œ˚œ¢ ±”–À≥–Ú÷Æ∑÷£©
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    204            //ƒ£øÈ≥ı ºªØ
    205            P0SEL&=~0x40;
   \   000016   53F3BF       ANL     0xf3,#0xbf
    206            P0DIR&=~0x40;//≥ı ºªØ∆¯ÃÂ
   \   000019   53FDBF       ANL     0xfd,#0xbf
    207            P1SEL&=~0x2;
   \   00001C   53F4FD       ANL     0xf4,#0xfd
    208            P1DIR&=~0x2;//≥ı ºªØª—Ê p1_1
   \   00001F   53FEFD       ANL     0xfe,#0xfd
    209            P0SEL &= ~0x20;                 //…Ë÷√P0.5Œ™∆’Õ®IOø⁄ Õ¡»¿ ™∂»
   \   000022   53F3DF       ANL     0xf3,#0xdf
    210            P0DIR &= ~0x20;                 //P0.5∂®“ÂŒ™ ‰»Îø⁄
   \   000025   53FDDF       ANL     0xfd,#0xdf
    211          #ifdef ZDO_COORDINATOR
    212            P1DIR |=0x08;//–≠µ˜∆˜∂À∑‰√˘∆˜
    213          #endif
    214            //¥Æø⁄≈‰÷√
    215            MT_UartInit();
   \   000028                ; Setup parameters for call to function MT_UartInit
   \   000028   12....       LCALL   ??MT_UartInit?relay
    216            MT_UartRegisterTaskID(task_id);  
   \   00002B                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00002B   EE           MOV     A,R6
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??MT_UartRegisterTaskID?relay
    217            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n")); 
   \   000030                ; Setup parameters for call to function HalUARTWrite
   \   000030   7C0D         MOV     R4,#0xd
   \   000032   7D00         MOV     R5,#0x0
   \   000034   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   000036   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   000038   7900         MOV     R1,#0x0
   \   00003A   12....       LCALL   ??HalUARTWrite?relay
    218            
    219          
    220            // Device hardware initialization can be added here or in main() (Zmain.c).
    221            // If the hardware is application specific - add it here.
    222            // If the hardware is other parts of the device add it in main().
    223          
    224          #if defined ( BUILD_ALL_DEVICES )
    225            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    226            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    227            // together - if they are - we will start up a coordinator. Otherwise,
    228            // the device will start as a router.
    229            if ( readCoordinatorJumper() )
    230              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    231            else
    232              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    233          #endif // BUILD_ALL_DEVICES
    234          
    235          //∏√∂Œµƒ“‚Àº «£¨»Áπ˚…Ë÷√¡ÀHOLD_AUTO_START∫Í∂®“Â£¨Ω´ª·‘⁄∆Ù∂Ø–æ∆¨µƒ ±∫Úª·‘›Õ£∆Ù∂Ø
    236          //¡˜≥Ã£¨÷ª”–Õ‚≤ø¥•∑¢“‘∫Û≤≈ª·∆Ù∂Ø–æ∆¨°£∆‰ µæÕ «–Ë“™“ª∏ˆ∞¥≈•¥•∑¢À¸µƒ∆Ù∂Ø¡˜≥Ã°£  
    237          #if defined ( HOLD_AUTO_START )
    238            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    239            //  from starting the device and wait for the application to
    240            //  start the device.
    241            ZDOInitDevice(0);
    242          #endif
    243          
    244            // Setup for the periodic message's destination address …Ë÷√∑¢ÀÕ ˝æ›µƒ∑Ω Ω∫Õƒøµƒµÿ÷∑—∞÷∑ƒ£ Ω
    245            // Broadcast to everyone ∑¢ÀÕƒ£ Ω:π„≤•∑¢ÀÕ
    246            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//π„≤•
   \   00003D   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000040   740F         MOV     A,#0xf
   \   000042   F0           MOVX    @DPTR,A
    247            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000043   A3           INC     DPTR
   \   000044   7414         MOV     A,#0x14
   \   000046   F0           MOVX    @DPTR,A
    248            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//÷∏∂®ƒøµƒÕ¯¬Áµÿ÷∑Œ™π„≤•µÿ÷∑
   \   000047   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00004A   74FF         MOV     A,#-0x1
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   F0           MOVX    @DPTR,A
    249          
    250            // Setup for the flash command's destination address - Group 1 ◊È≤•∑¢ÀÕ
    251            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //◊È—∞÷∑
   \   00004F   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000052   7401         MOV     A,#0x1
   \   000054   F0           MOVX    @DPTR,A
    252            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000055   A3           INC     DPTR
   \   000056   7414         MOV     A,#0x14
   \   000058   F0           MOVX    @DPTR,A
    253            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//◊È∫≈0x0001
   \   000059   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00005C   7401         MOV     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
    254          
    255            // Fill out the endpoint description. ∂®“Â±æ…Ë±∏”√¿¥Õ®–≈µƒAPS≤„∂Àµ„√Ë ˆ∑˚
    256            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000062   90....       MOV     DPTR,#SampleApp_epDesc
   \   000065   7414         MOV     A,#0x14
   \   000067   F0           MOVX    @DPTR,A
    257            SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp √Ë ˆ∑˚µƒ»ŒŒÒID
   \   000068   A3           INC     DPTR
   \   000069   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00006F   F0           MOVX    @DPTR,A
    258            SampleApp_epDesc.simpleDesc
    259                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleAppºÚµ•√Ë ˆ∑˚
   \   000070   A3           INC     DPTR
   \   000071   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000077   F0           MOVX    @DPTR,A
    260            SampleApp_epDesc.latencyReq = noLatencyReqs;    //—” ±≤ﬂ¬‘
   \   000078   A3           INC     DPTR
   \   000079   E4           CLR     A
   \   00007A   F0           MOVX    @DPTR,A
    261          
    262            // Register the endpoint description with the AF
    263            afRegister( &SampleApp_epDesc );    //œÚAF≤„µ«º«√Ë ˆ∑˚
   \   00007B                ; Setup parameters for call to function afRegister
   \   00007B   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007D   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00007F   12....       LCALL   ??afRegister?relay
    264          
    265            // Register for all key events - This app will handle all key events
    266            RegisterForKeys( SampleApp_TaskID ); // µ«º«À˘”–µƒ∞¥º¸ ¬º˛
   \   000082                ; Setup parameters for call to function RegisterForKeys
   \   000082   90....       MOV     DPTR,#SampleApp_TaskID
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   12....       LCALL   ??RegisterForKeys?relay
    267          
    268            // By default, all devices start out in Group 1
    269            SampleApp_Group.ID = 0x0001;//◊È∫≈
   \   00008A   90....       MOV     DPTR,#SampleApp_Group
   \   00008D   7401         MOV     A,#0x1
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   E4           CLR     A
   \   000092   F0           MOVX    @DPTR,A
    270            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//…Ë∂®◊È√˚
   \   000093                ; Setup parameters for call to function osal_memcpy
   \   000093   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000096   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000099   F5..         MOV     ?V0 + 2,A
   \   00009B   78..         MOV     R0,#?V0 + 0
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A0   7C07         MOV     R4,#0x7
   \   0000A2   7D00         MOV     R5,#0x0
   \   0000A4   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A6   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A8   12....       LCALL   ??osal_memcpy?relay
   \   0000AB   7403         MOV     A,#0x3
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
    271            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//∞—∏√◊Èµ«º«ÃÌº”µΩAPS÷–
   \   0000B0                ; Setup parameters for call to function aps_AddGroup
   \   0000B0   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B2   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B4   7914         MOV     R1,#0x14
   \   0000B6   12....       LCALL   ??aps_AddGroup?relay
    272          
    273          #if defined ( LCD_SUPPORTED )
    274            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //»Áπ˚÷ß≥÷LCD£¨œ‘ æÃ· æ–≈œ¢
   \   0000B9                ; Setup parameters for call to function HalLcdWriteString
   \   0000B9   7900         MOV     R1,#0x0
   \   0000BB   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000BD   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000BF   12....       LCALL   ??HalLcdWriteString?relay
    275          #endif
    276          }
   \   0000C2                REQUIRE ?Subroutine1
   \   0000C2                REQUIRE P0SEL
   \   0000C2                REQUIRE P0DIR
   \   0000C2                REQUIRE P1SEL
   \   0000C2                REQUIRE P1DIR
   \   0000C2                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    277          
    278          /*********************************************************************
    279           * @fn      SampleApp_ProcessEvent
    280           *
    281           * @brief   Generic Application Task event processor.  This function
    282           *          is called to process all events for the task.  Events
    283           *          include timers, messages and any other user defined events.
    284           *
    285           * @param   task_id  - The OSAL assigned task ID.
    286           * @param   events - events to process.  This is a bit map and can
    287           *                   contain more than one event.
    288           *
    289           * @return  none
    290           */
    291          //”√ªß”¶”√»ŒŒÒµƒ ¬º˛¥¶¿Ì∫Ø ˝

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    292          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    293          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    294            afIncomingMSGPacket_t *MSGpkt;
    295            (void)task_id;  // Intentionally unreferenced parameter
    296          
    297            if ( events & SYS_EVENT_MSG ) //Ω” ’œµÕ≥œ˚œ¢‘ŸΩ¯––≈–∂œ
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    298            {
    299              //Ω” ’ Ù”⁄±æ”¶”√»ŒŒÒSampleAppµƒœ˚œ¢£¨“‘SampleApp_TaskID±Íº«
    300              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    301              while ( MSGpkt )
    302              {
    303                switch ( MSGpkt->hdr.event )
    304                {
    305                  // Received when a key is pressed
    306                  case KEY_CHANGE://∞¥º¸ ¬º˛
    307                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    308                    break;
    309          
    310                  // Received when a messages is received (OTA) for this endpoint
    311                case AF_INCOMING_MSG_CMD://Ω” ’ ˝æ› ¬º˛,µ˜”√∫Ø ˝AF_DataRequest()Ω” ’ ˝æ›
    312                    SampleApp_MessageMSGCB( MSGpkt );//µ˜”√ªÿµ˜∫Ø ˝∂‘ ’µΩµƒ ˝æ›Ω¯––¥¶¿Ì
    313                    break;
    314          
    315                  // Received whenever the device changes state in the network
    316                  case ZDO_STATE_CHANGE:
    317                    //÷ª“™Õ¯¬Á◊¥Ã¨∑¢…˙∏ƒ±‰£¨æÕÕ®π˝ZDO_STATE_CHANGE ¬º˛Õ®÷™À˘”–µƒ»ŒŒÒ°£
    318                    //Õ¨ ±ÕÍ≥…∂‘–≠µ˜∆˜£¨¬∑”…∆˜£¨÷’∂Àµƒ…Ë÷√
    319                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    320                    //if ( (SampleApp_NwkState == DEV_ZB_COORD)// µ—È÷––≠µ˜∆˜÷ªΩ” ’ ˝æ›À˘“‘»°œ˚∑¢ÀÕ ¬º˛
    321                    if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    322                    {
    323                      // Start sending the periodic message in a regular interval.
    324                      //’‚∏ˆ∂® ±∆˜÷ª «Œ™∑¢ÀÕ÷‹∆⁄–≈œ¢ø™∆Ùµƒ£¨…Ë±∏∆Ù∂Ø≥ı ºªØ∫Û¥”’‚¿Ôø™ º
    325                      //¥•∑¢µ⁄“ª∏ˆ÷‹∆⁄–≈œ¢µƒ∑¢ÀÕ£¨»ª∫Û÷‹∂¯∏¥ ºœ¬»•
    326                      osal_start_timerEx( SampleApp_TaskID,
    327                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    328                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    329                     
    330                    }
    331                    else
    332                    {
    333                        
    334                    }
    335                    break;
    336          
    337                  default:
    338                    break;
    339                }
    340          
    341                // Release the memory  ¬º˛¥¶¿ÌÕÍ¡À£¨ Õ∑≈œ˚œ¢’º”√µƒƒ⁄¥Ê
    342                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    343             
    344                // Next - if one is available ÷∏’Î÷∏œÚœ¬“ª∏ˆ∑≈‘⁄ª∫≥Â«¯µƒ¥˝¥¶¿Ìµƒ ¬º˛£¨
    345                //∑µªÿwhile ( MSGpkt )÷ÿ–¬¥¶¿Ì ¬º˛£¨÷±µΩª∫≥Â«¯√ª”–µ»¥˝¥¶¿Ì ¬º˛Œ™÷π
    346                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    347              }
    348          
    349              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    350              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    351            }
    352          
    353            // Send a message out - This event is generated by a timer
    354            //  (setup in SampleApp_Init()).
    355            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    356            {
    357              // Send the periodic message ¥¶¿Ì÷‹∆⁄–‘ ¬º˛£¨
    358              //¿˚”√SampleApp_SendPeriodicMessage()¥¶¿ÌÕÍµ±«∞µƒ÷‹∆⁄–‘ ¬º˛£¨»ª∫Û∆Ù∂Ø∂® ±∆˜
    359              //ø™∆Ùœ¬“ª∏ˆ÷‹∆⁄–‘ ¬«È£¨’‚—˘“ª÷÷—≠ª∑œ¬»•£¨“≤º¥ «…œ√ÊÀµµƒ÷‹∆⁄–‘ ¬º˛¡À£¨
    360              //ø…“‘◊ˆŒ™¥´∏–∆˜∂® ±≤…ºØ°¢…œ¥´»ŒŒÒ
    361              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    362              
    363              // Setup to send message again in normal period (+ a little jitter)
    364              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    365                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24E8         ADD     A,#-0x18
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3403         ADDC    A,#0x3
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    366          
    367              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    368              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    369            }
    370          
    371            // Discard unknown events
    372            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB                REQUIRE ?Subroutine2
   \   0000AB                ; // Fall through to label ?Subroutine2
    373          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    374          
    375          /*********************************************************************
    376           * Event Generation Functions
    377           */
    378          /*********************************************************************
    379           * @fn      SampleApp_HandleKeys
    380           *
    381           * @brief   Handles all key events for this device.
    382           *
    383           * @param   shift - true if in shift/alt.
    384           * @param   keys - bit field for key events. Valid entries:
    385           *                 HAL_KEY_SW_2
    386           *                 HAL_KEY_SW_1
    387           *
    388           * @return  none
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          void SampleApp_HandleKeys( uint8 shift, uint8 keys )  
   \                     SampleApp_HandleKeys:
    391          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    392            (void)shift;  // Intentionally unreferenced parameter
    393            
    394            if ( keys & HAL_KEY_SW_1 )
   \   000006   A2E0         MOV     C,0xE0 /* A   */.0
   \   000008   5007         JNC     ??SampleApp_HandleKeys_0
    395            {
    396              /* This key sends the Flash Command is sent to Group 1.
    397               * This device will not receive the Flash Command from this
    398               * device (even if it belongs to group 1).
    399               */
    400             SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000A                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000A   7AE8         MOV     R2,#-0x18
   \   00000C   7B03         MOV     R3,#0x3
   \   00000E   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    401             
    402              
    403            
    404            }
    405          
    406            if ( keys & HAL_KEY_SW_6 )
    407            {
    408              /* The Flashr Command is sent to Group 1.
    409               * This key toggles this device in and out of group 1.
    410               * If this device doesn't belong to group 1, this application
    411               * will not receive the Flash command sent to group 1.
    412               */
    413            
    414             /*
    415              aps_Group_t *grp;
    416              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    417              if ( grp )
    418              {
    419                // Remove from the group
    420                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    421              }
    422              else
    423              {
    424                // Add to the flash group
    425                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    426              }
    427             */
    428            }
    429          }
   \                     ??SampleApp_HandleKeys_0:
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
    430          
    431          /*********************************************************************
    432           * LOCAL FUNCTIONS
    433           */
    434          
    435          /*********************************************************************
    436           * @fn      SampleApp_MessageMSGCB
    437           *
    438           * @brief   Data message processor callback.  This function processes
    439           *          any incoming data - probably from other devices.  So, based
    440           *          on cluster ID, perform the intended action.
    441           *
    442           * @param   none
    443           *
    444           * @return  none
    445           */
    446          //Ω” ’ ˝æ›£¨≤Œ ˝Œ™Ω” ’µΩµƒ ˝æ›

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    447          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    448          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    449            uint16 flashTime;
    450            unsigned short len = 6+3+1+1+3+1;
    451            byte buf[6+3+1+1+3+1]={0}; 
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00001E   740F         MOV     A,#0xf
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    452            
    453            switch ( pkt->clusterId ) //≈–∂œ¥ÿID
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 1,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000037   0100         DW        1
   \   000039   01           DB        1
   \   00003A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00003C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00003E   ....         DW        ??SampleApp_MessageMSGCB_2
    454            {
    455              case SAMPLEAPP_PERIODIC_CLUSTERID: // ’µΩπ„≤• ˝æ›
    456                osal_memset(buf, 0 , len);
   \                     ??SampleApp_MessageMSGCB_1:
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C0F         MOV     R4,#0xf
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7900         MOV     R1,#0x0
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??osal_memset?relay
    457                osal_memcpy(buf, pkt->cmd.Data, len);
   \   000053                ; Setup parameters for call to function osal_memcpy
   \   000053   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000056   F5..         MOV     ?V0 + 0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V0 + 1,A
   \   00005C   75..00       MOV     ?V0 + 2,#0x0
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000064   7C0F         MOV     R4,#0xf
   \   000066   7D00         MOV     R5,#0x0
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   \   000071   12....       LCALL   ??osal_memcpy?relay
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    458          #ifdef ZDO_COORDINATOR
    459                BEEP = buf[7]==1?1:0;
    460          #endif
    461                HalUARTWrite(0,buf, len);
   \   000079                ; Setup parameters for call to function HalUARTWrite
   \   000079   7C0F         MOV     R4,#0xf
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   7900         MOV     R1,#0x0
   \   000089   12....       LCALL   ??HalUARTWrite?relay
    462                break;
   \   00008C   8033         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   00008E   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000091   F8           MOV     R0,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095                ; Setup parameters for call to function HalLedBlink
   \   000095   8882         MOV     DPL,R0
   \   000097   8983         MOV     DPH,R1
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FA           MOV     R2,A
   \   00009C   8882         MOV     DPL,R0
   \   00009E   8983         MOV     DPH,R1
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   EA           MOV     A,R2
   \   0000A5   2400         ADD     A,#0x0
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   E4           CLR     A
   \   0000AA   39           ADDC    A,R1
   \   0000AB   F5..         MOV     ?V0 + 1,A
   \   0000AD   7402         MOV     A,#0x2
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?US_SHR
   \   0000B4   AC..         MOV     R4,?V0 + 0
   \   0000B6   AD..         MOV     R5,?V0 + 1
   \   0000B8   7B32         MOV     R3,#0x32
   \   0000BA   7A04         MOV     R2,#0x4
   \   0000BC   7908         MOV     R1,#0x8
    463          
    464              case SAMPLEAPP_FLASH_CLUSTERID: // ’µΩ◊È≤• ˝æ›  
    465                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    466                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   0000BE   12....       LCALL   ??HalLedBlink?relay
    467                break;
    468            case SAMPLEAPP_P2P_CLUSTERID:
    469           
    470              break;
    471            }
    472          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000C1   740F         MOV     A,#0xf
   \   0000C3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C6   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    473          
    474          /*********************************************************************
    475           * @fn      SampleApp_SendPeriodicMessage
    476           *
    477           * @brief   Send the periodic message.
    478           *
    479           * @param   none
    480           *
    481           * @return  none
    482           */
    483          //∑÷Œˆ∑¢ÀÕ÷‹∆⁄–≈œ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    484          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    485          { 
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    486          #ifndef ZDO_COORDINATOR 
    487            //ªÒµ√µƒ ˝æ›Õ®π˝¥Æø⁄ ‰≥ˆµΩµÁƒ‘œ‘ æ  
    488            char str[6+3+1+1+3+1]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>_1`
   \   00000D   C082         PUSH    DPL
   \   00000F   7406         MOV     A,#0x6
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   00001B   D082         POP     DPL
   \   00001D   740F         MOV     A,#0xf
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    489            //ªÒ»°Œ¬ ™∂»
    490            unsigned char temp_humi[6]={0};
   \   000022   90....       MOV     DPTR,#`?<Constant {0}>_2`
   \   000025   C082         PUSH    DPL
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AC82         MOV     R4,DPL
   \   00002F   AD83         MOV     R5,DPH
   \   000031   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   000034   D082         POP     DPL
   \   000036   7406         MOV     A,#0x6
   \   000038   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    491            strcpy(temp_humi,DHT11());
                          ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

    strcpy(temp_humi,DHT11());
                     ^
"C:\Users\25814\Desktop\2020±œ…Ë\¿Ó’˛Œ∞_…≠¡÷ª‘÷\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",491  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   00003B                ; Setup parameters for call to function strcpy
   \   00003B                ; Setup parameters for call to function DHT11
   \   00003B   12....       LCALL   ??DHT11?relay
   \   00003E   EA           MOV     A,R2
   \   00003F   FC           MOV     R4,A
   \   000040   EB           MOV     A,R3
   \   000041   FD           MOV     R5,A
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   12....       LCALL   ??strcpy?relay
    492            //ªÒ»°∆¯ÃÂ
    493            uint16 gas = ReadGasData();
   \   00004F                ; Setup parameters for call to function ReadGasData
   \   00004F   12....       LCALL   ??ReadGasData?relay
   \   000052   8A..         MOV     ?V0 + 0,R2
   \   000054   8B..         MOV     ?V0 + 1,R3
    494            //ªÒ»°ª—Ê
    495            byte fire = 0;
    496            if(FIRE){
   \   000056   E590         MOV     A,0x90
   \   000058   FE           MOV     R6,A
    497              fire = 0;
    498            }
    499            else{
    500              fire = 1;
    501            }
    502            uint16 humi = ReadHumidityData();
    503            sprintf(str,"%s%3d%d%3d\n",temp_humi,gas,fire,humi);
   \   000059                ; Setup parameters for call to function sprintf
   \   000059                ; Setup parameters for call to function ReadHumidityData
   \   000059   12....       LCALL   ??ReadHumidityData?relay
   \   00005C   8A..         MOV     ?V0 + 2,R2
   \   00005E   8B..         MOV     ?V0 + 3,R3
   \   000060   78..         MOV     R0,#?V0 + 2
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   EE           MOV     A,R6
   \   000066   A2E1         MOV     C,0xE0 /* A   */.1
   \   000068   B3           CPL     C
   \   000069   E4           CLR     A
   \   00006A   33           RLC     A
   \   00006B   F5..         MOV     ?V0 + 2,A
   \   00006D   75..00       MOV     ?V0 + 3,#0x0
   \   000070   78..         MOV     R0,#?V0 + 2
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   7406         MOV     A,#0x6
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   8582..       MOV     ?V0 + 0,DPL
   \   000082   8583..       MOV     ?V0 + 1,DPH
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   7C..         MOV     R4,#`?<Constant "%s%3d%d%3d\\n">` & 0xff
   \   00008C   7D..         MOV     R5,#(`?<Constant "%s%3d%d%3d\\n">` >> 8) & 0xff
   \   00008E   740E         MOV     A,#0xe
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   AA82         MOV     R2,DPL
   \   000095   AB83         MOV     R3,DPH
   \   000097   12....       LCALL   ??sprintf?relay
   \   00009A   7408         MOV     A,#0x8
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
    504            HalUARTWrite(0,str,sizeof(str));
                                  ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00009F                ; Setup parameters for call to function HalUARTWrite
   \   00009F   7C0F         MOV     R4,#0xf
   \   0000A1   7D00         MOV     R5,#0x0
   \   0000A3   7406         MOV     A,#0x6
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   AA82         MOV     R2,DPL
   \   0000AA   AB83         MOV     R3,DPH
   \   0000AC   7900         MOV     R1,#0x0
   \   0000AE   12....       LCALL   ??HalUARTWrite?relay
    505          
    506             // µ˜”√AF_DataRequestΩ´ ˝æ›Œﬁœﬂπ„≤•≥ˆ»•
    507            if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    508                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    509                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    510                                 sizeof(str),       //∑¢ÀÕ ˝æ›≥§∂»
    511                                 (uchar*)str,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    512                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    513                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    514                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
   \   0000B1                ; Setup parameters for call to function AF_DataRequest
   \   0000B1   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000B4   78..         MOV     R0,#?V0 + 0
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B9   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0000BC   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0000BF   78..         MOV     R0,#?V0 + 0
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   7409         MOV     A,#0x9
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   8582..       MOV     ?V0 + 0,DPL
   \   0000CC   8583..       MOV     ?V0 + 1,DPH
   \   0000CF   78..         MOV     R0,#?V0 + 0
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D4   75..0F       MOV     ?V0 + 0,#0xf
   \   0000D7   75..00       MOV     ?V0 + 1,#0x0
   \   0000DA   78..         MOV     R0,#?V0 + 0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DF   75..01       MOV     ?V0 + 0,#0x1
   \   0000E2   78..         MOV     R0,#?V0 + 0
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E7   7920         MOV     R1,#0x20
   \   0000E9   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000EB   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000ED   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   0000EF   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   0000F1   12....       LCALL   ??AF_DataRequest?relay
   \   0000F4   7409         MOV     A,#0x9
   \   0000F6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F9   E9           MOV     A,R1
   \   0000FA   6007         JZ      ??SampleApp_SendPeriodicMessage_0
    515            {
    516            }
    517            else
    518            {
    519              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   0000FC                ; Setup parameters for call to function HalLedSet
   \   0000FC   7A01         MOV     R2,#0x1
   \   0000FE   7901         MOV     R1,#0x1
   \   000100   12....       LCALL   ??HalLedSet?relay
    520              // Error occurred in request to send.
    521            }
    522          #elif defined ZDO_COORDINATOR
    523            //–≠µ˜∆˜∑¢ÀÕ
    524            
    525              
    526            
    527          
    528          #endif 
    529            
    530           
    531          }
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   000103   7415         MOV     A,#0x15
   \   000105   12....       LCALL   ?DEALLOC_XSTACK8
   \   000108   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   00010B                REQUIRE _A_P1
    532          
    533          /*********************************************************************
    534           * @fn      SampleApp_SendFlashMessage
    535           *
    536           * @brief   Send the flash message to group 1.
    537           *
    538           * @param   flashTime - in milliseconds
    539           *
    540           * @return  none
    541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    542          void SampleApp_SendFlashMessage( uint16 flashTime )  
   \                     SampleApp_SendFlashMessage:
    543          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    544            uint8 buffer[3];
    545            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    546            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    547            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    548          
    549            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    550                                 SAMPLEAPP_FLASH_CLUSTERID,
    551                                 3,
    552                                 buffer,
    553                                 &SampleApp_TransID,
    554                                 AF_DISCV_ROUTE,
    555                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    556            {
    557            }
    558            else
    559            {
    560              // Error occurred in request to send.
    561            }
    562          }
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   7F02         MOV     R7,#0x2
   \   000078   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    563          void SampleApp_Send_P2P_Message(void){
   \                     SampleApp_Send_P2P_Message:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    564             
    565          }
   \   000000   02....       LJMP    ?BRET
    566          /*********************************************************************
    567          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    568           uint16 ReadGasData( void )
   \                     ReadGasData:
    569          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    570            uint16 reading = 0;
    571            
    572            /* Enable channel */
    573            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    574            
    575            /* writing to this register starts the extra conversion */
    576            ADCCON3 = 0x86;// AVDD5 “˝Ω≈  00£∫ 64 ≥È»°¬ (7 ŒªENOB)  0110£∫ AIN6
   \   000003   75B686       MOV     0xb6,#-0x7a
    577            
    578            /* Wait for the conversion to be done */
    579            while (!(ADCCON1 & 0x80));
   \                     ??ReadGasData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadGasData_0
    580            
    581            /* Disable channel after done conversion */
    582            ADCCFG &= (0x40 ^ 0xFF); //∞¥Œª“ÏªÚ°£»Á1010^1111=0101£®∂˛Ω¯÷∆£©
   \   00000C   53F2BF       ANL     0xf2,#0xbf
    583            
    584            /* Read the result */
    585            reading = ADCL;
   \   00000F                REQUIRE ?Subroutine0
   \   00000F                REQUIRE ADCCFG
   \   00000F                REQUIRE ADCCON3
   \   00000F                REQUIRE ADCCON1
   \   00000F                REQUIRE ADCL
   \   00000F                REQUIRE ADCH
   \   00000F                ; // Fall through to label ?Subroutine0
    586            reading |= (int16) (ADCH << 8); 
    587            
    588            reading >>= 8;
    589            
    590            return (reading);
    591          } 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E5BA         MOV     A,0xba
   \   000002   E5BB         MOV     A,0xbb
   \   000004   FA           MOV     R2,A
   \   000005   E4           CLR     A
   \   000006   FB           MOV     R3,A
   \   000007   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    592          uint16 ReadHumidityData( void )
   \                     ReadHumidityData:
    593          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    594            uint16 reading = 0;
    595            
    596            P0DIR &= ~0x20;  // …Ë÷√P0.5Œ™ ‰»Î∑Ω Ω
   \   000000   53FDDF       ANL     0xfd,#0xdf
    597            asm("NOP");asm("NOP");
   \   000003   00           NOP
   \   000004   00           NOP
    598            
    599            /* Clear ADC interrupt flag */
    600            ADCIF = 0;
   \   000005   C28D         CLR     0x88.5
    601            
    602            //ADCCON3 = (0x80 | HAL_ADC_DEC_064 | HAL_ADC_CHANNEL_5);
    603            ADCCON3 = (0x80 | 0x00 | 0x05);
   \   000007   75B685       MOV     0xb6,#-0x7b
    604            /* Wait for the conversion to finish */
    605            while ( !ADCIF );
   \                     ??ReadHumidityData_0:
   \   00000A   A28D         MOV     C,0x88.5
   \   00000C   50FC         JNC     ??ReadHumidityData_0
    606            
    607            asm("NOP");asm("NOP");
   \   00000E   00           NOP
   \   00000F   00           NOP
    608            
    609            /* Read the result */
    610            reading = ADCL;
   \   000010   80..         SJMP    ?Subroutine0
   \   000012                REQUIRE P0DIR
   \   000012                REQUIRE _A_TCON
   \   000012                REQUIRE ADCCON3
   \   000012                REQUIRE ADCL
   \   000012                REQUIRE ADCH
    611            reading |= (int16) (ADCH << 8);
    612            reading >>= 8;
    613            
    614            return reading;
    615          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 Example"
   \            35333020
   \            4578616D
   \            706C6500

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??myDelay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    myDelay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadHumidityData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadHumidityData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s%3d%d%3d\\n">`:
   \   000000   25732533     DB "%s%3d%d%3d\012"
   \            64256425
   \            33640A00

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadGasData                        0      0     33
     ReadHumidityData                   0      0     33
     SampleApp_HandleKeys               0      0     21
       -> SampleApp_SendFlashMessage
                                        0      0     18
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0     41
       -> osal_memset                   0      0     52
       -> osal_memcpy                   0      0     58
       -> HalUARTWrite                  0      0     52
       -> HalLedBlink                   0      0     52
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     31
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     54
       -> DHT11                         0      0     66
       -> strcpy                        0      0     66
       -> ReadGasData                   0      0     66
       -> ReadHumidityData              0      0     66
       -> sprintf                       0      0     82
       -> HalUARTWrite                  0      0     66
       -> AF_DataRequest                0      0     84
       -> HalLedSet                     0      0     66
     SampleApp_Send_P2P_Message         0      0      0
     myDelay                            0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_TCON                                  1
     _A_P1                                    1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     P1SEL                                    1
     P0DIR                                    1
     P1DIR                                    1
     AppTitle                                16
     myDelay                                 31
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         194
     ?Subroutine1                             5
     SampleApp_ProcessEvent                 171
     ?Subroutine2                             5
     SampleApp_HandleKeys                    22
     SampleApp_MessageMSGCB                 201
     ?Subroutine3                            12
     SampleApp_SendPeriodicMessage          267
     SampleApp_SendFlashMessage             123
     SampleApp_Send_P2P_Message               3
     ReadGasData                             15
     ?Subroutine0                            10
     ReadHumidityData                        18
     ?<Initializer for AppTitle>             16
     ??myDelay?relay                          6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??ReadGasData?relay                      6
     ??ReadHumidityData?relay                 6
     ?<Constant "UartInit OK\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant {0}>                         15
     ?<Constant {0}>_1                       15
     ?<Constant {0}>_2                        6
     ?<Constant "%s%3d%d%3d\n">              12

 
 1 077 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    11 bytes in segment SFR_AN
    16 bytes in segment XDATA_I
    16 bytes in segment XDATA_ID
    95 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
 1 153 bytes of CODE  memory
    95 bytes of CONST memory
     0 bytes of DATA  memory (+ 11 bytes shared)
    69 bytes of XDATA memory

Errors: none
Warnings: 3
