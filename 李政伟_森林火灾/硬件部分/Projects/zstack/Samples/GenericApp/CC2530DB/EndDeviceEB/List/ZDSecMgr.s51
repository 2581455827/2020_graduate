///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        25/Nov/2019  21:52:01 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Co /
//                          mponents\stack\zdo\ZDSecMgr.c                     /
//    Command line       =  -f C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å /
//                          \Projects\zstack\Samples\GenericApp\CC2530DB\..\. /
//                          .\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ      /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO       /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\6.Z /
//                          Stack-2.5.1a¹¤³ÌÄ£°å\Components\stack\zdo\ZDSecMg /
//                          r.c -D NWK_AUTO_POLL -D ZAPP_P1 -D MT_TASK -D     /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC          /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\EndDevi /
//                          ceEB\List\ -lA C:\Users\25814\Desktop\6.ZStack-2. /
//                          5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\GenericApp\C /
//                          C2530DB\EndDeviceEB\List\ --diag_suppress         /
//                          Pe001,Pa010 -o C:\Users\25814\Desktop\6.ZStack-2. /
//                          5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\GenericApp\C /
//                          C2530DB\EndDeviceEB\Obj\ -e --no_code_motion      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å /
//                          \Projects\zstack\Samples\GenericApp\CC2530DB\ -I  /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\Sour /
//                          ce\ -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³Ì /
//                          Ä£°å\Projects\zstack\Samples\GenericApp\CC2530DB\ /
//                          ..\..\..\ZMain\TI2530DB\ -I                       /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\hal\include\ -I                /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\hal\target\CC2530EB\ -I        /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\mac\include\ -I                /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\mac\high_level\ -I             /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\mac\low_level\srf04\ -I        /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\mac\low_level\srf04\single_chi /
//                          p\ -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ /
//                          £°å\Projects\zstack\Samples\GenericApp\CC2530DB\. /
//                          .\..\..\..\..\Components\mt\ -I                   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\osal\include\ -I               /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\services\saddr\ -I             /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\services\sdata\ -I             /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\af\ -I                   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\nwk\ -I                  /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sapi\ -I                 /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sec\ -I                  /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sys\ -I                  /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\zdo\ -I                  /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\zmac\ -I                       /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\zmac\f8w\ -Ohz                 /
//    List file          =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\EndDevi /
//                          ceEB\List\ZDSecMgr.s51                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDSecMgr

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_GT_X
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??APSME_IsDefaultTCLK?relay
        FUNCTION ??APSME_IsDefaultTCLK?relay,0203H
        PUBLIC ??APSME_IsLinkKeyValid?relay
        FUNCTION ??APSME_IsLinkKeyValid?relay,0203H
        PUBLIC ??APSME_KeyFwdToChild?relay
        FUNCTION ??APSME_KeyFwdToChild?relay,0203H
        PUBLIC ??APSME_LinkKeyNVIdGet?relay
        FUNCTION ??APSME_LinkKeyNVIdGet?relay,0203H
        PUBLIC ??APSME_LinkKeySet?relay
        FUNCTION ??APSME_LinkKeySet?relay,0203H
        PUBLIC ??APSME_MasterKeyGet?relay
        FUNCTION ??APSME_MasterKeyGet?relay,0203H
        PUBLIC ??APSME_SKA_TimerExpired?relay
        FUNCTION ??APSME_SKA_TimerExpired?relay,0203H
        PUBLIC ??APSME_TCLinkKeyInit?relay
        FUNCTION ??APSME_TCLinkKeyInit?relay,0203H
        PUBLIC ??APSME_TCLinkKeyLoad?relay
        FUNCTION ??APSME_TCLinkKeyLoad?relay,0203H
        PUBLIC ??APSME_TCLinkKeySync?relay
        FUNCTION ??APSME_TCLinkKeySync?relay,0203H
        PUBLIC ??ZDSecMgrAPSRemove?relay
        FUNCTION ??ZDSecMgrAPSRemove?relay,0203H
        PUBLIC ??ZDSecMgrAddLinkKey?relay
        FUNCTION ??ZDSecMgrAddLinkKey?relay,0203H
        PUBLIC ??ZDSecMgrAddrClear?relay
        FUNCTION ??ZDSecMgrAddrClear?relay,0203H
        PUBLIC ??ZDSecMgrAddrMgrUpdate?relay
        FUNCTION ??ZDSecMgrAddrMgrUpdate?relay,0203H
        PUBLIC ??ZDSecMgrAddrStore?relay
        FUNCTION ??ZDSecMgrAddrStore?relay,0203H
        PUBLIC ??ZDSecMgrAppKeyGet?relay
        FUNCTION ??ZDSecMgrAppKeyGet?relay,0203H
        PUBLIC ??ZDSecMgrAppKeyReq?relay
        FUNCTION ??ZDSecMgrAppKeyReq?relay,0203H
        PUBLIC ??ZDSecMgrApsLinkKeyInit?relay
        FUNCTION ??ZDSecMgrApsLinkKeyInit?relay,0203H
        PUBLIC ??ZDSecMgrAssocDeviceAuth?relay
        FUNCTION ??ZDSecMgrAssocDeviceAuth?relay,0203H
        PUBLIC ??ZDSecMgrAuthInitiate?relay
        FUNCTION ??ZDSecMgrAuthInitiate?relay,0203H
        PUBLIC ??ZDSecMgrAuthNwkKey?relay
        FUNCTION ??ZDSecMgrAuthNwkKey?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticateCfm?relay
        FUNCTION ??ZDSecMgrAuthenticateCfm?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticateInd?relay
        FUNCTION ??ZDSecMgrAuthenticateInd?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticationCheck?relay
        FUNCTION ??ZDSecMgrAuthenticationCheck?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticationSet?relay
        FUNCTION ??ZDSecMgrAuthenticationSet?relay,0203H
        PUBLIC ??ZDSecMgrConfig?relay
        FUNCTION ??ZDSecMgrConfig?relay,0203H
        PUBLIC ??ZDSecMgrCtrlAdd?relay
        FUNCTION ??ZDSecMgrCtrlAdd?relay,0203H
        PUBLIC ??ZDSecMgrCtrlInit?relay
        FUNCTION ??ZDSecMgrCtrlInit?relay,0203H
        PUBLIC ??ZDSecMgrCtrlLookup?relay
        FUNCTION ??ZDSecMgrCtrlLookup?relay,0203H
        PUBLIC ??ZDSecMgrCtrlRelease?relay
        FUNCTION ??ZDSecMgrCtrlRelease?relay,0203H
        PUBLIC ??ZDSecMgrCtrlReset?relay
        FUNCTION ??ZDSecMgrCtrlReset?relay,0203H
        PUBLIC ??ZDSecMgrCtrlSet?relay
        FUNCTION ??ZDSecMgrCtrlSet?relay,0203H
        PUBLIC ??ZDSecMgrCtrlTerm?relay
        FUNCTION ??ZDSecMgrCtrlTerm?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlHandler?relay
        FUNCTION ??ZDSecMgrDeviceCtrlHandler?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlSetup?relay
        FUNCTION ??ZDSecMgrDeviceCtrlSetup?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlUpdate?relay
        FUNCTION ??ZDSecMgrDeviceCtrlUpdate?relay,0203H
        PUBLIC ??ZDSecMgrDeviceEntryAdd?relay
        FUNCTION ??ZDSecMgrDeviceEntryAdd?relay,0203H
        PUBLIC ??ZDSecMgrDeviceEntryRemove?relay
        FUNCTION ??ZDSecMgrDeviceEntryRemove?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoin?relay
        FUNCTION ??ZDSecMgrDeviceJoin?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoinDirect?relay
        FUNCTION ??ZDSecMgrDeviceJoinDirect?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoinFwd?relay
        FUNCTION ??ZDSecMgrDeviceJoinFwd?relay,0203H
        PUBLIC ??ZDSecMgrDeviceNew?relay
        FUNCTION ??ZDSecMgrDeviceNew?relay,0203H
        PUBLIC ??ZDSecMgrDeviceRemove?relay
        FUNCTION ??ZDSecMgrDeviceRemove?relay,0203H
        PUBLIC ??ZDSecMgrDeviceRemoveByExtAddr?relay
        FUNCTION ??ZDSecMgrDeviceRemoveByExtAddr?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidate?relay
        FUNCTION ??ZDSecMgrDeviceValidate?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateCM?relay
        FUNCTION ??ZDSecMgrDeviceValidateCM?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateRM?relay
        FUNCTION ??ZDSecMgrDeviceValidateRM?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateSKKE?relay
        FUNCTION ??ZDSecMgrDeviceValidateSKKE?relay,0203H
        PUBLIC ??ZDSecMgrEntryFree?relay
        FUNCTION ??ZDSecMgrEntryFree?relay,0203H
        PUBLIC ??ZDSecMgrEntryInit?relay
        FUNCTION ??ZDSecMgrEntryInit?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookup?relay
        FUNCTION ??ZDSecMgrEntryLookup?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupAMI?relay
        FUNCTION ??ZDSecMgrEntryLookupAMI?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupAMIGetIndex?relay
        FUNCTION ??ZDSecMgrEntryLookupAMIGetIndex?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupExt?relay
        FUNCTION ??ZDSecMgrEntryLookupExt?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupExtGetIndex?relay
        FUNCTION ??ZDSecMgrEntryLookupExtGetIndex?relay,0203H
        PUBLIC ??ZDSecMgrEntryNew?relay
        FUNCTION ??ZDSecMgrEntryNew?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKey?relay
        FUNCTION ??ZDSecMgrEstablishKey?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKeyCfm?relay
        FUNCTION ??ZDSecMgrEstablishKeyCfm?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKeyInd?relay
        FUNCTION ??ZDSecMgrEstablishKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrEvent?relay
        FUNCTION ??ZDSecMgrEvent?relay,0203H
        PUBLIC ??ZDSecMgrExtAddrLookup?relay
        FUNCTION ??ZDSecMgrExtAddrLookup?relay,0203H
        PUBLIC ??ZDSecMgrExtAddrStore?relay
        FUNCTION ??ZDSecMgrExtAddrStore?relay,0203H
        PUBLIC ??ZDSecMgrInit?relay
        FUNCTION ??ZDSecMgrInit?relay,0203H
        PUBLIC ??ZDSecMgrInitNVKeyTables?relay
        FUNCTION ??ZDSecMgrInitNVKeyTables?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyInit?relay
        FUNCTION ??ZDSecMgrMasterKeyInit?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyLoad?relay
        FUNCTION ??ZDSecMgrMasterKeyLoad?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyLookup?relay
        FUNCTION ??ZDSecMgrMasterKeyLookup?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyStore?relay
        FUNCTION ??ZDSecMgrMasterKeyStore?relay,0203H
        PUBLIC ??ZDSecMgrNewDeviceEvent?relay
        FUNCTION ??ZDSecMgrNewDeviceEvent?relay,0203H
        PUBLIC ??ZDSecMgrNwkKeyInit?relay
        FUNCTION ??ZDSecMgrNwkKeyInit?relay,0203H
        PUBLIC ??ZDSecMgrPermitJoining?relay
        FUNCTION ??ZDSecMgrPermitJoining?relay,0203H
        PUBLIC ??ZDSecMgrPermitJoiningTimeout?relay
        FUNCTION ??ZDSecMgrPermitJoiningTimeout?relay,0203H
        PUBLIC ??ZDSecMgrReadKeyFromNv?relay
        FUNCTION ??ZDSecMgrReadKeyFromNv?relay,0203H
        PUBLIC ??ZDSecMgrRemoveDeviceInd?relay
        FUNCTION ??ZDSecMgrRemoveDeviceInd?relay,0203H
        PUBLIC ??ZDSecMgrRequestAppKey?relay
        FUNCTION ??ZDSecMgrRequestAppKey?relay,0203H
        PUBLIC ??ZDSecMgrRequestKeyInd?relay
        FUNCTION ??ZDSecMgrRequestKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrSaveApsLinkKey?relay
        FUNCTION ??ZDSecMgrSaveApsLinkKey?relay,0203H
        PUBLIC ??ZDSecMgrSaveTCLinkKey?relay
        FUNCTION ??ZDSecMgrSaveTCLinkKey?relay,0203H
        PUBLIC ??ZDSecMgrSendMasterKey?relay
        FUNCTION ??ZDSecMgrSendMasterKey?relay,0203H
        PUBLIC ??ZDSecMgrSendNwkKey?relay
        FUNCTION ??ZDSecMgrSendNwkKey?relay,0203H
        PUBLIC ??ZDSecMgrSetDefaultNV?relay
        FUNCTION ??ZDSecMgrSetDefaultNV?relay,0203H
        PUBLIC ??ZDSecMgrSetupPartner?relay
        FUNCTION ??ZDSecMgrSetupPartner?relay,0203H
        PUBLIC ??ZDSecMgrSwitchKeyInd?relay
        FUNCTION ??ZDSecMgrSwitchKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrTCDataLoad?relay
        FUNCTION ??ZDSecMgrTCDataLoad?relay,0203H
        PUBLIC ??ZDSecMgrTCExtAddrCheck?relay
        FUNCTION ??ZDSecMgrTCExtAddrCheck?relay,0203H
        PUBLIC ??ZDSecMgrTransportKeyInd?relay
        FUNCTION ??ZDSecMgrTransportKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrUpdateDeviceInd?relay
        FUNCTION ??ZDSecMgrUpdateDeviceInd?relay,0203H
        PUBLIC APSME_IsDefaultTCLK
        FUNCTION APSME_IsDefaultTCLK,0203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC APSME_IsLinkKeyValid
        FUNCTION APSME_IsLinkKeyValid,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC APSME_KeyFwdToChild
        FUNCTION APSME_KeyFwdToChild,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC APSME_LinkKeyNVIdGet
        FUNCTION APSME_LinkKeyNVIdGet,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_LinkKeySet
        FUNCTION APSME_LinkKeySet,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC APSME_MasterKeyGet
        FUNCTION APSME_MasterKeyGet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_SKA_TimerExpired
        FUNCTION APSME_SKA_TimerExpired,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC APSME_TCLinkKeyInit
        FUNCTION APSME_TCLinkKeyInit,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 47, STACK
        PUBLIC APSME_TCLinkKeyLoad
        FUNCTION APSME_TCLinkKeyLoad,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        PUBLIC APSME_TCLinkKeySync
        FUNCTION APSME_TCLinkKeySync,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 48, STACK
        PUBLIC ApsLinkKeyFrmCntr
        PUBLIC TCLinkKeyFrmCntr
        PUBLIC TrustCenterLinkKey
        PUBLIC ZDSecMgrAPSRemove
        FUNCTION ZDSecMgrAPSRemove,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrAddLinkKey
        FUNCTION ZDSecMgrAddLinkKey,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrAddrMgrUpdate
        FUNCTION ZDSecMgrAddrMgrUpdate,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAddrStore
        FUNCTION ZDSecMgrAddrStore,021203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAppKeyGet
        FUNCTION ZDSecMgrAppKeyGet,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrAppKeyReq
        FUNCTION ZDSecMgrAppKeyReq,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 48, STACK
        PUBLIC ZDSecMgrAppKeyType
        PUBLIC ZDSecMgrApsLinkKeyInit
        FUNCTION ZDSecMgrApsLinkKeyInit,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 38, STACK
        PUBLIC ZDSecMgrAssocDeviceAuth
        FUNCTION ZDSecMgrAssocDeviceAuth,0203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthInitiate
        FUNCTION ZDSecMgrAuthInitiate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrAuthNwkKey
        FUNCTION ZDSecMgrAuthNwkKey,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticateCfm
        FUNCTION ZDSecMgrAuthenticateCfm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticateInd
        FUNCTION ZDSecMgrAuthenticateInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDSecMgrAuthenticationCheck
        FUNCTION ZDSecMgrAuthenticationCheck,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDSecMgrAuthenticationSet
        FUNCTION ZDSecMgrAuthenticationSet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrConfig
        FUNCTION ZDSecMgrConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrCtrlAdd
        FUNCTION ZDSecMgrCtrlAdd,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDSecMgrCtrlData
        PUBLIC ZDSecMgrCtrlInit
        FUNCTION ZDSecMgrCtrlInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrCtrlLookup
        FUNCTION ZDSecMgrCtrlLookup,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrCtrlRelease
        FUNCTION ZDSecMgrCtrlRelease,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrCtrlReset
        FUNCTION ZDSecMgrCtrlReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrCtrlSet
        FUNCTION ZDSecMgrCtrlSet,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrCtrlTerm
        FUNCTION ZDSecMgrCtrlTerm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceCtrlHandler
        FUNCTION ZDSecMgrDeviceCtrlHandler,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceCtrlSetup
        FUNCTION ZDSecMgrDeviceCtrlSetup,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceCtrlUpdate
        FUNCTION ZDSecMgrDeviceCtrlUpdate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrDeviceEntryAdd
        FUNCTION ZDSecMgrDeviceEntryAdd,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrDeviceEntryRemove
        FUNCTION ZDSecMgrDeviceEntryRemove,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceJoin
        FUNCTION ZDSecMgrDeviceJoin,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrDeviceJoinDirect
        FUNCTION ZDSecMgrDeviceJoinDirect,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceJoinFwd
        FUNCTION ZDSecMgrDeviceJoinFwd,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ZDSecMgrDeviceNew
        FUNCTION ZDSecMgrDeviceNew,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceRemove
        FUNCTION ZDSecMgrDeviceRemove,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrDeviceValidate
        FUNCTION ZDSecMgrDeviceValidate,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceValidateCM
        FUNCTION ZDSecMgrDeviceValidateCM,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDSecMgrDeviceValidateRM
        FUNCTION ZDSecMgrDeviceValidateRM,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceValidateSKKE
        FUNCTION ZDSecMgrDeviceValidateSKKE,021203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrEntries
        PUBLIC ZDSecMgrEntryFree
        FUNCTION ZDSecMgrEntryFree,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrEntryInit
        FUNCTION ZDSecMgrEntryInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrEntryLookup
        FUNCTION ZDSecMgrEntryLookup,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrEntryLookupAMI
        FUNCTION ZDSecMgrEntryLookupAMI,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEntryLookupAMIGetIndex
        FUNCTION ZDSecMgrEntryLookupAMIGetIndex,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEntryLookupExt
        FUNCTION ZDSecMgrEntryLookupExt,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryLookupExtGetIndex
        FUNCTION ZDSecMgrEntryLookupExtGetIndex,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDSecMgrEntryNew
        FUNCTION ZDSecMgrEntryNew,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEstablishKey
        FUNCTION ZDSecMgrEstablishKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrEstablishKeyCfm
        FUNCTION ZDSecMgrEstablishKeyCfm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDSecMgrEstablishKeyInd
        FUNCTION ZDSecMgrEstablishKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDSecMgrEvent
        FUNCTION ZDSecMgrEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDSecMgrExtAddrLookup
        FUNCTION ZDSecMgrExtAddrLookup,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrExtAddrStore
        FUNCTION ZDSecMgrExtAddrStore,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrInit
        FUNCTION ZDSecMgrInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrInitNVKeyTables
        FUNCTION ZDSecMgrInitNVKeyTables,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrMasterKeyInit
        FUNCTION ZDSecMgrMasterKeyInit,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 32, STACK
        PUBLIC ZDSecMgrMasterKeyLoad
        FUNCTION ZDSecMgrMasterKeyLoad,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrMasterKeyLookup
        FUNCTION ZDSecMgrMasterKeyLookup,021203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 36, STACK
        PUBLIC ZDSecMgrMasterKeyStore
        FUNCTION ZDSecMgrMasterKeyStore,021203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDSecMgrNwkKeyInit
        FUNCTION ZDSecMgrNwkKeyInit,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ZDSecMgrPermitJoining
        FUNCTION ZDSecMgrPermitJoining,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrPermitJoiningEnabled
        PUBLIC ZDSecMgrPermitJoiningTimed
        PUBLIC ZDSecMgrPermitJoiningTimeout
        FUNCTION ZDSecMgrPermitJoiningTimeout,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrReadKeyFromNv
        FUNCTION ZDSecMgrReadKeyFromNv,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrRemoveDeviceInd
        FUNCTION ZDSecMgrRemoveDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrRequestAppKey
        FUNCTION ZDSecMgrRequestAppKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC ZDSecMgrRequestKeyInd
        FUNCTION ZDSecMgrRequestKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrSaveApsLinkKey
        FUNCTION ZDSecMgrSaveApsLinkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrSendMasterKey
        FUNCTION ZDSecMgrSendMasterKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 45, STACK
        PUBLIC ZDSecMgrSendNwkKey
        FUNCTION ZDSecMgrSendNwkKey,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 44, STACK
        PUBLIC ZDSecMgrSetDefaultNV
        FUNCTION ZDSecMgrSetDefaultNV,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDSecMgrSetupPartner
        FUNCTION ZDSecMgrSetupPartner,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrTCAuthenticated
        PUBLIC ZDSecMgrTCDataLoad
        FUNCTION ZDSecMgrTCDataLoad,021203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 47, STACK
        PUBLIC ZDSecMgrTCExtAddr
        PUBLIC ZDSecMgrTCExtAddrCheck
        FUNCTION ZDSecMgrTCExtAddrCheck,021203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrTCMasterKey
        PUBLIC ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_memset         SYMBOL "osal_memset"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_write       SYMBOL "osal_nv_write"
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
osal_nv_read        SYMBOL "osal_nv_read"
osal_memcpy         SYMBOL "osal_memcpy"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
osal_mem_free       SYMBOL "osal_mem_free"
SSP_GetTrueRand     SYMBOL "SSP_GetTrueRand"
APSME_LookupNwkAddr SYMBOL "APSME_LookupNwkAddr"
APSME_LookupExtAddr SYMBOL "APSME_LookupExtAddr"
APSME_TransportKeyReq SYMBOL "APSME_TransportKeyReq"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
APSME_EstablishKeyReq SYMBOL "APSME_EstablishKeyReq"
NLME_ReadNwkKeyInfo SYMBOL "NLME_ReadNwkKeyInfo"
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
AssocGetWithExt     SYMBOL "AssocGetWithExt"
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
APSME_RemoveDeviceReq SYMBOL "APSME_RemoveDeviceReq"
AssocGetWithShort   SYMBOL "AssocGetWithShort"
APSME_UpdateDeviceReq SYMBOL "APSME_UpdateDeviceReq"
APSME_AuthenticateReq SYMBOL "APSME_AuthenticateReq"
osal_set_event      SYMBOL "osal_set_event"
APSME_SecurityNM    SYMBOL "APSME_SecurityNM"
AssocMatchDeviceStatus SYMBOL "AssocMatchDeviceStatus"
AssocRemove         SYMBOL "AssocRemove"
AddrMgrExtAddrLookup SYMBOL "AddrMgrExtAddrLookup"
AddrMgrExtAddrEqual SYMBOL "AddrMgrExtAddrEqual"
APSME_EstablishKeyRsp SYMBOL "APSME_EstablishKeyRsp"
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
APSME_RequestKeyReq SYMBOL "APSME_RequestKeyReq"
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
osal_memcmp         SYMBOL "osal_memcmp"
??APSME_AuthenticateReq?relay SYMBOL "?relay", APSME_AuthenticateReq
??APSME_EstablishKeyReq?relay SYMBOL "?relay", APSME_EstablishKeyReq
??APSME_EstablishKeyRsp?relay SYMBOL "?relay", APSME_EstablishKeyRsp
??APSME_LookupExtAddr?relay SYMBOL "?relay", APSME_LookupExtAddr
??APSME_LookupNwkAddr?relay SYMBOL "?relay", APSME_LookupNwkAddr
??APSME_RemoveDeviceReq?relay SYMBOL "?relay", APSME_RemoveDeviceReq
??APSME_RequestKeyReq?relay SYMBOL "?relay", APSME_RequestKeyReq
??APSME_SecurityNM?relay SYMBOL "?relay", APSME_SecurityNM
??APSME_TransportKeyReq?relay SYMBOL "?relay", APSME_TransportKeyReq
??APSME_UpdateDeviceReq?relay SYMBOL "?relay", APSME_UpdateDeviceReq
??AddrMgrEntryGet?relay SYMBOL "?relay", AddrMgrEntryGet
??AddrMgrEntryLookupExt?relay SYMBOL "?relay", AddrMgrEntryLookupExt
??AddrMgrEntryLookupNwk?relay SYMBOL "?relay", AddrMgrEntryLookupNwk
??AddrMgrEntryRelease?relay SYMBOL "?relay", AddrMgrEntryRelease
??AddrMgrEntryUpdate?relay SYMBOL "?relay", AddrMgrEntryUpdate
??AddrMgrExtAddrEqual?relay SYMBOL "?relay", AddrMgrExtAddrEqual
??AddrMgrExtAddrLookup?relay SYMBOL "?relay", AddrMgrExtAddrLookup
??AddrMgrExtAddrSet?relay SYMBOL "?relay", AddrMgrExtAddrSet
??AddrMgrExtAddrValid?relay SYMBOL "?relay", AddrMgrExtAddrValid
??AssocGetWithExt?relay SYMBOL "?relay", AssocGetWithExt
??AssocGetWithShort?relay SYMBOL "?relay", AssocGetWithShort
??AssocMatchDeviceStatus?relay SYMBOL "?relay", AssocMatchDeviceStatus
??AssocRemove?relay SYMBOL "?relay", AssocRemove
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??NLME_LeaveReq?relay SYMBOL "?relay", NLME_LeaveReq
??NLME_ReadNwkKeyInfo?relay SYMBOL "?relay", NLME_ReadNwkKeyInfo
??SSP_GetTrueRand?relay SYMBOL "?relay", SSP_GetTrueRand
??SSP_SwitchNwkKey?relay SYMBOL "?relay", SSP_SwitchNwkKey
??SSP_UpdateNwkKey?relay SYMBOL "?relay", SSP_UpdateNwkKey
??ZDApp_NVUpdate?relay SYMBOL "?relay", ZDApp_NVUpdate
??ZDP_IEEEAddrReq?relay SYMBOL "?relay", ZDP_IEEEAddrReq
??ZDP_NwkAddrReq?relay SYMBOL "?relay", ZDP_NwkAddrReq
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcmp?relay SYMBOL "?relay", osal_memcmp
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
APSME_IsDefaultTCLK SYMBOL "APSME_IsDefaultTCLK"
??APSME_IsDefaultTCLK?relay SYMBOL "?relay", APSME_IsDefaultTCLK
APSME_IsLinkKeyValid SYMBOL "APSME_IsLinkKeyValid"
??APSME_IsLinkKeyValid?relay SYMBOL "?relay", APSME_IsLinkKeyValid
APSME_KeyFwdToChild SYMBOL "APSME_KeyFwdToChild"
??APSME_KeyFwdToChild?relay SYMBOL "?relay", APSME_KeyFwdToChild
APSME_LinkKeyNVIdGet SYMBOL "APSME_LinkKeyNVIdGet"
??APSME_LinkKeyNVIdGet?relay SYMBOL "?relay", APSME_LinkKeyNVIdGet
APSME_LinkKeySet    SYMBOL "APSME_LinkKeySet"
??APSME_LinkKeySet?relay SYMBOL "?relay", APSME_LinkKeySet
APSME_MasterKeyGet  SYMBOL "APSME_MasterKeyGet"
??APSME_MasterKeyGet?relay SYMBOL "?relay", APSME_MasterKeyGet
APSME_SKA_TimerExpired SYMBOL "APSME_SKA_TimerExpired"
??APSME_SKA_TimerExpired?relay SYMBOL "?relay", APSME_SKA_TimerExpired
APSME_TCLinkKeyInit SYMBOL "APSME_TCLinkKeyInit"
??APSME_TCLinkKeyInit?relay SYMBOL "?relay", APSME_TCLinkKeyInit
APSME_TCLinkKeyLoad SYMBOL "APSME_TCLinkKeyLoad"
??APSME_TCLinkKeyLoad?relay SYMBOL "?relay", APSME_TCLinkKeyLoad
APSME_TCLinkKeySync SYMBOL "APSME_TCLinkKeySync"
??APSME_TCLinkKeySync?relay SYMBOL "?relay", APSME_TCLinkKeySync
ZDSecMgrAPSRemove   SYMBOL "ZDSecMgrAPSRemove"
??ZDSecMgrAPSRemove?relay SYMBOL "?relay", ZDSecMgrAPSRemove
ZDSecMgrAddLinkKey  SYMBOL "ZDSecMgrAddLinkKey"
??ZDSecMgrAddLinkKey?relay SYMBOL "?relay", ZDSecMgrAddLinkKey
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
??ZDSecMgrAddrClear?relay SYMBOL "?relay", ZDSecMgrAddrClear
ZDSecMgrAddrMgrUpdate SYMBOL "ZDSecMgrAddrMgrUpdate"
??ZDSecMgrAddrMgrUpdate?relay SYMBOL "?relay", ZDSecMgrAddrMgrUpdate
ZDSecMgrAddrStore   SYMBOL "ZDSecMgrAddrStore"
??ZDSecMgrAddrStore?relay SYMBOL "?relay", ZDSecMgrAddrStore
ZDSecMgrAppKeyGet   SYMBOL "ZDSecMgrAppKeyGet"
??ZDSecMgrAppKeyGet?relay SYMBOL "?relay", ZDSecMgrAppKeyGet
ZDSecMgrAppKeyReq   SYMBOL "ZDSecMgrAppKeyReq"
??ZDSecMgrAppKeyReq?relay SYMBOL "?relay", ZDSecMgrAppKeyReq
ZDSecMgrApsLinkKeyInit SYMBOL "ZDSecMgrApsLinkKeyInit"
??ZDSecMgrApsLinkKeyInit?relay SYMBOL "?relay", ZDSecMgrApsLinkKeyInit
ZDSecMgrAssocDeviceAuth SYMBOL "ZDSecMgrAssocDeviceAuth"
??ZDSecMgrAssocDeviceAuth?relay SYMBOL "?relay", ZDSecMgrAssocDeviceAuth
ZDSecMgrAuthInitiate SYMBOL "ZDSecMgrAuthInitiate"
??ZDSecMgrAuthInitiate?relay SYMBOL "?relay", ZDSecMgrAuthInitiate
ZDSecMgrAuthNwkKey  SYMBOL "ZDSecMgrAuthNwkKey"
??ZDSecMgrAuthNwkKey?relay SYMBOL "?relay", ZDSecMgrAuthNwkKey
ZDSecMgrAuthenticateCfm SYMBOL "ZDSecMgrAuthenticateCfm"
??ZDSecMgrAuthenticateCfm?relay SYMBOL "?relay", ZDSecMgrAuthenticateCfm
ZDSecMgrAuthenticateInd SYMBOL "ZDSecMgrAuthenticateInd"
??ZDSecMgrAuthenticateInd?relay SYMBOL "?relay", ZDSecMgrAuthenticateInd
ZDSecMgrAuthenticationCheck SYMBOL "ZDSecMgrAuthenticationCheck"
??ZDSecMgrAuthenticationCheck?relay SYMBOL "?relay", ZDSecMgrAuthenticationCheck
ZDSecMgrAuthenticationSet SYMBOL "ZDSecMgrAuthenticationSet"
??ZDSecMgrAuthenticationSet?relay SYMBOL "?relay", ZDSecMgrAuthenticationSet
ZDSecMgrConfig      SYMBOL "ZDSecMgrConfig"
??ZDSecMgrConfig?relay SYMBOL "?relay", ZDSecMgrConfig
ZDSecMgrCtrlAdd     SYMBOL "ZDSecMgrCtrlAdd"
??ZDSecMgrCtrlAdd?relay SYMBOL "?relay", ZDSecMgrCtrlAdd
ZDSecMgrCtrlInit    SYMBOL "ZDSecMgrCtrlInit"
??ZDSecMgrCtrlInit?relay SYMBOL "?relay", ZDSecMgrCtrlInit
ZDSecMgrCtrlLookup  SYMBOL "ZDSecMgrCtrlLookup"
??ZDSecMgrCtrlLookup?relay SYMBOL "?relay", ZDSecMgrCtrlLookup
ZDSecMgrCtrlRelease SYMBOL "ZDSecMgrCtrlRelease"
??ZDSecMgrCtrlRelease?relay SYMBOL "?relay", ZDSecMgrCtrlRelease
ZDSecMgrCtrlReset   SYMBOL "ZDSecMgrCtrlReset"
??ZDSecMgrCtrlReset?relay SYMBOL "?relay", ZDSecMgrCtrlReset
ZDSecMgrCtrlSet     SYMBOL "ZDSecMgrCtrlSet"
??ZDSecMgrCtrlSet?relay SYMBOL "?relay", ZDSecMgrCtrlSet
ZDSecMgrCtrlTerm    SYMBOL "ZDSecMgrCtrlTerm"
??ZDSecMgrCtrlTerm?relay SYMBOL "?relay", ZDSecMgrCtrlTerm
ZDSecMgrDeviceCtrlHandler SYMBOL "ZDSecMgrDeviceCtrlHandler"
??ZDSecMgrDeviceCtrlHandler?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlHandler
ZDSecMgrDeviceCtrlSetup SYMBOL "ZDSecMgrDeviceCtrlSetup"
??ZDSecMgrDeviceCtrlSetup?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlSetup
ZDSecMgrDeviceCtrlUpdate SYMBOL "ZDSecMgrDeviceCtrlUpdate"
??ZDSecMgrDeviceCtrlUpdate?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlUpdate
ZDSecMgrDeviceEntryAdd SYMBOL "ZDSecMgrDeviceEntryAdd"
??ZDSecMgrDeviceEntryAdd?relay SYMBOL "?relay", ZDSecMgrDeviceEntryAdd
ZDSecMgrDeviceEntryRemove SYMBOL "ZDSecMgrDeviceEntryRemove"
??ZDSecMgrDeviceEntryRemove?relay SYMBOL "?relay", ZDSecMgrDeviceEntryRemove
ZDSecMgrDeviceJoin  SYMBOL "ZDSecMgrDeviceJoin"
??ZDSecMgrDeviceJoin?relay SYMBOL "?relay", ZDSecMgrDeviceJoin
ZDSecMgrDeviceJoinDirect SYMBOL "ZDSecMgrDeviceJoinDirect"
??ZDSecMgrDeviceJoinDirect?relay SYMBOL "?relay", ZDSecMgrDeviceJoinDirect
ZDSecMgrDeviceJoinFwd SYMBOL "ZDSecMgrDeviceJoinFwd"
??ZDSecMgrDeviceJoinFwd?relay SYMBOL "?relay", ZDSecMgrDeviceJoinFwd
ZDSecMgrDeviceNew   SYMBOL "ZDSecMgrDeviceNew"
??ZDSecMgrDeviceNew?relay SYMBOL "?relay", ZDSecMgrDeviceNew
ZDSecMgrDeviceRemove SYMBOL "ZDSecMgrDeviceRemove"
??ZDSecMgrDeviceRemove?relay SYMBOL "?relay", ZDSecMgrDeviceRemove
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
??ZDSecMgrDeviceRemoveByExtAddr?relay SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrDeviceValidate SYMBOL "ZDSecMgrDeviceValidate"
??ZDSecMgrDeviceValidate?relay SYMBOL "?relay", ZDSecMgrDeviceValidate
ZDSecMgrDeviceValidateCM SYMBOL "ZDSecMgrDeviceValidateCM"
??ZDSecMgrDeviceValidateCM?relay SYMBOL "?relay", ZDSecMgrDeviceValidateCM
ZDSecMgrDeviceValidateRM SYMBOL "ZDSecMgrDeviceValidateRM"
??ZDSecMgrDeviceValidateRM?relay SYMBOL "?relay", ZDSecMgrDeviceValidateRM
ZDSecMgrDeviceValidateSKKE SYMBOL "ZDSecMgrDeviceValidateSKKE"
??ZDSecMgrDeviceValidateSKKE?relay SYMBOL "?relay", ZDSecMgrDeviceValidateSKKE
ZDSecMgrEntryFree   SYMBOL "ZDSecMgrEntryFree"
??ZDSecMgrEntryFree?relay SYMBOL "?relay", ZDSecMgrEntryFree
ZDSecMgrEntryInit   SYMBOL "ZDSecMgrEntryInit"
??ZDSecMgrEntryInit?relay SYMBOL "?relay", ZDSecMgrEntryInit
ZDSecMgrEntryLookup SYMBOL "ZDSecMgrEntryLookup"
??ZDSecMgrEntryLookup?relay SYMBOL "?relay", ZDSecMgrEntryLookup
ZDSecMgrEntryLookupAMI SYMBOL "ZDSecMgrEntryLookupAMI"
??ZDSecMgrEntryLookupAMI?relay SYMBOL "?relay", ZDSecMgrEntryLookupAMI
ZDSecMgrEntryLookupAMIGetIndex SYMBOL "ZDSecMgrEntryLookupAMIGetIndex"
??ZDSecMgrEntryLookupAMIGetIndex?relay SYMBOL "?relay", ZDSecMgrEntryLookupAMIGetIndex
ZDSecMgrEntryLookupExt SYMBOL "ZDSecMgrEntryLookupExt"
??ZDSecMgrEntryLookupExt?relay SYMBOL "?relay", ZDSecMgrEntryLookupExt
ZDSecMgrEntryLookupExtGetIndex SYMBOL "ZDSecMgrEntryLookupExtGetIndex"
??ZDSecMgrEntryLookupExtGetIndex?relay SYMBOL "?relay", ZDSecMgrEntryLookupExtGetIndex
ZDSecMgrEntryNew    SYMBOL "ZDSecMgrEntryNew"
??ZDSecMgrEntryNew?relay SYMBOL "?relay", ZDSecMgrEntryNew
ZDSecMgrEstablishKey SYMBOL "ZDSecMgrEstablishKey"
??ZDSecMgrEstablishKey?relay SYMBOL "?relay", ZDSecMgrEstablishKey
ZDSecMgrEstablishKeyCfm SYMBOL "ZDSecMgrEstablishKeyCfm"
??ZDSecMgrEstablishKeyCfm?relay SYMBOL "?relay", ZDSecMgrEstablishKeyCfm
ZDSecMgrEstablishKeyInd SYMBOL "ZDSecMgrEstablishKeyInd"
??ZDSecMgrEstablishKeyInd?relay SYMBOL "?relay", ZDSecMgrEstablishKeyInd
ZDSecMgrEvent       SYMBOL "ZDSecMgrEvent"
??ZDSecMgrEvent?relay SYMBOL "?relay", ZDSecMgrEvent
ZDSecMgrExtAddrLookup SYMBOL "ZDSecMgrExtAddrLookup"
??ZDSecMgrExtAddrLookup?relay SYMBOL "?relay", ZDSecMgrExtAddrLookup
ZDSecMgrExtAddrStore SYMBOL "ZDSecMgrExtAddrStore"
??ZDSecMgrExtAddrStore?relay SYMBOL "?relay", ZDSecMgrExtAddrStore
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
??ZDSecMgrInit?relay SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrInitNVKeyTables SYMBOL "ZDSecMgrInitNVKeyTables"
??ZDSecMgrInitNVKeyTables?relay SYMBOL "?relay", ZDSecMgrInitNVKeyTables
ZDSecMgrMasterKeyInit SYMBOL "ZDSecMgrMasterKeyInit"
??ZDSecMgrMasterKeyInit?relay SYMBOL "?relay", ZDSecMgrMasterKeyInit
ZDSecMgrMasterKeyLoad SYMBOL "ZDSecMgrMasterKeyLoad"
??ZDSecMgrMasterKeyLoad?relay SYMBOL "?relay", ZDSecMgrMasterKeyLoad
ZDSecMgrMasterKeyLookup SYMBOL "ZDSecMgrMasterKeyLookup"
??ZDSecMgrMasterKeyLookup?relay SYMBOL "?relay", ZDSecMgrMasterKeyLookup
ZDSecMgrMasterKeyStore SYMBOL "ZDSecMgrMasterKeyStore"
??ZDSecMgrMasterKeyStore?relay SYMBOL "?relay", ZDSecMgrMasterKeyStore
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
??ZDSecMgrNewDeviceEvent?relay SYMBOL "?relay", ZDSecMgrNewDeviceEvent
ZDSecMgrNwkKeyInit  SYMBOL "ZDSecMgrNwkKeyInit"
??ZDSecMgrNwkKeyInit?relay SYMBOL "?relay", ZDSecMgrNwkKeyInit
ZDSecMgrPermitJoining SYMBOL "ZDSecMgrPermitJoining"
??ZDSecMgrPermitJoining?relay SYMBOL "?relay", ZDSecMgrPermitJoining
ZDSecMgrPermitJoiningTimeout SYMBOL "ZDSecMgrPermitJoiningTimeout"
??ZDSecMgrPermitJoiningTimeout?relay SYMBOL "?relay", ZDSecMgrPermitJoiningTimeout
ZDSecMgrReadKeyFromNv SYMBOL "ZDSecMgrReadKeyFromNv"
??ZDSecMgrReadKeyFromNv?relay SYMBOL "?relay", ZDSecMgrReadKeyFromNv
ZDSecMgrRemoveDeviceInd SYMBOL "ZDSecMgrRemoveDeviceInd"
??ZDSecMgrRemoveDeviceInd?relay SYMBOL "?relay", ZDSecMgrRemoveDeviceInd
ZDSecMgrRequestAppKey SYMBOL "ZDSecMgrRequestAppKey"
??ZDSecMgrRequestAppKey?relay SYMBOL "?relay", ZDSecMgrRequestAppKey
ZDSecMgrRequestKeyInd SYMBOL "ZDSecMgrRequestKeyInd"
??ZDSecMgrRequestKeyInd?relay SYMBOL "?relay", ZDSecMgrRequestKeyInd
ZDSecMgrSaveApsLinkKey SYMBOL "ZDSecMgrSaveApsLinkKey"
??ZDSecMgrSaveApsLinkKey?relay SYMBOL "?relay", ZDSecMgrSaveApsLinkKey
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
??ZDSecMgrSaveTCLinkKey?relay SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
ZDSecMgrSendMasterKey SYMBOL "ZDSecMgrSendMasterKey"
??ZDSecMgrSendMasterKey?relay SYMBOL "?relay", ZDSecMgrSendMasterKey
ZDSecMgrSendNwkKey  SYMBOL "ZDSecMgrSendNwkKey"
??ZDSecMgrSendNwkKey?relay SYMBOL "?relay", ZDSecMgrSendNwkKey
ZDSecMgrSetDefaultNV SYMBOL "ZDSecMgrSetDefaultNV"
??ZDSecMgrSetDefaultNV?relay SYMBOL "?relay", ZDSecMgrSetDefaultNV
ZDSecMgrSetupPartner SYMBOL "ZDSecMgrSetupPartner"
??ZDSecMgrSetupPartner?relay SYMBOL "?relay", ZDSecMgrSetupPartner
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
??ZDSecMgrSwitchKeyInd?relay SYMBOL "?relay", ZDSecMgrSwitchKeyInd
ZDSecMgrTCDataLoad  SYMBOL "ZDSecMgrTCDataLoad"
??ZDSecMgrTCDataLoad?relay SYMBOL "?relay", ZDSecMgrTCDataLoad
ZDSecMgrTCExtAddrCheck SYMBOL "ZDSecMgrTCExtAddrCheck"
??ZDSecMgrTCExtAddrCheck?relay SYMBOL "?relay", ZDSecMgrTCExtAddrCheck
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
??ZDSecMgrTransportKeyInd?relay SYMBOL "?relay", ZDSecMgrTransportKeyInd
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
??ZDSecMgrUpdateDeviceInd?relay SYMBOL "?relay", ZDSecMgrUpdateDeviceInd

        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_GetTrueRand
        FUNCTION SSP_GetTrueRand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupNwkAddr
        FUNCTION APSME_LookupNwkAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupExtAddr
        FUNCTION APSME_LookupExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_TransportKeyReq
        FUNCTION APSME_TransportKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_EstablishKeyReq
        FUNCTION APSME_EstablishKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReadNwkKeyInfo
        FUNCTION NLME_ReadNwkKeyInfo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithExt
        FUNCTION AssocGetWithExt,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RemoveDeviceReq
        FUNCTION APSME_RemoveDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithShort
        FUNCTION AssocGetWithShort,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UpdateDeviceReq
        FUNCTION APSME_UpdateDeviceReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_AuthenticateReq
        FUNCTION APSME_AuthenticateReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SecurityNM
        FUNCTION APSME_SecurityNM,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMatchDeviceStatus
        FUNCTION AssocMatchDeviceStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocRemove
        FUNCTION AssocRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrLookup
        FUNCTION AddrMgrExtAddrLookup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrEqual
        FUNCTION AddrMgrExtAddrEqual,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_EstablishKeyRsp
        FUNCTION APSME_EstablishKeyRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RequestKeyReq
        FUNCTION APSME_RequestKeyReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??APSME_AuthenticateReq?relay
        FUNCTION ??APSME_AuthenticateReq?relay,00H
        EXTERN ??APSME_EstablishKeyReq?relay
        FUNCTION ??APSME_EstablishKeyReq?relay,00H
        EXTERN ??APSME_EstablishKeyRsp?relay
        FUNCTION ??APSME_EstablishKeyRsp?relay,00H
        EXTERN ??APSME_LookupExtAddr?relay
        FUNCTION ??APSME_LookupExtAddr?relay,00H
        EXTERN ??APSME_LookupNwkAddr?relay
        FUNCTION ??APSME_LookupNwkAddr?relay,00H
        EXTERN ??APSME_RemoveDeviceReq?relay
        FUNCTION ??APSME_RemoveDeviceReq?relay,00H
        EXTERN ??APSME_RequestKeyReq?relay
        FUNCTION ??APSME_RequestKeyReq?relay,00H
        EXTERN ??APSME_SecurityNM?relay
        FUNCTION ??APSME_SecurityNM?relay,00H
        EXTERN ??APSME_TransportKeyReq?relay
        FUNCTION ??APSME_TransportKeyReq?relay,00H
        EXTERN ??APSME_UpdateDeviceReq?relay
        FUNCTION ??APSME_UpdateDeviceReq?relay,00H
        EXTERN ??AddrMgrEntryGet?relay
        FUNCTION ??AddrMgrEntryGet?relay,00H
        EXTERN ??AddrMgrEntryLookupExt?relay
        FUNCTION ??AddrMgrEntryLookupExt?relay,00H
        EXTERN ??AddrMgrEntryLookupNwk?relay
        FUNCTION ??AddrMgrEntryLookupNwk?relay,00H
        EXTERN ??AddrMgrEntryRelease?relay
        FUNCTION ??AddrMgrEntryRelease?relay,00H
        EXTERN ??AddrMgrEntryUpdate?relay
        FUNCTION ??AddrMgrEntryUpdate?relay,00H
        EXTERN ??AddrMgrExtAddrEqual?relay
        FUNCTION ??AddrMgrExtAddrEqual?relay,00H
        EXTERN ??AddrMgrExtAddrLookup?relay
        FUNCTION ??AddrMgrExtAddrLookup?relay,00H
        EXTERN ??AddrMgrExtAddrSet?relay
        FUNCTION ??AddrMgrExtAddrSet?relay,00H
        EXTERN ??AddrMgrExtAddrValid?relay
        FUNCTION ??AddrMgrExtAddrValid?relay,00H
        EXTERN ??AssocGetWithExt?relay
        FUNCTION ??AssocGetWithExt?relay,00H
        EXTERN ??AssocGetWithShort?relay
        FUNCTION ??AssocGetWithShort?relay,00H
        EXTERN ??AssocMatchDeviceStatus?relay
        FUNCTION ??AssocMatchDeviceStatus?relay,00H
        EXTERN ??AssocRemove?relay
        FUNCTION ??AssocRemove?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_LeaveReq?relay
        FUNCTION ??NLME_LeaveReq?relay,00H
        EXTERN ??NLME_ReadNwkKeyInfo?relay
        FUNCTION ??NLME_ReadNwkKeyInfo?relay,00H
        EXTERN ??SSP_GetTrueRand?relay
        FUNCTION ??SSP_GetTrueRand?relay,00H
        EXTERN ??SSP_SwitchNwkKey?relay
        FUNCTION ??SSP_SwitchNwkKey?relay,00H
        EXTERN ??SSP_UpdateNwkKey?relay
        FUNCTION ??SSP_UpdateNwkKey?relay,00H
        EXTERN ??ZDApp_NVUpdate?relay
        FUNCTION ??ZDApp_NVUpdate?relay,00H
        EXTERN ??ZDP_IEEEAddrReq?relay
        FUNCTION ??ZDP_IEEEAddrReq?relay,00H
        EXTERN ??ZDP_NwkAddrReq?relay
        FUNCTION ??ZDP_NwkAddrReq?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcmp?relay
        FUNCTION ??osal_memcmp?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ZDAppTaskID
        EXTERN _NIB
        EXTERN defaultTCLinkKey
        EXTERN devState
        EXTERN zgPreConfigKeys
        EXTERN zgSecurePermitJoin
        EXTERN zgTrustCenterAddr
        EXTERN zgUseDefaultTCLK

// C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Components\stack\zdo\ZDSecMgr.c
//    1 /******************************************************************************
//    2   Filename:       ZDSecMgr.c
//    3   Revised:        $Date: 2012-02-16 13:22:48 -0800 (Thu, 16 Feb 2012) $
//    4   Revision:       $Revision: 29339 $
//    5 
//    6   Description:    The ZigBee Device Security Manager.
//    7 
//    8 
//    9   Copyright 2005-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 #ifdef __cplusplus
//   41 extern "C"
//   42 {
//   43 #endif
//   44 
//   45 /******************************************************************************
//   46  * INCLUDES
//   47  */
//   48 #include "ZComdef.h"
//   49 #include "OSAL.h"
//   50 #include "OSAL_NV.h"
//   51 #include "ZGlobals.h"
//   52 #include "ssp.h"
//   53 #include "nwk_globals.h"
//   54 #include "nwk.h"
//   55 #include "NLMEDE.h"
//   56 #include "AddrMgr.h"
//   57 #include "AssocList.h"
//   58 #include "APSMEDE.h"
//   59 #include "ZDConfig.h"
//   60 #include "ZDSecMgr.h"
//   61 
//   62 /******************************************************************************
//   63  * CONSTANTS
//   64  */
//   65 // maximum number of devices managed by this Security Manager
//   66 #if !defined ( ZDSECMGR_DEVICE_MAX )
//   67   #define ZDSECMGR_DEVICE_MAX 3
//   68 #endif
//   69 
//   70 // total number of preconfigured devices (EXT address, MASTER key)
//   71 //devtag.pro.security
//   72 //#define ZDSECMGR_PRECONFIG_MAX ZDSECMGR_DEVICE_MAX
//   73 #define ZDSECMGR_PRECONFIG_MAX 0
//   74 
//   75 // maximum number of MASTER keys this device may hold
//   76 #define ZDSECMGR_MASTERKEY_MAX ZDSECMGR_DEVICE_MAX
//   77 
//   78 // maximum number of LINK keys this device may store
//   79 #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
//   80 
//   81 // total number of devices under control - authentication, SKKE, etc.
//   82 #define ZDSECMGR_CTRL_MAX ZDSECMGR_DEVICE_MAX
//   83 
//   84 // total number of stored devices
//   85 #if !defined ( ZDSECMGR_STORED_DEVICES )
//   86   #define ZDSECMGR_STORED_DEVICES 3
//   87 #endif
//   88 
//   89 // Total number of preconfigured trust center link key
//   90 #if !defined ( ZDSECMGR_TC_DEVICE_MAX )
//   91   #define ZDSECMGR_TC_DEVICE_MAX 1
//   92 #endif
//   93 
//   94 #if ( ZDSECMGR_TC_DEVICE_MAX < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )
//   95   #error "ZDSECMGR_TC_DEVICE_MAX shall be between 1 and 255 !"
//   96 #endif
//   97 
//   98 #define ZDSECMGR_CTRL_NONE       0
//   99 #define ZDSECMGR_CTRL_INIT       1
//  100 #define ZDSECMGR_CTRL_TK_MASTER  2
//  101 #define ZDSECMGR_CTRL_SKKE_INIT  3
//  102 #define ZDSECMGR_CTRL_SKKE_WAIT  4
//  103 #define ZDSECMGR_CTRL_SKKE_DONE  5
//  104 #define ZDSECMGR_CTRL_SKKE_FAIL  6
//  105 #define ZDSECMGR_CTRL_TK_NWK     7
//  106 
//  107 #define ZDSECMGR_CTRL_BASE_CNTR      1
//  108 #define ZDSECMGR_CTRL_SKKE_INIT_CNTR 1
//  109 #define ZDSECMGR_CTRL_TK_NWK_CNTR    1
//  110 
//  111 // set SKA slot maximum
//  112 #define ZDSECMGR_SKA_SLOT_MAX 1
//  113 
//  114 // APSME Stub Implementations
//  115 #define ZDSecMgrMasterKeyGet   APSME_MasterKeyGet
//  116 #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
//  117 #define ZDSecMgrLinkKeyNVIdGet APSME_LinkKeyNVIdGet
//  118 #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
//  119 #define ZDSecMgrIsLinkKeyValid APSME_IsLinkKeyValid
//  120 
//  121 /******************************************************************************
//  122  * TYPEDEFS
//  123  */
//  124 typedef struct
//  125 {
//  126   uint8 extAddr[Z_EXTADDR_LEN];
//  127   uint8 key[SEC_KEY_LEN];
//  128 } ZDSecMgrPreConfigData_t;
//  129 
//  130 typedef struct
//  131 {
//  132   uint16 ami;
//  133   uint8  key[SEC_KEY_LEN];
//  134 } ZDSecMgrMasterKeyData_t;
//  135 
//  136 typedef struct
//  137 {
//  138   uint16            ami;
//  139   uint16            keyNvId;   // index to the Link Key table in NV
//  140   ZDSecMgr_Authentication_Option authenticateOption;
//  141 } ZDSecMgrEntry_t;
//  142 
//  143 typedef struct
//  144 {
//  145   ZDSecMgrEntry_t* entry;
//  146   uint16           parentAddr;
//  147   uint8            secure;
//  148   uint8            state;
//  149   uint8            cntr;
//  150 } ZDSecMgrCtrl_t;
//  151 
//  152 typedef struct
//  153 {
//  154   uint16          nwkAddr;
//  155   uint8*          extAddr;
//  156   uint16          parentAddr;
//  157   uint8           secure;
//  158   uint8           devStatus;
//  159   ZDSecMgrCtrl_t* ctrl;
//  160 } ZDSecMgrDevice_t;
//  161 
//  162 /******************************************************************************
//  163  * LOCAL VARIABLES
//  164  */
//  165 #if 0 // Taken out because the following functionality is only used for test
//  166       // purpose. A more efficient (above) way is used. It can be put
//  167       // back in if customers request for a white/black list feature.
//  168 uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
//  169 {
//  170   { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  171   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
//  172   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  173 };
//  174 #endif
//  175 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  176 uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
ZDSecMgrTCExtAddr:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  177   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
//  178 
//  179 // Key data is put in CONST area for security reasons

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  180 CONST uint8 ZDSecMgrTCMasterKey[SEC_KEY_LEN] =
ZDSecMgrTCMasterKey:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 137
        DB 103
        DB 69
        DB 35
        DB 1
        DB 239
        DB 205
        DB 171
//  181   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  182    0x89,0x67,0x45,0x23,0x01,0xEF,0xCD,0xAB};
//  183 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  184 uint8 ZDSecMgrTCAuthenticated = FALSE;
ZDSecMgrTCAuthenticated:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  185 
//  186 //devtag.pro.security - remove this
//  187 #if ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  188 const ZDSecMgrPreConfigData_t ZDSecMgrPreConfigData[ZDSECMGR_PRECONFIG_MAX] =
//  189 {
//  190   //---------------------------------------------------------------------------
//  191   // DEVICE A
//  192   //---------------------------------------------------------------------------
//  193   {
//  194     // extAddr
//  195     {0x7C,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
//  196 
//  197     // key
//  198     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  199      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  200   },
//  201   //---------------------------------------------------------------------------
//  202   // DEVICE B
//  203   //---------------------------------------------------------------------------
//  204   {
//  205     // extAddr
//  206     {0x84,0x03,0x00,0x00,0x00,0x4B,0x12,0x00},
//  207 
//  208     // key
//  209     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  210      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  211   },
//  212   //---------------------------------------------------------------------------
//  213   // DEVICE C
//  214   //---------------------------------------------------------------------------
//  215   {
//  216     // extAddr
//  217     {0x3E,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
//  218 
//  219     // key
//  220     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  221      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  222   },
//  223 };
//  224 #endif // ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  225 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  226 ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
ZDSecMgrEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  227 ZDSecMgrCtrl_t*  ZDSecMgrCtrlData = NULL;
ZDSecMgrCtrlData:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  228 void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr );
//  229 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
//  230 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  231 uint8 ZDSecMgrPermitJoiningEnabled;
ZDSecMgrPermitJoiningEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  232 uint8 ZDSecMgrPermitJoiningTimed;
ZDSecMgrPermitJoiningTimed:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  233 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  234 APSME_TCLinkKey_t TrustCenterLinkKey;
TrustCenterLinkKey:
        DS 32
        REQUIRE __INIT_XDATA_Z
//  235 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  236 APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
ApsLinkKeyFrmCntr:
        DS 27
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  237 APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
TCLinkKeyFrmCntr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  238 
//  239 /******************************************************************************
//  240  * PRIVATE FUNCTIONS
//  241  *
//  242  *   ZDSecMgrMasterKeyInit
//  243  *   ZDSecMgrAddrStore
//  244  *   ZDSecMgrExtAddrStore
//  245  *   ZDSecMgrExtAddrLookup
//  246  *   ZDSecMgrMasterKeyLookup
//  247  *   ZDSecMgrMasterKeyStore
//  248  *   ZDSecMgrEntryInit
//  249  *   ZDSecMgrEntryLookup
//  250  *   ZDSecMgrEntryLookupAMI
//  251  *   ZDSecMgrEntryLookupExt
//  252  *   ZDSecMgrEntryLookupExtGetIndex
//  253  *   ZDSecMgrEntryFree
//  254  *   ZDSecMgrEntryNew
//  255  *   ZDSecMgrCtrlInit
//  256  *   ZDSecMgrCtrlRelease
//  257  *   ZDSecMgrCtrlLookup
//  258  *   ZDSecMgrCtrlSet
//  259  *   ZDSecMgrCtrlAdd
//  260  *   ZDSecMgrCtrlTerm
//  261  *   ZDSecMgrCtrlReset
//  262  *   ZDSecMgrMasterKeyLoad
//  263  *   ZDSecMgrAppKeyGet
//  264  *   ZDSecMgrAppKeyReq
//  265  *   ZDSecMgrEstablishKey
//  266  *   ZDSecMgrSendMasterKey
//  267  *   ZDSecMgrSendNwkKey
//  268  *   ZDSecMgrDeviceEntryRemove
//  269  *   ZDSecMgrDeviceEntryAdd
//  270  *   ZDSecMgrDeviceCtrlHandler
//  271  *   ZDSecMgrDeviceCtrlSetup
//  272  *   ZDSecMgrDeviceCtrlUpdate
//  273  *   ZDSecMgrDeviceRemove
//  274  *   ZDSecMgrDeviceValidateSKKE
//  275  *   ZDSecMgrDeviceValidateRM
//  276  *   ZDSecMgrDeviceValidateCM
//  277  *   ZDSecMgrDeviceValidate
//  278  *   ZDSecMgrDeviceJoin
//  279  *   ZDSecMgrDeviceJoinDirect
//  280  *   ZDSecMgrDeviceJoinFwd
//  281  *   ZDSecMgrDeviceNew
//  282  *   ZDSecMgrAssocDeviceAuth
//  283  *   ZDSecMgrAuthInitiate
//  284  *   ZDSecMgrAuthNwkKey
//  285  *   APSME_TCLinkKeyInit
//  286  *   APSME_IsDefaultTCLK
//  287  */
//  288 //-----------------------------------------------------------------------------
//  289 // master key data
//  290 //-----------------------------------------------------------------------------
//  291 void ZDSecMgrMasterKeyInit( void );
//  292 
//  293 //-----------------------------------------------------------------------------
//  294 // address management
//  295 //-----------------------------------------------------------------------------
//  296 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  297 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  298 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
//  299 
//  300 //-----------------------------------------------------------------------------
//  301 // Trust Center management
//  302 //-----------------------------------------------------------------------------
//  303 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
//  304 void ZDSecMgrTCDataLoad( uint8* extAddr );
//  305 
//  306 //-----------------------------------------------------------------------------
//  307 // MASTER key data
//  308 //-----------------------------------------------------------------------------
//  309 ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint16* pKeyNvId );
//  310 ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key );
//  311 
//  312 //-----------------------------------------------------------------------------
//  313 // entry data
//  314 //-----------------------------------------------------------------------------
//  315 void ZDSecMgrEntryInit(uint8 state);
//  316 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
//  317 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
//  318 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  319 ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
//  320 ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex );
//  321 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
//  322 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
//  323 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
//  324 void ZDSecMgrApsLinkKeyInit(void);
//  325 #if defined ( NV_RESTORE )
//  326 static void ZDSecMgrWriteNV(void);
//  327 static void ZDSecMgrRestoreFromNV(void);
//  328 static void ZDSecMgrUpdateNV( uint16 index );
//  329 #endif
//  330 
//  331 //-----------------------------------------------------------------------------
//  332 // control data
//  333 //-----------------------------------------------------------------------------
//  334 void ZDSecMgrCtrlInit( void );
//  335 void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl );
//  336 void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl );
//  337 void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
//  338                       ZDSecMgrEntry_t*  entry,
//  339                       ZDSecMgrCtrl_t*   ctrl );
//  340 ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry );
//  341 void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry );
//  342 ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device,
//  343                              ZDSecMgrEntry_t*  entry );
//  344 
//  345 //-----------------------------------------------------------------------------
//  346 // key support
//  347 //-----------------------------------------------------------------------------
//  348 ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key );
//  349 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
//  350                              uint8*  initExtAddr,
//  351                              uint16  partNwkAddr,
//  352                              uint8*  partExtAddr,
//  353                              uint8** key,
//  354                              uint8*  keyType );
//  355 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
//  356 ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device );
//  357 ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device );
//  358 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
//  359 void ZDSecMgrNwkKeyInit(uint8 setDefault);
//  360 
//  361 //-----------------------------------------------------------------------------
//  362 // device entry
//  363 //-----------------------------------------------------------------------------
//  364 void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry );
//  365 ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami );
//  366 
//  367 //-----------------------------------------------------------------------------
//  368 // device control
//  369 //-----------------------------------------------------------------------------
//  370 void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device );
//  371 void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device );
//  372 void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state );
//  373 
//  374 //-----------------------------------------------------------------------------
//  375 // device management
//  376 //-----------------------------------------------------------------------------
//  377 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
//  378 ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device );
//  379 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
//  380 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device );
//  381 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
//  382 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
//  383 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
//  384 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
//  385 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
//  386 
//  387 //-----------------------------------------------------------------------------
//  388 // association management
//  389 //-----------------------------------------------------------------------------
//  390 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
//  391 
//  392 //-----------------------------------------------------------------------------
//  393 // authentication management
//  394 //-----------------------------------------------------------------------------
//  395 void ZDSecMgrAuthInitiate( uint8* responder );
//  396 void ZDSecMgrAuthNwkKey( void );
//  397 
//  398 //-----------------------------------------------------------------------------
//  399 // APSME function
//  400 //-----------------------------------------------------------------------------
//  401 void APSME_TCLinkKeyInit( uint8 setDefault );
//  402 uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
//  403 
//  404 /******************************************************************************
//  405  * @fn          ZDSecMgrMasterKeyInit                     ]
//  406  *
//  407  * @brief       Initialize master key data in NV
//  408  *
//  409  * @param       none
//  410  *
//  411  * @return      none
//  412  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  413 void ZDSecMgrMasterKeyInit( void )
ZDSecMgrMasterKeyInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyInit
        CODE
//  414 {
        FUNCALL ZDSecMgrMasterKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  415   uint16 index;
//  416   ZDSecMgrMasterKeyData_t   masterKeyData;
//  417 
//  418   masterKeyData.ami = INVALID_NODE_ADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  419 
//  420   osal_memset( &masterKeyData.key, 0x00, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine45 & 0xFFFF
//  421 
//  422   for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX; index++ )
//  423   {
//  424     if ( osal_nv_item_init( (ZCD_NV_MASTER_KEY_DATA_START + index),
//  425                        sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData) == SUCCESS)
??CrossCallReturnLabel_176:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x12
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x3
        MOV     R3,A
        LCALL   ??Subroutine160_0 & 0xFFFF
??CrossCallReturnLabel_375:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R1
        JNZ     ??ZDSecMgrMasterKeyInit_0
//  426     {
//  427       // the item already exists in NV just needs to be set to default values
//  428       osal_nv_write( (ZCD_NV_MASTER_KEY_DATA_START + index), 0,
//  429                       sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 0,#0x12
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x3
        LCALL   ??Subroutine119_0 & 0xFFFF
//  430     }
//  431   }
??CrossCallReturnLabel_182:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
??ZDSecMgrMasterKeyInit_0:
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_59:
        JC      ??CrossCallReturnLabel_176
//  432 }
        MOV     A,#0x12
        LJMP    ??Subroutine132_0 & 0xFFFF
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_176
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_177
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine116_0
        ; // Fall through to label ??Subroutine116_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine116_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_178
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_176
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_177
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        LCALL   ??osal_memset?relay
        MOV     R6,#0x0
        MOV     R7,#0x0
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//  433 
//  434 /******************************************************************************
//  435  * @fn          ZDSecMgrAddrStore
//  436  *
//  437  * @brief       Store device addresses.
//  438  *
//  439  * @param       nwkAddr - [in] NWK address
//  440  * @param       extAddr - [in] EXT address
//  441  * @param       ami     - [out] Address Manager index
//  442  *
//  443  * @return      ZStatus_t
//  444  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  445 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrAddrStore:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ZDSecMgrAddrStore
        CODE
//  446 {
        FUNCALL ZDSecMgrAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine54 & 0xFFFF
//  447   ZStatus_t      status;
//  448   AddrMgrEntry_t entry;
//  449 
//  450 
//  451   // add entry
//  452   entry.user    = ADDRMGR_USER_SECURITY;
//  453   entry.nwkAddr = nwkAddr;
??CrossCallReturnLabel_82:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine31 & 0xFFFF
//  454   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_44:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine79 & 0xFFFF
//  455 
//  456   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_124:
        JNZ     ??ZDSecMgrAddrStore_0
//  457   {
//  458     // return successful results
//  459     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  460     status = ZSuccess;
//  461   }
??CrossCallReturnLabel_194:
        SJMP    ??CrossCallReturnLabel_47
//  462   else
//  463   {
//  464     // return failed results
//  465     *ami   = entry.index;
??ZDSecMgrAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine32 & 0xFFFF
//  466     status = ZNwkUnknownDevice;
//  467   }
//  468 
//  469   return status;
??CrossCallReturnLabel_47:
        LJMP    ?Subroutine7 & 0xFFFF
        CFI EndBlock cfiBlock8
//  470 }
//  471 
//  472 /******************************************************************************
//  473  * @fn          ZDSecMgrExtAddrStore
//  474  *
//  475  * @brief       Store EXT address.
//  476  *
//  477  * @param       extAddr - [in] EXT address
//  478  * @param       ami     - [out] Address Manager index
//  479  *
//  480  * @return      ZStatus_t
//  481  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  482 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrStore:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ZDSecMgrExtAddrStore
        CODE
//  483 {
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine54 & 0xFFFF
//  484   ZStatus_t      status;
//  485   AddrMgrEntry_t entry;
//  486 
//  487 
//  488   // add entry
//  489   entry.user    = ADDRMGR_USER_SECURITY;
//  490   entry.nwkAddr = nwkAddr;
??CrossCallReturnLabel_83:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine31 & 0xFFFF
//  491   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_45:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine79 & 0xFFFF
//  492 
//  493   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_125:
        JNZ     ??ZDSecMgrExtAddrStore_0
//  494   {
//  495     // return successful results
//  496     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  497     status = ZSuccess;
//  498   }
??CrossCallReturnLabel_195:
        SJMP    ??CrossCallReturnLabel_48
//  499   else
//  500   {
//  501     // return failed results
//  502     *ami   = entry.index;
??ZDSecMgrExtAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine32 & 0xFFFF
//  503     status = ZNwkUnknownDevice;
//  504   }
//  505 
//  506   return status;
??CrossCallReturnLabel_48:
        SJMP    ?Subroutine7
        CFI EndBlock cfiBlock9
//  507 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine79:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_124
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_125
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_126
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        LCALL   ?Subroutine98 & 0xFFFF
??CrossCallReturnLabel_152:
        LCALL   ??AddrMgrEntryUpdate?relay
        MOV     A,R1
        XRL     A,#0x1
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine54:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_82
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL   ?Subroutine107 & 0xFFFF
??CrossCallReturnLabel_352:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
        DEC     A
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ?Subroutine107 & 0xFFFF
??CrossCallReturnLabel_351:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine94 & 0xFFFF
??CrossCallReturnLabel_275:
        MOV     R1,#-0x38
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrExtAddrSet
        ; Setup parameters for call to function AddrMgrExtAddrSet
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24
//  508 
//  509 /******************************************************************************
//  510  * @fn          ZDSecMgrExtAddrLookup
//  511  *
//  512  * @brief       Lookup index for specified EXT address.
//  513  *
//  514  * @param       extAddr - [in] EXT address
//  515  * @param       ami     - [out] Address Manager index
//  516  *
//  517  * @return      ZStatus_t
//  518  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  519 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrLookup:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function ZDSecMgrExtAddrLookup
        CODE
//  520 {
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  521   ZStatus_t      status;
//  522   AddrMgrEntry_t entry;
//  523 
//  524 
//  525   // lookup entry
//  526   entry.user = ADDRMGR_USER_SECURITY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
//  527   AddrMgrExtAddrSet( entry.extAddr, extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine98 & 0xFFFF
//  528 
//  529   if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
??CrossCallReturnLabel_153:
        LCALL   ??AddrMgrEntryLookupExt?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrExtAddrLookup_0
//  530   {
//  531     // return successful results
//  532     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  533     status = ZSuccess;
//  534   }
??CrossCallReturnLabel_196:
        SJMP    ??CrossCallReturnLabel_49
//  535   else
//  536   {
//  537     // return failed results
//  538     *ami   = entry.index;
??ZDSecMgrExtAddrLookup_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine32 & 0xFFFF
        CFI EndBlock cfiBlock25
//  539     status = ZNwkUnknownDevice;
//  540   }
//  541 
//  542   return status;
??CrossCallReturnLabel_49:
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7
//  543 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0xd
        LJMP    ??Subroutine136_0 & 0xFFFF
        CFI EndBlock cfiBlock26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine98:
        CFI Block cfiCond27 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_124
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_125
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_126
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_153
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31
//  544 
//  545 /******************************************************************************
//  546  * @fn          ZDSecMgrAddrClear
//  547  *
//  548  * @brief       Clear security bit from Address Manager for specific device.
//  549  *
//  550  * @param       extAddr - [in] EXT address
//  551  *
//  552  * @return      ZStatus_t
//  553  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  554 ZStatus_t ZDSecMgrAddrClear( uint8* extAddr )
ZDSecMgrAddrClear:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function ZDSecMgrAddrClear
        CODE
//  555 {
        FUNCALL ZDSecMgrAddrClear, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrClear, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 15
        MOV     A,#-0xf
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
//  556   ZStatus_t status;
//  557   uint16 entryAmi;
//  558 
//  559   // get Address Manager Index
//  560   status = ZDSecMgrExtAddrLookup( extAddr, &entryAmi );
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        LCALL   ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_205:
        MOV     R6,A
//  561 
//  562   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrAddrClear_0
//  563   {
//  564     AddrMgrEntry_t addrEntry;
//  565 
//  566     // Clear SECURITY User bit from the address manager
//  567     addrEntry.user = ADDRMGR_USER_SECURITY;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine28 & 0xFFFF
//  568     addrEntry.index = entryAmi;
??CrossCallReturnLabel_38:
        MOV     R1,A
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
//  569 
//  570     if ( AddrMgrEntryRelease( &addrEntry ) != TRUE )
??CrossCallReturnLabel_220:
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryRelease?relay
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??ZDSecMgrAddrClear_0
//  571     {
//  572       // return failure results
//  573       status = ZFailure;
        MOV     R6,#0x1
//  574     }
//  575   }
//  576 
//  577   return status;
??ZDSecMgrAddrClear_0:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0xf
        LJMP    ??Subroutine136_0 & 0xFFFF
        CFI EndBlock cfiBlock32
//  578 }
//  579 
//  580 /******************************************************************************
//  581  * @fn          ZDSecMgrMasterKeyLookup
//  582  *
//  583  * @brief       Lookup MASTER key for specified address index.
//  584  *
//  585  * @param       ami - [in] Address Manager index
//  586  * @param       pKeyNvId - [out] MASTER key NV ID
//  587  *
//  588  * @return      ZStatus_t
//  589  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  590 ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint16* pKeyNvId )
ZDSecMgrMasterKeyLookup:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyLookup
        CODE
//  591 {
        FUNCALL ZDSecMgrMasterKeyLookup, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLookup, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLookup, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  592   uint16 index;
//  593   ZDSecMgrMasterKeyData_t masterKeyData;
//  594 
//  595 
//  596   for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  597   {
//  598     // Read entry index of the Master key table from NV
//  599     osal_nv_read( (ZCD_NV_MASTER_KEY_DATA_START + index), 0,
//  600                   sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData );
??ZDSecMgrMasterKeyLookup_0:
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 4,#0x12
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  601 
//  602     if ( masterKeyData.ami == ami )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,?V0 + 2
        JNZ     ??ZDSecMgrMasterKeyLookup_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 3
??ZDSecMgrMasterKeyLookup_1:
        JNZ     ??ZDSecMgrMasterKeyLookup_2
//  603     {
//  604       // return successful results
//  605       *pKeyNvId   = ZCD_NV_MASTER_KEY_DATA_START + index;
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x3
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine128_0 & 0xFFFF
//  606 
//  607       // clear copy of key in RAM
//  608       osal_memset(&masterKeyData, 0x00, sizeof(ZDSecMgrMasterKeyData_t));
??CrossCallReturnLabel_221:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x12
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  609 
//  610       return ZSuccess;
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrMasterKeyLookup_3
//  611     }
//  612   }
??ZDSecMgrMasterKeyLookup_2:
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_64:
        JC      ??ZDSecMgrMasterKeyLookup_0
//  613 
//  614   *pKeyNvId = SEC_NO_KEY_NV_ID;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  615 
//  616   // clear copy of key in RAM
//  617   osal_memset(&masterKeyData, 0x00, sizeof(ZDSecMgrMasterKeyData_t));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x12
        MOV     R5,A
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  618 
//  619   return ZNwkUnknownDevice;
        MOV     R1,#-0x38
??ZDSecMgrMasterKeyLookup_3:
        MOV     A,#0x12
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock33
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  620 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock34
//  621 
//  622 /******************************************************************************
//  623  * @fn          ZDSecMgrMasterKeyStore
//  624  *
//  625  * @brief       Store MASTER key for specified address index.
//  626  *
//  627  * @param       ami - [in] Address Manager index
//  628  * @param       key - [in] valid key to store
//  629  *
//  630  * @return      ZStatus_t
//  631  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  632 ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key )
ZDSecMgrMasterKeyStore:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyStore
        CODE
//  633 {
        FUNCALL ZDSecMgrMasterKeyStore, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  634   uint16    index;
//  635   ZDSecMgrMasterKeyData_t   masterKeyData;
//  636 
//  637 
//  638   for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  639   {
//  640     // Read entry index of the Master key table from NV
//  641     osal_nv_read( (ZCD_NV_MASTER_KEY_DATA_START + index), 0,
//  642                    sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData );
??ZDSecMgrMasterKeyStore_0:
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 4,#0x12
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
//  643 
//  644     if ( masterKeyData.ami == INVALID_NODE_ADDR )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrMasterKeyStore_1
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDSecMgrMasterKeyStore_1:
        JZ      $+5
        LJMP    ??ZDSecMgrMasterKeyStore_2 & 0xFFFF
//  645     {
//  646       // store EXT address index
//  647       masterKeyData.ami = ami;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  648 
//  649       if ( key != NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDSecMgrMasterKeyStore_3
//  650       {
//  651         osal_memcpy( masterKeyData.key, key,  SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine82 & 0xFFFF
//  652       }
??CrossCallReturnLabel_260:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        SJMP    ??ZDSecMgrMasterKeyStore_4
//  653       else
//  654       {
//  655         osal_memset( masterKeyData.key, 0, SEC_KEY_LEN );
??ZDSecMgrMasterKeyStore_3:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  656       }
//  657 
//  658       // set new values in NV
//  659       osal_nv_write( (ZCD_NV_MASTER_KEY_DATA_START + index), 0,
//  660                       sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData );
??ZDSecMgrMasterKeyStore_4:
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 2,#0x12
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x3
        LCALL   ??Subroutine119_0 & 0xFFFF
??CrossCallReturnLabel_183:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
//  661 
//  662       // clear copy of key in RAM
//  663       osal_memset( &masterKeyData, 0x00, sizeof(ZDSecMgrMasterKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x12
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  664 
//  665       // return successful results
//  666       return ZSuccess;
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrMasterKeyStore_5
//  667     }
//  668   }
??ZDSecMgrMasterKeyStore_2:
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_65:
        JNC     $+5
        LJMP    ??ZDSecMgrMasterKeyStore_0 & 0xFFFF
//  669 
//  670   // clear copy of key in RAM
//  671   osal_memset( &masterKeyData, 0x00, sizeof(ZDSecMgrMasterKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x12
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  672 
//  673   return ZNwkUnknownDevice;
        MOV     R1,#-0x38
        CFI EndBlock cfiBlock35
??ZDSecMgrMasterKeyStore_5:
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  674 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x12
        CFI EndBlock cfiBlock36
        REQUIRE ??Subroutine117_0
        ; // Fall through to label ??Subroutine117_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine117_0:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Valid
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_69
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x3
        MOV     R3,A
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x3
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG XDATA_I:XDATA:NOROOT(0)
ZDSecMgrAppKeyType:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_179
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,R7
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46
        REQUIRE ??Subroutine118_0
        ; // Fall through to label ??Subroutine118_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine118_0:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_181
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_179
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        ADDC    A,#0x2
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50
        REQUIRE ??Subroutine119_0
        ; // Fall through to label ??Subroutine119_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine119_0:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_182
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_184
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_181
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_179
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOV     R3,A
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
        REQUIRE ??Subroutine120_0
        ; // Fall through to label ??Subroutine120_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine120_0:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_187
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_188
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_189
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_190
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_191
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_192
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 52)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_193
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_182
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_184
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_181
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_179
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75
//  675 
//  676 /******************************************************************************
//  677  * @fn          ZDSecMgrEntryInit
//  678  *
//  679  * @brief       Initialize entry sub module
//  680  *
//  681  * @param       state - device initialization state
//  682  *
//  683  * @return      none
//  684  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  685 void ZDSecMgrEntryInit(uint8 state)
ZDSecMgrEntryInit:
        CFI Block cfiBlock76 Using cfiCommon0
        CFI Function ZDSecMgrEntryInit
        CODE
//  686 {
        FUNCALL ZDSecMgrEntryInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  687   if (ZDSecMgrEntries == NULL)
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ??Subroutine152_0 & 0xFFFF
??CrossCallReturnLabel_309:
        JNZ     ??ZDSecMgrEntryInit_0
//  688   {
//  689     uint16 index;
//  690 
//  691     if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xf
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrEntries
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ??Subroutine123_0 & 0xFFFF
??CrossCallReturnLabel_204:
        JZ      ??ZDSecMgrEntryInit_0
//  692     {
//  693       return;
//  694     }
//  695 
//  696     for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
        MOV     R0,#0x0
        MOV     R1,#0x0
//  697     {
//  698       ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
??ZDSecMgrEntryInit_1:
        LCALL   ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_133:
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  699 
//  700       ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine19 & 0xFFFF
//  701     }
//  702   }
??CrossCallReturnLabel_17:
        JC      ??ZDSecMgrEntryInit_1
??ZDSecMgrEntryInit_0:
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock76
//  703 
//  704 #if defined NV_RESTORE
//  705   if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
//  706   {
//  707     ZDSecMgrRestoreFromNV();
//  708   }
//  709 #else
//  710   (void)state;
//  711 #endif
//  712 }
//  713 
//  714 /******************************************************************************
//  715  * @fn          ZDSecMgrEntryLookup
//  716  *
//  717  * @brief       Lookup entry index using specified NWK address.
//  718  *
//  719  * @param       nwkAddr - [in] NWK address
//  720  * @param       entry   - [out] valid entry
//  721  *
//  722  * @return      ZStatus_t
//  723  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  724 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookup:
        CFI Block cfiBlock77 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookup
        CODE
//  725 {
        FUNCALL ZDSecMgrEntryLookup, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  726   uint16         index;
//  727   AddrMgrEntry_t addrMgrEntry;
//  728 
//  729   // initialize results
//  730   *entry = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine11 & 0xFFFF
//  731 
//  732   // verify data is available
//  733   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_201:
        JZ      ??ZDSecMgrEntryLookup_0
//  734   {
//  735     addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
//  736     addrMgrEntry.nwkAddr = nwkAddr;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  737 
//  738     if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
??CrossCallReturnLabel_0:
        LCALL   ??Subroutine145_0 & 0xFFFF
??CrossCallReturnLabel_286:
        JNZ     ??ZDSecMgrEntryLookup_0
//  739     {
//  740       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  741       {
//  742         if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
??ZDSecMgrEntryLookup_1:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x5
        MUL     AB
        MOV     R2,A
        MOV     ?V0 + 0,B
        MOV     B,#0x5
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_95:
        XRL     A,R4
        JNZ     ??ZDSecMgrEntryLookup_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??ZDSecMgrEntryLookup_2:
        JNZ     ??ZDSecMgrEntryLookup_3
//  743         {
//  744           // return successful results
//  745           *entry = &ZDSecMgrEntries[index];
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x5
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine109 & 0xFFFF
//  746 
//  747           // break from loop
//  748           return ZSuccess;
//  749         }
//  750       }
??CrossCallReturnLabel_170:
        LCALL   ??Subroutine121_0 & 0xFFFF
??CrossCallReturnLabel_197:
        SJMP    ??ZDSecMgrEntryLookup_4
??ZDSecMgrEntryLookup_3:
        LCALL   ?Subroutine38 & 0xFFFF
//  751     }
//  752   }
??CrossCallReturnLabel_52:
        JC      ??ZDSecMgrEntryLookup_1
//  753 
//  754   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookup_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookup_4:
        LJMP    ?Subroutine7 & 0xFFFF
        CFI EndBlock cfiBlock77
//  755 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_194
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_195
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_196
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81
        REQUIRE ??Subroutine121_0
        ; // Fall through to label ??Subroutine121_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine121_0:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_197
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_194
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_195
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_196
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker86 Using cfiCommon1
        CFI (cfiPicker86) NoFunction
        CFI (cfiPicker86) Picker
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiPicker86
        REQUIRE ??Subroutine122_0
        ; // Fall through to label ??Subroutine122_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine122_0:
        CFI Block cfiCond87 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_198
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_199
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_200
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_197
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_194
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_195
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_196
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        LCALL   ?Subroutine94 & 0xFFFF
??CrossCallReturnLabel_276:
        MOV     R1,#0x0
        RET
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94
//  756 
//  757 /******************************************************************************
//  758  * @fn          ZDSecMgrEntryLookupAMI
//  759  *
//  760  * @brief       Lookup entry using specified address index
//  761  *
//  762  * @param       ami   - [in] Address Manager index
//  763  * @param       entry - [out] valid entry
//  764  *
//  765  * @return      ZStatus_t
//  766  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  767 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookupAMI:
        CFI Block cfiBlock95 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupAMI
        CODE
//  768 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  769   uint16 index;
//  770 
//  771   // initialize results
//  772   *entry = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine11 & 0xFFFF
//  773 
//  774   // verify data is available
//  775   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_202:
        JZ      ??ZDSecMgrEntryLookupAMI_0
//  776   {
//  777     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  778     {
//  779       if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupAMI_1:
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_91:
        JNZ     ??ZDSecMgrEntryLookupAMI_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrEntryLookupAMI_2:
        JNZ     ??ZDSecMgrEntryLookupAMI_3
//  780       {
//  781         // return successful results
//  782         *entry = &ZDSecMgrEntries[index];
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x5
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine67 & 0xFFFF
//  783 
//  784         // break from loop
//  785         return ZSuccess;
//  786       }
//  787     }
??CrossCallReturnLabel_103:
        LCALL   ??Subroutine122_0 & 0xFFFF
??CrossCallReturnLabel_198:
        SJMP    ??ZDSecMgrEntryLookupAMI_4
??ZDSecMgrEntryLookupAMI_3:
        LCALL   ?Subroutine38 & 0xFFFF
//  788   }
??CrossCallReturnLabel_53:
        JC      ??ZDSecMgrEntryLookupAMI_1
//  789 
//  790   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookupAMI_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookupAMI_4:
        LJMP    ??Subroutine137_0 & 0xFFFF
        CFI EndBlock cfiBlock95
//  791 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond96 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_201
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_202
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_203
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker99 Using cfiCommon1
        CFI (cfiPicker99) NoFunction
        CFI (cfiPicker99) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiPicker99
        REQUIRE ??Subroutine123_0
        ; // Fall through to label ??Subroutine123_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine123_0:
        CFI Block cfiCond100 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_204
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_201
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_202
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_203
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker104 Using cfiCommon1
        CFI (cfiPicker104) NoFunction
        CFI (cfiPicker104) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine106 & 0xFFFF
??CrossCallReturnLabel_322:
        RET
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiPicker104
//  792 
//  793 /******************************************************************************
//  794  * @fn          ZDSecMgrEntryLookupExt
//  795  *
//  796  * @brief       Lookup entry index using specified EXT address.
//  797  *
//  798  * @param       extAddr - [in] EXT address
//  799  * @param       entry   - [out] valid entry
//  800  *
//  801  * @return      ZStatus_t
//  802  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  803 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookupExt:
        CFI Block cfiBlock105 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupExt
        CODE
//  804 {
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  805   ZStatus_t status;
//  806   uint16    ami;
//  807 
//  808   // initialize results
//  809   *entry = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  810   status = ZNwkUnknownDevice;
        MOV     ?V0 + 0,#-0x38
//  811 
//  812   // lookup address index
//  813   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        LCALL   ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_206:
        JNZ     ??ZDSecMgrEntryLookupExt_0
//  814   {
//  815     status = ZDSecMgrEntryLookupAMI( ami, entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine70 & 0xFFFF
//  816   }
??CrossCallReturnLabel_109:
        MOV     A,R1
        MOV     ?V0 + 0,A
//  817 
//  818   return status;
??ZDSecMgrEntryLookupExt_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock105
//  819 }
//  820 
//  821 /******************************************************************************
//  822  * @fn          ZDSecMgrEntryLookupExtGetIndex
//  823  *
//  824  * @brief       Lookup entry index using specified EXT address.
//  825  *
//  826  * @param       extAddr - [in] EXT address
//  827  * @param       entryIndex - [out] valid index to the entry table
//  828  *
//  829  * @return      ZStatus_t
//  830  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  831 ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
ZDSecMgrEntryLookupExtGetIndex:
        CFI Block cfiBlock106 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupExtGetIndex
        CODE
//  832 {
        FUNCALL ZDSecMgrEntryLookupExtGetIndex, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine157_0 & 0xFFFF
??CrossCallReturnLabel_342:
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
//  833   uint16 ami;
//  834   uint16 index;
//  835 
//  836   // lookup address index
//  837   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        LCALL   ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_207:
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_0
//  838   {
//  839     // verify data is available
//  840     if ( ZDSecMgrEntries != NULL )
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ??Subroutine152_0 & 0xFFFF
??CrossCallReturnLabel_310:
        JZ      ??ZDSecMgrEntryLookupExtGetIndex_0
//  841     {
//  842       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  843       {
//  844         if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupExtGetIndex_1:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x5
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x5
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL   ??Subroutine147_0 & 0xFFFF
??CrossCallReturnLabel_287:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrEntryLookupExtGetIndex_2:
        JNZ     ??ZDSecMgrEntryLookupExtGetIndex_3
//  845         {
//  846           // return successful results
//  847           *entry = &ZDSecMgrEntries[index];
        LCALL   ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_134:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine159_0 & 0xFFFF
//  848           *entryIndex = index;
??CrossCallReturnLabel_366:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine122_0 & 0xFFFF
//  849 
//  850           // break from loop
//  851           return ZSuccess;
//  852         }
//  853       }
??CrossCallReturnLabel_199:
        SJMP    ??ZDSecMgrEntryLookupExtGetIndex_4
??ZDSecMgrEntryLookupExtGetIndex_3:
        LCALL   ?Subroutine38 & 0xFFFF
//  854     }
//  855   }
??CrossCallReturnLabel_54:
        JC      ??ZDSecMgrEntryLookupExtGetIndex_1
//  856 
//  857   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookupExtGetIndex_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookupExtGetIndex_4:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock106
//  858 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine85:
        CFI Block cfiCond107 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_133
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_134
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x5
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x5
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        RET
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine84:
        CFI Block cfiCond110 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_205
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_206
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_207
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_208
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_209
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115
        REQUIRE ??Subroutine124_0
        ; // Fall through to label ??Subroutine124_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine124_0:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_210
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_205
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_206
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_207
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_208
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_209
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker122 Using cfiCommon1
        CFI (cfiPicker122) NoFunction
        CFI (cfiPicker122) Picker
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiPicker122
//  859 
//  860 /******************************************************************************
//  861  * @fn          ZDSecMgrEntryLookupAMIGetIndex
//  862  *
//  863  * @brief       Lookup entry using specified address index
//  864  *
//  865  * @param       ami   - [in] Address Manager index
//  866  * @param       entryIndex - [out] valid index to the entry table
//  867  *
//  868  * @return      ZStatus_t
//  869  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  870 ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex )
ZDSecMgrEntryLookupAMIGetIndex:
        CFI Block cfiBlock123 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupAMIGetIndex
        CODE
//  871 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  872   uint16 index;
//  873 
//  874   // verify data is available
//  875   if ( ZDSecMgrEntries != NULL )
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ??Subroutine152_0 & 0xFFFF
??CrossCallReturnLabel_311:
        JZ      ??ZDSecMgrEntryLookupAMIGetIndex_0
//  876   {
//  877     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  878     {
//  879       if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupAMIGetIndex_1:
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_92:
        JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrEntryLookupAMIGetIndex_2:
        JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_3
//  880       {
//  881         // return successful results
//  882         *entryIndex = index;
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine122_0 & 0xFFFF
//  883 
//  884         // break from loop
//  885         return ZSuccess;
//  886       }
//  887     }
??CrossCallReturnLabel_200:
        SJMP    ??ZDSecMgrEntryLookupAMIGetIndex_4
??ZDSecMgrEntryLookupAMIGetIndex_3:
        LCALL   ?Subroutine38 & 0xFFFF
//  888   }
??CrossCallReturnLabel_55:
        JC      ??ZDSecMgrEntryLookupAMIGetIndex_1
//  889 
//  890   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookupAMIGetIndex_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryLookupAMIGetIndex_4:
        LJMP    ??Subroutine137_0 & 0xFFFF
        CFI EndBlock cfiBlock123
//  891 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine59:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker126 Using cfiCommon1
        CFI (cfiPicker126) NoFunction
        CFI (cfiPicker126) Picker
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R6
        MOV     B,#0x5
        MUL     AB
        MOV     R6,A
        MOV     ?V0 + 0,B
        MOV     B,#0x5
        MOV     A,R7
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R7,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine105 & 0xFFFF
??CrossCallReturnLabel_167:
        MOVX    A,@DPTR
        XRL     A,R2
        RET
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiPicker126

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond127 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker134 Using cfiCommon1
        CFI (cfiPicker134) NoFunction
        CFI (cfiPicker134) Picker
        LCALL   ?Subroutine97 & 0xFFFF
??CrossCallReturnLabel_150:
        RET
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiPicker134
//  892 
//  893 /******************************************************************************
//  894  * @fn          ZDSecMgrEntryFree
//  895  *
//  896  * @brief       Free entry.
//  897  *
//  898  * @param       entry - [in] valid entry
//  899  *
//  900  * @return      ZStatus_t
//  901  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  902 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
ZDSecMgrEntryFree:
        CFI Block cfiBlock135 Using cfiCommon0
        CFI Function ZDSecMgrEntryFree
        CODE
//  903 {
        FUNCALL ZDSecMgrEntryFree, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  904   APSME_LinkKeyData_t   *pApsLinkKey = NULL;
//  905 
//  906 #if defined ( NV_RESTORE )
//  907   ZStatus_t status;
//  908   uint16 entryIndex;
//  909 
//  910   status = ZDSecMgrEntryLookupAMIGetIndex( entry->ami, &entryIndex );
//  911 #endif
//  912 
//  913   pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        LCALL   ?Subroutine80 & 0xFFFF
//  914 
//  915   if (pApsLinkKey != NULL)
??CrossCallReturnLabel_127:
        JZ      ??ZDSecMgrEntryFree_0
//  916   {
//  917     osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??osal_memset?relay
//  918 
//  919     // Clear the APS Link key in NV
//  920     osal_nv_write( entry->keyNvId, 0,
//  921                         sizeof(APSME_LinkKeyData_t), pApsLinkKey);
        LCALL   ?Subroutine88 & 0xFFFF
??CrossCallReturnLabel_137:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 4,#0x18
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0 + 0
        LCALL   ?Subroutine110 & 0xFFFF
??CrossCallReturnLabel_254:
        LCALL   ??Subroutine119_0 & 0xFFFF
??CrossCallReturnLabel_184:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  922 
//  923     // set entry to invalid Key
//  924     entry->keyNvId = SEC_NO_KEY_NV_ID;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  925 
//  926     osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
//  927   }
//  928 
//  929   // marking the entry as INVALID_NODE_ADDR
//  930   entry->ami = INVALID_NODE_ADDR;
??ZDSecMgrEntryFree_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        LCALL   ?Subroutine36 & 0xFFFF
//  931 
//  932   // set to default value
//  933   entry->authenticateOption = ZDSecMgr_Not_Authenticated;
??CrossCallReturnLabel_50:
        CLR     A
        MOVX    @DPTR,A
//  934 
//  935 #if defined ( NV_RESTORE )
//  936   if ( status == ZSuccess )
//  937   {
//  938     ZDSecMgrUpdateNV(entryIndex);
//  939   }
//  940 #endif
//  941 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock135
//  942 
//  943 /******************************************************************************
//  944  * @fn          ZDSecMgrEntryNew
//  945  *
//  946  * @brief       Get a new entry.
//  947  *
//  948  * @param       entry - [out] valid entry
//  949  *
//  950  * @return      ZStatus_t
//  951  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  952 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
ZDSecMgrEntryNew:
        CFI Block cfiBlock136 Using cfiCommon0
        CFI Function ZDSecMgrEntryNew
        CODE
//  953 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  954   uint16 index;
//  955 
//  956   // initialize results
//  957   *entry = NULL;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine11 & 0xFFFF
//  958 
//  959   // verify data is available
//  960   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_203:
        JZ      ??ZDSecMgrEntryNew_0
//  961   {
//  962     // find available entry
//  963     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  964     {
//  965       if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
??ZDSecMgrEntryNew_1:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x5
        MUL     AB
        MOV     R4,A
        MOV     R6,B
        MOV     B,#0x5
        MOV     A,R5
        MUL     AB
        ADD     A,R6
        MOV     R5,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     DPL,R6
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrEntryNew_2
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDSecMgrEntryNew_2:
        JNZ     ??ZDSecMgrEntryNew_3
//  966       {
//  967         // return successful result
//  968         *entry = &ZDSecMgrEntries[index];
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R4,B
        MOV     B,#0x5
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  969 
//  970         // Set the authentication option to default
//  971         ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_89:
        CLR     A
        MOVX    @DPTR,A
//  972 
//  973         // break from loop
//  974         return ZSuccess;
        MOV     R1,A
        SJMP    ??ZDSecMgrEntryNew_4
//  975       }
//  976     }
??ZDSecMgrEntryNew_3:
        LCALL   ?Subroutine38 & 0xFFFF
//  977   }
??CrossCallReturnLabel_56:
        JC      ??ZDSecMgrEntryNew_1
//  978 
//  979   return ZNwkUnknownDevice;
??ZDSecMgrEntryNew_0:
        MOV     R1,#-0x38
??ZDSecMgrEntryNew_4:
        LJMP    ??Subroutine137_0 & 0xFFFF
        CFI EndBlock cfiBlock136
//  980 }
//  981 
//  982 /******************************************************************************
//  983  * @fn          ZDSecMgrCtrlInit
//  984  *
//  985  * @brief       Initialize control sub module
//  986  *
//  987  * @param       none
//  988  *
//  989  * @return      none
//  990  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  991 void ZDSecMgrCtrlInit( void )
ZDSecMgrCtrlInit:
        CFI Block cfiBlock137 Using cfiCommon0
        CFI Function ZDSecMgrCtrlInit
        CODE
//  992 {
        FUNCALL ZDSecMgrCtrlInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  993   uint16 size;
//  994   uint16 index;
//  995 
//  996   // allocate entry data
//  997   size = (short)( sizeof(ZDSecMgrCtrl_t) * ZDSECMGR_CTRL_MAX );
//  998 
//  999   ZDSecMgrCtrlData = osal_mem_alloc( size );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x15
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrCtrlData
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine29 & 0xFFFF
// 1000 
// 1001   // initialize data
// 1002   if ( ZDSecMgrCtrlData != NULL )
??CrossCallReturnLabel_40:
        JZ      ??ZDSecMgrCtrlInit_0
// 1003   {
// 1004     for( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
// 1005     {
// 1006       ZDSecMgrCtrlData[index].state = ZDSECMGR_CTRL_NONE;
??ZDSecMgrCtrlInit_1:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ?Subroutine69 & 0xFFFF
// 1007     }
// 1008   }
??CrossCallReturnLabel_108:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_18:
        JC      ??ZDSecMgrCtrlInit_1
// 1009 }
??ZDSecMgrCtrlInit_0:
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock137

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine69:
        CFI Block cfiCond138 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_107
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond139) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond139) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond139) CFA_SP SP+-5
        CFI Block cfiPicker140 Using cfiCommon1
        CFI (cfiPicker140) NoFunction
        CFI (cfiPicker140) Picker
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     DPL,R4
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond141 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond142) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond142) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond142) CFA_SP SP+-5
        CFI Block cfiPicker143 Using cfiCommon1
        CFI (cfiPicker143) NoFunction
        CFI (cfiPicker143) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine97 & 0xFFFF
??CrossCallReturnLabel_151:
        RET
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine97:
        CFI Block cfiCond144 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_53
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_54
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_55
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_56
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_57
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_58
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_151, ??CrossCallReturnLabel_17
        CFI (cfiCond151) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond151) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond151) CFA_SP SP+-5
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_151, ??CrossCallReturnLabel_18
        CFI (cfiCond152) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond152) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond152) CFA_SP SP+-5
        CFI Block cfiPicker153 Using cfiCommon1
        CFI (cfiPicker153) NoFunction
        CFI (cfiPicker153) Picker
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x3
        MOV     A,R1
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiPicker153
// 1010 
// 1011 /******************************************************************************
// 1012  * @fn          ZDSecMgrCtrlRelease
// 1013  *
// 1014  * @brief       Release control data.
// 1015  *
// 1016  * @param       ctrl - [in] valid control data
// 1017  *
// 1018  * @return      none
// 1019  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1020 void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl )
ZDSecMgrCtrlRelease:
        CFI Block cfiBlock154 Using cfiCommon0
        CFI Function ZDSecMgrCtrlRelease
        CODE
// 1021 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1022   // should always be enough entry control data
// 1023   ctrl->state = ZDSECMGR_CTRL_NONE;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 1024 }
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock154
// 1025 
// 1026 /******************************************************************************
// 1027  * @fn          ZDSecMgrCtrlLookup
// 1028  *
// 1029  * @brief       Lookup control data.
// 1030  *
// 1031  * @param       entry - [in] valid entry data
// 1032  * @param       ctrl  - [out] control data - NULL if not found
// 1033  *
// 1034  * @return      none
// 1035  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1036 void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl )
ZDSecMgrCtrlLookup:
        CFI Block cfiBlock155 Using cfiCommon0
        CFI Function ZDSecMgrCtrlLookup
        CODE
// 1037 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1038   uint16 index;
// 1039 
// 1040   // initialize search results
// 1041   *ctrl = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine29 & 0xFFFF
// 1042 
// 1043   // verify data is available
// 1044   if ( ZDSecMgrCtrlData != NULL )
??CrossCallReturnLabel_41:
        JZ      ??ZDSecMgrCtrlLookup_0
// 1045   {
// 1046     for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
// 1047     {
// 1048       // make sure control data is in use
// 1049       if ( ZDSecMgrCtrlData[index].state != ZDSECMGR_CTRL_NONE )
??ZDSecMgrCtrlLookup_1:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     ?V0 + 0,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ?Subroutine104 & 0xFFFF
??CrossCallReturnLabel_164:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDSecMgrCtrlLookup_2
// 1050       {
// 1051         // check for entry match
// 1052         if ( ZDSecMgrCtrlData[index].entry == entry )
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     ?V0 + 0,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R6
        XRL     A,R2
        JNZ     ??ZDSecMgrCtrlLookup_3
        MOV     A,R7
        XRL     A,R3
??ZDSecMgrCtrlLookup_3:
        JNZ     ??ZDSecMgrCtrlLookup_2
// 1053         {
// 1054           // return this control data
// 1055           *ctrl = &ZDSecMgrCtrlData[index];
        LCALL   ??Subroutine142_0 & 0xFFFF
??CrossCallReturnLabel_280:
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL   ??Subroutine128_0 & 0xFFFF
// 1056 
// 1057           // break from loop
// 1058           return;
??CrossCallReturnLabel_222:
        SJMP    ??ZDSecMgrCtrlLookup_0
// 1059         }
// 1060       }
// 1061     }
??ZDSecMgrCtrlLookup_2:
        LCALL   ?Subroutine38 & 0xFFFF
// 1062   }
??CrossCallReturnLabel_57:
        JC      ??ZDSecMgrCtrlLookup_1
??ZDSecMgrCtrlLookup_0:
        LJMP    ??Subroutine137_0 & 0xFFFF
        CFI EndBlock cfiBlock155
// 1063 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine67:
        CFI Block cfiCond156 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_103
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker158 Using cfiCommon1
        CFI (cfiPicker158) NoFunction
        CFI (cfiPicker158) Picker
        LCALL   ?Subroutine109 & 0xFFFF
??CrossCallReturnLabel_172:
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        RET
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiPicker158

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine109:
        CFI Block cfiCond159 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_170
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_103
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_104
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_171
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker163 Using cfiCommon1
        CFI (cfiPicker163) NoFunction
        CFI (cfiPicker163) Picker
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        RET
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiPicker163

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine61:
        CFI Block cfiCond164 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_95
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker166 Using cfiCommon1
        CFI (cfiPicker166) NoFunction
        CFI (cfiPicker166) Picker
        LCALL   ?Subroutine104 & 0xFFFF
??CrossCallReturnLabel_165:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiPicker166

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine104:
        CFI Block cfiCond167 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_164
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_95
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_96
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker170 Using cfiCommon1
        CFI (cfiPicker170) NoFunction
        CFI (cfiPicker170) Picker
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiPicker170

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond171 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker173 Using cfiCommon1
        CFI (cfiPicker173) NoFunction
        CFI (cfiPicker173) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ?Subroutine106 & 0xFFFF
??CrossCallReturnLabel_321:
        RET
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiPicker173

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine106:
        CFI Block cfiCond174 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_201
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_202
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_203
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_204
        CFI (cfiCond177) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond177) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond177) CFA_SP SP+-5
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_40
        CFI (cfiCond178) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond178) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond178) CFA_SP SP+-5
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_41
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_306
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_307
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_308
        CFI (cfiCond182) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond182) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond182) CFA_SP SP+-5
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_318
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_319
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_320
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_309
        CFI (cfiCond186) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond186) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond186) CFA_SP SP+-5
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_310
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+0
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_311
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+0
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_312
        CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond189) CFA_SP SP+0
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_313
        CFI (cfiCond190) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond190) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond190) CFA_SP SP+-5
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_314
        CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond191) CFA_SP SP+0
        CFI (cfiCond191) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_315
        CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond192) CFA_SP SP+0
        CFI (cfiCond192) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_316
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_317
        CFI (cfiCond194) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond194) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond194) CFA_SP SP+-5
        CFI Block cfiPicker195 Using cfiCommon1
        CFI (cfiPicker195) NoFunction
        CFI (cfiPicker195) Picker
        LCALL   ?Subroutine114 & 0xFFFF
??CrossCallReturnLabel_358:
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiPicker195
// 1064 
// 1065 /******************************************************************************
// 1066  * @fn          ZDSecMgrCtrlSet
// 1067  *
// 1068  * @brief       Set control data.
// 1069  *
// 1070  * @param       device - [in] valid device data
// 1071  * @param       entry  - [in] valid entry data
// 1072  * @param       ctrl   - [in] valid control data
// 1073  *
// 1074  * @return      none
// 1075  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1076 void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
ZDSecMgrCtrlSet:
        CFI Block cfiBlock196 Using cfiCommon0
        CFI Function ZDSecMgrCtrlSet
        CODE
// 1077                       ZDSecMgrEntry_t*  entry,
// 1078                       ZDSecMgrCtrl_t*   ctrl )
// 1079 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine157_0 & 0xFFFF
// 1080   // set control date
// 1081   ctrl->parentAddr = device->parentAddr;
??CrossCallReturnLabel_343:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine92 & 0xFFFF
// 1082   ctrl->secure     = device->secure;
??CrossCallReturnLabel_144:
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine96 & 0xFFFF
// 1083   ctrl->entry      = entry;
??CrossCallReturnLabel_146:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        LCALL   ?Subroutine30 & 0xFFFF
// 1084   ctrl->state      = ZDSECMGR_CTRL_INIT;
??CrossCallReturnLabel_42:
        MOV     A,#0x1
        LCALL   ?Subroutine30 & 0xFFFF
// 1085   ctrl->cntr       = 0;
??CrossCallReturnLabel_43:
        INC     DPTR
        CLR     A
        LCALL   ?Subroutine27 & 0xFFFF
// 1086 
// 1087   // set device pointer
// 1088   device->ctrl = ctrl;
??CrossCallReturnLabel_36:
        INC     DPTR
        LCALL   ??Subroutine128_0 & 0xFFFF
// 1089 }
??CrossCallReturnLabel_223:
        LJMP    ??Subroutine137_0 & 0xFFFF
        CFI EndBlock cfiBlock196

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond197 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker199 Using cfiCommon1
        CFI (cfiPicker199) NoFunction
        CFI (cfiPicker199) Picker
        LCALL   ?Subroutine96 & 0xFFFF
??CrossCallReturnLabel_147:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiPicker199
// 1090 
// 1091 /******************************************************************************
// 1092  * @fn          ZDSecMgrCtrlAdd
// 1093  *
// 1094  * @brief       Add control data.
// 1095  *
// 1096  * @param       device - [in] valid device data
// 1097  * @param       entry  - [in] valid entry data
// 1098  *
// 1099  * @return      ZStatus_t
// 1100  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1101 ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry )
ZDSecMgrCtrlAdd:
        CFI Block cfiBlock200 Using cfiCommon0
        CFI Function ZDSecMgrCtrlAdd
        CODE
// 1102 {
        FUNCALL ZDSecMgrCtrlAdd, ZDSecMgrCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1103   uint16 index;
// 1104 
// 1105   // verify data is available
// 1106   if ( ZDSecMgrCtrlData != NULL )
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ??Subroutine152_0 & 0xFFFF
??CrossCallReturnLabel_312:
        JZ      ??ZDSecMgrCtrlAdd_0
// 1107   {
// 1108     // look for an empty slot
// 1109     for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
// 1110     {
// 1111       if ( ZDSecMgrCtrlData[index].state == ZDSECMGR_CTRL_NONE )
??ZDSecMgrCtrlAdd_1:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R6
        MOV     B,#0x7
        MUL     AB
        MOV     R6,A
        MOV     ?V0 + 0,B
        MOV     B,#0x7
        MOV     A,R7
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R7,A
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ?Subroutine105 & 0xFFFF
??CrossCallReturnLabel_166:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlAdd_2
// 1112       {
// 1113         // return successful results
// 1114         ZDSecMgrCtrlSet( device, entry, &ZDSecMgrCtrlData[index] );
        ; Setup parameters for call to function ZDSecMgrCtrlSet
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R6,B
        MOV     B,#0x7
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R0
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ??ZDSecMgrCtrlSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1115 
// 1116         // break from loop
// 1117         return ZSuccess;
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrCtrlAdd_3
// 1118       }
// 1119     }
??ZDSecMgrCtrlAdd_2:
        LCALL   ?Subroutine38 & 0xFFFF
// 1120   }
??CrossCallReturnLabel_58:
        JC      ??ZDSecMgrCtrlAdd_1
// 1121 
// 1122   return ZNwkUnknownDevice;
??ZDSecMgrCtrlAdd_0:
        MOV     R1,#-0x38
??ZDSecMgrCtrlAdd_3:
        LJMP    ??Subroutine133_0 & 0xFFFF
        CFI EndBlock cfiBlock200
// 1123 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine105:
        CFI Block cfiCond201 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_167, ??CrossCallReturnLabel_91
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_167, ??CrossCallReturnLabel_92
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_166
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker204 Using cfiCommon1
        CFI (cfiPicker204) NoFunction
        CFI (cfiPicker204) Picker
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiPicker204
// 1124 
// 1125 /******************************************************************************
// 1126  * @fn          ZDSecMgrCtrlTerm
// 1127  *
// 1128  * @brief       Terminate device control.
// 1129  *
// 1130  * @param       entry - [in] valid entry data
// 1131  *
// 1132  * @return      none
// 1133  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1134 void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry )
ZDSecMgrCtrlTerm:
        CFI Block cfiBlock205 Using cfiCommon0
        CFI Function ZDSecMgrCtrlTerm
        CODE
// 1135 {
        FUNCALL ZDSecMgrCtrlTerm, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 2)
// 1136   ZDSecMgrCtrl_t* ctrl;
// 1137 
// 1138   // remove device from control data
// 1139   ZDSecMgrCtrlLookup ( entry, &ctrl );
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??Subroutine150_0 & 0xFFFF
// 1140 
// 1141   if ( ctrl != NULL )
??CrossCallReturnLabel_308:
        JZ      ??ZDSecMgrCtrlTerm_0
// 1142   {
// 1143     ZDSecMgrCtrlRelease ( ctrl );
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_213:
        CLR     A
        MOVX    @DPTR,A
// 1144   }
// 1145 }
??ZDSecMgrCtrlTerm_0:
        MOV     A,#0x2
        SJMP    ??Subroutine126_0
        CFI EndBlock cfiBlock205

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine65:
        CFI Block cfiCond206 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_213
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_215
        CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond208) CFA_SP SP+0
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond209 Using cfiCommon0
        CFI (cfiCond209) NoFunction
        CFI (cfiCond209) Conditional ??CrossCallReturnLabel_216
        CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond209) CFA_SP SP+0
        CFI (cfiCond209) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker210 Using cfiCommon1
        CFI (cfiPicker210) NoFunction
        CFI (cfiPicker210) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     DPTR
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiCond209
        CFI EndBlock cfiPicker210
        REQUIRE ??Subroutine125_0
        ; // Fall through to label ??Subroutine125_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine125_0:
        CFI Block cfiCond211 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_211
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond212 Using cfiCommon0
        CFI (cfiCond212) NoFunction
        CFI (cfiCond212) Conditional ??CrossCallReturnLabel_212
        CFI (cfiCond212) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond212) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond212) CFA_SP SP+-5
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_213
        CFI (cfiCond213) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond213) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond213) CFA_SP SP+-5
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond214) CFA_SP SP+0
        CFI (cfiCond214) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond215 Using cfiCommon0
        CFI (cfiCond215) NoFunction
        CFI (cfiCond215) Conditional ??CrossCallReturnLabel_215
        CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond215) CFA_SP SP+0
        CFI (cfiCond215) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond216 Using cfiCommon0
        CFI (cfiCond216) NoFunction
        CFI (cfiCond216) Conditional ??CrossCallReturnLabel_216
        CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond216) CFA_SP SP+0
        CFI (cfiCond216) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker217 Using cfiCommon1
        CFI (cfiPicker217) NoFunction
        CFI (cfiPicker217) Picker
        LCALL   ??Subroutine144_0 & 0xFFFF
??CrossCallReturnLabel_330:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond211
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiCond215
        CFI EndBlock cfiCond216
        CFI EndBlock cfiPicker217

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiBlock218 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 10)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0xa
        CFI EndBlock cfiBlock218
        REQUIRE ??Subroutine126_0
        ; // Fall through to label ??Subroutine126_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine126_0:
        CFI Block cfiBlock219 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        CFI Valid
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock219
// 1146 
// 1147 /******************************************************************************
// 1148  * @fn          ZDSecMgrCtrlReset
// 1149  *
// 1150  * @brief       Reset control data.
// 1151  *
// 1152  * @param       device - [in] valid device data
// 1153  * @param       entry  - [in] valid entry data
// 1154  *
// 1155  * @return      ZStatus_t
// 1156  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1157 ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t* entry )
ZDSecMgrCtrlReset:
        CFI Block cfiBlock220 Using cfiCommon0
        CFI Function ZDSecMgrCtrlReset
        CODE
// 1158 {
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1159   ZStatus_t       status;
// 1160   ZDSecMgrCtrl_t* ctrl;
// 1161 
// 1162   // initialize results
// 1163   status = ZNwkUnknownDevice;
// 1164 
// 1165   // look for a match for the entry
// 1166   ZDSecMgrCtrlLookup( entry, &ctrl );
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        LCALL   ?Subroutine51 & 0xFFFF
// 1167 
// 1168   if ( ctrl != NULL )
??CrossCallReturnLabel_306:
        JZ      ??ZDSecMgrCtrlReset_0
// 1169   {
// 1170     ZDSecMgrCtrlSet( device, entry, ctrl );
        ; Setup parameters for call to function ZDSecMgrCtrlSet
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrCtrlSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1171 
// 1172     status = ZSuccess;
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrCtrlReset_1
// 1173   }
// 1174   else
// 1175   {
// 1176     status = ZDSecMgrCtrlAdd( device, entry );
??ZDSecMgrCtrlReset_0:
        ; Setup parameters for call to function ZDSecMgrCtrlAdd
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrCtrlAdd?relay
// 1177   }
// 1178 
// 1179   return status;
??ZDSecMgrCtrlReset_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock220
// 1180 }
// 1181 
// 1182 /******************************************************************************
// 1183  * @fn          ZDSecMgrMasterKeyLoad
// 1184  *
// 1185  * @brief       Load the MASTER key for device with specified EXT
// 1186  *              address.
// 1187  *
// 1188  * @param       extAddr - [in] EXT address of device
// 1189  * @param       key     - [in] MASTER key shared with device
// 1190  *
// 1191  * @return      ZStatus_t
// 1192  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1193 ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key )
ZDSecMgrMasterKeyLoad:
        CFI Block cfiBlock221 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyLoad
        CODE
// 1194 {
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrMasterKeyStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
// 1195   ZStatus_t status;
// 1196   uint16 ami;
// 1197   uint16 keyNvId;
// 1198 
// 1199   // set status based on policy
// 1200   status = ZDSecMgrExtAddrLookup( extAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        LCALL   ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_208:
        MOV     R6,A
// 1201 
// 1202   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrMasterKeyLoad_0
// 1203   {
// 1204     // get the address NV ID
// 1205     if ( ZDSecMgrMasterKeyLookup( ami, &keyNvId ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_256:
        JNZ     ??ZDSecMgrMasterKeyLoad_1
// 1206     {
// 1207       // overwrite old key in NV
// 1208       osal_nv_write( keyNvId, osal_offsetof(ZDSecMgrMasterKeyData_t, key),
// 1209                      SEC_KEY_LEN, key );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine131_0 & 0xFFFF
// 1210     }
??CrossCallReturnLabel_250:
        LCALL   ??Subroutine119_0 & 0xFFFF
??CrossCallReturnLabel_185:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        SJMP    ??ZDSecMgrMasterKeyLoad_0
// 1211     else
// 1212     {
// 1213       // store new key -- NULL will zero key
// 1214       status = ZDSecMgrMasterKeyStore( ami, key );
??ZDSecMgrMasterKeyLoad_1:
        ; Setup parameters for call to function ZDSecMgrMasterKeyStore
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        LCALL   ?Subroutine73 & 0xFFFF
// 1215     }
// 1216   }
??CrossCallReturnLabel_114:
        MOV     A,R1
        MOV     R6,A
// 1217 
// 1218   return status;
??ZDSecMgrMasterKeyLoad_0:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x4
        LJMP    ??Subroutine132_0 & 0xFFFF
        CFI EndBlock cfiBlock221
// 1219 }
// 1220 
// 1221 /******************************************************************************
// 1222  * @fn          ZDSecMgrAppKeyGet
// 1223  *
// 1224  * @brief       get an APP key - option APP(MASTER or LINK) key
// 1225  *
// 1226  * @param       initNwkAddr - [in] NWK address of initiator device
// 1227  * @param       initExtAddr - [in] EXT address of initiator device
// 1228  * @param       partNwkAddr - [in] NWK address of partner device
// 1229  * @param       partExtAddr - [in] EXT address of partner device
// 1230  * @param       key         - [out] APP(MASTER or LINK) key
// 1231  * @param       keyType     - [out] APP(MASTER or LINK) key type
// 1232  *
// 1233  * @return      ZStatus_t
// 1234  */
// 1235 uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
// 1236                                                  // to KEY_TYPE_APP_LINK since
// 1237                                                  // only specific requirement
// 1238                                                  // right now comes from SE profile
// 1239 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1240 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
ZDSecMgrAppKeyGet:
        CFI Block cfiBlock222 Using cfiCommon0
        CFI Function ZDSecMgrAppKeyGet
        CODE
// 1241                              uint8*  initExtAddr,
// 1242                              uint16  partNwkAddr,
// 1243                              uint8*  partExtAddr,
// 1244                              uint8** key,
// 1245                              uint8*  keyType )
// 1246 {
        FUNCALL ZDSecMgrAppKeyGet, SSP_GetTrueRand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_111:
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_112:
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
// 1247   // Intentionally unreferenced parameters
// 1248   (void)initNwkAddr;
// 1249   (void)initExtAddr;
// 1250   (void)partNwkAddr;
// 1251   (void)partExtAddr;
// 1252 
// 1253   //---------------------------------------------------------------------------
// 1254   // note:
// 1255   // should use a robust mechanism to generate keys, for example
// 1256   // combine EXT addresses and call a hash function
// 1257   //---------------------------------------------------------------------------
// 1258   SSP_GetTrueRand( SEC_KEY_LEN, *key );
        ; Setup parameters for call to function SSP_GetTrueRand
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine147_0 & 0xFFFF
??CrossCallReturnLabel_288:
        MOV     R1,#0x10
        LCALL   ??SSP_GetTrueRand?relay
// 1259 
// 1260   *keyType = ZDSecMgrAppKeyType;
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
// 1261 
// 1262   return ZSuccess;
        MOV     R1,#0x0
        LJMP    ??Subroutine137_0 & 0xFFFF
        CFI EndBlock cfiBlock222
// 1263 }
// 1264 
// 1265 /******************************************************************************
// 1266  * @fn          ZDSecMgrAppKeyReq
// 1267  *
// 1268  * @brief       Process request for APP key between two devices.
// 1269  *
// 1270  * @param       device - [in] ZDO_RequestKeyInd_t, request info
// 1271  *
// 1272  * @return      none
// 1273  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1274 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
ZDSecMgrAppKeyReq:
        CFI Block cfiBlock223 Using cfiCommon0
        CFI Function ZDSecMgrAppKeyReq
        CODE
// 1275 {
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, SSP_GetTrueRand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 39
        MOV     A,#-0x27
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1276   APSME_TransportKeyReq_t req;
// 1277   uint8                   initExtAddr[Z_EXTADDR_LEN];
// 1278   uint16                  partNwkAddr;
// 1279   uint8                   key[SEC_KEY_LEN];
// 1280 
// 1281 
// 1282   // validate initiator and partner
// 1283   if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
// 1284        ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        ADD     A,#0x5
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_77:
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_295:
        LCALL   ??APSME_LookupExtAddr?relay
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
// 1285   {
// 1286     // point the key to some memory
// 1287     req.key = key;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 1288 
// 1289     // get an APP key - option APP (MASTER or LINK) key
// 1290     if ( ZDSecMgrAppKeyGet( ind->srcAddr,
// 1291                             initExtAddr,
// 1292                             partNwkAddr,
// 1293                             ind->partExtAddr,
// 1294                             &req.key,
// 1295                             &req.keyType ) == ZSuccess )
??CrossCallReturnLabel_224:
        ; Setup parameters for call to function SSP_GetTrueRand
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x10
        LCALL   ??SSP_GetTrueRand?relay
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1296     {
// 1297       // always secure
// 1298       req.nwkSecure = TRUE;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1299       req.apsSecure = TRUE;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1300       req.tunnel    = NULL;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
// 1301 
// 1302       // send key to initiator device
// 1303       req.dstAddr   = ind->srcAddr;
??CrossCallReturnLabel_26:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 1304       req.extAddr   = ind->partExtAddr;
??CrossCallReturnLabel_225:
        MOV     A,R6
        ADD     A,#0x5
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
// 1305       req.initiator = TRUE;
??CrossCallReturnLabel_19:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1306       APSME_TransportKeyReq( &req );
        ; Setup parameters for call to function APSME_TransportKeyReq
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
// 1307 
// 1308       // send key to partner device
// 1309       req.dstAddr   = partNwkAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine139_0 & 0xFFFF
??CrossCallReturnLabel_265:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 1310       req.extAddr   = initExtAddr;
??CrossCallReturnLabel_226:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
// 1311       req.initiator = FALSE;
??CrossCallReturnLabel_20:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1312 
// 1313       APSME_TransportKeyReq( &req );
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
// 1314 
// 1315       // clear copy of key in RAM
// 1316       osal_memset( key, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 1317 
// 1318     }
// 1319   }
// 1320 }
??ZDSecMgrAppKeyReq_0:
        MOV     A,#0x27
        LJMP    ??Subroutine136_0 & 0xFFFF
        CFI EndBlock cfiBlock223
// 1321 
// 1322 /******************************************************************************
// 1323  * @fn          ZDSecMgrEstablishKey
// 1324  *
// 1325  * @brief       Start SKKE with device joining network.
// 1326  *
// 1327  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1328  *
// 1329  * @return      ZStatus_t
// 1330  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1331 ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device )
ZDSecMgrEstablishKey:
        CFI Block cfiBlock224 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKey
        CODE
// 1332 {
        FUNCALL ZDSecMgrEstablishKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKey, APSME_EstablishKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1333   ZStatus_t               status;
// 1334   APSME_EstablishKeyReq_t req;
// 1335 
// 1336 
// 1337   req.respExtAddr = device->extAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_268:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 1338   req.method      = APSME_SKKE_METHOD;
??CrossCallReturnLabel_227:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine129_0 & 0xFFFF
// 1339 
// 1340   if ( device->parentAddr == NLME_GetShortAddr() )
??CrossCallReturnLabel_243:
        JNZ     ??ZDSecMgrEstablishKey_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrEstablishKey_0:
        MOV     DPL,R6
        MOV     DPH,R7
        JNZ     ??ZDSecMgrEstablishKey_1
// 1341   {
// 1342     req.dstAddr   = device->nwkAddr;
        LCALL   ?Subroutine33 & 0xFFFF
// 1343     //devtag.0604.todo - remove obsolete
// 1344     req.apsSecure = FALSE;
??CrossCallReturnLabel_217:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1345     req.nwkSecure = FALSE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrEstablishKey_2
// 1346   }
// 1347   else
// 1348   {
// 1349     req.dstAddr   = device->parentAddr;
??ZDSecMgrEstablishKey_1:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine33 & 0xFFFF
// 1350     //devtag.0604.todo - remove obsolete
// 1351     req.apsSecure = TRUE;
??CrossCallReturnLabel_218:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1352     req.nwkSecure = TRUE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
// 1353   }
??ZDSecMgrEstablishKey_2:
        LCALL   ?Subroutine17 & 0xFFFF
// 1354 
// 1355   status = APSME_EstablishKeyReq( &req );
// 1356 
// 1357   return status;
??CrossCallReturnLabel_8:
        LCALL   ??APSME_EstablishKeyReq?relay
        MOV     A,#0x7
        LJMP    ??Subroutine132_0 & 0xFFFF
        CFI EndBlock cfiBlock224
// 1358 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond225 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_217
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_218
        CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond226) CFA_SP SP+0
        CFI (cfiCond226) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker227 Using cfiCommon1
        CFI (cfiPicker227) NoFunction
        CFI (cfiPicker227) Picker
        LCALL   ?Subroutine99 & 0xFFFF
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiPicker227
??CrossCallReturnLabel_155:
        REQUIRE ??Subroutine127_0
        ; // Fall through to label ??Subroutine127_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine127_0:
        CFI Block cfiCond228 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_219
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond229 Using cfiCommon0
        CFI (cfiCond229) NoFunction
        CFI (cfiCond229) Conditional ??CrossCallReturnLabel_217
        CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond229) CFA_SP SP+0
        CFI (cfiCond229) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_218
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker231 Using cfiCommon1
        CFI (cfiPicker231) NoFunction
        CFI (cfiPicker231) Picker
        LCALL   ?Subroutine94 & 0xFFFF
??CrossCallReturnLabel_277:
        ; Setup parameters for call to function APSME_RemoveDeviceReq
        MOV     A,#0x5
        RET
        CFI EndBlock cfiCond228
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiPicker231
// 1359 
// 1360 /******************************************************************************
// 1361  * @fn          ZDSecMgrSendMasterKey
// 1362  *
// 1363  * @brief       Send MASTER key to device joining network.
// 1364  *
// 1365  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1366  *
// 1367  * @return      ZStatus_t
// 1368  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1369 ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device )
ZDSecMgrSendMasterKey:
        CFI Block cfiBlock232 Using cfiCommon0
        CFI Function ZDSecMgrSendMasterKey
        CODE
// 1370 {
        FUNCALL ZDSecMgrSendMasterKey, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 31
        MOV     A,#-0x1f
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1371   ZStatus_t status;
// 1372   APSME_TransportKeyReq_t req;
// 1373   uint16 keyNvId;
// 1374   uint8 masterKey[SEC_KEY_LEN];
// 1375 
// 1376 
// 1377   req.keyType = KEY_TYPE_TC_MASTER;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine23 & 0xFFFF
// 1378   req.extAddr = device->extAddr;
??CrossCallReturnLabel_28:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine141_0 & 0xFFFF
// 1379   req.tunnel  = NULL;
??CrossCallReturnLabel_272:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
// 1380 
// 1381   if ( ZDSecMgrMasterKeyLookup( device->ctrl->entry->ami, &keyNvId ) == ZSuccess )
??CrossCallReturnLabel_30:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_120:
        LCALL   ??Subroutine143_0 & 0xFFFF
??CrossCallReturnLabel_331:
        LCALL   ??Subroutine134_0 & 0xFFFF
??CrossCallReturnLabel_259:
        JNZ     ??ZDSecMgrSendMasterKey_0
// 1382   {
// 1383     osal_nv_read( keyNvId, osal_offsetof(ZDSecMgrMasterKeyData_t, key),
// 1384                   SEC_KEY_LEN, masterKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine57 & 0xFFFF
// 1385   }
??CrossCallReturnLabel_86:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
        SJMP    ??ZDSecMgrSendMasterKey_1
// 1386   else
// 1387   {
// 1388     // in case read from NV fails
// 1389     osal_memset( masterKey, 0x00, SEC_KEY_LEN);
??ZDSecMgrSendMasterKey_0:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 1390   }
// 1391 
// 1392   req.key = masterKey;
??ZDSecMgrSendMasterKey_1:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
// 1393 
// 1394   //check if using secure hop to to parent
// 1395   if ( device->parentAddr != NLME_GetShortAddr() )
??CrossCallReturnLabel_241:
        JNZ     ??ZDSecMgrSendMasterKey_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrSendMasterKey_2:
        MOV     DPL,R6
        MOV     DPH,R7
        JZ      ??ZDSecMgrSendMasterKey_3
// 1396   {
// 1397     //send to parent with security
// 1398     req.dstAddr   = device->parentAddr;
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_269:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 1399     req.nwkSecure = TRUE;
??CrossCallReturnLabel_228:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1400     req.apsSecure = TRUE;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrSendMasterKey_4
// 1401   }
// 1402   else
// 1403   {
// 1404     //direct with no security
// 1405     req.dstAddr   = device->nwkAddr;
??ZDSecMgrSendMasterKey_3:
        LCALL   ??Subroutine139_0 & 0xFFFF
??CrossCallReturnLabel_266:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 1406     req.nwkSecure = FALSE;
??CrossCallReturnLabel_229:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1407     req.apsSecure = FALSE;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??ZDSecMgrSendMasterKey_4:
        MOVX    @DPTR,A
// 1408   }
// 1409 
// 1410   status = APSME_TransportKeyReq( &req );
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
        MOV     A,R1
        MOV     R6,A
// 1411 
// 1412   // clear copy of key in RAM
// 1413   osal_memset( masterKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 1414 
// 1415   return status;
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x1f
        LJMP    ??Subroutine132_0 & 0xFFFF
        CFI EndBlock cfiBlock232
// 1416 }
// 1417 
// 1418 /******************************************************************************
// 1419  * @fn          ZDSecMgrSendNwkKey
// 1420  *
// 1421  * @brief       Send NWK key to device joining network.
// 1422  *
// 1423  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1424  *
// 1425  * @return      ZStatus_t
// 1426  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1427 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
ZDSecMgrSendNwkKey:
        CFI Block cfiBlock233 Using cfiCommon0
        CFI Function ZDSecMgrSendNwkKey
        CODE
// 1428 {
        FUNCALL ZDSecMgrSendNwkKey, NLME_ReadNwkKeyInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1429   ZStatus_t status;
// 1430   APSME_TransportKeyReq_t req;
// 1431   APSDE_FrameTunnel_t tunnel;
// 1432   nwkKeyDesc tmpKey;
// 1433 
// 1434   req.dstAddr   = device->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_105:
        LCALL   ?Subroutine21 & 0xFFFF
// 1435   req.extAddr   = device->extAddr;
??CrossCallReturnLabel_24:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 1436 
// 1437   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1438   {
// 1439     req.keyType   = KEY_TYPE_NWK_HIGH;
// 1440   }
// 1441   else
// 1442   {
// 1443     req.keyType   = KEY_TYPE_NWK;
??CrossCallReturnLabel_230:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1444   }
// 1445 
// 1446   // get the Active Key into a local variable
// 1447   if( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
// 1448                            ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
        ; Setup parameters for call to function NLME_ReadNwkKeyInfo
        MOV     ?V0 + 0,#0x3a
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_ReadNwkKeyInfo?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,R1
        JZ      ??ZDSecMgrSendNwkKey_0
// 1449   {
// 1450     // set key data to all 0s if NV read fails
// 1451     osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 1452   }
// 1453 
// 1454   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 1455       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 1456   {
// 1457     // set values
// 1458     req.keySeqNum = tmpKey.keySeqNum;
// 1459     req.key       = tmpKey.key;
// 1460 
// 1461     //devtag.pro.security.todo - make sure that if there is no link key the NWK
// 1462     //key isn't used to secure the frame at the APS layer -- since the receiving
// 1463     //device may not have a NWK key yet
// 1464     req.apsSecure = TRUE;
// 1465 
// 1466     // check if using secure hop to to parent
// 1467     if ( device->parentAddr == NLME_GetShortAddr() )
// 1468     {
// 1469       req.nwkSecure = FALSE;
// 1470       req.tunnel    = NULL;
// 1471     }
// 1472     else
// 1473     {
// 1474       req.nwkSecure   = TRUE;
// 1475       req.tunnel      = &tunnel;
// 1476       req.tunnel->tna = device->parentAddr;
// 1477       req.tunnel->dea = device->extAddr;
// 1478     }
// 1479   }
// 1480   else
// 1481   {
// 1482     // default values
// 1483     //devtag.0604.verify
// 1484     req.nwkSecure = TRUE;
??ZDSecMgrSendNwkKey_0:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1485     req.apsSecure = FALSE;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1486     req.tunnel    = NULL;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ??Subroutine129_0 & 0xFFFF
// 1487 
// 1488     if ( device->parentAddr != NLME_GetShortAddr() )
??CrossCallReturnLabel_244:
        JNZ     ??ZDSecMgrSendNwkKey_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrSendNwkKey_1:
        JZ      ??CrossCallReturnLabel_239
// 1489     {
// 1490       req.dstAddr = device->parentAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine35 & 0xFFFF
// 1491     }
// 1492 
// 1493     // special cases
// 1494     //devtag.0604.todo - modify to preconfig flag
// 1495     if ( device->secure == FALSE )
??CrossCallReturnLabel_239:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrSendNwkKey_2
// 1496     {
// 1497       req.keySeqNum = tmpKey.keySeqNum;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1498       req.key       = tmpKey.key;
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
// 1499 
// 1500       // check if using secure hop to to parent
// 1501       if ( device->parentAddr == NLME_GetShortAddr() )
??CrossCallReturnLabel_242:
        JNZ     ??ZDSecMgrSendNwkKey_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrSendNwkKey_3:
        JNZ     ??ZDSecMgrSendNwkKey_4
// 1502       {
// 1503         req.nwkSecure = FALSE;
        MOV     A,#0xa
        SJMP    ??ZDSecMgrSendNwkKey_5
// 1504       }
// 1505     }
// 1506     else
// 1507     {
// 1508       req.key       = NULL;
??ZDSecMgrSendNwkKey_2:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1509       req.keySeqNum = 0;
        MOV     A,#0x3
??ZDSecMgrSendNwkKey_5:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1510     }
// 1511   }
// 1512 
// 1513   status = APSME_TransportKeyReq( &req );
??ZDSecMgrSendNwkKey_4:
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
        MOV     A,R1
        MOV     R6,A
// 1514 
// 1515   // clear copy of key in RAM before return
// 1516   osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 1517 
// 1518   return status;
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x1e
        LJMP    ??Subroutine132_0 & 0xFFFF
        CFI EndBlock cfiBlock233
// 1519 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond234 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_239
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond235 Using cfiCommon0
        CFI (cfiCond235) NoFunction
        CFI (cfiCond235) Conditional ??CrossCallReturnLabel_240
        CFI (cfiCond235) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond235) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond235) CFA_SP SP+-5
        CFI (cfiCond235) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker236 Using cfiCommon1
        CFI (cfiPicker236) NoFunction
        CFI (cfiPicker236) Picker
        LCALL   ?Subroutine99 & 0xFFFF
        CFI EndBlock cfiCond234
        CFI EndBlock cfiCond235
        CFI EndBlock cfiPicker236
??CrossCallReturnLabel_157:
        REQUIRE ??Subroutine128_0
        ; // Fall through to label ??Subroutine128_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine128_0:
        CFI Block cfiCond237 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_220
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_221
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_222
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+0
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond240 Using cfiCommon0
        CFI (cfiCond240) NoFunction
        CFI (cfiCond240) Conditional ??CrossCallReturnLabel_223
        CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond240) CFA_SP SP+0
        CFI (cfiCond240) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_224
        CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond241) CFA_SP SP+0
        CFI (cfiCond241) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_225
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond243 Using cfiCommon0
        CFI (cfiCond243) NoFunction
        CFI (cfiCond243) Conditional ??CrossCallReturnLabel_226
        CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond243) CFA_SP SP+0
        CFI (cfiCond243) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond244 Using cfiCommon0
        CFI (cfiCond244) NoFunction
        CFI (cfiCond244) Conditional ??CrossCallReturnLabel_227
        CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond244) CFA_SP SP+0
        CFI (cfiCond244) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_228
        CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond245) CFA_SP SP+0
        CFI (cfiCond245) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond246 Using cfiCommon0
        CFI (cfiCond246) NoFunction
        CFI (cfiCond246) Conditional ??CrossCallReturnLabel_229
        CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond246) CFA_SP SP+0
        CFI (cfiCond246) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond247 Using cfiCommon0
        CFI (cfiCond247) NoFunction
        CFI (cfiCond247) Conditional ??CrossCallReturnLabel_230
        CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond247) CFA_SP SP+0
        CFI (cfiCond247) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond248 Using cfiCommon0
        CFI (cfiCond248) NoFunction
        CFI (cfiCond248) Conditional ??CrossCallReturnLabel_231
        CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond248) CFA_SP SP+0
        CFI (cfiCond248) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond249 Using cfiCommon0
        CFI (cfiCond249) NoFunction
        CFI (cfiCond249) Conditional ??CrossCallReturnLabel_232
        CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond249) CFA_SP SP+0
        CFI (cfiCond249) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond250 Using cfiCommon0
        CFI (cfiCond250) NoFunction
        CFI (cfiCond250) Conditional ??CrossCallReturnLabel_233
        CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond250) CFA_SP SP+0
        CFI (cfiCond250) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond251 Using cfiCommon0
        CFI (cfiCond251) NoFunction
        CFI (cfiCond251) Conditional ??CrossCallReturnLabel_234
        CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond251) CFA_SP SP+0
        CFI (cfiCond251) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond252 Using cfiCommon0
        CFI (cfiCond252) NoFunction
        CFI (cfiCond252) Conditional ??CrossCallReturnLabel_235
        CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond252) CFA_SP SP+0
        CFI (cfiCond252) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond253 Using cfiCommon0
        CFI (cfiCond253) NoFunction
        CFI (cfiCond253) Conditional ??CrossCallReturnLabel_236
        CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond253) CFA_SP SP+0
        CFI (cfiCond253) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond254 Using cfiCommon0
        CFI (cfiCond254) NoFunction
        CFI (cfiCond254) Conditional ??CrossCallReturnLabel_237
        CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond254) CFA_SP SP+0
        CFI (cfiCond254) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond255 Using cfiCommon0
        CFI (cfiCond255) NoFunction
        CFI (cfiCond255) Conditional ??CrossCallReturnLabel_238
        CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond255) CFA_SP SP+0
        CFI (cfiCond255) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond256 Using cfiCommon0
        CFI (cfiCond256) NoFunction
        CFI (cfiCond256) Conditional ??CrossCallReturnLabel_239
        CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond256) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond256) CFA_SP SP+0
        CFI (cfiCond256) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond257 Using cfiCommon0
        CFI (cfiCond257) NoFunction
        CFI (cfiCond257) Conditional ??CrossCallReturnLabel_240
        CFI (cfiCond257) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond257) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond257) CFA_SP SP+-5
        CFI (cfiCond257) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker258 Using cfiCommon1
        CFI (cfiPicker258) NoFunction
        CFI (cfiPicker258) Picker
        LCALL   ?Subroutine94 & 0xFFFF
??CrossCallReturnLabel_278:
        RET
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiCond243
        CFI EndBlock cfiCond244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiCond246
        CFI EndBlock cfiCond247
        CFI EndBlock cfiCond248
        CFI EndBlock cfiCond249
        CFI EndBlock cfiCond250
        CFI EndBlock cfiCond251
        CFI EndBlock cfiCond252
        CFI EndBlock cfiCond253
        CFI EndBlock cfiCond254
        CFI EndBlock cfiCond255
        CFI EndBlock cfiCond256
        CFI EndBlock cfiCond257
        CFI EndBlock cfiPicker258

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine94:
        CFI Block cfiCond259 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_275, ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond260 Using cfiCommon0
        CFI (cfiCond260) NoFunction
        CFI (cfiCond260) Conditional ??CrossCallReturnLabel_275, ??CrossCallReturnLabel_48
        CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond260) CFA_SP SP+0
        CFI (cfiCond260) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond261 Using cfiCommon0
        CFI (cfiCond261) NoFunction
        CFI (cfiCond261) Conditional ??CrossCallReturnLabel_275, ??CrossCallReturnLabel_49
        CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond261) CFA_SP SP+0
        CFI (cfiCond261) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond262 Using cfiCommon0
        CFI (cfiCond262) NoFunction
        CFI (cfiCond262) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_194
        CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond262) CFA_SP SP+0
        CFI (cfiCond262) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond263 Using cfiCommon0
        CFI (cfiCond263) NoFunction
        CFI (cfiCond263) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_195
        CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond263) CFA_SP SP+0
        CFI (cfiCond263) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond264 Using cfiCommon0
        CFI (cfiCond264) NoFunction
        CFI (cfiCond264) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_196
        CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond264) CFA_SP SP+0
        CFI (cfiCond264) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond265 Using cfiCommon0
        CFI (cfiCond265) NoFunction
        CFI (cfiCond265) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_197
        CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond265) CFA_SP SP+0
        CFI (cfiCond265) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond266 Using cfiCommon0
        CFI (cfiCond266) NoFunction
        CFI (cfiCond266) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_198
        CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond266) CFA_SP SP+0
        CFI (cfiCond266) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond267 Using cfiCommon0
        CFI (cfiCond267) NoFunction
        CFI (cfiCond267) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_199
        CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond267) CFA_SP SP+0
        CFI (cfiCond267) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond268 Using cfiCommon0
        CFI (cfiCond268) NoFunction
        CFI (cfiCond268) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_200
        CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond268) CFA_SP SP+0
        CFI (cfiCond268) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond269 Using cfiCommon0
        CFI (cfiCond269) NoFunction
        CFI (cfiCond269) Conditional ??CrossCallReturnLabel_277, ??CrossCallReturnLabel_217
        CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond269) CFA_SP SP+0
        CFI (cfiCond269) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond270 Using cfiCommon0
        CFI (cfiCond270) NoFunction
        CFI (cfiCond270) Conditional ??CrossCallReturnLabel_277, ??CrossCallReturnLabel_218
        CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond270) CFA_SP SP+0
        CFI (cfiCond270) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond271 Using cfiCommon0
        CFI (cfiCond271) NoFunction
        CFI (cfiCond271) Conditional ??CrossCallReturnLabel_277, ??CrossCallReturnLabel_219
        CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond271) CFA_SP SP+0
        CFI (cfiCond271) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond272 Using cfiCommon0
        CFI (cfiCond272) NoFunction
        CFI (cfiCond272) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_239
        CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond272) CFA_SP SP+0
        CFI (cfiCond272) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond273 Using cfiCommon0
        CFI (cfiCond273) NoFunction
        CFI (cfiCond273) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_240
        CFI (cfiCond273) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond273) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond273) CFA_SP SP+-5
        CFI (cfiCond273) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond274 Using cfiCommon0
        CFI (cfiCond274) NoFunction
        CFI (cfiCond274) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_220
        CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond274) CFA_SP SP+0
        CFI (cfiCond274) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond275 Using cfiCommon0
        CFI (cfiCond275) NoFunction
        CFI (cfiCond275) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_221
        CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond275) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond275) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond275) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond275) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond275) CFA_SP SP+0
        CFI (cfiCond275) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond276 Using cfiCommon0
        CFI (cfiCond276) NoFunction
        CFI (cfiCond276) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_222
        CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond276) CFA_SP SP+0
        CFI (cfiCond276) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond277 Using cfiCommon0
        CFI (cfiCond277) NoFunction
        CFI (cfiCond277) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_223
        CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond277) CFA_SP SP+0
        CFI (cfiCond277) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond278 Using cfiCommon0
        CFI (cfiCond278) NoFunction
        CFI (cfiCond278) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_224
        CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond278) CFA_SP SP+0
        CFI (cfiCond278) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond279 Using cfiCommon0
        CFI (cfiCond279) NoFunction
        CFI (cfiCond279) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_225
        CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond279) CFA_SP SP+0
        CFI (cfiCond279) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond280 Using cfiCommon0
        CFI (cfiCond280) NoFunction
        CFI (cfiCond280) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_226
        CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond280) CFA_SP SP+0
        CFI (cfiCond280) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond281 Using cfiCommon0
        CFI (cfiCond281) NoFunction
        CFI (cfiCond281) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_227
        CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond281) CFA_SP SP+0
        CFI (cfiCond281) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond282 Using cfiCommon0
        CFI (cfiCond282) NoFunction
        CFI (cfiCond282) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_228
        CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond282) CFA_SP SP+0
        CFI (cfiCond282) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond283 Using cfiCommon0
        CFI (cfiCond283) NoFunction
        CFI (cfiCond283) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_229
        CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond283) CFA_SP SP+0
        CFI (cfiCond283) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond284 Using cfiCommon0
        CFI (cfiCond284) NoFunction
        CFI (cfiCond284) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_230
        CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond284) CFA_SP SP+0
        CFI (cfiCond284) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond285 Using cfiCommon0
        CFI (cfiCond285) NoFunction
        CFI (cfiCond285) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_231
        CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond285) CFA_SP SP+0
        CFI (cfiCond285) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond286 Using cfiCommon0
        CFI (cfiCond286) NoFunction
        CFI (cfiCond286) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_232
        CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond286) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond286) CFA_SP SP+0
        CFI (cfiCond286) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond287 Using cfiCommon0
        CFI (cfiCond287) NoFunction
        CFI (cfiCond287) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_233
        CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond287) CFA_SP SP+0
        CFI (cfiCond287) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond288 Using cfiCommon0
        CFI (cfiCond288) NoFunction
        CFI (cfiCond288) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_234
        CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond288) CFA_SP SP+0
        CFI (cfiCond288) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond289 Using cfiCommon0
        CFI (cfiCond289) NoFunction
        CFI (cfiCond289) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_235
        CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond289) CFA_SP SP+0
        CFI (cfiCond289) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond290 Using cfiCommon0
        CFI (cfiCond290) NoFunction
        CFI (cfiCond290) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_236
        CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond290) CFA_SP SP+0
        CFI (cfiCond290) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond291 Using cfiCommon0
        CFI (cfiCond291) NoFunction
        CFI (cfiCond291) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_237
        CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond291) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond291) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond291) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond291) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond291) CFA_SP SP+0
        CFI (cfiCond291) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond292 Using cfiCommon0
        CFI (cfiCond292) NoFunction
        CFI (cfiCond292) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_238
        CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond292) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond292) CFA_SP SP+0
        CFI (cfiCond292) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond293 Using cfiCommon0
        CFI (cfiCond293) NoFunction
        CFI (cfiCond293) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_270
        CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond293) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond293) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond293) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond293) CFA_SP SP+0
        CFI (cfiCond293) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond294 Using cfiCommon0
        CFI (cfiCond294) NoFunction
        CFI (cfiCond294) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_271
        CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond294) CFA_SP SP+0
        CFI (cfiCond294) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond295 Using cfiCommon0
        CFI (cfiCond295) NoFunction
        CFI (cfiCond295) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_272
        CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond295) CFA_SP SP+0
        CFI (cfiCond295) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond296 Using cfiCommon0
        CFI (cfiCond296) NoFunction
        CFI (cfiCond296) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_19
        CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond296) CFA_SP SP+0
        CFI (cfiCond296) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond297 Using cfiCommon0
        CFI (cfiCond297) NoFunction
        CFI (cfiCond297) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_20
        CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond297) CFA_SP SP+0
        CFI (cfiCond297) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond298 Using cfiCommon0
        CFI (cfiCond298) NoFunction
        CFI (cfiCond298) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_21
        CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond298) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond298) CFA_SP SP+0
        CFI (cfiCond298) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond299 Using cfiCommon0
        CFI (cfiCond299) NoFunction
        CFI (cfiCond299) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_22
        CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond299) CFA_SP SP+0
        CFI (cfiCond299) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond300 Using cfiCommon0
        CFI (cfiCond300) NoFunction
        CFI (cfiCond300) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_23
        CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond300) CFA_SP SP+0
        CFI (cfiCond300) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond301 Using cfiCommon0
        CFI (cfiCond301) NoFunction
        CFI (cfiCond301) Conditional ??CrossCallReturnLabel_273, ??CrossCallReturnLabel_15
        CFI (cfiCond301) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond301) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond301) CFA_SP SP+-5
        CFI (cfiCond301) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond302 Using cfiCommon0
        CFI (cfiCond302) NoFunction
        CFI (cfiCond302) Conditional ??CrossCallReturnLabel_273, ??CrossCallReturnLabel_16
        CFI (cfiCond302) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond302) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond302) CFA_SP SP+-5
        CFI (cfiCond302) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker303 Using cfiCommon1
        CFI (cfiPicker303) NoFunction
        CFI (cfiPicker303) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond259
        CFI EndBlock cfiCond260
        CFI EndBlock cfiCond261
        CFI EndBlock cfiCond262
        CFI EndBlock cfiCond263
        CFI EndBlock cfiCond264
        CFI EndBlock cfiCond265
        CFI EndBlock cfiCond266
        CFI EndBlock cfiCond267
        CFI EndBlock cfiCond268
        CFI EndBlock cfiCond269
        CFI EndBlock cfiCond270
        CFI EndBlock cfiCond271
        CFI EndBlock cfiCond272
        CFI EndBlock cfiCond273
        CFI EndBlock cfiCond274
        CFI EndBlock cfiCond275
        CFI EndBlock cfiCond276
        CFI EndBlock cfiCond277
        CFI EndBlock cfiCond278
        CFI EndBlock cfiCond279
        CFI EndBlock cfiCond280
        CFI EndBlock cfiCond281
        CFI EndBlock cfiCond282
        CFI EndBlock cfiCond283
        CFI EndBlock cfiCond284
        CFI EndBlock cfiCond285
        CFI EndBlock cfiCond286
        CFI EndBlock cfiCond287
        CFI EndBlock cfiCond288
        CFI EndBlock cfiCond289
        CFI EndBlock cfiCond290
        CFI EndBlock cfiCond291
        CFI EndBlock cfiCond292
        CFI EndBlock cfiCond293
        CFI EndBlock cfiCond294
        CFI EndBlock cfiCond295
        CFI EndBlock cfiCond296
        CFI EndBlock cfiCond297
        CFI EndBlock cfiCond298
        CFI EndBlock cfiCond299
        CFI EndBlock cfiCond300
        CFI EndBlock cfiCond301
        CFI EndBlock cfiCond302
        CFI EndBlock cfiPicker303

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond304 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_241
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond305 Using cfiCommon0
        CFI (cfiCond305) NoFunction
        CFI (cfiCond305) Conditional ??CrossCallReturnLabel_242
        CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond305) CFA_SP SP+0
        CFI (cfiCond305) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiPicker306 Using cfiCommon1
        CFI (cfiPicker306) NoFunction
        CFI (cfiPicker306) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        CFI EndBlock cfiCond304
        CFI EndBlock cfiCond305
        CFI EndBlock cfiPicker306
        REQUIRE ??Subroutine129_0
        ; // Fall through to label ??Subroutine129_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine129_0:
        CFI Block cfiCond307 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_243
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond308 Using cfiCommon0
        CFI (cfiCond308) NoFunction
        CFI (cfiCond308) Conditional ??CrossCallReturnLabel_244
        CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond308) CFA_SP SP+0
        CFI (cfiCond308) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond309 Using cfiCommon0
        CFI (cfiCond309) NoFunction
        CFI (cfiCond309) Conditional ??CrossCallReturnLabel_241
        CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond309) CFA_SP SP+0
        CFI (cfiCond309) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond310 Using cfiCommon0
        CFI (cfiCond310) NoFunction
        CFI (cfiCond310) Conditional ??CrossCallReturnLabel_242
        CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond310) CFA_SP SP+0
        CFI (cfiCond310) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiPicker311 Using cfiCommon1
        CFI (cfiPicker311) NoFunction
        CFI (cfiPicker311) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        ; Setup parameters for call to function NLME_GetShortAddr
        ; Setup parameters for call to function NLME_GetShortAddr
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine112 & 0xFFFF
??CrossCallReturnLabel_245:
        RET
        CFI EndBlock cfiCond307
        CFI EndBlock cfiCond308
        CFI EndBlock cfiCond309
        CFI EndBlock cfiCond310
        CFI EndBlock cfiPicker311

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine112:
        CFI Block cfiCond312 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_241
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond313 Using cfiCommon0
        CFI (cfiCond313) NoFunction
        CFI (cfiCond313) Conditional ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_242
        CFI (cfiCond313) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond313) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond313) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond313) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond313) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond313) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond313) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond313) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond313) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond313) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond313) CFA_SP SP+0
        CFI (cfiCond313) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond314 Using cfiCommon0
        CFI (cfiCond314) NoFunction
        CFI (cfiCond314) Conditional ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_243
        CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond314) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond314) CFA_SP SP+0
        CFI (cfiCond314) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond315 Using cfiCommon0
        CFI (cfiCond315) NoFunction
        CFI (cfiCond315) Conditional ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_244
        CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond315) CFA_SP SP+0
        CFI (cfiCond315) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond316 Using cfiCommon0
        CFI (cfiCond316) NoFunction
        CFI (cfiCond316) Conditional ??CrossCallReturnLabel_246
        CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond316) CFA_SP SP+0
        CFI (cfiCond316) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker317 Using cfiCommon1
        CFI (cfiPicker317) NoFunction
        CFI (cfiPicker317) Picker
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        RET
        CFI EndBlock cfiCond312
        CFI EndBlock cfiCond313
        CFI EndBlock cfiCond314
        CFI EndBlock cfiCond315
        CFI EndBlock cfiCond316
        CFI EndBlock cfiPicker317
// 1520 
// 1521 /******************************************************************************
// 1522  * @fn          ZDSecMgrDeviceEntryRemove
// 1523  *
// 1524  * @brief       Remove device entry.
// 1525  *
// 1526  * @param       entry - [in] valid entry
// 1527  *
// 1528  * @return      none
// 1529  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1530 void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry )
ZDSecMgrDeviceEntryRemove:
        CFI Block cfiBlock318 Using cfiCommon0
        CFI Function ZDSecMgrDeviceEntryRemove
        CODE
// 1531 {
        FUNCALL ZDSecMgrDeviceEntryRemove, ZDSecMgrEntryFree
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1532   // terminate device control
// 1533   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1534   {
// 1535     ZDSecMgrCtrlTerm( entry );
// 1536   }
// 1537 
// 1538   // remove device from entry data
// 1539   ZDSecMgrEntryFree( entry );
        ; Setup parameters for call to function ZDSecMgrEntryFree
        LCALL   ??ZDSecMgrEntryFree?relay
// 1540 
// 1541 }
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock318
// 1542 
// 1543 /******************************************************************************
// 1544  * @fn          ZDSecMgrDeviceRemoveByExtAddr
// 1545  *
// 1546  * @brief       Remove device entry by its ext address.
// 1547  *
// 1548  * @param       pAddr - pointer to the extended address
// 1549  *
// 1550  * @return      ZStatus_t
// 1551  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1552 ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
ZDSecMgrDeviceRemoveByExtAddr:
        CFI Block cfiBlock319 Using cfiCommon0
        CFI Function ZDSecMgrDeviceRemoveByExtAddr
        CODE
// 1553 {
        FUNCALL ZDSecMgrDeviceRemoveByExtAddr, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemoveByExtAddr, ZDSecMgrEntryFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
// 1554   ZDSecMgrEntry_t *pEntry;
// 1555   uint8           retValue;
// 1556 
// 1557   retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        MOV     R6,A
// 1558 
// 1559   if( retValue == ZSuccess )
        JNZ     ??CrossCallReturnLabel_116
// 1560   {
// 1561     ZDSecMgrDeviceEntryRemove( pEntry );
        ; Setup parameters for call to function ZDSecMgrEntryFree
        LCALL   ?Subroutine74 & 0xFFFF
// 1562   }
// 1563 
// 1564   return retValue;
??CrossCallReturnLabel_116:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine135_0 & 0xFFFF
        CFI EndBlock cfiBlock319
// 1565 }
// 1566 
// 1567 /******************************************************************************
// 1568  * @fn          ZDSecMgrDeviceEntryAdd
// 1569  *
// 1570  * @brief       Add entry.
// 1571  *
// 1572  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1573  * @param       ami    - [in] Address Manager index
// 1574  *
// 1575  * @return      ZStatus_t
// 1576  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1577 void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr )
ZDSecMgrAddrMgrUpdate:
        CFI Block cfiBlock320 Using cfiCommon0
        CFI Function ZDSecMgrAddrMgrUpdate
        CODE
// 1578 {
        FUNCALL ZDSecMgrAddrMgrUpdate, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrMgrUpdate, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1579   AddrMgrEntry_t entry;
// 1580 
// 1581   // get the ami data
// 1582   entry.user  = ADDRMGR_USER_SECURITY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1583   entry.index = ami;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
// 1584 
// 1585   AddrMgrEntryGet( &entry );
??CrossCallReturnLabel_1:
        LCALL   ??AddrMgrEntryGet?relay
// 1586 
// 1587   // check if NWK address is same
// 1588   if ( entry.nwkAddr != nwkAddr )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDSecMgrAddrMgrUpdate_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDSecMgrAddrMgrUpdate_0:
        JZ      ??ZDSecMgrAddrMgrUpdate_1
// 1589   {
// 1590     // update NWK address
// 1591     entry.nwkAddr = nwkAddr;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine17 & 0xFFFF
// 1592 
// 1593     AddrMgrEntryUpdate( &entry );
// 1594   }
??CrossCallReturnLabel_9:
        LCALL   ??AddrMgrEntryUpdate?relay
// 1595 }
??ZDSecMgrAddrMgrUpdate_1:
        LJMP    ?Subroutine7 & 0xFFFF
        CFI EndBlock cfiBlock320

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond321 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond322 Using cfiCommon0
        CFI (cfiCond322) NoFunction
        CFI (cfiCond322) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond322) CFA_SP SP+0
        CFI (cfiCond322) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond323 Using cfiCommon0
        CFI (cfiCond323) NoFunction
        CFI (cfiCond323) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond323) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond323) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond323) CFA_SP SP+-5
        CFI (cfiCond323) CFA_XSP16 add(XSP16, 4)
        CFI Block cfiPicker324 Using cfiCommon1
        CFI (cfiPicker324) NoFunction
        CFI (cfiPicker324) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ??Subroutine149_0 & 0xFFFF
??CrossCallReturnLabel_304:
        RET
        CFI EndBlock cfiCond321
        CFI EndBlock cfiCond322
        CFI EndBlock cfiCond323
        CFI EndBlock cfiPicker324
// 1596 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1597 ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami )
ZDSecMgrDeviceEntryAdd:
        CFI Block cfiBlock325 Using cfiCommon0
        CFI Function ZDSecMgrDeviceEntryAdd
        CODE
// 1598 {
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrAddrMgrUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrAddrMgrUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1599   ZStatus_t        status;
// 1600   ZDSecMgrEntry_t* entry;
// 1601 
// 1602   // initialize as unknown until completion
// 1603   status = ZNwkUnknownDevice;
        MOV     ?V0 + 2,#-0x38
// 1604 
// 1605   device->ctrl = NULL;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine24 & 0xFFFF
// 1606 
// 1607   // make sure not already registered
// 1608   if ( ZDSecMgrEntryLookup( device->nwkAddr, &entry ) == ZSuccess )
??CrossCallReturnLabel_31:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine147_0 & 0xFFFF
??CrossCallReturnLabel_289:
        LCALL   ??ZDSecMgrEntryLookup?relay
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??ZDSecMgrDeviceEntryAdd_0
// 1609   {
// 1610     // verify that address index is same
// 1611     if ( entry->ami != ami )
        LCALL   ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_121:
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceEntryAdd_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDSecMgrDeviceEntryAdd_1:
        JZ      ??ZDSecMgrDeviceEntryAdd_2
// 1612     {
// 1613       // remove conflicting entry
// 1614       ZDSecMgrDeviceEntryRemove( entry );
        ; Setup parameters for call to function ZDSecMgrEntryFree
        LCALL   ?Subroutine74 & 0xFFFF
// 1615 
// 1616       if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
??CrossCallReturnLabel_117:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceEntryAdd_2
// 1617       {
// 1618         // update NWK address
// 1619         ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
??ZDSecMgrDeviceEntryAdd_3:
        ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
        LCALL   ?Subroutine62 & 0xFFFF
// 1620       }
// 1621     }
// 1622   }
??CrossCallReturnLabel_97:
        SJMP    ??ZDSecMgrDeviceEntryAdd_2
// 1623   else if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
??ZDSecMgrDeviceEntryAdd_0:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        MOV     A,R1
        JZ      ??ZDSecMgrDeviceEntryAdd_3
// 1624   {
// 1625     // update NWK address
// 1626     ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
// 1627   }
// 1628 
// 1629   // check if a new entry needs to be created
// 1630   if ( entry == NULL )
??ZDSecMgrDeviceEntryAdd_2:
        LCALL   ??Subroutine151_0 & 0xFFFF
??CrossCallReturnLabel_318:
        JNZ     ??CrossCallReturnLabel_98
// 1631   {
// 1632     // get new entry
// 1633     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrEntryNew?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceEntryAdd_4
// 1634     {
// 1635       // reset entry lkd
// 1636 
// 1637       // finish setting up entry
// 1638       entry->ami = ami;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine103 & 0xFFFF
??CrossCallReturnLabel_161:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1639 
// 1640       // update NWK address
// 1641       ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
        ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
        LCALL   ?Subroutine62 & 0xFFFF
// 1642 
// 1643       // enter new device into device control
// 1644       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1645       {
// 1646         status = ZDSecMgrCtrlAdd( device, entry );
// 1647       }
// 1648       else
// 1649       {
// 1650         status = ZSuccess;
// 1651       }
// 1652     }
// 1653   }
// 1654   else
// 1655   {
// 1656     // reset entry lkd
// 1657 
// 1658     // reset entry in entry control
// 1659     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1660     {
// 1661       status = ZDSecMgrCtrlReset( device, entry );
// 1662     }
// 1663     else
// 1664     {
// 1665       status = ZSuccess;
??CrossCallReturnLabel_98:
        MOV     ?V0 + 2,#0x0
// 1666     }
// 1667   }
// 1668 
// 1669   return status;
??ZDSecMgrDeviceEntryAdd_4:
        MOV     R1,?V0 + 2
        MOV     A,#0x2
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock325
// 1670 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine77:
        CFI Block cfiCond326 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_120
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond327 Using cfiCommon0
        CFI (cfiCond327) NoFunction
        CFI (cfiCond327) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond327) CFA_SP SP+0
        CFI (cfiCond327) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker328 Using cfiCommon1
        CFI (cfiPicker328) NoFunction
        CFI (cfiPicker328) Picker
        LCALL   ?Subroutine103 & 0xFFFF
??CrossCallReturnLabel_163:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond326
        CFI EndBlock cfiCond327
        CFI EndBlock cfiPicker328

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine74:
        CFI Block cfiCond329 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_116
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond330 Using cfiCommon0
        CFI (cfiCond330) NoFunction
        CFI (cfiCond330) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond330) CFA_SP SP+0
        CFI (cfiCond330) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker331 Using cfiCommon1
        CFI (cfiPicker331) NoFunction
        CFI (cfiPicker331) Picker
        LCALL   ?Subroutine101 & 0xFFFF
??CrossCallReturnLabel_339:
        LCALL   ??ZDSecMgrEntryFree?relay
        RET
        CFI EndBlock cfiCond329
        CFI EndBlock cfiCond330
        CFI EndBlock cfiPicker331

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine62:
        CFI Block cfiCond332 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_97
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond333 Using cfiCommon0
        CFI (cfiCond333) NoFunction
        CFI (cfiCond333) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond333) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond333) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond333) CFA_SP SP+0
        CFI (cfiCond333) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker334 Using cfiCommon1
        CFI (cfiPicker334) NoFunction
        CFI (cfiPicker334) Picker
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine108 & 0xFFFF
??CrossCallReturnLabel_168:
        LCALL   ??ZDSecMgrAddrMgrUpdate?relay
        RET
        CFI EndBlock cfiCond332
        CFI EndBlock cfiCond333
        CFI EndBlock cfiPicker334

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond335 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond336 Using cfiCommon0
        CFI (cfiCond336) NoFunction
        CFI (cfiCond336) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond336) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond336) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond336) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond336) CFA_SP SP+0
        CFI (cfiCond336) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker337 Using cfiCommon1
        CFI (cfiPicker337) NoFunction
        CFI (cfiPicker337) Picker
        LCALL   ?Subroutine93 & 0xFFFF
??CrossCallReturnLabel_247:
        MOV     R4,DPL
        MOV     R5,DPH
        RET
        CFI EndBlock cfiCond335
        CFI EndBlock cfiCond336
        CFI EndBlock cfiPicker337

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine93:
        CFI Block cfiCond338 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond339 Using cfiCommon0
        CFI (cfiCond339) NoFunction
        CFI (cfiCond339) Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_31
        CFI (cfiCond339) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond339) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond339) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond339) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond339) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond339) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond339) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond339) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond339) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond339) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond339) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond339) CFA_SP SP+0
        CFI (cfiCond339) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond340 Using cfiCommon0
        CFI (cfiCond340) NoFunction
        CFI (cfiCond340) Conditional ??CrossCallReturnLabel_248
        CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond340) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond340) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond340) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond340) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond340) CFA_SP SP+0
        CFI (cfiCond340) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker341 Using cfiCommon1
        CFI (cfiPicker341) NoFunction
        CFI (cfiPicker341) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        CFI EndBlock cfiCond338
        CFI EndBlock cfiCond339
        CFI EndBlock cfiCond340
        CFI EndBlock cfiPicker341
        REQUIRE ??Subroutine130_0
        ; // Fall through to label ??Subroutine130_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine130_0:
        CFI Block cfiCond342 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond343 Using cfiCommon0
        CFI (cfiCond343) NoFunction
        CFI (cfiCond343) Conditional ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_39
        CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond343) CFA_SP SP+0
        CFI (cfiCond343) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond344 Using cfiCommon0
        CFI (cfiCond344) NoFunction
        CFI (cfiCond344) Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_30
        CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond344) CFA_SP SP+0
        CFI (cfiCond344) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond345 Using cfiCommon0
        CFI (cfiCond345) NoFunction
        CFI (cfiCond345) Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_31
        CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond345) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond345) CFA_SP SP+0
        CFI (cfiCond345) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond346 Using cfiCommon0
        CFI (cfiCond346) NoFunction
        CFI (cfiCond346) Conditional ??CrossCallReturnLabel_248
        CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond346) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond346) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond346) CFA_SP SP+0
        CFI (cfiCond346) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker347 Using cfiCommon1
        CFI (cfiPicker347) NoFunction
        CFI (cfiPicker347) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        ; Setup parameters for call to function ZDSecMgrEntryLookup
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond342
        CFI EndBlock cfiCond343
        CFI EndBlock cfiCond344
        CFI EndBlock cfiCond345
        CFI EndBlock cfiCond346
        CFI EndBlock cfiPicker347
// 1671 
// 1672 /******************************************************************************
// 1673  * @fn          ZDSecMgrDeviceCtrlHandler
// 1674  *
// 1675  * @brief       Device control handler.
// 1676  *
// 1677  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1678  *
// 1679  * @return      none
// 1680  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1681 void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceCtrlHandler:
        CFI Block cfiBlock348 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlHandler
        CODE
// 1682 {
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrSendMasterKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrEstablishKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1683   uint8 state;
// 1684   uint8 cntr;
// 1685 
// 1686   state = device->ctrl->state;
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_101:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
// 1687   cntr  = ZDSECMGR_CTRL_BASE_CNTR;
// 1688 
// 1689   switch ( state )
        ADD     A,#-0x2
        JZ      ??ZDSecMgrDeviceCtrlHandler_0
        DEC     A
        JZ      ??ZDSecMgrDeviceCtrlHandler_1
        DEC     A
        JZ      ??ZDSecMgrDeviceCtrlHandler_2
        ADD     A,#-0x3
        JZ      ??ZDSecMgrDeviceCtrlHandler_3
        SJMP    ??ZDSecMgrDeviceCtrlHandler_4
// 1690   {
// 1691     case ZDSECMGR_CTRL_TK_MASTER:
// 1692       if ( ZDSecMgrSendMasterKey( device ) == ZSuccess )
??ZDSecMgrDeviceCtrlHandler_0:
        ; Setup parameters for call to function ZDSecMgrSendMasterKey
        LCALL   ??ZDSecMgrSendMasterKey?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceCtrlHandler_2
// 1693       {
// 1694         state = ZDSECMGR_CTRL_SKKE_INIT;
        MOV     ?V0 + 0,#0x3
// 1695         cntr  = ZDSECMGR_CTRL_SKKE_INIT_CNTR;
        SJMP    ??ZDSecMgrDeviceCtrlHandler_2
// 1696       }
// 1697       break;
// 1698 
// 1699     case ZDSECMGR_CTRL_SKKE_INIT:
// 1700       if ( ZDSecMgrEstablishKey( device ) == ZSuccess )
??ZDSecMgrDeviceCtrlHandler_1:
        ; Setup parameters for call to function ZDSecMgrEstablishKey
        LCALL   ??ZDSecMgrEstablishKey?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceCtrlHandler_2
// 1701       {
// 1702         state = ZDSECMGR_CTRL_SKKE_WAIT;
        MOV     ?V0 + 0,#0x4
        SJMP    ??ZDSecMgrDeviceCtrlHandler_2
// 1703       }
// 1704       break;
// 1705 
// 1706     case ZDSECMGR_CTRL_SKKE_WAIT:
// 1707       // continue to wait for SKA control timeout
// 1708       break;
// 1709 
// 1710     case ZDSECMGR_CTRL_TK_NWK:
// 1711       if ( ZDSecMgrSendNwkKey( device ) == ZSuccess )
??ZDSecMgrDeviceCtrlHandler_3:
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        LCALL   ??ZDSecMgrSendNwkKey?relay
        MOV     A,R1
        JZ      ??ZDSecMgrDeviceCtrlHandler_4
// 1712       {
// 1713         state = ZDSECMGR_CTRL_NONE;
// 1714       }
// 1715       break;
// 1716 
// 1717     default:
// 1718       state = ZDSECMGR_CTRL_NONE;
// 1719       break;
// 1720   }
// 1721 
// 1722   if ( state != ZDSECMGR_CTRL_NONE )
// 1723   {
// 1724     device->ctrl->state = state;
??ZDSecMgrDeviceCtrlHandler_2:
        MOV     A,R6
        ADD     A,#0x8
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 0
        LCALL   ?Subroutine25 & 0xFFFF
// 1725     device->ctrl->cntr  = cntr;
??CrossCallReturnLabel_32:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1726 
// 1727     osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,A
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        SJMP    ??ZDSecMgrDeviceCtrlHandler_5
// 1728   }
// 1729   else
// 1730   {
// 1731     ZDSecMgrCtrlRelease( device->ctrl );
??ZDSecMgrDeviceCtrlHandler_4:
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_102:
        CLR     A
        MOVX    @DPTR,A
// 1732   }
// 1733 }
??ZDSecMgrDeviceCtrlHandler_5:
        LJMP    ??Subroutine137_0 & 0xFFFF
        CFI EndBlock cfiBlock348

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine64:
        CFI Block cfiCond349 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_101
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond350 Using cfiCommon0
        CFI (cfiCond350) NoFunction
        CFI (cfiCond350) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond350) CFA_SP SP+0
        CFI (cfiCond350) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker351 Using cfiCommon1
        CFI (cfiPicker351) NoFunction
        CFI (cfiPicker351) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine100 & 0xFFFF
??CrossCallReturnLabel_328:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond349
        CFI EndBlock cfiCond350
        CFI EndBlock cfiPicker351
// 1734 
// 1735 /******************************************************************************
// 1736  * @fn          ZDSecMgrDeviceCtrlSetup
// 1737  *
// 1738  * @brief       Setup device control.
// 1739  *
// 1740  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1741  *
// 1742  * @return      ZStatus_t
// 1743  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1744 void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceCtrlSetup:
        CFI Block cfiBlock352 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlSetup
        CODE
// 1745 {
        FUNCALL ZDSecMgrDeviceCtrlSetup, ZDSecMgrDeviceCtrlHandler
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1746   if ( device->ctrl != NULL )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine152_0 & 0xFFFF
??CrossCallReturnLabel_313:
        JZ      ??ZDSecMgrDeviceCtrlSetup_0
// 1747   {
// 1748     if ( device->secure == FALSE )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JNZ     ??ZDSecMgrDeviceCtrlSetup_1
// 1749     {
// 1750       // send the master key data to the joining device
// 1751       device->ctrl->state = ZDSECMGR_CTRL_TK_MASTER;
        LCALL   ??Subroutine125_0 & 0xFFFF
// 1752     }
??CrossCallReturnLabel_211:
        MOV     A,#0x2
        SJMP    ??ZDSecMgrDeviceCtrlSetup_2
// 1753     else
// 1754     {
// 1755       // start SKKE
// 1756       device->ctrl->state = ZDSECMGR_CTRL_SKKE_INIT;
??ZDSecMgrDeviceCtrlSetup_1:
        LCALL   ??Subroutine125_0 & 0xFFFF
// 1757     }
??CrossCallReturnLabel_212:
        MOV     A,#0x3
??ZDSecMgrDeviceCtrlSetup_2:
        MOVX    @DPTR,A
// 1758 
// 1759     ZDSecMgrDeviceCtrlHandler( device );
        ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
        LCALL   ??ZDSecMgrDeviceCtrlHandler?relay
// 1760   }
// 1761 }
??ZDSecMgrDeviceCtrlSetup_0:
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock352
// 1762 
// 1763 /******************************************************************************
// 1764  * @fn          ZDSecMgrDeviceCtrlUpdate
// 1765  *
// 1766  * @brief       Update control data.
// 1767  *
// 1768  * @param       extAddr - [in] EXT address
// 1769  * @param       state   - [in] new control state
// 1770  *
// 1771  * @return      none
// 1772  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1773 void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state )
ZDSecMgrDeviceCtrlUpdate:
        CFI Block cfiBlock353 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlUpdate
        CODE
// 1774 {
        FUNCALL ZDSecMgrDeviceCtrlUpdate, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlUpdate, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     R6,A
// 1775   ZDSecMgrEntry_t* entry;
// 1776   ZDSecMgrCtrl_t*  ctrl;
// 1777 
// 1778   // lookup device entry data
// 1779   (void)ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
// 1780 
// 1781   if ( entry != NULL )
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine152_0 & 0xFFFF
??CrossCallReturnLabel_314:
        JZ      ??ZDSecMgrDeviceCtrlUpdate_0
// 1782   {
// 1783     // lookup device control data
// 1784     ZDSecMgrCtrlLookup( entry, &ctrl );
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine131_0 & 0xFFFF
??CrossCallReturnLabel_251:
        LCALL   ?Subroutine51 & 0xFFFF
// 1785 
// 1786     // make sure control data is valid
// 1787     if ( ctrl != NULL )
??CrossCallReturnLabel_307:
        JZ      ??ZDSecMgrDeviceCtrlUpdate_0
// 1788     {
// 1789       // possible state transitions
// 1790       if ( ctrl->state == ZDSECMGR_CTRL_SKKE_WAIT )
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_214:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_0
// 1791       {
// 1792         if ( state == ZDSECMGR_CTRL_SKKE_DONE )
        MOV     A,#0x5
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_1
// 1793         {
// 1794           // send the network key
// 1795           ctrl->state = ZDSECMGR_CTRL_TK_NWK;
        LCALL   ?Subroutine65 & 0xFFFF
// 1796           ctrl->cntr  = ZDSECMGR_CTRL_TK_NWK_CNTR;
// 1797         }
??CrossCallReturnLabel_215:
        MOV     A,#0x7
        SJMP    ??ZDSecMgrDeviceCtrlUpdate_2
// 1798         else if ( state == ZDSECMGR_CTRL_SKKE_FAIL )
??ZDSecMgrDeviceCtrlUpdate_1:
        MOV     A,#0x6
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_0
// 1799         {
// 1800           // force default timeout in order to cleanup control logic
// 1801           ctrl->state = ZDSECMGR_CTRL_SKKE_FAIL;
        LCALL   ?Subroutine65 & 0xFFFF
// 1802           ctrl->cntr  = ZDSECMGR_CTRL_BASE_CNTR;
// 1803         }
// 1804       }
// 1805       // timer should be active
// 1806     }
// 1807   }
??CrossCallReturnLabel_216:
        MOV     A,#0x6
??ZDSecMgrDeviceCtrlUpdate_2:
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock353
// 1808 }
??ZDSecMgrDeviceCtrlUpdate_0:
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiBlock354 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        LJMP    ??Subroutine136_0 & 0xFFFF
        CFI EndBlock cfiBlock354

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond355 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond356 Using cfiCommon0
        CFI (cfiCond356) NoFunction
        CFI (cfiCond356) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond356) CFA_SP SP+0
        CFI (cfiCond356) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker357 Using cfiCommon1
        CFI (cfiPicker357) NoFunction
        CFI (cfiPicker357) Picker
        LCALL   ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_249:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond355
        CFI EndBlock cfiCond356
        CFI EndBlock cfiPicker357
// 1809 
// 1810 void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr );

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1811 void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr )
APSME_SKA_TimerExpired:
        CFI Block cfiBlock358 Using cfiCommon0
        CFI Function APSME_SKA_TimerExpired
        CODE
// 1812 {
        ; Saved register size: 0
        ; Auto size: 0
// 1813   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1814   {
// 1815     if ( initiator == TRUE )
// 1816     {
// 1817       ZDSecMgrDeviceCtrlUpdate( partExtAddr, ZDSECMGR_CTRL_SKKE_FAIL );
// 1818     }
// 1819   }
// 1820 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock358
// 1821 
// 1822 /******************************************************************************
// 1823  * @fn          ZDSecMgrDeviceRemove
// 1824  *
// 1825  * @brief       Remove device from network.
// 1826  *
// 1827  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1828  *
// 1829  * @return      none
// 1830  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1831 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceRemove:
        CFI Block cfiBlock359 Using cfiCommon0
        CFI Function ZDSecMgrDeviceRemove
        CODE
// 1832 {
        FUNCALL ZDSecMgrDeviceRemove, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, APSME_RemoveDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1833   APSME_RemoveDeviceReq_t remDevReq;
// 1834   NLME_LeaveReq_t         leaveReq;
// 1835   associated_devices_t*   assoc;
// 1836 
// 1837   // check if parent, remove the device
// 1838   if ( device->parentAddr == NLME_GetShortAddr() )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine112 & 0xFFFF
??CrossCallReturnLabel_246:
        JNZ     ??ZDSecMgrDeviceRemove_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrDeviceRemove_0:
        JNZ     ??ZDSecMgrDeviceRemove_1
// 1839   {
// 1840     // this is the parent of the device
// 1841     leaveReq.extAddr        = device->extAddr;
        MOV     A,R6
        ADD     A,#0x2
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV     R3,A
        LCALL   ?Subroutine37 & 0xFFFF
// 1842     leaveReq.removeChildren = FALSE;
??CrossCallReturnLabel_370:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1843     leaveReq.rejoin         = FALSE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine96 & 0xFFFF
// 1844 
// 1845     // find child association
// 1846     assoc = AssocGetWithExt( device->extAddr );
??CrossCallReturnLabel_148:
        LCALL   ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_118:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
// 1847 
// 1848     if ( ( assoc != NULL                            ) &&
// 1849          ( assoc->nodeRelation >= CHILD_RFD         ) &&
// 1850          ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDSecMgrDeviceRemove_2
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDSecMgrDeviceRemove_2
// 1851     {
// 1852       // check if associated device is authenticated
// 1853       if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        MOV     A,#0x4
        JNC     ??ZDSecMgrDeviceRemove_3
// 1854       {
// 1855         leaveReq.silent = FALSE;
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrDeviceRemove_4
// 1856       }
// 1857       else
// 1858       {
// 1859         leaveReq.silent = TRUE;
??ZDSecMgrDeviceRemove_3:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
// 1860       }
// 1861 
// 1862       NLME_LeaveReq( &leaveReq );
// 1863     }
// 1864   }
??ZDSecMgrDeviceRemove_4:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ??NLME_LeaveReq?relay
        SJMP    ??ZDSecMgrDeviceRemove_2
// 1865   else
// 1866   {
// 1867     // this is not the parent of the device
// 1868     remDevReq.parentAddr   = device->parentAddr;
??ZDSecMgrDeviceRemove_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine156_0 & 0xFFFF
// 1869     remDevReq.childExtAddr = device->extAddr;
// 1870 
// 1871     APSME_RemoveDeviceReq( &remDevReq );
// 1872   }
??CrossCallReturnLabel_347:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine127_0 & 0xFFFF
??CrossCallReturnLabel_219:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_RemoveDeviceReq?relay
// 1873 }
??ZDSecMgrDeviceRemove_2:
        MOV     A,#0x9
        SJMP    ??Subroutine132_0
        CFI EndBlock cfiBlock359

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine96:
        CFI Block cfiCond360 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_146
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond361 Using cfiCommon0
        CFI (cfiCond361) NoFunction
        CFI (cfiCond361) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_42
        CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond361) CFA_SP SP+0
        CFI (cfiCond361) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond362 Using cfiCommon0
        CFI (cfiCond362) NoFunction
        CFI (cfiCond362) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_43
        CFI (cfiCond362) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond362) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond362) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond362) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond362) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond362) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond362) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond362) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond362) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond362) CFA_SP SP+0
        CFI (cfiCond362) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond363 Using cfiCommon0
        CFI (cfiCond363) NoFunction
        CFI (cfiCond363) Conditional ??CrossCallReturnLabel_148
        CFI (cfiCond363) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond363) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond363) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond363) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond363) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond363) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond363) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond363) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond363) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond363) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond363) CFA_SP SP+0
        CFI (cfiCond363) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond364 Using cfiCommon0
        CFI (cfiCond364) NoFunction
        CFI (cfiCond364) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_32
        CFI (cfiCond364) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond364) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond364) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond364) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond364) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond364) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond364) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond364) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond364) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond364) CFA_SP SP+0
        CFI (cfiCond364) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond365 Using cfiCommon0
        CFI (cfiCond365) NoFunction
        CFI (cfiCond365) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_33
        CFI (cfiCond365) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond365) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond365) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond365) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond365) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond365) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond365) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond365) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond365) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond365) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond365) CFA_SP SP+0
        CFI (cfiCond365) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker366 Using cfiCommon1
        CFI (cfiPicker366) NoFunction
        CFI (cfiPicker366) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond360
        CFI EndBlock cfiCond361
        CFI EndBlock cfiCond362
        CFI EndBlock cfiCond363
        CFI EndBlock cfiCond364
        CFI EndBlock cfiCond365
        CFI EndBlock cfiPicker366

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiCond367 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond368 Using cfiCommon0
        CFI (cfiCond368) NoFunction
        CFI (cfiCond368) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond368) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond368) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond368) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond368) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond368) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond368) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond368) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond368) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond368) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond368) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond368) CFA_SP SP+0
        CFI (cfiCond368) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker369 Using cfiCommon1
        CFI (cfiPicker369) NoFunction
        CFI (cfiPicker369) Picker
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        LCALL   ?Subroutine110 & 0xFFFF
??CrossCallReturnLabel_255:
        RET
        CFI EndBlock cfiCond367
        CFI EndBlock cfiCond368
        CFI EndBlock cfiPicker369

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine110:
        CFI Block cfiCond370 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_254
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond371 Using cfiCommon0
        CFI (cfiCond371) NoFunction
        CFI (cfiCond371) Conditional ??CrossCallReturnLabel_255, ??CrossCallReturnLabel_73
        CFI (cfiCond371) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond371) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond371) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond371) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond371) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond371) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond371) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond371) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond371) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond371) CFA_SP SP+0
        CFI (cfiCond371) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond372 Using cfiCommon0
        CFI (cfiCond372) NoFunction
        CFI (cfiCond372) Conditional ??CrossCallReturnLabel_255, ??CrossCallReturnLabel_74
        CFI (cfiCond372) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond372) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond372) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond372) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond372) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond372) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond372) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond372) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond372) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond372) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond372) CFA_SP SP+0
        CFI (cfiCond372) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker373 Using cfiCommon1
        CFI (cfiPicker373) NoFunction
        CFI (cfiPicker373) Picker
        MOV     DPH,R1
        CFI EndBlock cfiCond370
        CFI EndBlock cfiCond371
        CFI EndBlock cfiCond372
        CFI EndBlock cfiPicker373
        REQUIRE ??Subroutine131_0
        ; // Fall through to label ??Subroutine131_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine131_0:
        CFI Block cfiCond374 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_250
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond375 Using cfiCommon0
        CFI (cfiCond375) NoFunction
        CFI (cfiCond375) Conditional ??CrossCallReturnLabel_251
        CFI (cfiCond375) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond375) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond375) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond375) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond375) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond375) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond375) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond375) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond375) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond375) CFA_SP SP+0
        CFI (cfiCond375) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond376 Using cfiCommon0
        CFI (cfiCond376) NoFunction
        CFI (cfiCond376) Conditional ??CrossCallReturnLabel_252, ??CrossCallReturnLabel_93
        CFI (cfiCond376) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond376) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond376) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond376) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond376) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond376) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond376) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond376) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond376) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond376) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond376) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond376) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond376) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond376) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond376) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond376) CFA_SP SP+0
        CFI (cfiCond376) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond377 Using cfiCommon0
        CFI (cfiCond377) NoFunction
        CFI (cfiCond377) Conditional ??CrossCallReturnLabel_252, ??CrossCallReturnLabel_94
        CFI (cfiCond377) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond377) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond377) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond377) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond377) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond377) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond377) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond377) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond377) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond377) CFA_SP SP+0
        CFI (cfiCond377) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond378 Using cfiCommon0
        CFI (cfiCond378) NoFunction
        CFI (cfiCond378) Conditional ??CrossCallReturnLabel_253, ??CrossCallReturnLabel_122
        CFI (cfiCond378) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond378) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond378) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond378) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond378) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond378) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond378) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond378) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond378) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond378) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond378) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond378) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond378) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond378) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond378) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond378) CFA_SP SP+0
        CFI (cfiCond378) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond379 Using cfiCommon0
        CFI (cfiCond379) NoFunction
        CFI (cfiCond379) Conditional ??CrossCallReturnLabel_253, ??CrossCallReturnLabel_123
        CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond379) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond379) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond379) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond379) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond379) CFA_SP SP+0
        CFI (cfiCond379) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond380 Using cfiCommon0
        CFI (cfiCond380) NoFunction
        CFI (cfiCond380) Conditional ??CrossCallReturnLabel_254
        CFI (cfiCond380) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond380) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond380) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond380) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond380) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond380) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond380) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond380) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond380) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond380) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond380) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond380) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond380) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond380) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond380) CFA_SP SP+0
        CFI (cfiCond380) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond381 Using cfiCommon0
        CFI (cfiCond381) NoFunction
        CFI (cfiCond381) Conditional ??CrossCallReturnLabel_255, ??CrossCallReturnLabel_73
        CFI (cfiCond381) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond381) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond381) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond381) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond381) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond381) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond381) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond381) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond381) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond381) CFA_SP SP+0
        CFI (cfiCond381) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond382 Using cfiCommon0
        CFI (cfiCond382) NoFunction
        CFI (cfiCond382) Conditional ??CrossCallReturnLabel_255, ??CrossCallReturnLabel_74
        CFI (cfiCond382) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond382) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond382) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond382) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond382) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond382) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond382) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond382) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond382) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond382) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond382) CFA_SP SP+0
        CFI (cfiCond382) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker383 Using cfiCommon1
        CFI (cfiPicker383) NoFunction
        CFI (cfiPicker383) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond374
        CFI EndBlock cfiCond375
        CFI EndBlock cfiCond376
        CFI EndBlock cfiCond377
        CFI EndBlock cfiCond378
        CFI EndBlock cfiCond379
        CFI EndBlock cfiCond380
        CFI EndBlock cfiCond381
        CFI EndBlock cfiCond382
        CFI EndBlock cfiPicker383

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond384 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond385 Using cfiCommon0
        CFI (cfiCond385) NoFunction
        CFI (cfiCond385) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond385) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond385) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond385) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond385) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond385) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond385) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond385) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond385) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond385) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond385) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond385) CFA_SP SP+0
        CFI (cfiCond385) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker386 Using cfiCommon1
        CFI (cfiPicker386) NoFunction
        CFI (cfiPicker386) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine91 & 0xFFFF
??CrossCallReturnLabel_141:
        RET
        CFI EndBlock cfiCond384
        CFI EndBlock cfiCond385
        CFI EndBlock cfiPicker386

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock387 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        CFI EndBlock cfiBlock387
        REQUIRE ??Subroutine132_0
        ; // Fall through to label ??Subroutine132_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine132_0:
        CFI Block cfiBlock388 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock388
        REQUIRE ??Subroutine133_0
        ; // Fall through to label ??Subroutine133_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine133_0:
        CFI Block cfiBlock389 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock389
// 1874 
// 1875 /******************************************************************************
// 1876  * @fn          ZDSecMgrDeviceValidateSKKE
// 1877  *
// 1878  * @brief       Decide whether device is allowed for SKKE.
// 1879  *
// 1880  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1881  *
// 1882  * @return      ZStatus_t
// 1883  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1884 ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidateSKKE:
        CFI Block cfiBlock390 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateSKKE
        CODE
// 1885 {
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrDeviceEntryAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1886   ZStatus_t status;
// 1887   uint16 ami;
// 1888   uint16 keyNvId;
// 1889 
// 1890   // get EXT address
// 1891   status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_296:
        LCALL   ??Subroutine124_0 & 0xFFFF
// 1892 
// 1893   if ( status == ZSuccess )
??CrossCallReturnLabel_210:
        JNZ     ??CrossCallReturnLabel_99
// 1894   {
// 1895     // get MASTER key
// 1896     status = ZDSecMgrMasterKeyLookup( ami, &keyNvId );
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine53 & 0xFFFF
// 1897 
// 1898     if ( status == ZSuccess )
??CrossCallReturnLabel_257:
        JNZ     ??CrossCallReturnLabel_99
// 1899     {
// 1900       status = ZDSecMgrDeviceEntryAdd( device, ami );
        ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
        LCALL   ?Subroutine63 & 0xFFFF
// 1901     }
// 1902   }
// 1903 
// 1904   return status;
??CrossCallReturnLabel_99:
        LJMP    ?Subroutine8 & 0xFFFF
        CFI EndBlock cfiBlock390
// 1905 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine53:
        CFI Block cfiCond391 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_256
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond392 Using cfiCommon0
        CFI (cfiCond392) NoFunction
        CFI (cfiCond392) Conditional ??CrossCallReturnLabel_257
        CFI (cfiCond392) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond392) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond392) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond392) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond392) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond392) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond392) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond392) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond392) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond392) CFA_SP SP+0
        CFI (cfiCond392) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond393 Using cfiCommon0
        CFI (cfiCond393) NoFunction
        CFI (cfiCond393) Conditional ??CrossCallReturnLabel_258
        CFI (cfiCond393) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond393) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond393) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond393) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond393) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond393) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond393) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond393) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond393) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond393) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond393) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond393) CFA_SP SP+0
        CFI (cfiCond393) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker394 Using cfiCommon1
        CFI (cfiPicker394) NoFunction
        CFI (cfiPicker394) Picker
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond391
        CFI EndBlock cfiCond392
        CFI EndBlock cfiCond393
        CFI EndBlock cfiPicker394
        REQUIRE ??Subroutine134_0
        ; // Fall through to label ??Subroutine134_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine134_0:
        CFI Block cfiCond395 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_259
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond396 Using cfiCommon0
        CFI (cfiCond396) NoFunction
        CFI (cfiCond396) Conditional ??CrossCallReturnLabel_256
        CFI (cfiCond396) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond396) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond396) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond396) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond396) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond396) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond396) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond396) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond396) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond396) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond396) CFA_SP SP+0
        CFI (cfiCond396) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond397 Using cfiCommon0
        CFI (cfiCond397) NoFunction
        CFI (cfiCond397) Conditional ??CrossCallReturnLabel_257
        CFI (cfiCond397) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond397) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond397) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond397) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond397) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond397) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond397) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond397) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond397) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond397) CFA_SP SP+0
        CFI (cfiCond397) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond398 Using cfiCommon0
        CFI (cfiCond398) NoFunction
        CFI (cfiCond398) Conditional ??CrossCallReturnLabel_258
        CFI (cfiCond398) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond398) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond398) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond398) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond398) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond398) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond398) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond398) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond398) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond398) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond398) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond398) CFA_SP SP+0
        CFI (cfiCond398) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker399 Using cfiCommon1
        CFI (cfiPicker399) NoFunction
        CFI (cfiPicker399) Picker
        LCALL   ??Subroutine154_0 & 0xFFFF
??CrossCallReturnLabel_340:
        LCALL   ??ZDSecMgrMasterKeyLookup?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond395
        CFI EndBlock cfiCond396
        CFI EndBlock cfiCond397
        CFI EndBlock cfiCond398
        CFI EndBlock cfiPicker399

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock400 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,?V0 + 0
        CFI EndBlock cfiBlock400
        REQUIRE ??Subroutine135_0
        ; // Fall through to label ??Subroutine135_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine135_0:
        CFI Block cfiBlock401 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        CFI EndBlock cfiBlock401
        REQUIRE ??Subroutine136_0
        ; // Fall through to label ??Subroutine136_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine136_0:
        CFI Block cfiBlock402 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock402
        REQUIRE ??Subroutine137_0
        ; // Fall through to label ??Subroutine137_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine137_0:
        CFI Block cfiBlock403 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock403
// 1906 
// 1907 /******************************************************************************
// 1908  * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
// 1909  *
// 1910  * @brief       Decide whether device is allowed.
// 1911  *
// 1912  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1913  *
// 1914  * @return      ZStatus_t
// 1915  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1916 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidateRM:
        CFI Block cfiBlock404 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateRM
        CODE
// 1917 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1918   ZStatus_t status;
// 1919 
// 1920   status = ZSuccess;
        MOV     R1,#0x0
// 1921 
// 1922   (void)device;  // Intentionally unreferenced parameter
// 1923 
// 1924   // For test purpose, turning off the zgSecurePermitJoin flag will force
// 1925   // the trust center to reject any newly joining devices by sending
// 1926   // Remove-device to the parents.
// 1927   if ( zgSecurePermitJoin == FALSE )
        MOV     DPTR,#zgSecurePermitJoin
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceValidateRM_0
// 1928   {
// 1929     status = ZNwkUnknownDevice;
        MOV     R1,#-0x38
// 1930   }
// 1931 
// 1932 
// 1933 
// 1934 #if 0  // Taken out because the following functionality is only used for test
// 1935        // purpose. A more efficient (above) way is used. It can be put
// 1936        // back in if customers request for a white/black list feature.
// 1937        // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
// 1938 
// 1939   // The following code processes the device black list (stored device list)
// 1940   // If the joining device is not part of the forbidden device list
// 1941   // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
// 1942   // will send Remove-device and ban the device from joining.
// 1943 
// 1944   uint8     index;
// 1945   uint8*    restricted;
// 1946 
// 1947   // Look through the stored device list - used for restricted devices
// 1948   for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
// 1949   {
// 1950     restricted = ZDSecMgrStoredDeviceList[index];
// 1951 
// 1952     if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
// 1953     {
// 1954       // return as unknown device in regards to validation
// 1955       status = ZNwkUnknownDevice;
// 1956 
// 1957       // break from loop
// 1958       index = ZDSECMGR_STORED_DEVICES;
// 1959     }
// 1960   }
// 1961 
// 1962 #endif
// 1963 
// 1964   return status;
??ZDSecMgrDeviceValidateRM_0:
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock404
// 1965 }
// 1966 
// 1967 /******************************************************************************
// 1968  * @fn          ZDSecMgrDeviceValidateCM (COMMERCIAL MODE)
// 1969  *
// 1970  * @brief       Decide whether device is allowed.
// 1971  *
// 1972  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1973  *
// 1974  * @return      ZStatus_t
// 1975  */
// 1976 //devtag.pro.security

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1977 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidateCM:
        CFI Block cfiBlock405 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateCM
        CODE
// 1978 {
        FUNCALL ZDSecMgrDeviceValidateCM, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrMasterKeyLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrDeviceEntryAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1979   ZStatus_t status;
// 1980   uint16    ami;
// 1981   uint8     key[SEC_KEY_LEN];
// 1982 
// 1983   // implement EXT address and MASTER key policy here -- the total number of
// 1984   // Security Manager entries should never exceed the number of EXT addresses
// 1985   // and MASTER keys available
// 1986 
// 1987   // set status based on policy
// 1988   //status = ZNwkUnknownDevice;
// 1989 
// 1990   // set status based on policy
// 1991   status = ZSuccess; // ZNwkUnknownDevice;
// 1992 
// 1993   // get key based on policy
// 1994   osal_memcpy( key, ZDSecMgrTCMasterKey, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#ZDSecMgrTCMasterKey & 0xff
        MOV     ?V0 + 1,#(ZDSecMgrTCMasterKey >> 8) & 0xff
        MOV     ?V0 + 2,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine82 & 0xFFFF
??CrossCallReturnLabel_261:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
// 1995 
// 1996   // if policy, store new EXT address
// 1997   status = ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
        LCALL   ?Subroutine88 & 0xFFFF
??CrossCallReturnLabel_138:
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     DPL,?V0 + 0
        MOV     DPH,R1
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_84:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        MOV     ?V0 + 2,A
// 1998 
// 1999   // set the key
// 2000   ZDSecMgrMasterKeyLoad( device->extAddr, key );
        ; Setup parameters for call to function ZDSecMgrMasterKeyLoad
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine147_0 & 0xFFFF
??CrossCallReturnLabel_290:
        LCALL   ??ZDSecMgrMasterKeyLoad?relay
// 2001 
// 2002   // if EXT address and MASTER key available -- add device
// 2003   if ( status == ZSuccess )
        MOV     A,?V0 + 2
        JNZ     ??ZDSecMgrDeviceValidateCM_0
// 2004   {
// 2005     // add device to internal data - with control
// 2006     status = ZDSecMgrDeviceEntryAdd( device, ami );
        ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
        LCALL   ?Subroutine63 & 0xFFFF
// 2007   }
??CrossCallReturnLabel_100:
        MOV     A,R1
        MOV     ?V0 + 2,A
// 2008 
// 2009   // remove copy of key in RAM
// 2010   osal_memset( key, 0x00, SEC_KEY_LEN );
??ZDSecMgrDeviceValidateCM_0:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 2011 
// 2012   return status;
        MOV     R1,?V0 + 2
        MOV     A,#0x12
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock405
// 2013 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine88:
        CFI Block cfiCond406 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_137
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond407 Using cfiCommon0
        CFI (cfiCond407) NoFunction
        CFI (cfiCond407) Conditional ??CrossCallReturnLabel_138
        CFI (cfiCond407) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond407) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond407) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond407) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond407) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond407) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond407) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond407) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond407) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond407) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond407) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond407) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond407) CFA_SP SP+0
        CFI (cfiCond407) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker408 Using cfiCommon1
        CFI (cfiPicker408) NoFunction
        CFI (cfiPicker408) Picker
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        RET
        CFI EndBlock cfiCond406
        CFI EndBlock cfiCond407
        CFI EndBlock cfiPicker408

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine82:
        CFI Block cfiCond409 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_260
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond410 Using cfiCommon0
        CFI (cfiCond410) NoFunction
        CFI (cfiCond410) Conditional ??CrossCallReturnLabel_261
        CFI (cfiCond410) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond410) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond410) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond410) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond410) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond410) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond410) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond410) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond410) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond410) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond410) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond410) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond410) CFA_SP SP+0
        CFI (cfiCond410) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond411 Using cfiCommon0
        CFI (cfiCond411) NoFunction
        CFI (cfiCond411) Conditional ??CrossCallReturnLabel_262
        CFI (cfiCond411) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond411) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond411) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond411) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond411) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond411) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond411) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond411) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond411) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond411) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond411) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond411) CFA_SP SP+0
        CFI (cfiCond411) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond412 Using cfiCommon0
        CFI (cfiCond412) NoFunction
        CFI (cfiCond412) Conditional ??CrossCallReturnLabel_263
        CFI (cfiCond412) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond412) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond412) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond412) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond412) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond412) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond412) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond412) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond412) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond412) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond412) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond412) CFA_SP SP+0
        CFI (cfiCond412) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker413 Using cfiCommon1
        CFI (cfiPicker413) NoFunction
        CFI (cfiPicker413) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond409
        CFI EndBlock cfiCond410
        CFI EndBlock cfiCond411
        CFI EndBlock cfiCond412
        CFI EndBlock cfiPicker413
        REQUIRE ??Subroutine138_0
        ; // Fall through to label ??Subroutine138_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine138_0:
        CFI Block cfiCond414 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_264
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond415 Using cfiCommon0
        CFI (cfiCond415) NoFunction
        CFI (cfiCond415) Conditional ??CrossCallReturnLabel_260
        CFI (cfiCond415) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond415) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond415) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond415) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond415) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond415) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond415) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond415) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond415) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond415) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond415) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond415) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond415) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond415) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond415) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond415) CFA_SP SP+0
        CFI (cfiCond415) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond416 Using cfiCommon0
        CFI (cfiCond416) NoFunction
        CFI (cfiCond416) Conditional ??CrossCallReturnLabel_261
        CFI (cfiCond416) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond416) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond416) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond416) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond416) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond416) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond416) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond416) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond416) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond416) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond416) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond416) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond416) CFA_SP SP+0
        CFI (cfiCond416) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond417 Using cfiCommon0
        CFI (cfiCond417) NoFunction
        CFI (cfiCond417) Conditional ??CrossCallReturnLabel_262
        CFI (cfiCond417) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond417) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond417) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond417) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond417) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond417) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond417) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond417) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond417) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond417) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond417) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond417) CFA_SP SP+0
        CFI (cfiCond417) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond418 Using cfiCommon0
        CFI (cfiCond418) NoFunction
        CFI (cfiCond418) Conditional ??CrossCallReturnLabel_263
        CFI (cfiCond418) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond418) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond418) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond418) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond418) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond418) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond418) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond418) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond418) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond418) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond418) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond418) CFA_SP SP+0
        CFI (cfiCond418) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker419 Using cfiCommon1
        CFI (cfiPicker419) NoFunction
        CFI (cfiPicker419) Picker
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond414
        CFI EndBlock cfiCond415
        CFI EndBlock cfiCond416
        CFI EndBlock cfiCond417
        CFI EndBlock cfiCond418
        CFI EndBlock cfiPicker419

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine63:
        CFI Block cfiCond420 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_99
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond421 Using cfiCommon0
        CFI (cfiCond421) NoFunction
        CFI (cfiCond421) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond421) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond421) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond421) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond421) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond421) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond421) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond421) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond421) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond421) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond421) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond421) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond421) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond421) CFA_SP SP+0
        CFI (cfiCond421) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker422 Using cfiCommon1
        CFI (cfiPicker422) NoFunction
        CFI (cfiPicker422) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine108 & 0xFFFF
??CrossCallReturnLabel_169:
        LCALL   ??ZDSecMgrDeviceEntryAdd?relay
        RET
        CFI EndBlock cfiCond420
        CFI EndBlock cfiCond421
        CFI EndBlock cfiPicker422

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine108:
        CFI Block cfiCond423 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_168, ??CrossCallReturnLabel_97
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond424 Using cfiCommon0
        CFI (cfiCond424) NoFunction
        CFI (cfiCond424) Conditional ??CrossCallReturnLabel_168, ??CrossCallReturnLabel_98
        CFI (cfiCond424) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond424) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond424) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond424) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond424) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond424) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond424) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond424) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond424) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond424) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond424) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond424) CFA_SP SP+0
        CFI (cfiCond424) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond425 Using cfiCommon0
        CFI (cfiCond425) NoFunction
        CFI (cfiCond425) Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_99
        CFI (cfiCond425) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond425) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond425) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond425) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond425) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond425) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond425) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond425) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond425) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond425) CFA_SP SP+0
        CFI (cfiCond425) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond426 Using cfiCommon0
        CFI (cfiCond426) NoFunction
        CFI (cfiCond426) Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_100
        CFI (cfiCond426) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond426) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond426) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond426) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond426) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond426) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond426) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond426) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond426) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond426) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond426) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond426) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond426) CFA_SP SP+0
        CFI (cfiCond426) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker427 Using cfiCommon1
        CFI (cfiPicker427) NoFunction
        CFI (cfiPicker427) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        RET
        CFI EndBlock cfiCond423
        CFI EndBlock cfiCond424
        CFI EndBlock cfiCond425
        CFI EndBlock cfiCond426
        CFI EndBlock cfiPicker427
// 2014 
// 2015 /******************************************************************************
// 2016  * @fn          ZDSecMgrDeviceValidate
// 2017  *
// 2018  * @brief       Decide whether device is allowed.
// 2019  *
// 2020  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2021  *
// 2022  * @return      ZStatus_t
// 2023  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2024 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidate:
        CFI Block cfiBlock428 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidate
        CODE
// 2025 {
        FUNCALL ZDSecMgrDeviceValidate, ZDSecMgrDeviceValidateRM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2026   ZStatus_t status;
// 2027 
// 2028 
// 2029   if ( ZDSecMgrPermitJoiningEnabled == TRUE )
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceValidate_0
// 2030   {
// 2031     // device may be joining with a secure flag but it is ultimately the Trust
// 2032     // Center that decides -- check if expected pre configured device --
// 2033     // override settings
// 2034     if ( zgPreConfigKeys == TRUE )
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JNZ     ??ZDSecMgrDeviceValidate_1
// 2035     {
// 2036       device->secure = TRUE;
        MOV     A,#0x1
        SJMP    ??ZDSecMgrDeviceValidate_2
// 2037     }
// 2038     else
// 2039     {
// 2040       device->secure = FALSE;
??ZDSecMgrDeviceValidate_1:
        CLR     A
??ZDSecMgrDeviceValidate_2:
        MOVX    @DPTR,A
// 2041     }
// 2042 
// 2043     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2044     {
// 2045       status = ZDSecMgrDeviceValidateCM( device );
// 2046     }
// 2047     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2048     {
// 2049       status = ZDSecMgrDeviceValidateRM( device );
        ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
        LCALL   ??ZDSecMgrDeviceValidateRM?relay
        SJMP    ??ZDSecMgrDeviceValidate_3
// 2050     }
// 2051   }
// 2052   else
// 2053   {
// 2054     status = ZNwkUnknownDevice;
??ZDSecMgrDeviceValidate_0:
        MOV     R1,#-0x38
// 2055   }
// 2056 
// 2057   return status;
??ZDSecMgrDeviceValidate_3:
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock428
// 2058 }
// 2059 
// 2060 /******************************************************************************
// 2061  * @fn          ZDSecMgrDeviceJoin
// 2062  *
// 2063  * @brief       Try to join this device.
// 2064  *
// 2065  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2066  *
// 2067  * @return      ZStatus_t
// 2068  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2069 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoin:
        CFI Block cfiBlock429 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoin
        CODE
// 2070 {
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceValidate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2071   ZStatus_t status;
// 2072   uint16    ami;
// 2073 
// 2074   // attempt to validate device
// 2075   status = ZDSecMgrDeviceValidate( device );
        ; Setup parameters for call to function ZDSecMgrDeviceValidate
        LCALL   ??ZDSecMgrDeviceValidate?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
// 2076 
// 2077   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrDeviceJoin_0
// 2078   {
// 2079     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2080     {
// 2081       ZDSecMgrDeviceCtrlSetup( device );
// 2082     }
// 2083     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2084     {
// 2085       // Add the device to the address manager
// 2086       ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_85:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 2087       //send the nwk key data to the joining device
// 2088       status = ZDSecMgrSendNwkKey( device );
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrSendNwkKey?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        SJMP    ??ZDSecMgrDeviceJoin_1
// 2089     }
// 2090   }
// 2091   else
// 2092   {
// 2093     // not allowed, remove the device
// 2094     ZDSecMgrDeviceRemove( device );
??ZDSecMgrDeviceJoin_0:
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrDeviceRemove?relay
// 2095   }
// 2096 
// 2097   return status;
??ZDSecMgrDeviceJoin_1:
        MOV     R1,?V0 + 0
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock429
// 2098 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine55:
        CFI Block cfiCond430 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond431 Using cfiCommon0
        CFI (cfiCond431) NoFunction
        CFI (cfiCond431) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond431) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond431) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond431) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond431) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond431) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond431) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond431) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond431) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond431) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond431) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond431) CFA_SP SP+0
        CFI (cfiCond431) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker432 Using cfiCommon1
        CFI (cfiPicker432) NoFunction
        CFI (cfiPicker432) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine154_0 & 0xFFFF
??CrossCallReturnLabel_334:
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond430
        CFI EndBlock cfiCond431
        CFI EndBlock cfiPicker432
// 2099 
// 2100 /******************************************************************************
// 2101  * @fn          ZDSecMgrDeviceJoinDirect
// 2102  *
// 2103  * @brief       Try to join this device as a direct child.
// 2104  *
// 2105  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2106  *
// 2107  * @return      ZStatus_t
// 2108  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2109 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoinDirect:
        CFI Block cfiBlock433 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoinDirect
        CODE
// 2110 {
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2111   ZStatus_t status;
// 2112 
// 2113   status = ZDSecMgrDeviceJoin( device );
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        LCALL   ??ZDSecMgrDeviceJoin?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
// 2114 
// 2115   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrDeviceJoinDirect_0
// 2116   {
// 2117     // set association status to authenticated
// 2118     ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        ; Setup parameters for call to function AssocGetWithShort
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine147_0 & 0xFFFF
// 2119   }
??CrossCallReturnLabel_291:
        LCALL   ??AssocGetWithShort?relay
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
// 2120 
// 2121   return status;
??ZDSecMgrDeviceJoinDirect_0:
        MOV     R1,?V0 + 0
        LJMP    ??Subroutine137_0 & 0xFFFF
        CFI EndBlock cfiBlock433
// 2122 }
// 2123 
// 2124 /******************************************************************************
// 2125  * @fn          ZDSecMgrDeviceJoinFwd
// 2126  *
// 2127  * @brief       Forward join to Trust Center.
// 2128  *
// 2129  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2130  *
// 2131  * @return      ZStatus_t
// 2132  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2133 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoinFwd:
        CFI Block cfiBlock434 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoinFwd
        CODE
// 2134 {
        FUNCALL ZDSecMgrDeviceJoinFwd, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 8)
// 2135   ZStatus_t               status;
// 2136   APSME_UpdateDeviceReq_t req;
// 2137 
// 2138   // forward any joining device to the Trust Center -- the Trust Center will
// 2139   // decide if the device is allowed to join
// 2140   status = ZSuccess;
// 2141 
// 2142   // forward authorization to the Trust Center
// 2143   req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2144   req.devAddr    = device->nwkAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine139_0 & 0xFFFF
??CrossCallReturnLabel_267:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
// 2145   req.devExtAddr = device->extAddr;
??CrossCallReturnLabel_15:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine27 & 0xFFFF
// 2146 
// 2147   // set security status, option for router to reject if policy set
// 2148   if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
??CrossCallReturnLabel_37:
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??ZDSecMgrDeviceJoinFwd_0
// 2149   {
// 2150     if ( device->devStatus & DEV_REJOIN_STATUS )
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_1
// 2151     {
// 2152       if ( device->secure == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_2
// 2153       {
// 2154         req.status = APSME_UD_HIGH_SECURED_REJOIN;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2155       }
// 2156       else
// 2157       {
// 2158         req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
??ZDSecMgrDeviceJoinFwd_2:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2159       }
// 2160     }
// 2161     else
// 2162     {
// 2163       req.status = APSME_UD_HIGH_UNSECURED_JOIN;
??ZDSecMgrDeviceJoinFwd_1:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2164     }
// 2165   }
// 2166   else
// 2167   {
// 2168     if ( device->devStatus & DEV_REJOIN_STATUS )
??ZDSecMgrDeviceJoinFwd_0:
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_4
// 2169     {
// 2170       if ( device->secure == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_5
// 2171       {
// 2172         req.status = APSME_UD_STANDARD_SECURED_REJOIN;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2173       }
// 2174       else
// 2175       {
// 2176         req.status = APSME_UD_STANDARD_UNSECURED_REJOIN;
??ZDSecMgrDeviceJoinFwd_5:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2177       }
// 2178     }
// 2179     else
// 2180     {
// 2181       req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
??ZDSecMgrDeviceJoinFwd_4:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
??ZDSecMgrDeviceJoinFwd_3:
        MOVX    @DPTR,A
// 2182     }
// 2183   }
// 2184 
// 2185   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2186   {
// 2187     req.apsSecure = TRUE;
// 2188   }
// 2189   else
// 2190   {
// 2191     req.apsSecure = FALSE;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine17 & 0xFFFF
// 2192   }
// 2193 
// 2194   // send and APSME_UPDATE_DEVICE request to the trust center
// 2195   status = APSME_UpdateDeviceReq( &req );
// 2196 
// 2197   return status;
??CrossCallReturnLabel_11:
        LCALL   ??APSME_UpdateDeviceReq?relay
        MOV     A,#0x8
        LJMP    ??Subroutine126_0 & 0xFFFF
        CFI EndBlock cfiBlock434
// 2198 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine56:
        CFI Block cfiCond435 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_268
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond436 Using cfiCommon0
        CFI (cfiCond436) NoFunction
        CFI (cfiCond436) Conditional ??CrossCallReturnLabel_269
        CFI (cfiCond436) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond436) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond436) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond436) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond436) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond436) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond436) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond436) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond436) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond436) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond436) CFA_SP SP+0
        CFI (cfiCond436) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker437 Using cfiCommon1
        CFI (cfiPicker437) NoFunction
        CFI (cfiPicker437) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond435
        CFI EndBlock cfiCond436
        CFI EndBlock cfiPicker437
        REQUIRE ??Subroutine139_0
        ; // Fall through to label ??Subroutine139_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine139_0:
        CFI Block cfiCond438 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_265
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond439 Using cfiCommon0
        CFI (cfiCond439) NoFunction
        CFI (cfiCond439) Conditional ??CrossCallReturnLabel_266
        CFI (cfiCond439) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond439) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond439) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond439) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond439) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond439) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond439) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond439) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond439) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond439) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond439) CFA_SP SP+0
        CFI (cfiCond439) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond440 Using cfiCommon0
        CFI (cfiCond440) NoFunction
        CFI (cfiCond440) Conditional ??CrossCallReturnLabel_267
        CFI (cfiCond440) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond440) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond440) CFA_SP SP+-5
        CFI (cfiCond440) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond441 Using cfiCommon0
        CFI (cfiCond441) NoFunction
        CFI (cfiCond441) Conditional ??CrossCallReturnLabel_268
        CFI (cfiCond441) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond441) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond441) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond441) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond441) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond441) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond441) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond441) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond441) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond441) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond441) CFA_SP SP+0
        CFI (cfiCond441) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond442 Using cfiCommon0
        CFI (cfiCond442) NoFunction
        CFI (cfiCond442) Conditional ??CrossCallReturnLabel_269
        CFI (cfiCond442) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond442) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond442) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond442) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond442) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond442) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond442) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond442) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond442) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond442) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond442) CFA_SP SP+0
        CFI (cfiCond442) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker443 Using cfiCommon1
        CFI (cfiPicker443) NoFunction
        CFI (cfiPicker443) Picker
        LCALL   ?Subroutine107 & 0xFFFF
??CrossCallReturnLabel_354:
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond438
        CFI EndBlock cfiCond439
        CFI EndBlock cfiCond440
        CFI EndBlock cfiCond441
        CFI EndBlock cfiCond442
        CFI EndBlock cfiPicker443

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond444 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond445 Using cfiCommon0
        CFI (cfiCond445) NoFunction
        CFI (cfiCond445) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond445) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond445) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond445) CFA_SP SP+-5
        CFI (cfiCond445) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker446 Using cfiCommon1
        CFI (cfiPicker446) NoFunction
        CFI (cfiPicker446) Picker
        LCALL   ?Subroutine92 & 0xFFFF
??CrossCallReturnLabel_145:
        INC     DPTR
        RET
        CFI EndBlock cfiCond444
        CFI EndBlock cfiCond445
        CFI EndBlock cfiPicker446

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine92:
        CFI Block cfiCond447 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_144
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond448 Using cfiCommon0
        CFI (cfiCond448) NoFunction
        CFI (cfiCond448) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_36
        CFI (cfiCond448) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond448) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond448) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond448) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond448) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond448) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond448) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond448) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond448) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond448) CFA_SP SP+0
        CFI (cfiCond448) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond449 Using cfiCommon0
        CFI (cfiCond449) NoFunction
        CFI (cfiCond449) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_37
        CFI (cfiCond449) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond449) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond449) CFA_SP SP+-5
        CFI (cfiCond449) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker450 Using cfiCommon1
        CFI (cfiPicker450) NoFunction
        CFI (cfiPicker450) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond447
        CFI EndBlock cfiCond448
        CFI EndBlock cfiCond449
        CFI EndBlock cfiPicker450

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond451 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond452 Using cfiCommon0
        CFI (cfiCond452) NoFunction
        CFI (cfiCond452) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond452) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond452) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond452) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond452) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond452) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond452) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond452) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond452) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond452) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond452) CFA_SP SP+0
        CFI (cfiCond452) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond453 Using cfiCommon0
        CFI (cfiCond453) NoFunction
        CFI (cfiCond453) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond453) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond453) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond453) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond453) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond453) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond453) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond453) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond453) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond453) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond453) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond453) CFA_SP SP+0
        CFI (cfiCond453) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond454 Using cfiCommon0
        CFI (cfiCond454) NoFunction
        CFI (cfiCond454) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond454) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond454) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond454) CFA_SP SP+-5
        CFI (cfiCond454) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond455 Using cfiCommon0
        CFI (cfiCond455) NoFunction
        CFI (cfiCond455) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond455) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond455) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond455) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond455) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond455) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond455) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond455) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond455) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond455) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond455) CFA_SP SP+0
        CFI (cfiCond455) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond456 Using cfiCommon0
        CFI (cfiCond456) NoFunction
        CFI (cfiCond456) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond456) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond456) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond456) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond456) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond456) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond456) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond456) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond456) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond456) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond456) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond456) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond456) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond456) CFA_SP SP+0
        CFI (cfiCond456) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond457 Using cfiCommon0
        CFI (cfiCond457) NoFunction
        CFI (cfiCond457) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond457) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond457) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond457) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond457) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond457) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond457) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond457) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond457) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond457) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond457) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond457) CFA_SP SP+0
        CFI (cfiCond457) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker458 Using cfiCommon1
        CFI (cfiPicker458) NoFunction
        CFI (cfiPicker458) Picker
        LCALL   ??Subroutine149_0 & 0xFFFF
??CrossCallReturnLabel_305:
        RET
        CFI EndBlock cfiCond451
        CFI EndBlock cfiCond452
        CFI EndBlock cfiCond453
        CFI EndBlock cfiCond454
        CFI EndBlock cfiCond455
        CFI EndBlock cfiCond456
        CFI EndBlock cfiCond457
        CFI EndBlock cfiPicker458
// 2199 
// 2200 /******************************************************************************
// 2201  * @fn          ZDSecMgrDeviceNew
// 2202  *
// 2203  * @brief       Process a new device.
// 2204  *
// 2205  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2206  *
// 2207  * @return      ZStatus_t
// 2208  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2209 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
ZDSecMgrDeviceNew:
        CFI Block cfiBlock459 Using cfiCommon0
        CFI Function ZDSecMgrDeviceNew
        CODE
// 2210 {
        FUNCALL ZDSecMgrDeviceNew, ZDSecMgrDeviceJoinFwd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2211   ZStatus_t status;
// 2212 
// 2213   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2214   {
// 2215     // try to join this device
// 2216     status = ZDSecMgrDeviceJoinDirect( joiner );
// 2217   }
// 2218   else
// 2219   {
// 2220     status = ZDSecMgrDeviceJoinFwd( joiner );
// 2221   }
// 2222 
// 2223   return status;
        ; Setup parameters for call to function ZDSecMgrDeviceJoinFwd
        LCALL   ??ZDSecMgrDeviceJoinFwd?relay
        SJMP    ??Subroutine140_0
        CFI EndBlock cfiBlock459
// 2224 }
// 2225 
// 2226 /******************************************************************************
// 2227  * @fn          ZDSecMgrAssocDeviceAuth
// 2228  *
// 2229  * @brief       Set associated device status to authenticated
// 2230  *
// 2231  * @param       assoc - [in, out] associated_devices_t
// 2232  *
// 2233  * @return      none
// 2234  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2235 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
ZDSecMgrAssocDeviceAuth:
        CFI Block cfiBlock460 Using cfiCommon0
        CFI Function ZDSecMgrAssocDeviceAuth
        CODE
// 2236 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2237   if ( assoc != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDSecMgrAssocDeviceAuth_0
// 2238   {
// 2239     assoc->devStatus |= DEV_SEC_AUTH_STATUS;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.3
        MOVX    @DPTR,A
// 2240   }
// 2241 }
??ZDSecMgrAssocDeviceAuth_0:
        SJMP    ??Subroutine140_0
        CFI EndBlock cfiBlock460

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock461 Using cfiCommon0
        CFI NoFunction
        PUSH    DPL
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 4)
        PUSH    DPH
        CFI CFA_SP SP+-5
        CFI DPH0 Frame(CFA_SP, 5)
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function APSME_SecurityNM
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function APSME_SecurityNM
        LCALL   ??APSME_SecurityNM?relay
        CFI EndBlock cfiBlock461
        REQUIRE ??Subroutine140_0
        ; // Fall through to label ??Subroutine140_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine140_0:
        CFI Block cfiBlock462 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock462
// 2242 
// 2243 /******************************************************************************
// 2244  * @fn          ZDSecMgrAuthInitiate
// 2245  *
// 2246  * @brief       Initiate entity authentication
// 2247  *
// 2248  * @param       responder - [in] responder EXT address
// 2249  *
// 2250  * @return      none
// 2251  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2252 void ZDSecMgrAuthInitiate( uint8* responder )
ZDSecMgrAuthInitiate:
        CFI Block cfiBlock463 Using cfiCommon0
        CFI Function ZDSecMgrAuthInitiate
        CODE
// 2253 {
        FUNCALL ZDSecMgrAuthInitiate, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthInitiate, APSME_AuthenticateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2254   APSME_AuthenticateReq_t req;
// 2255 
// 2256 
// 2257   // make sure NWK address is available
// 2258   if ( APSME_LookupNwkAddr( responder, &req.nwkAddr ) )
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??APSME_LookupNwkAddr?relay
        MOV     A,R1
        JZ      ??ZDSecMgrAuthInitiate_0
// 2259   {
// 2260     // set request fields
// 2261     req.extAddr   = responder;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 2262     req.action    = APSME_EA_INITIATE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2263     req.challenge = NULL;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine17 & 0xFFFF
// 2264 
// 2265     // start EA processing
// 2266     APSME_AuthenticateReq( &req );
// 2267   }
??CrossCallReturnLabel_12:
        LCALL   ??APSME_AuthenticateReq?relay
// 2268 }
??ZDSecMgrAuthInitiate_0:
        MOV     A,#0x7
        LJMP    ??Subroutine136_0 & 0xFFFF
        CFI EndBlock cfiBlock463
// 2269 
// 2270 /******************************************************************************
// 2271  * @fn          ZDSecMgrAuthNwkKey
// 2272  *
// 2273  * @brief       Handle next step in authentication process
// 2274  *
// 2275  * @param       none
// 2276  *
// 2277  * @return      none
// 2278  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2279 void ZDSecMgrAuthNwkKey()
ZDSecMgrAuthNwkKey:
        CFI Block cfiBlock464 Using cfiCommon0
        CFI Function ZDSecMgrAuthNwkKey
        CODE
// 2280 {
        FUNCALL ZDSecMgrAuthNwkKey, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2281   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrAuthNwkKey_0
// 2282   {
// 2283     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2284     {
// 2285       uint8 parent[Z_EXTADDR_LEN];
// 2286 
// 2287       // get parent's EXT address
// 2288       NLME_GetCoordExtAddr( parent );
// 2289 
// 2290       // begin entity authentication with parent
// 2291       ZDSecMgrAuthInitiate( parent );
// 2292     }
// 2293     else
// 2294     {
// 2295       // inform ZDO that device has been authenticated
// 2296       osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
// 2297     }
// 2298   }
// 2299 }
??ZDSecMgrAuthNwkKey_0:
        SJMP    ??Subroutine140_0
        CFI EndBlock cfiBlock464
// 2300 
// 2301 /******************************************************************************
// 2302  * PUBLIC FUNCTIONS
// 2303  */
// 2304 /******************************************************************************
// 2305  * @fn          ZDSecMgrInit
// 2306  *
// 2307  * @brief       Initialize ZigBee Device Security Manager.
// 2308  *
// 2309  * @param       state - device initialization state
// 2310  *
// 2311  * @return      none
// 2312  */
// 2313 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2314 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
// 2315 void ZDSecMgrAddrMgrCB( uint8           update,
// 2316                         AddrMgrEntry_t* newEntry,
// 2317                         AddrMgrEntry_t* oldEntry )
// 2318 {
// 2319   (void)update;
// 2320   (void)newEntry;
// 2321   (void)oldEntry;
// 2322 }
// 2323 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2324 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2325 void ZDSecMgrInit(uint8 state)
ZDSecMgrInit:
        CFI Block cfiBlock465 Using cfiCommon0
        CFI Function ZDSecMgrInit
        CODE
        FUNCALL ZDSecMgrInit, APSME_SecurityNM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        SJMP    ?Subroutine4
        CFI EndBlock cfiBlock465
// 2326 {
// 2327   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 2328       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 2329   {
// 2330     // initialize sub modules
// 2331     ZDSecMgrEntryInit(state);
// 2332 
// 2333     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2334     {
// 2335       ZDSecMgrCtrlInit();
// 2336     }
// 2337 
// 2338     // register with Address Manager
// 2339 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2340     AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
// 2341 #endif
// 2342   }
// 2343 
// 2344   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2345   {
// 2346     // configure SKA slot data
// 2347     APSME_SKA_SlotInit( ZDSECMGR_SKA_SLOT_MAX );
// 2348   }
// 2349 
// 2350   if ( ZG_SECURE_ENABLED )
// 2351   {
// 2352     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2353     {
// 2354       // setup joining permissions
// 2355       ZDSecMgrPermitJoiningEnabled = TRUE;
// 2356       ZDSecMgrPermitJoiningTimed   = FALSE;
// 2357     }
// 2358   }
// 2359 
// 2360   // configure security based on security mode and type of device
// 2361   ZDSecMgrConfig();
// 2362 }
// 2363 
// 2364 /******************************************************************************
// 2365  * @fn          ZDSecMgrConfig
// 2366  *
// 2367  * @brief       Configure ZigBee Device Security Manager.
// 2368  *
// 2369  * @param       none
// 2370  *
// 2371  * @return      none
// 2372  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2373 void ZDSecMgrConfig( void )
ZDSecMgrConfig:
        CFI Block cfiBlock466 Using cfiCommon0
        CFI Function ZDSecMgrConfig
        CODE
        FUNCALL ZDSecMgrConfig, APSME_SecurityNM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        SJMP    ?Subroutine4
        CFI EndBlock cfiBlock466
// 2374 {
// 2375   if ( ZG_SECURE_ENABLED )
// 2376   {
// 2377     SSP_Init();
// 2378 
// 2379     if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 2380         || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 2381     {
// 2382       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2383       {
// 2384         // COMMERCIAL MODE - COORDINATOR DEVICE
// 2385         APSME_SecurityCM_CD();
// 2386       }
// 2387       else if ( ZSTACK_ROUTER_BUILD )
// 2388       {
// 2389         // COMMERCIAL MODE - ROUTER DEVICE
// 2390         APSME_SecurityCM_RD();
// 2391       }
// 2392       else
// 2393       {
// 2394         // COMMERCIAL MODE - END DEVICE
// 2395         APSME_SecurityCM_ED();
// 2396       }
// 2397     }
// 2398     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2399     {
// 2400       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2401       {
// 2402         // RESIDENTIAL MODE - COORDINATOR DEVICE
// 2403         APSME_SecurityRM_CD();
// 2404       }
// 2405       else if ( ZSTACK_ROUTER_BUILD )
// 2406       {
// 2407         // RESIDENTIAL MODE - ROUTER DEVICE
// 2408         APSME_SecurityRM_RD();
// 2409       }
// 2410       else
// 2411       {
// 2412         // RESIDENTIAL MODE - END DEVICE
// 2413         APSME_SecurityRM_ED();
// 2414       }
// 2415     }
// 2416   }
// 2417   else
// 2418   {
// 2419     // NO SECURITY
// 2420     APSME_SecurityNM();
// 2421   }
// 2422 }
// 2423 
// 2424 /******************************************************************************
// 2425  * @fn          ZDSecMgrPermitJoining
// 2426  *
// 2427  * @brief       Process request to change joining permissions.
// 2428  *
// 2429  * @param       duration - [in] timed duration for join in seconds
// 2430  *                         - 0x00 not allowed
// 2431  *                         - 0xFF allowed without timeout
// 2432  *
// 2433  * @return      uint8 - success(TRUE:FALSE)
// 2434  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2435 uint8 ZDSecMgrPermitJoining( uint8 duration )
ZDSecMgrPermitJoining:
        CFI Block cfiBlock467 Using cfiCommon0
        CFI Function ZDSecMgrPermitJoining
        CODE
// 2436 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
// 2437   uint8 accept;
// 2438 
// 2439   ZDSecMgrPermitJoiningTimed = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        CLR     A
        MOVX    @DPTR,A
// 2440 
// 2441   if ( duration > 0 )
        MOV     A,R0
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        JZ      ??ZDSecMgrPermitJoining_0
// 2442   {
// 2443     ZDSecMgrPermitJoiningEnabled = TRUE;
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2444 
// 2445     if ( duration != 0xFF )
        MOV     A,#-0x1
        XRL     A,R0
        JZ      ??ZDSecMgrPermitJoining_1
// 2446     {
// 2447       ZDSecMgrPermitJoiningTimed = TRUE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOV     A,#0x1
        SJMP    ??ZDSecMgrPermitJoining_2
// 2448     }
// 2449   }
// 2450   else
// 2451   {
// 2452     ZDSecMgrPermitJoiningEnabled = FALSE;
??ZDSecMgrPermitJoining_0:
        CLR     A
??ZDSecMgrPermitJoining_2:
        MOVX    @DPTR,A
// 2453   }
// 2454 
// 2455   accept = TRUE;
// 2456 
// 2457   return accept;
??ZDSecMgrPermitJoining_1:
        MOV     R1,#0x1
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock467
// 2458 }
// 2459 
// 2460 /******************************************************************************
// 2461  * @fn          ZDSecMgrPermitJoiningTimeout
// 2462  *
// 2463  * @brief       Process permit joining timeout
// 2464  *
// 2465  * @param       none
// 2466  *
// 2467  * @return      none
// 2468  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2469 void ZDSecMgrPermitJoiningTimeout( void )
ZDSecMgrPermitJoiningTimeout:
        CFI Block cfiBlock468 Using cfiCommon0
        CFI Function ZDSecMgrPermitJoiningTimeout
        CODE
// 2470 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2471   if ( ZDSecMgrPermitJoiningTimed == TRUE )
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrPermitJoiningTimeout_0
// 2472   {
// 2473     ZDSecMgrPermitJoiningEnabled = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        CLR     A
        MOVX    @DPTR,A
// 2474     ZDSecMgrPermitJoiningTimed   = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    @DPTR,A
// 2475   }
// 2476 }
??ZDSecMgrPermitJoiningTimeout_0:
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock468
// 2477 
// 2478 /******************************************************************************
// 2479  * @fn          ZDSecMgrNewDeviceEvent
// 2480  *
// 2481  * @brief       Process a the new device event, if found reset new device
// 2482  *              event/timer.
// 2483  *
// 2484  * @param       none
// 2485  *
// 2486  * @return      uint8 - found(TRUE:FALSE)
// 2487  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2488 uint8 ZDSecMgrNewDeviceEvent( void )
ZDSecMgrNewDeviceEvent:
        CFI Block cfiBlock469 Using cfiCommon0
        CFI Function ZDSecMgrNewDeviceEvent
        CODE
// 2489 {
        FUNCALL ZDSecMgrNewDeviceEvent, AssocMatchDeviceStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrDeviceNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AssocRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
// 2490   uint8                 found;
// 2491   ZDSecMgrDevice_t      device;
// 2492   AddrMgrEntry_t        addrEntry;
// 2493   associated_devices_t* assoc;
// 2494   ZStatus_t             status;
// 2495 
// 2496   // initialize return results
// 2497   found = FALSE;
        MOV     ?V0 + 0,#0x0
// 2498 
// 2499   // look for device in the security init state
// 2500   assoc = AssocMatchDeviceStatus( DEV_SEC_INIT_STATUS );
        ; Setup parameters for call to function AssocMatchDeviceStatus
        MOV     R1,#0x4
        LCALL   ??AssocMatchDeviceStatus?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
// 2501 
// 2502   if ( assoc != NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZDSecMgrNewDeviceEvent_0 & 0xFFFF
// 2503   {
// 2504     // device found
// 2505     found = TRUE;
        MOV     ?V0 + 0,#0x1
// 2506 
// 2507     // check for preconfigured security
// 2508     if ( zgPreConfigKeys == TRUE )
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrNewDeviceEvent_1
// 2509     {
// 2510       // set association status to authenticated
// 2511       ZDSecMgrAssocDeviceAuth( assoc );
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
// 2512     }
// 2513 
// 2514     // set up device info
// 2515     addrEntry.user  = ADDRMGR_USER_DEFAULT;
??ZDSecMgrNewDeviceEvent_1:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2516     addrEntry.index = assoc->addrIdx;
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_348:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
// 2517     AddrMgrEntryGet( &addrEntry );
??CrossCallReturnLabel_21:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryGet?relay
// 2518 
// 2519     device.nwkAddr    = assoc->shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine34 & 0xFFFF
// 2520     device.extAddr    = addrEntry.extAddr;
??CrossCallReturnLabel_270:
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 2521     device.parentAddr = NLME_GetShortAddr();
??CrossCallReturnLabel_231:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine159_0 & 0xFFFF
// 2522     device.secure     = FALSE;
??CrossCallReturnLabel_367:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine36 & 0xFFFF
// 2523     device.devStatus  = assoc->devStatus;
??CrossCallReturnLabel_51:
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine17 & 0xFFFF
// 2524 
// 2525     // process new device
// 2526     status = ZDSecMgrDeviceNew( &device );
??CrossCallReturnLabel_13:
        LCALL   ??ZDSecMgrDeviceNew?relay
        MOV     A,R1
        MOV     R0,A
// 2527 
// 2528     if ( status == ZSuccess )
        JNZ     ??ZDSecMgrNewDeviceEvent_2
// 2529     {
// 2530       assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
        MOVX    @DPTR,A
        SJMP    ??ZDSecMgrNewDeviceEvent_0
// 2531     }
// 2532     else if ( status == ZNwkUnknownDevice )
??ZDSecMgrNewDeviceEvent_2:
        MOV     A,#-0x38
        XRL     A,R0
        JNZ     ??ZDSecMgrNewDeviceEvent_0
// 2533     {
// 2534       AssocRemove( addrEntry.extAddr );
        ; Setup parameters for call to function AssocRemove
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AssocRemove?relay
// 2535     }
// 2536   }
// 2537 
// 2538   return found;
??ZDSecMgrNewDeviceEvent_0:
        MOV     R1,?V0 + 0
        MOV     A,#0x17
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock469
// 2539 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond470 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond471 Using cfiCommon0
        CFI (cfiCond471) NoFunction
        CFI (cfiCond471) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond471) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond471) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond471) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond471) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond471) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond471) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond471) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond471) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond471) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond471) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond471) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond471) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond471) CFA_SP SP+0
        CFI (cfiCond471) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker472 Using cfiCommon1
        CFI (cfiPicker472) NoFunction
        CFI (cfiPicker472) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond470
        CFI EndBlock cfiCond471
        CFI EndBlock cfiPicker472

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond473 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_270
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond474 Using cfiCommon0
        CFI (cfiCond474) NoFunction
        CFI (cfiCond474) Conditional ??CrossCallReturnLabel_271
        CFI (cfiCond474) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond474) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond474) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond474) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond474) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond474) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond474) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond474) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond474) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond474) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond474) CFA_SP SP+0
        CFI (cfiCond474) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker475 Using cfiCommon1
        CFI (cfiPicker475) NoFunction
        CFI (cfiPicker475) Picker
        LCALL   ?Subroutine99 & 0xFFFF
        CFI EndBlock cfiCond473
        CFI EndBlock cfiCond474
        CFI EndBlock cfiPicker475
??CrossCallReturnLabel_156:
        REQUIRE ??Subroutine141_0
        ; // Fall through to label ??Subroutine141_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine141_0:
        CFI Block cfiCond476 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_272
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond477 Using cfiCommon0
        CFI (cfiCond477) NoFunction
        CFI (cfiCond477) Conditional ??CrossCallReturnLabel_270
        CFI (cfiCond477) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond477) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond477) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond477) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond477) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond477) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond477) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond477) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond477) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond477) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond477) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond477) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond477) CFA_SP SP+0
        CFI (cfiCond477) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond478 Using cfiCommon0
        CFI (cfiCond478) NoFunction
        CFI (cfiCond478) Conditional ??CrossCallReturnLabel_271
        CFI (cfiCond478) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond478) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond478) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond478) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond478) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond478) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond478) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond478) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond478) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond478) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond478) CFA_SP SP+0
        CFI (cfiCond478) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker479 Using cfiCommon1
        CFI (cfiPicker479) NoFunction
        CFI (cfiPicker479) Picker
        LCALL   ?Subroutine94 & 0xFFFF
??CrossCallReturnLabel_279:
        MOV     A,#0xd
        RET
        CFI EndBlock cfiCond476
        CFI EndBlock cfiCond477
        CFI EndBlock cfiCond478
        CFI EndBlock cfiPicker479

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond480 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond481 Using cfiCommon0
        CFI (cfiCond481) NoFunction
        CFI (cfiCond481) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond481) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond481) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond481) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond481) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond481) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond481) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond481) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond481) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond481) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond481) CFA_SP SP+0
        CFI (cfiCond481) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond482 Using cfiCommon0
        CFI (cfiCond482) NoFunction
        CFI (cfiCond482) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond482) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond482) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond482) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond482) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond482) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond482) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond482) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond482) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond482) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond482) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond482) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond482) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond482) CFA_SP SP+0
        CFI (cfiCond482) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond483 Using cfiCommon0
        CFI (cfiCond483) NoFunction
        CFI (cfiCond483) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond483) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond483) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond483) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond483) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond483) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond483) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond483) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond483) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond483) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond483) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond483) CFA_SP SP+0
        CFI (cfiCond483) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond484 Using cfiCommon0
        CFI (cfiCond484) NoFunction
        CFI (cfiCond484) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond484) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond484) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond484) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond484) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond484) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond484) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond484) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond484) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond484) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond484) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond484) CFA_SP SP+0
        CFI (cfiCond484) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker485 Using cfiCommon1
        CFI (cfiPicker485) NoFunction
        CFI (cfiPicker485) Picker
        LCALL   ?Subroutine94 & 0xFFFF
??CrossCallReturnLabel_274:
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV     A,#0xa
        RET
        CFI EndBlock cfiCond480
        CFI EndBlock cfiCond481
        CFI EndBlock cfiCond482
        CFI EndBlock cfiCond483
        CFI EndBlock cfiCond484
        CFI EndBlock cfiPicker485
// 2540 
// 2541 /******************************************************************************
// 2542  * @fn          ZDSecMgrEvent
// 2543  *
// 2544  * @brief       Handle ZDO Security Manager event/timer(ZDO_SECMGR_EVENT).
// 2545  *
// 2546  * @param       none
// 2547  *
// 2548  * @return      none
// 2549  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2550 void ZDSecMgrEvent( void )
ZDSecMgrEvent:
        CFI Block cfiBlock486 Using cfiCommon0
        CFI Function ZDSecMgrEvent
        CODE
// 2551 {
        FUNCALL ZDSecMgrEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEvent, ZDSecMgrDeviceCtrlHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 2552   uint8            action;
// 2553   uint8            restart;
// 2554   uint16           index;
// 2555   AddrMgrEntry_t   entry;
// 2556   ZDSecMgrDevice_t device;
// 2557 
// 2558   // verify data is available
// 2559   if ( ZDSecMgrCtrlData != NULL )
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ??Subroutine152_0 & 0xFFFF
??CrossCallReturnLabel_315:
        JNZ     $+5
        LJMP    ??ZDSecMgrEvent_0 & 0xFFFF
// 2560   {
// 2561     action  = FALSE;
        MOV     ?V0 + 0,#0x0
// 2562     restart = FALSE;
        MOV     ?V0 + 1,#0x0
// 2563 
// 2564     // update all the counters
// 2565     for ( index = 0; index < ZDSECMGR_ENTRY_MAX; index++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
// 2566     {
// 2567       if ( ZDSecMgrCtrlData[index].state !=  ZDSECMGR_CTRL_NONE )
??ZDSecMgrEvent_1:
        LCALL   ?Subroutine111 & 0xFFFF
??CrossCallReturnLabel_281:
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_90:
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDSecMgrEvent_2 & 0xFFFF
// 2568       {
// 2569         if ( ZDSecMgrCtrlData[index].cntr != 0 )
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_79:
        JZ      ??ZDSecMgrEvent_3
// 2570         {
// 2571           ZDSecMgrCtrlData[index].cntr--;
        LCALL   ?Subroutine52 & 0xFFFF
// 2572         }
??CrossCallReturnLabel_80:
        DEC     A
        MOVX    @DPTR,A
// 2573 
// 2574         if ( ( action == FALSE ) && ( ZDSecMgrCtrlData[index].cntr == 0 ) )
??ZDSecMgrEvent_3:
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        JC      ??ZDSecMgrEvent_4
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_81:
        JNZ     ??ZDSecMgrEvent_4
// 2575         {
// 2576           action = TRUE;
        MOV     ?V0 + 0,#0x1
        LCALL   ?Subroutine111 & 0xFFFF
??CrossCallReturnLabel_282:
        LCALL   ?Subroutine109 & 0xFFFF
??CrossCallReturnLabel_171:
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine146_0 & 0xFFFF
??CrossCallReturnLabel_294:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine159_0 & 0xFFFF
// 2577 
// 2578           // update from control data
// 2579           device.parentAddr = ZDSecMgrCtrlData[index].parentAddr;
// 2580           device.secure     = ZDSecMgrCtrlData[index].secure;
??CrossCallReturnLabel_368:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2581           device.ctrl       = &ZDSecMgrCtrlData[index];
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
// 2582 
// 2583           // set the user and address index
// 2584           entry.user  = ADDRMGR_USER_SECURITY;
??CrossCallReturnLabel_22:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine25 & 0xFFFF
// 2585           entry.index = ZDSecMgrCtrlData[index].entry->ami;
??CrossCallReturnLabel_33:
        LCALL   ??Subroutine157_0 & 0xFFFF
??CrossCallReturnLabel_344:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
// 2586 
// 2587           // get the address data
// 2588           AddrMgrEntryGet( &entry );
??CrossCallReturnLabel_23:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryGet?relay
// 2589 
// 2590           // set device address data
// 2591           device.nwkAddr = entry.nwkAddr;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine34 & 0xFFFF
// 2592           device.extAddr = entry.extAddr;
// 2593 
// 2594           // update from entry data
// 2595           ZDSecMgrDeviceCtrlHandler( &device );
// 2596         }
??CrossCallReturnLabel_271:
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ??ZDSecMgrDeviceCtrlHandler?relay
        SJMP    ??ZDSecMgrEvent_2
// 2597         else
// 2598         {
// 2599           restart = TRUE;
??ZDSecMgrEvent_4:
        MOV     ?V0 + 1,#0x1
// 2600         }
// 2601       }
// 2602     }
??ZDSecMgrEvent_2:
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_60:
        JNC     $+5
        LJMP    ??ZDSecMgrEvent_1 & 0xFFFF
// 2603 
// 2604     // check for timer restart
// 2605     if ( restart == TRUE )
        MOV     A,?V0 + 1
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDSecMgrEvent_0
// 2606     {
// 2607       osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
// 2608     }
// 2609   }
// 2610 }
??ZDSecMgrEvent_0:
        MOV     A,#0x17
        LJMP    ??Subroutine132_0 & 0xFFFF
        CFI EndBlock cfiBlock486

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine111:
        CFI Block cfiCond487 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_281
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond488 Using cfiCommon0
        CFI (cfiCond488) NoFunction
        CFI (cfiCond488) Conditional ??CrossCallReturnLabel_282
        CFI (cfiCond488) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond488) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond488) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond488) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond488) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond488) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond488) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond488) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond488) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond488) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond488) CFA_SP SP+0
        CFI (cfiCond488) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond489 Using cfiCommon0
        CFI (cfiCond489) NoFunction
        CFI (cfiCond489) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_79
        CFI (cfiCond489) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond489) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond489) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond489) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond489) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond489) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond489) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond489) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond489) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond489) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond489) CFA_SP SP+0
        CFI (cfiCond489) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond490 Using cfiCommon0
        CFI (cfiCond490) NoFunction
        CFI (cfiCond490) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_80
        CFI (cfiCond490) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond490) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond490) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond490) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond490) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond490) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond490) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond490) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond490) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond490) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond490) CFA_SP SP+0
        CFI (cfiCond490) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond491 Using cfiCommon0
        CFI (cfiCond491) NoFunction
        CFI (cfiCond491) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_81
        CFI (cfiCond491) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond491) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond491) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond491) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond491) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond491) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond491) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond491) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond491) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond491) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond491) CFA_SP SP+0
        CFI (cfiCond491) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker492 Using cfiCommon1
        CFI (cfiPicker492) NoFunction
        CFI (cfiPicker492) Picker
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        CFI EndBlock cfiCond487
        CFI EndBlock cfiCond488
        CFI EndBlock cfiCond489
        CFI EndBlock cfiCond490
        CFI EndBlock cfiCond491
        CFI EndBlock cfiPicker492
        REQUIRE ??Subroutine142_0
        ; // Fall through to label ??Subroutine142_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine142_0:
        CFI Block cfiCond493 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_280
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond494 Using cfiCommon0
        CFI (cfiCond494) NoFunction
        CFI (cfiCond494) Conditional ??CrossCallReturnLabel_281
        CFI (cfiCond494) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond494) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond494) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond494) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond494) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond494) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond494) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond494) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond494) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond494) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond494) CFA_SP SP+0
        CFI (cfiCond494) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond495 Using cfiCommon0
        CFI (cfiCond495) NoFunction
        CFI (cfiCond495) Conditional ??CrossCallReturnLabel_282
        CFI (cfiCond495) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond495) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond495) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond495) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond495) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond495) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond495) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond495) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond495) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond495) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond495) CFA_SP SP+0
        CFI (cfiCond495) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond496 Using cfiCommon0
        CFI (cfiCond496) NoFunction
        CFI (cfiCond496) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_79
        CFI (cfiCond496) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond496) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond496) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond496) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond496) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond496) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond496) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond496) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond496) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond496) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond496) CFA_SP SP+0
        CFI (cfiCond496) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond497 Using cfiCommon0
        CFI (cfiCond497) NoFunction
        CFI (cfiCond497) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_80
        CFI (cfiCond497) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond497) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond497) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond497) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond497) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond497) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond497) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond497) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond497) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond497) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond497) CFA_SP SP+0
        CFI (cfiCond497) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond498 Using cfiCommon0
        CFI (cfiCond498) NoFunction
        CFI (cfiCond498) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_81
        CFI (cfiCond498) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond498) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond498) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond498) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond498) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond498) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond498) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond498) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond498) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond498) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond498) CFA_SP SP+0
        CFI (cfiCond498) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker499 Using cfiCommon1
        CFI (cfiPicker499) NoFunction
        CFI (cfiPicker499) Picker
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x7
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrCtrlData
        RET
        CFI EndBlock cfiCond493
        CFI EndBlock cfiCond494
        CFI EndBlock cfiCond495
        CFI EndBlock cfiCond496
        CFI EndBlock cfiCond497
        CFI EndBlock cfiCond498
        CFI EndBlock cfiPicker499

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine58:
        CFI Block cfiCond500 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_89
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond501 Using cfiCommon0
        CFI (cfiCond501) NoFunction
        CFI (cfiCond501) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond501) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond501) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond501) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond501) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond501) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond501) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond501) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond501) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond501) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond501) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond501) CFA_SP SP+0
        CFI (cfiCond501) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker502 Using cfiCommon1
        CFI (cfiPicker502) NoFunction
        CFI (cfiPicker502) Picker
        LCALL   ?Subroutine102 & 0xFFFF
??CrossCallReturnLabel_160:
        RET
        CFI EndBlock cfiCond500
        CFI EndBlock cfiCond501
        CFI EndBlock cfiPicker502

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine102:
        CFI Block cfiCond503 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_89
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond504 Using cfiCommon0
        CFI (cfiCond504) NoFunction
        CFI (cfiCond504) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_90
        CFI (cfiCond504) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond504) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond504) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond504) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond504) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond504) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond504) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond504) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond504) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond504) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond504) CFA_SP SP+0
        CFI (cfiCond504) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond505 Using cfiCommon0
        CFI (cfiCond505) NoFunction
        CFI (cfiCond505) Conditional ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_79
        CFI (cfiCond505) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond505) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond505) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond505) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond505) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond505) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond505) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond505) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond505) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond505) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond505) CFA_SP SP+0
        CFI (cfiCond505) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond506 Using cfiCommon0
        CFI (cfiCond506) NoFunction
        CFI (cfiCond506) Conditional ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_80
        CFI (cfiCond506) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond506) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond506) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond506) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond506) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond506) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond506) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond506) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond506) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond506) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond506) CFA_SP SP+0
        CFI (cfiCond506) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond507 Using cfiCommon0
        CFI (cfiCond507) NoFunction
        CFI (cfiCond507) Conditional ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_81
        CFI (cfiCond507) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond507) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond507) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond507) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond507) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond507) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond507) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond507) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond507) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond507) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond507) CFA_SP SP+0
        CFI (cfiCond507) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker508 Using cfiCommon1
        CFI (cfiPicker508) NoFunction
        CFI (cfiPicker508) Picker
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond503
        CFI EndBlock cfiCond504
        CFI EndBlock cfiCond505
        CFI EndBlock cfiCond506
        CFI EndBlock cfiCond507
        CFI EndBlock cfiPicker508

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine52:
        CFI Block cfiCond509 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_79
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond510 Using cfiCommon0
        CFI (cfiCond510) NoFunction
        CFI (cfiCond510) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond510) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond510) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond510) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond510) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond510) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond510) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond510) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond510) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond510) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond510) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond510) CFA_SP SP+0
        CFI (cfiCond510) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond511 Using cfiCommon0
        CFI (cfiCond511) NoFunction
        CFI (cfiCond511) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond511) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond511) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond511) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond511) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond511) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond511) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond511) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond511) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond511) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond511) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond511) CFA_SP SP+0
        CFI (cfiCond511) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker512 Using cfiCommon1
        CFI (cfiPicker512) NoFunction
        CFI (cfiPicker512) Picker
        LCALL   ?Subroutine111 & 0xFFFF
??CrossCallReturnLabel_283:
        LCALL   ?Subroutine102 & 0xFFFF
??CrossCallReturnLabel_159:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond509
        CFI EndBlock cfiCond510
        CFI EndBlock cfiCond511
        CFI EndBlock cfiPicker512

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond513 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond514 Using cfiCommon0
        CFI (cfiCond514) NoFunction
        CFI (cfiCond514) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond514) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond514) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond514) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond514) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond514) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond514) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond514) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond514) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond514) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond514) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond514) CFA_SP SP+0
        CFI (cfiCond514) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker515 Using cfiCommon1
        CFI (cfiPicker515) NoFunction
        CFI (cfiPicker515) Picker
        LCALL   ?Subroutine96 & 0xFFFF
??CrossCallReturnLabel_149:
        LCALL   ?Subroutine103 & 0xFFFF
??CrossCallReturnLabel_162:
        RET
        CFI EndBlock cfiCond513
        CFI EndBlock cfiCond514
        CFI EndBlock cfiPicker515

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine103:
        CFI Block cfiCond516 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_161
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond517 Using cfiCommon0
        CFI (cfiCond517) NoFunction
        CFI (cfiCond517) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_120
        CFI (cfiCond517) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond517) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond517) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond517) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond517) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond517) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond517) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond517) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond517) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond517) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond517) CFA_SP SP+0
        CFI (cfiCond517) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond518 Using cfiCommon0
        CFI (cfiCond518) NoFunction
        CFI (cfiCond518) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_121
        CFI (cfiCond518) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond518) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond518) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond518) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond518) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond518) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond518) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond518) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond518) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond518) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond518) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond518) CFA_SP SP+0
        CFI (cfiCond518) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond519 Using cfiCommon0
        CFI (cfiCond519) NoFunction
        CFI (cfiCond519) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_32
        CFI (cfiCond519) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond519) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond519) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond519) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond519) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond519) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond519) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond519) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond519) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond519) CFA_SP SP+0
        CFI (cfiCond519) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond520 Using cfiCommon0
        CFI (cfiCond520) NoFunction
        CFI (cfiCond520) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_33
        CFI (cfiCond520) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond520) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond520) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond520) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond520) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond520) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond520) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond520) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond520) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond520) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond520) CFA_SP SP+0
        CFI (cfiCond520) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker521 Using cfiCommon1
        CFI (cfiPicker521) NoFunction
        CFI (cfiPicker521) Picker
        LCALL   ?Subroutine115 & 0xFFFF
??CrossCallReturnLabel_332:
        RET
        CFI EndBlock cfiCond516
        CFI EndBlock cfiCond517
        CFI EndBlock cfiCond518
        CFI EndBlock cfiCond519
        CFI EndBlock cfiCond520
        CFI EndBlock cfiPicker521

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine115:
        CFI Block cfiCond522 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_161
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond523 Using cfiCommon0
        CFI (cfiCond523) NoFunction
        CFI (cfiCond523) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_120
        CFI (cfiCond523) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond523) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond523) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond523) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond523) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond523) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond523) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond523) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond523) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond523) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond523) CFA_SP SP+0
        CFI (cfiCond523) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond524 Using cfiCommon0
        CFI (cfiCond524) NoFunction
        CFI (cfiCond524) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_121
        CFI (cfiCond524) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond524) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond524) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond524) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond524) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond524) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond524) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond524) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond524) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond524) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond524) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond524) CFA_SP SP+0
        CFI (cfiCond524) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond525 Using cfiCommon0
        CFI (cfiCond525) NoFunction
        CFI (cfiCond525) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_32
        CFI (cfiCond525) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond525) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond525) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond525) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond525) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond525) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond525) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond525) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond525) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond525) CFA_SP SP+0
        CFI (cfiCond525) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond526 Using cfiCommon0
        CFI (cfiCond526) NoFunction
        CFI (cfiCond526) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_33
        CFI (cfiCond526) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond526) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond526) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond526) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond526) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond526) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond526) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond526) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond526) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond526) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond526) CFA_SP SP+0
        CFI (cfiCond526) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond527 Using cfiCommon0
        CFI (cfiCond527) NoFunction
        CFI (cfiCond527) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_328, ??CrossCallReturnLabel_101
        CFI (cfiCond527) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond527) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond527) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond527) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond527) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond527) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond527) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond527) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond527) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond527) CFA_SP SP+0
        CFI (cfiCond527) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond528 Using cfiCommon0
        CFI (cfiCond528) NoFunction
        CFI (cfiCond528) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_328, ??CrossCallReturnLabel_102
        CFI (cfiCond528) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond528) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond528) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond528) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond528) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond528) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond528) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond528) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond528) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond528) CFA_SP SP+0
        CFI (cfiCond528) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond529 Using cfiCommon0
        CFI (cfiCond529) NoFunction
        CFI (cfiCond529) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_325
        CFI (cfiCond529) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond529) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond529) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond529) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond529) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond529) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond529) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond529) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond529) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond529) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond529) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond529) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond529) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond529) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond529) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond529) CFA_SP SP+0
        CFI (cfiCond529) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond530 Using cfiCommon0
        CFI (cfiCond530) NoFunction
        CFI (cfiCond530) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_326
        CFI (cfiCond530) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond530) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond530) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond530) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond530) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond530) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond530) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond530) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond530) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond530) CFA_SP SP+0
        CFI (cfiCond530) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond531 Using cfiCommon0
        CFI (cfiCond531) NoFunction
        CFI (cfiCond531) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_324
        CFI (cfiCond531) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond531) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond531) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond531) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond531) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond531) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond531) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond531) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond531) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond531) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond531) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond531) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond531) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond531) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond531) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond531) CFA_SP SP+0
        CFI (cfiCond531) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond532 Using cfiCommon0
        CFI (cfiCond532) NoFunction
        CFI (cfiCond532) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_327, ??CrossCallReturnLabel_93
        CFI (cfiCond532) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond532) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond532) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond532) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond532) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond532) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond532) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond532) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond532) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond532) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond532) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond532) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond532) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond532) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond532) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond532) CFA_SP SP+0
        CFI (cfiCond532) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond533 Using cfiCommon0
        CFI (cfiCond533) NoFunction
        CFI (cfiCond533) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_327, ??CrossCallReturnLabel_94
        CFI (cfiCond533) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond533) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond533) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond533) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond533) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond533) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond533) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond533) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond533) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond533) CFA_SP SP+0
        CFI (cfiCond533) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker534 Using cfiCommon1
        CFI (cfiPicker534) NoFunction
        CFI (cfiPicker534) Picker
        MOVX    A,@DPTR
        CFI EndBlock cfiCond522
        CFI EndBlock cfiCond523
        CFI EndBlock cfiCond524
        CFI EndBlock cfiCond525
        CFI EndBlock cfiCond526
        CFI EndBlock cfiCond527
        CFI EndBlock cfiCond528
        CFI EndBlock cfiCond529
        CFI EndBlock cfiCond530
        CFI EndBlock cfiCond531
        CFI EndBlock cfiCond532
        CFI EndBlock cfiCond533
        CFI EndBlock cfiPicker534
        REQUIRE ??Subroutine143_0
        ; // Fall through to label ??Subroutine143_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine143_0:
        CFI Block cfiCond535 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_331
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond536 Using cfiCommon0
        CFI (cfiCond536) NoFunction
        CFI (cfiCond536) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_161
        CFI (cfiCond536) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond536) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond536) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond536) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond536) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond536) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond536) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond536) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond536) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond536) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond536) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond536) CFA_SP SP+0
        CFI (cfiCond536) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond537 Using cfiCommon0
        CFI (cfiCond537) NoFunction
        CFI (cfiCond537) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_120
        CFI (cfiCond537) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond537) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond537) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond537) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond537) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond537) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond537) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond537) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond537) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond537) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond537) CFA_SP SP+0
        CFI (cfiCond537) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond538 Using cfiCommon0
        CFI (cfiCond538) NoFunction
        CFI (cfiCond538) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_121
        CFI (cfiCond538) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond538) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond538) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond538) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond538) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond538) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond538) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond538) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond538) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond538) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond538) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond538) CFA_SP SP+0
        CFI (cfiCond538) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond539 Using cfiCommon0
        CFI (cfiCond539) NoFunction
        CFI (cfiCond539) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_32
        CFI (cfiCond539) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond539) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond539) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond539) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond539) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond539) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond539) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond539) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond539) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond539) CFA_SP SP+0
        CFI (cfiCond539) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond540 Using cfiCommon0
        CFI (cfiCond540) NoFunction
        CFI (cfiCond540) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_33
        CFI (cfiCond540) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond540) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond540) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond540) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond540) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond540) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond540) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond540) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond540) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond540) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond540) CFA_SP SP+0
        CFI (cfiCond540) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond541 Using cfiCommon0
        CFI (cfiCond541) NoFunction
        CFI (cfiCond541) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_328, ??CrossCallReturnLabel_101
        CFI (cfiCond541) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond541) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond541) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond541) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond541) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond541) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond541) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond541) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond541) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond541) CFA_SP SP+0
        CFI (cfiCond541) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond542 Using cfiCommon0
        CFI (cfiCond542) NoFunction
        CFI (cfiCond542) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_328, ??CrossCallReturnLabel_102
        CFI (cfiCond542) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond542) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond542) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond542) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond542) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond542) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond542) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond542) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond542) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond542) CFA_SP SP+0
        CFI (cfiCond542) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond543 Using cfiCommon0
        CFI (cfiCond543) NoFunction
        CFI (cfiCond543) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_325
        CFI (cfiCond543) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond543) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond543) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond543) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond543) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond543) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond543) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond543) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond543) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond543) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond543) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond543) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond543) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond543) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond543) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond543) CFA_SP SP+0
        CFI (cfiCond543) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond544 Using cfiCommon0
        CFI (cfiCond544) NoFunction
        CFI (cfiCond544) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_326
        CFI (cfiCond544) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond544) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond544) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond544) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond544) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond544) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond544) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond544) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond544) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond544) CFA_SP SP+0
        CFI (cfiCond544) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond545 Using cfiCommon0
        CFI (cfiCond545) NoFunction
        CFI (cfiCond545) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_324
        CFI (cfiCond545) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond545) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond545) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond545) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond545) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond545) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond545) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond545) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond545) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond545) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond545) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond545) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond545) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond545) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond545) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond545) CFA_SP SP+0
        CFI (cfiCond545) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond546 Using cfiCommon0
        CFI (cfiCond546) NoFunction
        CFI (cfiCond546) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_327, ??CrossCallReturnLabel_93
        CFI (cfiCond546) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond546) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond546) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond546) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond546) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond546) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond546) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond546) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond546) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond546) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond546) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond546) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond546) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond546) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond546) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond546) CFA_SP SP+0
        CFI (cfiCond546) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond547 Using cfiCommon0
        CFI (cfiCond547) NoFunction
        CFI (cfiCond547) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_327, ??CrossCallReturnLabel_94
        CFI (cfiCond547) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond547) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond547) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond547) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond547) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond547) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond547) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond547) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond547) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond547) CFA_SP SP+0
        CFI (cfiCond547) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker548 Using cfiCommon1
        CFI (cfiPicker548) NoFunction
        CFI (cfiPicker548) Picker
        MOV     R0,A
        INC     DPTR
        CFI EndBlock cfiCond535
        CFI EndBlock cfiCond536
        CFI EndBlock cfiCond537
        CFI EndBlock cfiCond538
        CFI EndBlock cfiCond539
        CFI EndBlock cfiCond540
        CFI EndBlock cfiCond541
        CFI EndBlock cfiCond542
        CFI EndBlock cfiCond543
        CFI EndBlock cfiCond544
        CFI EndBlock cfiCond545
        CFI EndBlock cfiCond546
        CFI EndBlock cfiCond547
        CFI EndBlock cfiPicker548
        REQUIRE ??Subroutine144_0
        ; // Fall through to label ??Subroutine144_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine144_0:
        CFI Block cfiCond549 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_330, ??CrossCallReturnLabel_213
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond550 Using cfiCommon0
        CFI (cfiCond550) NoFunction
        CFI (cfiCond550) Conditional ??CrossCallReturnLabel_330, ??CrossCallReturnLabel_214
        CFI (cfiCond550) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond550) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond550) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond550) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond550) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond550) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond550) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond550) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond550) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond550) CFA_SP SP+0
        CFI (cfiCond550) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond551 Using cfiCommon0
        CFI (cfiCond551) NoFunction
        CFI (cfiCond551) Conditional ??CrossCallReturnLabel_330, ??CrossCallReturnLabel_215
        CFI (cfiCond551) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond551) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond551) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond551) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond551) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond551) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond551) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond551) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond551) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond551) CFA_SP SP+0
        CFI (cfiCond551) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond552 Using cfiCommon0
        CFI (cfiCond552) NoFunction
        CFI (cfiCond552) Conditional ??CrossCallReturnLabel_330, ??CrossCallReturnLabel_216
        CFI (cfiCond552) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond552) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond552) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond552) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond552) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond552) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond552) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond552) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond552) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond552) CFA_SP SP+0
        CFI (cfiCond552) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond553 Using cfiCommon0
        CFI (cfiCond553) NoFunction
        CFI (cfiCond553) Conditional ??CrossCallReturnLabel_330, ??CrossCallReturnLabel_211
        CFI (cfiCond553) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond553) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond553) CFA_SP SP+-5
        CFI Block cfiCond554 Using cfiCommon0
        CFI (cfiCond554) NoFunction
        CFI (cfiCond554) Conditional ??CrossCallReturnLabel_330, ??CrossCallReturnLabel_212
        CFI (cfiCond554) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond554) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond554) CFA_SP SP+-5
        CFI Block cfiCond555 Using cfiCommon0
        CFI (cfiCond555) NoFunction
        CFI (cfiCond555) Conditional ??CrossCallReturnLabel_331
        CFI (cfiCond555) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond555) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond555) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond555) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond555) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond555) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond555) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond555) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond555) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond555) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond555) CFA_SP SP+0
        CFI (cfiCond555) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond556 Using cfiCommon0
        CFI (cfiCond556) NoFunction
        CFI (cfiCond556) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_161
        CFI (cfiCond556) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond556) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond556) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond556) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond556) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond556) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond556) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond556) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond556) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond556) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond556) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond556) CFA_SP SP+0
        CFI (cfiCond556) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond557 Using cfiCommon0
        CFI (cfiCond557) NoFunction
        CFI (cfiCond557) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_120
        CFI (cfiCond557) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond557) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond557) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond557) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond557) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond557) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond557) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond557) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond557) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond557) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond557) CFA_SP SP+0
        CFI (cfiCond557) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond558 Using cfiCommon0
        CFI (cfiCond558) NoFunction
        CFI (cfiCond558) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_121
        CFI (cfiCond558) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond558) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond558) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond558) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond558) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond558) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond558) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond558) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond558) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond558) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond558) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond558) CFA_SP SP+0
        CFI (cfiCond558) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond559 Using cfiCommon0
        CFI (cfiCond559) NoFunction
        CFI (cfiCond559) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_32
        CFI (cfiCond559) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond559) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond559) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond559) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond559) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond559) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond559) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond559) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond559) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond559) CFA_SP SP+0
        CFI (cfiCond559) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond560 Using cfiCommon0
        CFI (cfiCond560) NoFunction
        CFI (cfiCond560) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_33
        CFI (cfiCond560) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond560) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond560) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond560) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond560) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond560) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond560) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond560) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond560) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond560) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond560) CFA_SP SP+0
        CFI (cfiCond560) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond561 Using cfiCommon0
        CFI (cfiCond561) NoFunction
        CFI (cfiCond561) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_328, ??CrossCallReturnLabel_101
        CFI (cfiCond561) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond561) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond561) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond561) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond561) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond561) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond561) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond561) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond561) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond561) CFA_SP SP+0
        CFI (cfiCond561) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond562 Using cfiCommon0
        CFI (cfiCond562) NoFunction
        CFI (cfiCond562) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_328, ??CrossCallReturnLabel_102
        CFI (cfiCond562) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond562) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond562) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond562) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond562) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond562) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond562) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond562) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond562) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond562) CFA_SP SP+0
        CFI (cfiCond562) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond563 Using cfiCommon0
        CFI (cfiCond563) NoFunction
        CFI (cfiCond563) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_325
        CFI (cfiCond563) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond563) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond563) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond563) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond563) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond563) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond563) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond563) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond563) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond563) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond563) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond563) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond563) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond563) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond563) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond563) CFA_SP SP+0
        CFI (cfiCond563) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond564 Using cfiCommon0
        CFI (cfiCond564) NoFunction
        CFI (cfiCond564) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_326
        CFI (cfiCond564) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond564) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond564) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond564) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond564) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond564) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond564) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond564) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond564) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond564) CFA_SP SP+0
        CFI (cfiCond564) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond565 Using cfiCommon0
        CFI (cfiCond565) NoFunction
        CFI (cfiCond565) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_324
        CFI (cfiCond565) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond565) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond565) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond565) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond565) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond565) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond565) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond565) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond565) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond565) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond565) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond565) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond565) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond565) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond565) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond565) CFA_SP SP+0
        CFI (cfiCond565) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond566 Using cfiCommon0
        CFI (cfiCond566) NoFunction
        CFI (cfiCond566) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_327, ??CrossCallReturnLabel_93
        CFI (cfiCond566) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond566) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond566) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond566) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond566) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond566) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond566) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond566) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond566) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond566) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond566) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond566) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond566) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond566) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond566) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond566) CFA_SP SP+0
        CFI (cfiCond566) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond567 Using cfiCommon0
        CFI (cfiCond567) NoFunction
        CFI (cfiCond567) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_327, ??CrossCallReturnLabel_94
        CFI (cfiCond567) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond567) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond567) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond567) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond567) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond567) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond567) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond567) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond567) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond567) CFA_SP SP+0
        CFI (cfiCond567) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker568 Using cfiCommon1
        CFI (cfiPicker568) NoFunction
        CFI (cfiPicker568) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond549
        CFI EndBlock cfiCond550
        CFI EndBlock cfiCond551
        CFI EndBlock cfiCond552
        CFI EndBlock cfiCond553
        CFI EndBlock cfiCond554
        CFI EndBlock cfiCond555
        CFI EndBlock cfiCond556
        CFI EndBlock cfiCond557
        CFI EndBlock cfiCond558
        CFI EndBlock cfiCond559
        CFI EndBlock cfiCond560
        CFI EndBlock cfiCond561
        CFI EndBlock cfiCond562
        CFI EndBlock cfiCond563
        CFI EndBlock cfiCond564
        CFI EndBlock cfiCond565
        CFI EndBlock cfiCond566
        CFI EndBlock cfiCond567
        CFI EndBlock cfiPicker568
// 2611 
// 2612 /******************************************************************************
// 2613  * @fn          ZDSecMgrEstablishKeyCfm
// 2614  *
// 2615  * @brief       Process the ZDO_EstablishKeyCfm_t message.
// 2616  *
// 2617  * @param       cfm - [in] ZDO_EstablishKeyCfm_t confirmation
// 2618  *
// 2619  * @return      none
// 2620  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2621 void ZDSecMgrEstablishKeyCfm( ZDO_EstablishKeyCfm_t* cfm )
ZDSecMgrEstablishKeyCfm:
        CFI Block cfiBlock569 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKeyCfm
        CODE
// 2622 {
        ; Saved register size: 0
        ; Auto size: 0
// 2623   // send the NWK key
// 2624   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2625   {
// 2626     // update control for specified EXT address
// 2627     ZDSecMgrDeviceCtrlUpdate( cfm->partExtAddr, ZDSECMGR_CTRL_SKKE_DONE );
// 2628   }
// 2629   else
// 2630   {
// 2631     // this should be done when receiving the NWK key
// 2632     // if devState ==
// 2633     //if ( devState == DEV_END_DEVICE_UNAUTH )
// 2634         //osal_set_event( ZDAppTaskID, ZDO_DEVICE_AUTH );
// 2635 
// 2636     // if not in joining state -- this should trigger an event for an
// 2637     // end point that requested SKKE
// 2638     // if ( devState == DEV_END_DEVICE )
// 2639    //       devState == DEV_ROUTER;
// 2640 
// 2641   }
// 2642 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock569
// 2643 
// 2644 /******************************************************************************
// 2645  * @fn          ZDSecMgrTCExtAddrCheck
// 2646  *
// 2647  * @brief       Verifies if received ext. address matches TC ext. address.
// 2648  *
// 2649  * @param       extAddr - Extended address to be verified.
// 2650  *
// 2651  * @return      TRUE - extended address matches
// 2652  *              FALSE - otherwise
// 2653  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2654 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
ZDSecMgrTCExtAddrCheck:
        CFI Block cfiBlock570 Using cfiCommon0
        CFI Function ZDSecMgrTCExtAddrCheck
        CODE
// 2655 {
        FUNCALL ZDSecMgrTCExtAddrCheck, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCExtAddrCheck, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2656   uint8  match;
// 2657   uint8  lookup[Z_EXTADDR_LEN];
// 2658 
// 2659   match = FALSE;
        MOV     ?V0 + 0,#0x0
// 2660 
// 2661   if ( AddrMgrExtAddrLookup( APSME_TRUSTCENTER_NWKADDR, lookup ) )
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??AddrMgrExtAddrLookup?relay
        MOV     A,R1
        JZ      ??ZDSecMgrTCExtAddrCheck_0
// 2662   {
// 2663     match = AddrMgrExtAddrEqual( lookup, extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrEqual?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
// 2664   }
// 2665 
// 2666   return match;
??ZDSecMgrTCExtAddrCheck_0:
        MOV     R1,?V0 + 0
        MOV     A,#0x8
        LJMP    ??Subroutine136_0 & 0xFFFF
        CFI EndBlock cfiBlock570
// 2667 }
// 2668 
// 2669 /******************************************************************************
// 2670  * @fn          ZDSecMgrTCDataLoad
// 2671  *
// 2672  * @brief       Stores the address of TC into address manager and stores the
// 2673  *              preconfigured ZDSecMgrTCMasterKey to NV if zgPreConfigKeys
// 2674  *              is set to TRUE.
// 2675  *
// 2676  * @param       extAddr - Extended address to be verified.
// 2677  *
// 2678  * @return      none
// 2679  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2680 void ZDSecMgrTCDataLoad( uint8* extAddr )
ZDSecMgrTCDataLoad:
        CFI Block cfiBlock571 Using cfiCommon0
        CFI Function ZDSecMgrTCDataLoad
        CODE
// 2681 {
        FUNCALL ZDSecMgrTCDataLoad, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrMasterKeyStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 33
        MOV     A,#-0x21
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2682   uint16 ami;
// 2683   uint16 keyNvId;
// 2684   uint8 masterKey[SEC_KEY_LEN];
// 2685   AddrMgrEntry_t entry;
// 2686 
// 2687   // lookup using TC short address
// 2688   entry.user    = ADDRMGR_USER_DEFAULT;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2689   entry.nwkAddr = zgTrustCenterAddr;
        MOV     DPTR,#zgTrustCenterAddr
        LCALL   ??Subroutine157_0 & 0xFFFF
??CrossCallReturnLabel_345:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 2690 
// 2691   // Verify if TC address has been added to Address Manager
// 2692   if ( AddrMgrEntryLookupNwk( &entry ) != TRUE )
??CrossCallReturnLabel_232:
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine87 & 0xFFFF
??CrossCallReturnLabel_284:
        JZ      ??ZDSecMgrTCDataLoad_0
// 2693   {
// 2694     if ( ZDSecMgrAddrStore( zgTrustCenterAddr, extAddr, &ami ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#zgTrustCenterAddr
        LCALL   ??Subroutine147_0 & 0xFFFF
??CrossCallReturnLabel_292:
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R1
        JNZ     ??ZDSecMgrTCDataLoad_0
// 2695     {
// 2696       // if preconfigured load key
// 2697       if ( zgPreConfigKeys == TRUE )
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrTCDataLoad_0
// 2698       {
// 2699         if ( ZDSecMgrMasterKeyLookup( ami, &keyNvId ) != ZSuccess )
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_258:
        JZ      ??ZDSecMgrTCDataLoad_0
// 2700         {
// 2701           // temporary copy
// 2702           osal_memcpy( masterKey, ZDSecMgrTCMasterKey, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#ZDSecMgrTCMasterKey & 0xff
        MOV     ?V0 + 1,#(ZDSecMgrTCMasterKey >> 8) & 0xff
        MOV     ?V0 + 2,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine82 & 0xFFFF
??CrossCallReturnLabel_262:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
// 2703 
// 2704           ZDSecMgrMasterKeyStore( ami, masterKey );
        ; Setup parameters for call to function ZDSecMgrMasterKeyStore
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?Subroutine73 & 0xFFFF
// 2705 
// 2706           // remove copy of key in RAM
// 2707           osal_memset( masterKey, 0x00, SEC_KEY_LEN );
??CrossCallReturnLabel_115:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 2708         }
// 2709       }
// 2710     }
// 2711   }
// 2712 }
??ZDSecMgrTCDataLoad_0:
        MOV     A,#0x21
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock571

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine87:
        CFI Block cfiCond572 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_284
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond573 Using cfiCommon0
        CFI (cfiCond573) NoFunction
        CFI (cfiCond573) Conditional ??CrossCallReturnLabel_285
        CFI (cfiCond573) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond573) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond573) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond573) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond573) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond573) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond573) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond573) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond573) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond573) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond573) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond573) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond573) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond573) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond573) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond573) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond573) CFA_SP SP+0
        CFI (cfiCond573) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker574 Using cfiCommon1
        CFI (cfiPicker574) NoFunction
        CFI (cfiPicker574) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond572
        CFI EndBlock cfiCond573
        CFI EndBlock cfiPicker574
        REQUIRE ??Subroutine145_0
        ; // Fall through to label ??Subroutine145_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine145_0:
        CFI Block cfiCond575 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_286
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond576 Using cfiCommon0
        CFI (cfiCond576) NoFunction
        CFI (cfiCond576) Conditional ??CrossCallReturnLabel_284
        CFI (cfiCond576) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond576) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond576) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond576) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond576) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond576) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond576) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond576) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond576) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond576) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond576) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond576) CFA_SP SP+0
        CFI (cfiCond576) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond577 Using cfiCommon0
        CFI (cfiCond577) NoFunction
        CFI (cfiCond577) Conditional ??CrossCallReturnLabel_285
        CFI (cfiCond577) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond577) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond577) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond577) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond577) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond577) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond577) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond577) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond577) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond577) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond577) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond577) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond577) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond577) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond577) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond577) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond577) CFA_SP SP+0
        CFI (cfiCond577) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker578 Using cfiCommon1
        CFI (cfiPicker578) NoFunction
        CFI (cfiPicker578) Picker
        LCALL   ??AddrMgrEntryLookupNwk?relay
        MOV     A,R1
        XRL     A,#0x1
        RET
        CFI EndBlock cfiCond575
        CFI EndBlock cfiCond576
        CFI EndBlock cfiCond577
        CFI EndBlock cfiPicker578

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine76:
        CFI Block cfiCond579 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_295
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond580 Using cfiCommon0
        CFI (cfiCond580) NoFunction
        CFI (cfiCond580) Conditional ??CrossCallReturnLabel_296
        CFI (cfiCond580) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond580) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond580) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond580) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond580) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond580) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond580) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond580) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond580) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond580) CFA_SP SP+0
        CFI (cfiCond580) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker581 Using cfiCommon1
        CFI (cfiPicker581) NoFunction
        CFI (cfiPicker581) Picker
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond579
        CFI EndBlock cfiCond580
        CFI EndBlock cfiPicker581
        REQUIRE ??Subroutine146_0
        ; // Fall through to label ??Subroutine146_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine146_0:
        CFI Block cfiCond582 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_294
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond583 Using cfiCommon0
        CFI (cfiCond583) NoFunction
        CFI (cfiCond583) Conditional ??CrossCallReturnLabel_295
        CFI (cfiCond583) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond583) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond583) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond583) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond583) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond583) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond583) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond583) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond583) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond583) CFA_SP SP+0
        CFI (cfiCond583) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond584 Using cfiCommon0
        CFI (cfiCond584) NoFunction
        CFI (cfiCond584) Conditional ??CrossCallReturnLabel_296
        CFI (cfiCond584) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond584) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond584) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond584) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond584) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond584) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond584) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond584) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond584) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond584) CFA_SP SP+0
        CFI (cfiCond584) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker585 Using cfiCommon1
        CFI (cfiPicker585) NoFunction
        CFI (cfiPicker585) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond582
        CFI EndBlock cfiCond583
        CFI EndBlock cfiCond584
        CFI EndBlock cfiPicker585
        REQUIRE ??Subroutine147_0
        ; // Fall through to label ??Subroutine147_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine147_0:
        CFI Block cfiCond586 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_287
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond587 Using cfiCommon0
        CFI (cfiCond587) NoFunction
        CFI (cfiCond587) Conditional ??CrossCallReturnLabel_288
        CFI (cfiCond587) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond587) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond587) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond587) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond587) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond587) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond587) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond587) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond587) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond587) CFA_SP SP+0
        CFI (cfiCond587) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond588 Using cfiCommon0
        CFI (cfiCond588) NoFunction
        CFI (cfiCond588) Conditional ??CrossCallReturnLabel_289
        CFI (cfiCond588) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond588) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond588) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond588) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond588) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond588) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond588) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond588) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond588) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond588) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond588) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond588) CFA_SP SP+0
        CFI (cfiCond588) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond589 Using cfiCommon0
        CFI (cfiCond589) NoFunction
        CFI (cfiCond589) Conditional ??CrossCallReturnLabel_290
        CFI (cfiCond589) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond589) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond589) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond589) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond589) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond589) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond589) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond589) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond589) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond589) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond589) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond589) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond589) CFA_SP SP+0
        CFI (cfiCond589) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond590 Using cfiCommon0
        CFI (cfiCond590) NoFunction
        CFI (cfiCond590) Conditional ??CrossCallReturnLabel_291
        CFI (cfiCond590) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond590) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond590) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond590) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond590) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond590) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond590) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond590) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond590) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond590) CFA_SP SP+0
        CFI (cfiCond590) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond591 Using cfiCommon0
        CFI (cfiCond591) NoFunction
        CFI (cfiCond591) Conditional ??CrossCallReturnLabel_292
        CFI (cfiCond591) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond591) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond591) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond591) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond591) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond591) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond591) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond591) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond591) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond591) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond591) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond591) CFA_SP SP+0
        CFI (cfiCond591) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond592 Using cfiCommon0
        CFI (cfiCond592) NoFunction
        CFI (cfiCond592) Conditional ??CrossCallReturnLabel_293
        CFI (cfiCond592) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond592) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond592) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond592) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond592) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond592) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond592) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond592) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond592) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond592) CFA_SP SP+0
        CFI (cfiCond592) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond593 Using cfiCommon0
        CFI (cfiCond593) NoFunction
        CFI (cfiCond593) Conditional ??CrossCallReturnLabel_294
        CFI (cfiCond593) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond593) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond593) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond593) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond593) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond593) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond593) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond593) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond593) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond593) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond593) CFA_SP SP+0
        CFI (cfiCond593) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond594 Using cfiCommon0
        CFI (cfiCond594) NoFunction
        CFI (cfiCond594) Conditional ??CrossCallReturnLabel_295
        CFI (cfiCond594) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond594) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond594) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond594) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond594) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond594) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond594) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond594) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond594) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond594) CFA_SP SP+0
        CFI (cfiCond594) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond595 Using cfiCommon0
        CFI (cfiCond595) NoFunction
        CFI (cfiCond595) Conditional ??CrossCallReturnLabel_296
        CFI (cfiCond595) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond595) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond595) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond595) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond595) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond595) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond595) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond595) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond595) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond595) CFA_SP SP+0
        CFI (cfiCond595) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker596 Using cfiCommon1
        CFI (cfiPicker596) NoFunction
        CFI (cfiPicker596) Picker
        LCALL   ??Subroutine154_0 & 0xFFFF
??CrossCallReturnLabel_341:
        RET
        CFI EndBlock cfiCond586
        CFI EndBlock cfiCond587
        CFI EndBlock cfiCond588
        CFI EndBlock cfiCond589
        CFI EndBlock cfiCond590
        CFI EndBlock cfiCond591
        CFI EndBlock cfiCond592
        CFI EndBlock cfiCond593
        CFI EndBlock cfiCond594
        CFI EndBlock cfiCond595
        CFI EndBlock cfiPicker596

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine73:
        CFI Block cfiCond597 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_114
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond598 Using cfiCommon0
        CFI (cfiCond598) NoFunction
        CFI (cfiCond598) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond598) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond598) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond598) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond598) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond598) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond598) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond598) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond598) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond598) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond598) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond598) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond598) CFA_SP SP+0
        CFI (cfiCond598) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker599 Using cfiCommon1
        CFI (cfiPicker599) NoFunction
        CFI (cfiPicker599) Picker
        LCALL   ?Subroutine101 & 0xFFFF
??CrossCallReturnLabel_338:
        LCALL   ??ZDSecMgrMasterKeyStore?relay
        RET
        CFI EndBlock cfiCond597
        CFI EndBlock cfiCond598
        CFI EndBlock cfiPicker599
// 2713 
// 2714 /******************************************************************************
// 2715  * @fn          ZDSecMgrEstablishKeyInd
// 2716  *
// 2717  * @brief       Process the ZDO_EstablishKeyInd_t message.
// 2718  *
// 2719  * @param       ind - [in] ZDO_EstablishKeyInd_t indication
// 2720  *
// 2721  * @return      none
// 2722  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2723 void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
ZDSecMgrEstablishKeyInd:
        CFI Block cfiBlock600 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKeyInd
        CODE
// 2724 {
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrTCExtAddrCheck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrDeviceValidateSKKE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, APSME_EstablishKeyRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2725   ZDSecMgrDevice_t        device;
// 2726   APSME_EstablishKeyRsp_t rsp;
// 2727 
// 2728 
// 2729   // load Trust Center data if needed
// 2730   ZDSecMgrTCDataLoad( ind->initExtAddr );
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV     R2,?V0 + 0
        MOV     R3,A
        LCALL   ??ZDSecMgrTCDataLoad?relay
// 2731 
// 2732   if ( ZDSecMgrTCExtAddrCheck( ind->initExtAddr ) )
        ; Setup parameters for call to function ZDSecMgrTCExtAddrCheck
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrTCExtAddrCheck?relay
        MOV     A,R1
        JZ      ??ZDSecMgrEstablishKeyInd_0
// 2733   {
// 2734     //IF (ind->srcAddr == APSME_TRUSTCENTER_NWKADDR)
// 2735     //OR
// 2736     //!ZDSecMgrTCAuthenticated
// 2737     //devtag.0604.critical
// 2738         //how is the parentAddr used here
// 2739 
// 2740     // initial SKKE from Trust Center via parent
// 2741     device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
// 2742     device.parentAddr = ind->srcAddr;
// 2743   }
??CrossCallReturnLabel_27:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??ZDSecMgrEstablishKeyInd_1
// 2744   else
// 2745   {
// 2746     // Trust Center direct or E2E SKKE
// 2747     device.nwkAddr    = ind->srcAddr;
??ZDSecMgrEstablishKeyInd_0:
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_349:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 2748     device.parentAddr = INVALID_NODE_ADDR;
??CrossCallReturnLabel_233:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
// 2749   }
??ZDSecMgrEstablishKeyInd_1:
        LCALL   ?Subroutine95 & 0xFFFF
// 2750 
// 2751   device.extAddr = ind->initExtAddr;
??CrossCallReturnLabel_300:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine26 & 0xFFFF
// 2752   //devtag.pro.security.0724.todo - verify usage
// 2753   device.secure  = ind->nwkSecure;
??CrossCallReturnLabel_34:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2754 
// 2755   // validate device for SKKE
// 2756   if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrDeviceValidateSKKE
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrDeviceValidateSKKE?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrEstablishKeyInd_2
// 2757   {
// 2758     rsp.accept = TRUE;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrEstablishKeyInd_3
// 2759   }
// 2760   else
// 2761   {
// 2762     rsp.accept = FALSE;
??ZDSecMgrEstablishKeyInd_2:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??ZDSecMgrEstablishKeyInd_3:
        MOVX    @DPTR,A
// 2763   }
// 2764 
// 2765   rsp.dstAddr     = ind->srcAddr;
        LCALL   ?Subroutine14 & 0xFFFF
// 2766   rsp.initExtAddr = &ind->initExtAddr[0];
??CrossCallReturnLabel_297:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 2767   //devtag.0604.todo - remove obsolete
// 2768   rsp.apsSecure   = ind->apsSecure;
??CrossCallReturnLabel_234:
        MOV     A,R6
        ADD     A,#0xd
        LCALL   ??Subroutine162_0 & 0xFFFF
??CrossCallReturnLabel_386:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine26 & 0xFFFF
// 2769   rsp.nwkSecure   = ind->nwkSecure;
??CrossCallReturnLabel_35:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine17 & 0xFFFF
// 2770 
// 2771   APSME_EstablishKeyRsp( &rsp );
??CrossCallReturnLabel_14:
        LCALL   ??APSME_EstablishKeyRsp?relay
// 2772 }
        MOV     A,#0x11
        LJMP    ??Subroutine132_0 & 0xFFFF
        CFI EndBlock cfiBlock600

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond601 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond602 Using cfiCommon0
        CFI (cfiCond602) NoFunction
        CFI (cfiCond602) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond602) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond602) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond602) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond602) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond602) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond602) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond602) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond602) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond602) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond602) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond602) CFA_SP SP+0
        CFI (cfiCond602) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker603 Using cfiCommon1
        CFI (cfiPicker603) NoFunction
        CFI (cfiPicker603) Picker
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond601
        CFI EndBlock cfiCond602
        CFI EndBlock cfiPicker603

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond604 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond605 Using cfiCommon0
        CFI (cfiCond605) NoFunction
        CFI (cfiCond605) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond605) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond605) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond605) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond605) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond605) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond605) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond605) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond605) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond605) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond605) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond605) CFA_SP SP+0
        CFI (cfiCond605) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker606 Using cfiCommon1
        CFI (cfiPicker606) NoFunction
        CFI (cfiPicker606) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine91 & 0xFFFF
??CrossCallReturnLabel_142:
        RET
        CFI EndBlock cfiCond604
        CFI EndBlock cfiCond605
        CFI EndBlock cfiPicker606

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine91:
        CFI Block cfiCond607 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond608 Using cfiCommon0
        CFI (cfiCond608) NoFunction
        CFI (cfiCond608) Conditional ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_25
        CFI (cfiCond608) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond608) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond608) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond608) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond608) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond608) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond608) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond608) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond608) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond608) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond608) CFA_SP SP+0
        CFI (cfiCond608) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond609 Using cfiCommon0
        CFI (cfiCond609) NoFunction
        CFI (cfiCond609) Conditional ??CrossCallReturnLabel_142, ??CrossCallReturnLabel_26
        CFI (cfiCond609) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond609) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond609) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond609) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond609) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond609) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond609) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond609) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond609) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond609) CFA_SP SP+0
        CFI (cfiCond609) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond610 Using cfiCommon0
        CFI (cfiCond610) NoFunction
        CFI (cfiCond610) Conditional ??CrossCallReturnLabel_142, ??CrossCallReturnLabel_27
        CFI (cfiCond610) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond610) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond610) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond610) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond610) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond610) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond610) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond610) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond610) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond610) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond610) CFA_SP SP+0
        CFI (cfiCond610) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond611 Using cfiCommon0
        CFI (cfiCond611) NoFunction
        CFI (cfiCond611) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_28
        CFI (cfiCond611) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond611) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond611) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond611) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond611) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond611) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond611) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond611) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond611) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond611) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond611) CFA_SP SP+0
        CFI (cfiCond611) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond612 Using cfiCommon0
        CFI (cfiCond612) NoFunction
        CFI (cfiCond612) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_29
        CFI (cfiCond612) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond612) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond612) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond612) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond612) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond612) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond612) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond612) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond612) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond612) CFA_SP SP+0
        CFI (cfiCond612) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker613 Using cfiCommon1
        CFI (cfiPicker613) NoFunction
        CFI (cfiPicker613) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine114 & 0xFFFF
??CrossCallReturnLabel_356:
        RET
        CFI EndBlock cfiCond607
        CFI EndBlock cfiCond608
        CFI EndBlock cfiCond609
        CFI EndBlock cfiCond610
        CFI EndBlock cfiCond611
        CFI EndBlock cfiCond612
        CFI EndBlock cfiPicker613

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond614 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_297
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond615 Using cfiCommon0
        CFI (cfiCond615) NoFunction
        CFI (cfiCond615) Conditional ??CrossCallReturnLabel_298
        CFI (cfiCond615) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond615) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond615) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond615) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond615) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond615) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond615) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond615) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond615) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond615) CFA_SP SP+0
        CFI (cfiCond615) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker616 Using cfiCommon1
        CFI (cfiPicker616) NoFunction
        CFI (cfiPicker616) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine99 & 0xFFFF
??CrossCallReturnLabel_154:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        CFI EndBlock cfiCond614
        CFI EndBlock cfiCond615
        CFI EndBlock cfiPicker616
        REQUIRE ??Subroutine148_0
        ; // Fall through to label ??Subroutine148_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine148_0:
        CFI Block cfiCond617 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_299
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond618 Using cfiCommon0
        CFI (cfiCond618) NoFunction
        CFI (cfiCond618) Conditional ??CrossCallReturnLabel_297
        CFI (cfiCond618) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond618) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond618) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond618) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond618) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond618) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond618) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond618) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond618) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond618) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond618) CFA_SP SP+0
        CFI (cfiCond618) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond619 Using cfiCommon0
        CFI (cfiCond619) NoFunction
        CFI (cfiCond619) Conditional ??CrossCallReturnLabel_298
        CFI (cfiCond619) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond619) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond619) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond619) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond619) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond619) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond619) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond619) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond619) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond619) CFA_SP SP+0
        CFI (cfiCond619) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker620 Using cfiCommon1
        CFI (cfiPicker620) NoFunction
        CFI (cfiPicker620) Picker
        LCALL   ?Subroutine95 & 0xFFFF
??CrossCallReturnLabel_301:
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond617
        CFI EndBlock cfiCond618
        CFI EndBlock cfiCond619
        CFI EndBlock cfiPicker620

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine95:
        CFI Block cfiCond621 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_300
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond622 Using cfiCommon0
        CFI (cfiCond622) NoFunction
        CFI (cfiCond622) Conditional ??CrossCallReturnLabel_301, ??CrossCallReturnLabel_297
        CFI (cfiCond622) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond622) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond622) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond622) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond622) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond622) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond622) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond622) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond622) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond622) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond622) CFA_SP SP+0
        CFI (cfiCond622) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond623 Using cfiCommon0
        CFI (cfiCond623) NoFunction
        CFI (cfiCond623) Conditional ??CrossCallReturnLabel_301, ??CrossCallReturnLabel_298
        CFI (cfiCond623) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond623) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond623) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond623) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond623) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond623) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond623) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond623) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond623) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond623) CFA_SP SP+0
        CFI (cfiCond623) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond624 Using cfiCommon0
        CFI (cfiCond624) NoFunction
        CFI (cfiCond624) Conditional ??CrossCallReturnLabel_301, ??CrossCallReturnLabel_299
        CFI (cfiCond624) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond624) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond624) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond624) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond624) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond624) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond624) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond624) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond624) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond624) CFA_SP SP+0
        CFI (cfiCond624) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker625 Using cfiCommon1
        CFI (cfiPicker625) NoFunction
        CFI (cfiPicker625) Picker
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond621
        CFI EndBlock cfiCond622
        CFI EndBlock cfiCond623
        CFI EndBlock cfiCond624
        CFI EndBlock cfiPicker625
// 2773 
// 2774 //devtag.pro.security
// 2775 #if 0
// 2776 void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
// 2777 {
// 2778   ZDSecMgrDevice_t        device;
// 2779   APSME_EstablishKeyRsp_t rsp;
// 2780 
// 2781 
// 2782   device.extAddr = ind->initExtAddr;
// 2783   device.secure  = ind->secure;
// 2784 
// 2785   if ( ind->secure == FALSE )
// 2786   {
// 2787     // SKKE from Trust Center is not secured between child and parent
// 2788     device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
// 2789     device.parentAddr = ind->srcAddr;
// 2790   }
// 2791   else
// 2792   {
// 2793     // SKKE from initiator should be secured
// 2794     device.nwkAddr    = ind->srcAddr;
// 2795     device.parentAddr = INVALID_NODE_ADDR;
// 2796   }
// 2797 
// 2798   rsp.dstAddr     = ind->srcAddr;
// 2799   rsp.initExtAddr = &ind->initExtAddr[0];
// 2800   rsp.secure      = ind->secure;
// 2801 
// 2802   // validate device for SKKE
// 2803   if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
// 2804   {
// 2805     rsp.accept = TRUE;
// 2806   }
// 2807   else
// 2808   {
// 2809     rsp.accept = FALSE;
// 2810   }
// 2811 
// 2812   APSME_EstablishKeyRsp( &rsp );
// 2813 }
// 2814 #endif
// 2815 
// 2816 /******************************************************************************
// 2817  * @fn          ZDSecMgrTransportKeyInd
// 2818  *
// 2819  * @brief       Process the ZDO_TransportKeyInd_t message.
// 2820  *
// 2821  * @param       ind - [in] ZDO_TransportKeyInd_t indication
// 2822  *
// 2823  * @return      none
// 2824  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2825 void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
ZDSecMgrTransportKeyInd:
        CFI Block cfiBlock626 Using cfiCommon0
        CFI Function ZDSecMgrTransportKeyInd
        CODE
// 2826 {
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrReadKeyFromNv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrAuthNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2827   uint8 index;
// 2828   uint8 zgPreConfigKey[SEC_KEY_LEN];
// 2829 
// 2830   // load Trust Center data if needed
// 2831   ZDSecMgrTCDataLoad( ind->srcExtAddr );
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV     A,R6
        ADD     A,#0x16
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??ZDSecMgrTCDataLoad?relay
// 2832 
// 2833   if ( ind->keyType == KEY_TYPE_TC_MASTER )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDSecMgrTransportKeyInd_0 & 0xFFFF
// 2834   {
// 2835     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2836     //ZDSecMgrTCMasterKey( ind );
// 2837     {
// 2838       if ( zgPreConfigKeys != TRUE )
// 2839       {
// 2840         // devtag.pro.security.todo - check if Trust Center address is configured and correct
// 2841         ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2842       }
// 2843       else
// 2844       {
// 2845         // error condition - reject key
// 2846       }
// 2847     }
// 2848   }
// 2849   else if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
// 2850             ( ind->keyType == 6                 ) ||
// 2851             ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
        XRL     A,#0x1
        JZ      ??ZDSecMgrTransportKeyInd_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      ??ZDSecMgrTransportKeyInd_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x5
        JZ      $+5
        LJMP    ??ZDSecMgrTransportKeyInd_0 & 0xFFFF
// 2852   {
// 2853     // check for dummy NWK key (all zeros)
// 2854     for ( index = 0;
??ZDSecMgrTransportKeyInd_1:
        MOV     R0,#0x0
??ZDSecMgrTransportKeyInd_2:
        MOV     ?V0 + 0,R0
        MOV     A,R6
        ADD     A,?V0 + 0
        LCALL   ??Subroutine162_0 & 0xFFFF
??CrossCallReturnLabel_387:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_3
// 2855           ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
// 2856           index++ );
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,#0x10
        JC      ??ZDSecMgrTransportKeyInd_2
// 2857 
// 2858     if ( index == SEC_KEY_LEN )
??ZDSecMgrTransportKeyInd_3:
        MOV     A,#0x10
        XRL     A,R0
        JNZ     ??ZDSecMgrTransportKeyInd_4
// 2859     {
// 2860       // load preconfigured key - once!!
// 2861       if ( !_NIB.nwkKeyLoaded )
        MOV     DPTR,#_NIB + 61
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_5
// 2862       {
// 2863         ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
        ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x62
        MOV     R3,#0x0
        LCALL   ??ZDSecMgrReadKeyFromNv?relay
// 2864         SSP_UpdateNwkKey( zgPreConfigKey, 0 );
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SSP_UpdateNwkKey?relay
// 2865         SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     R1,#0x0
        LCALL   ??SSP_SwitchNwkKey?relay
// 2866 
// 2867         // clear local copy of key
// 2868         osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        SJMP    ??ZDSecMgrTransportKeyInd_5
// 2869       }
// 2870     }
// 2871     else
// 2872     {
// 2873       SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
??ZDSecMgrTransportKeyInd_4:
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ?Subroutine113 & 0xFFFF
??CrossCallReturnLabel_173:
        LCALL   ??SSP_UpdateNwkKey?relay
// 2874       if ( !_NIB.nwkKeyLoaded )
        MOV     DPTR,#_NIB + 61
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_5
// 2875       {
// 2876         SSP_SwitchNwkKey( ind->keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SSP_SwitchNwkKey?relay
// 2877       }
// 2878     }
// 2879 
// 2880     // handle next step in authentication process
// 2881     ZDSecMgrAuthNwkKey();
??ZDSecMgrTransportKeyInd_5:
        ; Setup parameters for call to function ZDSecMgrAuthNwkKey
        LCALL   ??ZDSecMgrAuthNwkKey?relay
// 2882   }
// 2883   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 2884   {
// 2885     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2886     {
// 2887       // This should not happen because TCLK should not be Tx
// 2888     }
// 2889   }
// 2890   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
// 2891   {
// 2892     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2893     {
// 2894       uint16           ami;
// 2895       AddrMgrEntry_t   entry;
// 2896       ZDSecMgrEntry_t* entryZD;
// 2897 
// 2898       ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami );
// 2899 
// 2900       if ( ind->initiator == TRUE )
// 2901       {
// 2902         // get the ami data
// 2903         entry.user  = ADDRMGR_USER_SECURITY;
// 2904         entry.index = ami;
// 2905         AddrMgrEntryGet( &entry );
// 2906 
// 2907         if ( entry.nwkAddr != INVALID_NODE_ADDR )
// 2908         {
// 2909           APSME_EstablishKeyReq_t req;
// 2910           ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2911 
// 2912           ZDSecMgrEntryLookupAMI( ami, &entryZD );
// 2913 
// 2914           if ( entryZD == NULL )
// 2915           {
// 2916             // get new entry
// 2917             if ( ZDSecMgrEntryNew( &entryZD ) == ZSuccess )
// 2918             {
// 2919               // finish setting up entry
// 2920               entryZD->ami = ami;
// 2921             }
// 2922           }
// 2923 
// 2924           req.respExtAddr = ind->srcExtAddr;
// 2925           req.method      = APSME_SKKE_METHOD;
// 2926           req.dstAddr     = entry.nwkAddr;
// 2927           req.apsSecure   = FALSE;
// 2928           req.nwkSecure   = TRUE;
// 2929           APSME_EstablishKeyReq( &req );
// 2930         }
// 2931       }
// 2932       else
// 2933       {
// 2934         if ( ami == INVALID_NODE_ADDR )
// 2935         {
// 2936           // store new EXT address
// 2937           ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
// 2938         }
// 2939 
// 2940         ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2941       }
// 2942     }
// 2943   }
// 2944   else if ( ind->keyType == KEY_TYPE_APP_LINK )
// 2945   {
// 2946     if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH ) ||
// 2947          ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
// 2948     {
// 2949       uint16           ami;
// 2950       ZDSecMgrEntry_t* entry;
// 2951 
// 2952       // get the address index
// 2953       if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
// 2954       {
// 2955         // store new EXT address
// 2956         ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
// 2957         ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2958       }
// 2959 
// 2960       ZDSecMgrEntryLookupAMI( ami, &entry );
// 2961 
// 2962       if ( entry == NULL )
// 2963       {
// 2964         // get new entry
// 2965         if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
// 2966         {
// 2967           // finish setting up entry
// 2968           entry->ami = ami;
// 2969         }
// 2970       }
// 2971 
// 2972       ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
// 2973 
// 2974 #if defined NV_RESTORE
// 2975       ZDSecMgrWriteNV();  // Write the control record for the new established link key to NV.
// 2976 #endif
// 2977     }
// 2978   }
// 2979 }
??ZDSecMgrTransportKeyInd_0:
        MOV     A,#0x10
        LJMP    ??Subroutine132_0 & 0xFFFF
        CFI EndBlock cfiBlock626
// 2980 
// 2981 /******************************************************************************
// 2982  * @fn          ZDSecMgrUpdateDeviceInd
// 2983  *
// 2984  * @brief       Process the ZDO_UpdateDeviceInd_t message.
// 2985  *
// 2986  * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
// 2987  *
// 2988  * @return      none
// 2989  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2990 void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
ZDSecMgrUpdateDeviceInd:
        CFI Block cfiBlock627 Using cfiCommon0
        CFI Function ZDSecMgrUpdateDeviceInd
        CODE
// 2991 {
        FUNCALL ZDSecMgrUpdateDeviceInd, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 2992   ZDSecMgrDevice_t device;
// 2993 
// 2994   device.nwkAddr    = ind->devAddr;
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine163_0 & 0xFFFF
??CrossCallReturnLabel_378:
        LCALL   ?Subroutine35 & 0xFFFF
// 2995   device.extAddr    = ind->devExtAddr;
??CrossCallReturnLabel_240:
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
// 2996   device.parentAddr = ind->srcAddr;
??CrossCallReturnLabel_16:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
// 2997 
// 2998   //if ( ( ind->status == APSME_UD_SECURED_JOIN   ) ||
// 2999   //     ( ind->status == APSME_UD_UNSECURED_JOIN )   )
// 3000   //{
// 3001   //  if ( ind->status == APSME_UD_SECURED_JOIN )
// 3002   //  {
// 3003   //    device.secure = TRUE;
// 3004   //  }
// 3005   //  else
// 3006   //  {
// 3007   //    device.secure = FALSE;
// 3008   //  }
// 3009 
// 3010     // try to join this device
// 3011     ZDSecMgrDeviceJoin( &device );
??CrossCallReturnLabel_6:
        LCALL   ??ZDSecMgrDeviceJoin?relay
// 3012   //}
// 3013 }
        LJMP    ?Subroutine9 & 0xFFFF
        CFI EndBlock cfiBlock627

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond628 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond629 Using cfiCommon0
        CFI (cfiCond629) NoFunction
        CFI (cfiCond629) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond629) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond629) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond629) CFA_SP SP+-5
        CFI (cfiCond629) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker630 Using cfiCommon1
        CFI (cfiPicker630) NoFunction
        CFI (cfiPicker630) Picker
        LCALL   ?Subroutine94 & 0xFFFF
??CrossCallReturnLabel_273:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine107 & 0xFFFF
??CrossCallReturnLabel_350:
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond628
        CFI EndBlock cfiCond629
        CFI EndBlock cfiPicker630

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond631 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond632 Using cfiCommon0
        CFI (cfiCond632) NoFunction
        CFI (cfiCond632) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond632) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond632) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond632) CFA_SP SP+-5
        CFI (cfiCond632) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond633 Using cfiCommon0
        CFI (cfiCond633) NoFunction
        CFI (cfiCond633) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond633) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond633) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond633) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond633) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond633) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond633) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond633) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond633) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond633) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond633) CFA_SP SP+0
        CFI (cfiCond633) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker634 Using cfiCommon1
        CFI (cfiPicker634) NoFunction
        CFI (cfiPicker634) Picker
        LCALL   ?Subroutine90 & 0xFFFF
??CrossCallReturnLabel_302:
        RET
        CFI EndBlock cfiCond631
        CFI EndBlock cfiCond632
        CFI EndBlock cfiCond633
        CFI EndBlock cfiPicker634

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine90:
        CFI Block cfiCond635 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_302, ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond636 Using cfiCommon0
        CFI (cfiCond636) NoFunction
        CFI (cfiCond636) Conditional ??CrossCallReturnLabel_302, ??CrossCallReturnLabel_6
        CFI (cfiCond636) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond636) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond636) CFA_SP SP+-5
        CFI (cfiCond636) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond637 Using cfiCommon0
        CFI (cfiCond637) NoFunction
        CFI (cfiCond637) Conditional ??CrossCallReturnLabel_302, ??CrossCallReturnLabel_7
        CFI (cfiCond637) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond637) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond637) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond637) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond637) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond637) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond637) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond637) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond637) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond637) CFA_SP SP+0
        CFI (cfiCond637) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond638 Using cfiCommon0
        CFI (cfiCond638) NoFunction
        CFI (cfiCond638) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_3
        CFI (cfiCond638) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond638) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond638) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond638) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond638) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond638) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond638) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond638) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond638) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond638) CFA_SP SP+0
        CFI (cfiCond638) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond639 Using cfiCommon0
        CFI (cfiCond639) NoFunction
        CFI (cfiCond639) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_4
        CFI (cfiCond639) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond639) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond639) CFA_SP SP+-5
        CFI (cfiCond639) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker640 Using cfiCommon1
        CFI (cfiPicker640) NoFunction
        CFI (cfiPicker640) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        CFI EndBlock cfiCond635
        CFI EndBlock cfiCond636
        CFI EndBlock cfiCond637
        CFI EndBlock cfiCond638
        CFI EndBlock cfiCond639
        CFI EndBlock cfiPicker640
        REQUIRE ??Subroutine149_0
        ; // Fall through to label ??Subroutine149_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine149_0:
        CFI Block cfiCond641 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond642 Using cfiCommon0
        CFI (cfiCond642) NoFunction
        CFI (cfiCond642) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_1
        CFI (cfiCond642) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond642) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond642) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond642) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond642) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond642) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond642) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond642) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond642) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond642) CFA_SP SP+0
        CFI (cfiCond642) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond643 Using cfiCommon0
        CFI (cfiCond643) NoFunction
        CFI (cfiCond643) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_2
        CFI (cfiCond643) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond643) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond643) CFA_SP SP+-5
        CFI (cfiCond643) CFA_XSP16 add(XSP16, 4)
        CFI Block cfiCond644 Using cfiCommon0
        CFI (cfiCond644) NoFunction
        CFI (cfiCond644) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_8
        CFI (cfiCond644) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond644) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond644) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond644) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond644) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond644) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond644) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond644) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond644) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond644) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond644) CFA_SP SP+0
        CFI (cfiCond644) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond645 Using cfiCommon0
        CFI (cfiCond645) NoFunction
        CFI (cfiCond645) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_9
        CFI (cfiCond645) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond645) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond645) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond645) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond645) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond645) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond645) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond645) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond645) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond645) CFA_SP SP+0
        CFI (cfiCond645) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond646 Using cfiCommon0
        CFI (cfiCond646) NoFunction
        CFI (cfiCond646) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_10
        CFI (cfiCond646) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond646) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond646) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond646) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond646) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond646) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond646) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond646) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond646) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond646) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond646) CFA_SP SP+0
        CFI (cfiCond646) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond647 Using cfiCommon0
        CFI (cfiCond647) NoFunction
        CFI (cfiCond647) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_11
        CFI (cfiCond647) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond647) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond647) CFA_SP SP+-5
        CFI (cfiCond647) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond648 Using cfiCommon0
        CFI (cfiCond648) NoFunction
        CFI (cfiCond648) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_12
        CFI (cfiCond648) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond648) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond648) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond648) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond648) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond648) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond648) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond648) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond648) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond648) CFA_SP SP+0
        CFI (cfiCond648) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond649 Using cfiCommon0
        CFI (cfiCond649) NoFunction
        CFI (cfiCond649) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_13
        CFI (cfiCond649) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond649) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond649) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond649) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond649) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond649) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond649) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond649) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond649) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond649) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond649) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond649) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond649) CFA_SP SP+0
        CFI (cfiCond649) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond650 Using cfiCommon0
        CFI (cfiCond650) NoFunction
        CFI (cfiCond650) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_14
        CFI (cfiCond650) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond650) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond650) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond650) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond650) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond650) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond650) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond650) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond650) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond650) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond650) CFA_SP SP+0
        CFI (cfiCond650) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond651 Using cfiCommon0
        CFI (cfiCond651) NoFunction
        CFI (cfiCond651) Conditional ??CrossCallReturnLabel_302, ??CrossCallReturnLabel_5
        CFI (cfiCond651) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond651) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond651) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond651) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond651) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond651) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond651) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond651) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond651) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond651) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond651) CFA_SP SP+0
        CFI (cfiCond651) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond652 Using cfiCommon0
        CFI (cfiCond652) NoFunction
        CFI (cfiCond652) Conditional ??CrossCallReturnLabel_302, ??CrossCallReturnLabel_6
        CFI (cfiCond652) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond652) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond652) CFA_SP SP+-5
        CFI (cfiCond652) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond653 Using cfiCommon0
        CFI (cfiCond653) NoFunction
        CFI (cfiCond653) Conditional ??CrossCallReturnLabel_302, ??CrossCallReturnLabel_7
        CFI (cfiCond653) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond653) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond653) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond653) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond653) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond653) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond653) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond653) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond653) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond653) CFA_SP SP+0
        CFI (cfiCond653) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond654 Using cfiCommon0
        CFI (cfiCond654) NoFunction
        CFI (cfiCond654) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_3
        CFI (cfiCond654) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond654) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond654) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond654) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond654) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond654) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond654) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond654) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond654) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond654) CFA_SP SP+0
        CFI (cfiCond654) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond655 Using cfiCommon0
        CFI (cfiCond655) NoFunction
        CFI (cfiCond655) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_4
        CFI (cfiCond655) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond655) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond655) CFA_SP SP+-5
        CFI (cfiCond655) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker656 Using cfiCommon1
        CFI (cfiPicker656) NoFunction
        CFI (cfiPicker656) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        ; Setup parameters for call to function APSME_AuthenticateReq
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function APSME_RequestKeyReq
        ; Setup parameters for call to function APSME_EstablishKeyReq
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function NLME_LeaveReq
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        ; Setup parameters for call to function APSME_AuthenticateReq
        ; Setup parameters for call to function ZDSecMgrDeviceNew
        ; Setup parameters for call to function APSME_EstablishKeyRsp
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond641
        CFI EndBlock cfiCond642
        CFI EndBlock cfiCond643
        CFI EndBlock cfiCond644
        CFI EndBlock cfiCond645
        CFI EndBlock cfiCond646
        CFI EndBlock cfiCond647
        CFI EndBlock cfiCond648
        CFI EndBlock cfiCond649
        CFI EndBlock cfiCond650
        CFI EndBlock cfiCond651
        CFI EndBlock cfiCond652
        CFI EndBlock cfiCond653
        CFI EndBlock cfiCond654
        CFI EndBlock cfiCond655
        CFI EndBlock cfiPicker656
// 3014 
// 3015 /******************************************************************************
// 3016  * @fn          ZDSecMgrRemoveDeviceInd
// 3017  *
// 3018  * @brief       Process the ZDO_RemoveDeviceInd_t message.
// 3019  *
// 3020  * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
// 3021  *
// 3022  * @return      none
// 3023  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3024 void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
ZDSecMgrRemoveDeviceInd:
        CFI Block cfiBlock657 Using cfiCommon0
        CFI Function ZDSecMgrRemoveDeviceInd
        CODE
// 3025 {
        FUNCALL ZDSecMgrRemoveDeviceInd, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 3026   ZDSecMgrDevice_t device;
// 3027 
// 3028   // only accept from Trust Center
// 3029   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine152_0 & 0xFFFF
??CrossCallReturnLabel_316:
        JNZ     ??CrossCallReturnLabel_3
// 3030   {
// 3031     // look up NWK address
// 3032     if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        ADD     A,#0x4
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_78:
        JNZ     ??CrossCallReturnLabel_3
// 3033     {
// 3034       device.parentAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ??Subroutine148_0 & 0xFFFF
// 3035       device.extAddr    = ind->childExtAddr;
// 3036 
// 3037       // remove device
// 3038       ZDSecMgrDeviceRemove( &device );
// 3039     }
// 3040   }
??CrossCallReturnLabel_299:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
// 3041 }
??CrossCallReturnLabel_3:
        MOV     A,#0xa
        LJMP    ??Subroutine136_0 & 0xFFFF
        CFI EndBlock cfiBlock657

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine51:
        CFI Block cfiCond658 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_306
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond659 Using cfiCommon0
        CFI (cfiCond659) NoFunction
        CFI (cfiCond659) Conditional ??CrossCallReturnLabel_307
        CFI (cfiCond659) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond659) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond659) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond659) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond659) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond659) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond659) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond659) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond659) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond659) CFA_SP SP+0
        CFI (cfiCond659) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker660 Using cfiCommon1
        CFI (cfiPicker660) NoFunction
        CFI (cfiPicker660) Picker
        MOV     R3,A
        CFI EndBlock cfiCond658
        CFI EndBlock cfiCond659
        CFI EndBlock cfiPicker660
        REQUIRE ??Subroutine150_0
        ; // Fall through to label ??Subroutine150_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine150_0:
        CFI Block cfiCond661 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_308
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond662 Using cfiCommon0
        CFI (cfiCond662) NoFunction
        CFI (cfiCond662) Conditional ??CrossCallReturnLabel_306
        CFI (cfiCond662) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond662) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond662) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond662) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond662) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond662) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond662) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond662) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond662) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond662) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond662) CFA_SP SP+0
        CFI (cfiCond662) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond663 Using cfiCommon0
        CFI (cfiCond663) NoFunction
        CFI (cfiCond663) Conditional ??CrossCallReturnLabel_307
        CFI (cfiCond663) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond663) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond663) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond663) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond663) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond663) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond663) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond663) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond663) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond663) CFA_SP SP+0
        CFI (cfiCond663) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker664 Using cfiCommon1
        CFI (cfiPicker664) NoFunction
        CFI (cfiPicker664) Picker
        LCALL   ??ZDSecMgrCtrlLookup?relay
        CFI EndBlock cfiCond661
        CFI EndBlock cfiCond662
        CFI EndBlock cfiCond663
        CFI EndBlock cfiPicker664
        REQUIRE ??Subroutine151_0
        ; // Fall through to label ??Subroutine151_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine151_0:
        CFI Block cfiCond665 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_318
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond666 Using cfiCommon0
        CFI (cfiCond666) NoFunction
        CFI (cfiCond666) Conditional ??CrossCallReturnLabel_319
        CFI (cfiCond666) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond666) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond666) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond666) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond666) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond666) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond666) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond666) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond666) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond666) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond666) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond666) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond666) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond666) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond666) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond666) CFA_SP SP+0
        CFI (cfiCond666) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond667 Using cfiCommon0
        CFI (cfiCond667) NoFunction
        CFI (cfiCond667) Conditional ??CrossCallReturnLabel_320
        CFI (cfiCond667) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond667) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond667) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond667) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond667) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond667) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond667) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond667) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond667) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond667) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond667) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond667) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond667) CFA_SP SP+0
        CFI (cfiCond667) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond668 Using cfiCommon0
        CFI (cfiCond668) NoFunction
        CFI (cfiCond668) Conditional ??CrossCallReturnLabel_308
        CFI (cfiCond668) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond668) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond668) CFA_SP SP+-5
        CFI (cfiCond668) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond669 Using cfiCommon0
        CFI (cfiCond669) NoFunction
        CFI (cfiCond669) Conditional ??CrossCallReturnLabel_306
        CFI (cfiCond669) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond669) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond669) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond669) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond669) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond669) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond669) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond669) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond669) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond669) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond669) CFA_SP SP+0
        CFI (cfiCond669) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond670 Using cfiCommon0
        CFI (cfiCond670) NoFunction
        CFI (cfiCond670) Conditional ??CrossCallReturnLabel_307
        CFI (cfiCond670) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond670) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond670) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond670) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond670) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond670) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond670) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond670) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond670) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond670) CFA_SP SP+0
        CFI (cfiCond670) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker671 Using cfiCommon1
        CFI (cfiPicker671) NoFunction
        CFI (cfiPicker671) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond665
        CFI EndBlock cfiCond666
        CFI EndBlock cfiCond667
        CFI EndBlock cfiCond668
        CFI EndBlock cfiCond669
        CFI EndBlock cfiCond670
        CFI EndBlock cfiPicker671
        REQUIRE ??Subroutine152_0
        ; // Fall through to label ??Subroutine152_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine152_0:
        CFI Block cfiCond672 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_309
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond673 Using cfiCommon0
        CFI (cfiCond673) NoFunction
        CFI (cfiCond673) Conditional ??CrossCallReturnLabel_310
        CFI (cfiCond673) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond673) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond673) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond673) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond673) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond673) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond673) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond673) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond673) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond673) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond673) CFA_SP SP+0
        CFI (cfiCond673) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond674 Using cfiCommon0
        CFI (cfiCond674) NoFunction
        CFI (cfiCond674) Conditional ??CrossCallReturnLabel_311
        CFI (cfiCond674) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond674) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond674) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond674) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond674) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond674) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond674) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond674) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond674) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond674) CFA_SP SP+0
        CFI (cfiCond674) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond675 Using cfiCommon0
        CFI (cfiCond675) NoFunction
        CFI (cfiCond675) Conditional ??CrossCallReturnLabel_312
        CFI (cfiCond675) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond675) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond675) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond675) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond675) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond675) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond675) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond675) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond675) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond675) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond675) CFA_SP SP+0
        CFI (cfiCond675) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond676 Using cfiCommon0
        CFI (cfiCond676) NoFunction
        CFI (cfiCond676) Conditional ??CrossCallReturnLabel_313
        CFI (cfiCond676) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond676) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond676) CFA_SP SP+-5
        CFI Block cfiCond677 Using cfiCommon0
        CFI (cfiCond677) NoFunction
        CFI (cfiCond677) Conditional ??CrossCallReturnLabel_314
        CFI (cfiCond677) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond677) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond677) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond677) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond677) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond677) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond677) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond677) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond677) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond677) CFA_SP SP+0
        CFI (cfiCond677) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond678 Using cfiCommon0
        CFI (cfiCond678) NoFunction
        CFI (cfiCond678) Conditional ??CrossCallReturnLabel_315
        CFI (cfiCond678) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond678) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond678) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond678) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond678) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond678) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond678) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond678) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond678) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond678) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond678) CFA_SP SP+0
        CFI (cfiCond678) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond679 Using cfiCommon0
        CFI (cfiCond679) NoFunction
        CFI (cfiCond679) Conditional ??CrossCallReturnLabel_316
        CFI (cfiCond679) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond679) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond679) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond679) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond679) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond679) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond679) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond679) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond679) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond679) CFA_SP SP+0
        CFI (cfiCond679) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond680 Using cfiCommon0
        CFI (cfiCond680) NoFunction
        CFI (cfiCond680) Conditional ??CrossCallReturnLabel_317
        CFI (cfiCond680) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond680) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond680) CFA_SP SP+-5
        CFI Block cfiCond681 Using cfiCommon0
        CFI (cfiCond681) NoFunction
        CFI (cfiCond681) Conditional ??CrossCallReturnLabel_318
        CFI (cfiCond681) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond681) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond681) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond681) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond681) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond681) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond681) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond681) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond681) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond681) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond681) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond681) CFA_SP SP+0
        CFI (cfiCond681) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond682 Using cfiCommon0
        CFI (cfiCond682) NoFunction
        CFI (cfiCond682) Conditional ??CrossCallReturnLabel_319
        CFI (cfiCond682) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond682) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond682) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond682) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond682) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond682) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond682) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond682) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond682) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond682) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond682) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond682) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond682) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond682) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond682) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond682) CFA_SP SP+0
        CFI (cfiCond682) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond683 Using cfiCommon0
        CFI (cfiCond683) NoFunction
        CFI (cfiCond683) Conditional ??CrossCallReturnLabel_320
        CFI (cfiCond683) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond683) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond683) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond683) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond683) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond683) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond683) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond683) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond683) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond683) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond683) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond683) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond683) CFA_SP SP+0
        CFI (cfiCond683) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond684 Using cfiCommon0
        CFI (cfiCond684) NoFunction
        CFI (cfiCond684) Conditional ??CrossCallReturnLabel_308
        CFI (cfiCond684) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond684) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond684) CFA_SP SP+-5
        CFI (cfiCond684) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond685 Using cfiCommon0
        CFI (cfiCond685) NoFunction
        CFI (cfiCond685) Conditional ??CrossCallReturnLabel_306
        CFI (cfiCond685) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond685) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond685) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond685) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond685) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond685) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond685) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond685) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond685) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond685) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond685) CFA_SP SP+0
        CFI (cfiCond685) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond686 Using cfiCommon0
        CFI (cfiCond686) NoFunction
        CFI (cfiCond686) Conditional ??CrossCallReturnLabel_307
        CFI (cfiCond686) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond686) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond686) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond686) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond686) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond686) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond686) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond686) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond686) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond686) CFA_SP SP+0
        CFI (cfiCond686) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker687 Using cfiCommon1
        CFI (cfiPicker687) NoFunction
        CFI (cfiPicker687) Picker
        LCALL   ?Subroutine106 & 0xFFFF
??CrossCallReturnLabel_323:
        RET
        CFI EndBlock cfiCond672
        CFI EndBlock cfiCond673
        CFI EndBlock cfiCond674
        CFI EndBlock cfiCond675
        CFI EndBlock cfiCond676
        CFI EndBlock cfiCond677
        CFI EndBlock cfiCond678
        CFI EndBlock cfiCond679
        CFI EndBlock cfiCond680
        CFI EndBlock cfiCond681
        CFI EndBlock cfiCond682
        CFI EndBlock cfiCond683
        CFI EndBlock cfiCond684
        CFI EndBlock cfiCond685
        CFI EndBlock cfiCond686
        CFI EndBlock cfiPicker687

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
        CFI Block cfiCond688 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_77
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond689 Using cfiCommon0
        CFI (cfiCond689) NoFunction
        CFI (cfiCond689) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond689) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond689) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond689) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond689) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond689) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond689) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond689) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond689) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond689) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond689) CFA_SP SP+0
        CFI (cfiCond689) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker690 Using cfiCommon1
        CFI (cfiPicker690) NoFunction
        CFI (cfiPicker690) Picker
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??APSME_LookupNwkAddr?relay
        MOV     A,R1
        XRL     A,#0x1
        RET
        CFI EndBlock cfiCond688
        CFI EndBlock cfiCond689
        CFI EndBlock cfiPicker690
// 3042 
// 3043 /******************************************************************************
// 3044  * @fn          ZDSecMgrRequestKeyInd
// 3045  *
// 3046  * @brief       Process the ZDO_RequestKeyInd_t message.
// 3047  *
// 3048  * @param       ind - [in] ZDO_RequestKeyInd_t indication
// 3049  *
// 3050  * @return      none
// 3051  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3052 void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
ZDSecMgrRequestKeyInd:
        CFI Block cfiBlock691 Using cfiCommon0
        CFI Function ZDSecMgrRequestKeyInd
        CODE
// 3053 {
        FUNCALL ZDSecMgrRequestKeyInd, ZDSecMgrAppKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3054   if ( ind->keyType == KEY_TYPE_NWK )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDSecMgrRequestKeyInd_0
// 3055   {
// 3056   }
// 3057   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDSecMgrRequestKeyInd_0
// 3058   {
// 3059     ZDSecMgrAppKeyReq( ind );
        ; Setup parameters for call to function ZDSecMgrAppKeyReq
        LCALL   ??ZDSecMgrAppKeyReq?relay
// 3060   }
// 3061   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 3062   {
// 3063   }
// 3064   //else ignore
// 3065 }
??ZDSecMgrRequestKeyInd_0:
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock691
// 3066 
// 3067 /******************************************************************************
// 3068  * @fn          ZDSecMgrSwitchKeyInd
// 3069  *
// 3070  * @brief       Process the ZDO_SwitchKeyInd_t message.
// 3071  *
// 3072  * @param       ind - [in] ZDO_SwitchKeyInd_t indication
// 3073  *
// 3074  * @return      none
// 3075  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3076 void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
ZDSecMgrSwitchKeyInd:
        CFI Block cfiBlock692 Using cfiCommon0
        CFI Function ZDSecMgrSwitchKeyInd
        CODE
// 3077 {
        FUNCALL ZDSecMgrSwitchKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchKeyInd, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3078   SSP_SwitchNwkKey( ind->keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SSP_SwitchNwkKey?relay
// 3079 
// 3080   // Save if nv
// 3081   ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   ??ZDApp_NVUpdate?relay
// 3082 }
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock692
// 3083 
// 3084 /******************************************************************************
// 3085  * @fn          ZDSecMgrAuthenticateInd
// 3086  *
// 3087  * @brief       Process the ZDO_AuthenticateInd_t message.
// 3088  *
// 3089  * @param       ind - [in] ZDO_AuthenticateInd_t indication
// 3090  *
// 3091  * @return      none
// 3092  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3093 void ZDSecMgrAuthenticateInd( ZDO_AuthenticateInd_t* ind )
ZDSecMgrAuthenticateInd:
        CFI Block cfiBlock693 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticateInd
        CODE
// 3094 {
        FUNCALL ZDSecMgrAuthenticateInd, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticateInd, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticateInd, APSME_AuthenticateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 3095   APSME_AuthenticateReq_t req;
// 3096   AddrMgrEntry_t          entry;
// 3097 
// 3098   // update the address manager
// 3099   //---------------------------------------------------------------------------
// 3100   // note:
// 3101   // required for EA processing, but ultimately EA logic could also use the
// 3102   // neighbor table to look up addresses -- also(IF using EA) the neighbor
// 3103   // table is supposed to have authentication states for neighbors
// 3104   //---------------------------------------------------------------------------
// 3105   entry.user    = ADDRMGR_USER_SECURITY;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine23 & 0xFFFF
// 3106   entry.nwkAddr = ind->aps.initNwkAddr;
??CrossCallReturnLabel_29:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 3107   AddrMgrExtAddrSet( entry.extAddr, ind->aps.initExtAddr );
??CrossCallReturnLabel_235:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R6
        ADD     A,#0x4
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
// 3108 
// 3109   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryUpdate?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrAuthenticateInd_0
// 3110   {
// 3111     // set request fields
// 3112     req.nwkAddr   = ind->aps.initNwkAddr;
        LCALL   ?Subroutine14 & 0xFFFF
// 3113     req.extAddr   = ind->aps.initExtAddr;
??CrossCallReturnLabel_298:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine128_0 & 0xFFFF
// 3114     req.action    = APSME_EA_ACCEPT;
??CrossCallReturnLabel_236:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 3115     req.challenge = ind->aps.challenge;
        MOV     A,R6
        ADD     A,#0xc
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
// 3116 
// 3117     // start EA processing
// 3118     APSME_AuthenticateReq( &req );
// 3119   }
??CrossCallReturnLabel_7:
        LCALL   ??APSME_AuthenticateReq?relay
// 3120 }
??ZDSecMgrAuthenticateInd_0:
        MOV     A,#0x14
        LJMP    ??Subroutine136_0 & 0xFFFF
        CFI EndBlock cfiBlock693

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond694 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond695 Using cfiCommon0
        CFI (cfiCond695) NoFunction
        CFI (cfiCond695) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond695) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond695) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond695) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond695) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond695) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond695) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond695) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond695) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond695) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond695) CFA_SP SP+0
        CFI (cfiCond695) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker696 Using cfiCommon1
        CFI (cfiPicker696) NoFunction
        CFI (cfiPicker696) Picker
        LCALL   ?Subroutine91 & 0xFFFF
??CrossCallReturnLabel_143:
        MOV     A,#0x8
        RET
        CFI EndBlock cfiCond694
        CFI EndBlock cfiCond695
        CFI EndBlock cfiPicker696
// 3121 
// 3122 /******************************************************************************
// 3123  * @fn          ZDSecMgrAuthenticateCfm
// 3124  *
// 3125  * @brief       Process the ZDO_AuthenticateCfm_t message.
// 3126  *
// 3127  * @param       cfm - [in] ZDO_AuthenticateCfm_t confirmation
// 3128  *
// 3129  * @return      none
// 3130  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3131 void ZDSecMgrAuthenticateCfm( ZDO_AuthenticateCfm_t* cfm )
ZDSecMgrAuthenticateCfm:
        CFI Block cfiBlock697 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticateCfm
        CODE
// 3132 {
        FUNCALL ZDSecMgrAuthenticateCfm, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3133   if ( cfm->aps.status == ZSuccess )
        MOV     A,R2
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine163_0 & 0xFFFF
??CrossCallReturnLabel_379:
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrAuthenticateCfm_0
// 3134   {
// 3135     if ( ( cfm->aps.initiator == TRUE ) && ( devState == DEV_END_DEVICE_UNAUTH ) )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrAuthenticateCfm_0
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrAuthenticateCfm_0
// 3136     {
// 3137       // inform ZDO that device has been authenticated
// 3138       osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
// 3139     }
// 3140   }
// 3141 }
??ZDSecMgrAuthenticateCfm_0:
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock697
// 3142 
// 3143 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3144 /******************************************************************************
// 3145  * @fn          ZDSecMgrUpdateNwkKey
// 3146  *
// 3147  * @brief       Load a new NWK key and trigger a network wide update.
// 3148  *
// 3149  * @param       key       - [in] new NWK key
// 3150  * @param       keySeqNum - [in] new NWK key sequence number
// 3151  *
// 3152  * @return      ZStatus_t
// 3153  */
// 3154 ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
// 3155 {
// 3156   ZStatus_t               status;
// 3157   APSME_TransportKeyReq_t req;
// 3158 
// 3159   // initialize common elements of local variables
// 3160   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3161   {
// 3162     req.keyType   = KEY_TYPE_NWK_HIGH;
// 3163   }
// 3164   else
// 3165   {
// 3166     req.keyType   = KEY_TYPE_NWK;
// 3167   }
// 3168 
// 3169   req.dstAddr   = dstAddr;
// 3170   req.keySeqNum = keySeqNum;
// 3171   req.key       = key;
// 3172   req.extAddr   = NULL;
// 3173   req.nwkSecure = TRUE;
// 3174   req.apsSecure = TRUE;
// 3175   req.tunnel    = NULL;
// 3176 
// 3177   if (( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH ) ||
// 3178       ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ))
// 3179   {
// 3180     ZDSecMgrEntry_t*        entry;
// 3181     uint16                  index;
// 3182     AddrMgrEntry_t          addrEntry;
// 3183 
// 3184     addrEntry.user = ADDRMGR_USER_SECURITY;
// 3185 
// 3186     status = ZFailure;
// 3187 
// 3188     // verify data is available
// 3189     if ( ZDSecMgrEntries != NULL )
// 3190     {
// 3191       // find available entry
// 3192       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
// 3193       {
// 3194         if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
// 3195         {
// 3196           // return successful result
// 3197           entry = &ZDSecMgrEntries[index];
// 3198 
// 3199           // get NWK address
// 3200           addrEntry.index = entry->ami;
// 3201           if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
// 3202           {
// 3203             req.dstAddr = addrEntry.nwkAddr;
// 3204             req.extAddr = addrEntry.extAddr;
// 3205             status = APSME_TransportKeyReq( &req );
// 3206           }
// 3207         }
// 3208       }
// 3209     }
// 3210   }
// 3211   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 3212   {
// 3213     status = APSME_TransportKeyReq( &req );
// 3214   }
// 3215 
// 3216   SSP_UpdateNwkKey( key, keySeqNum );
// 3217 
// 3218   // Save if nv
// 3219   ZDApp_NVUpdate();
// 3220 
// 3221   return status;
// 3222 }
// 3223 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 3224 
// 3225 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3226 /******************************************************************************
// 3227  * @fn          ZDSecMgrSwitchNwkKey
// 3228  *
// 3229  * @brief       Causes the NWK key to switch via a network wide command.
// 3230  *
// 3231  * @param       keySeqNum - [in] new NWK key sequence number
// 3232  *
// 3233  * @return      ZStatus_t
// 3234  */
// 3235 ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
// 3236 {
// 3237   ZStatus_t            status;
// 3238   APSME_SwitchKeyReq_t req;
// 3239 
// 3240   // initialize common elements of local variables
// 3241   req.dstAddr = dstAddr;
// 3242   req.keySeqNum = keySeqNum;
// 3243 
// 3244   if (( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH ) ||
// 3245       ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ))
// 3246   {
// 3247     ZDSecMgrEntry_t*     entry;
// 3248     uint16               index;
// 3249     AddrMgrEntry_t       addrEntry;
// 3250 
// 3251     addrEntry.user = ADDRMGR_USER_SECURITY;
// 3252 
// 3253     status = ZFailure;
// 3254 
// 3255     // verify data is available
// 3256     if ( ZDSecMgrEntries != NULL )
// 3257     {
// 3258       // find available entry
// 3259       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
// 3260       {
// 3261         if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
// 3262         {
// 3263           // return successful result
// 3264           entry = &ZDSecMgrEntries[index];
// 3265 
// 3266           // get NWK address
// 3267           addrEntry.index = entry->ami;
// 3268 
// 3269           if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
// 3270           {
// 3271             req.dstAddr = addrEntry.nwkAddr;
// 3272             status = APSME_SwitchKeyReq( &req );
// 3273           }
// 3274         }
// 3275       }
// 3276     }
// 3277   }
// 3278   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 3279   {
// 3280     status = APSME_SwitchKeyReq( &req );
// 3281   }
// 3282 
// 3283   SSP_SwitchNwkKey( keySeqNum );
// 3284 
// 3285   // Save if nv
// 3286   ZDApp_NVUpdate();
// 3287 
// 3288   return status;
// 3289 }
// 3290 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 3291 
// 3292 /******************************************************************************
// 3293  * @fn          ZDSecMgrRequestAppKey
// 3294  *
// 3295  * @brief       Request an application key with partner.
// 3296  *
// 3297  * @param       partExtAddr - [in] partner extended address
// 3298  *
// 3299  * @return      ZStatus_t
// 3300  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3301 ZStatus_t ZDSecMgrRequestAppKey( uint8 *partExtAddr )
ZDSecMgrRequestAppKey:
        CFI Block cfiBlock698 Using cfiCommon0
        CFI Function ZDSecMgrRequestAppKey
        CODE
// 3302 {
        FUNCALL ZDSecMgrRequestAppKey, APSME_RequestKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 4)
// 3303   ZStatus_t status;
// 3304   APSME_RequestKeyReq_t req;
// 3305 
// 3306   req.dstAddr = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
// 3307   req.keyType = KEY_TYPE_APP_MASTER;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 3308 
// 3309   req.partExtAddr = partExtAddr;
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
// 3310   status = APSME_RequestKeyReq( &req );
// 3311 
// 3312   return status;
??CrossCallReturnLabel_2:
        LCALL   ??APSME_RequestKeyReq?relay
        MOV     A,#0x4
        LJMP    ??Subroutine126_0 & 0xFFFF
        CFI EndBlock cfiBlock698
// 3313 }
// 3314 
// 3315 #if ( ZG_BUILD_JOINING_TYPE )
// 3316 /******************************************************************************
// 3317  * @fn          ZDSecMgrSetupPartner
// 3318  *
// 3319  * @brief       Setup for application key partner.
// 3320  *
// 3321  * @param       partNwkAddr - [in] partner network address
// 3322  *
// 3323  * @return      ZStatus_t
// 3324  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3325 ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
ZDSecMgrSetupPartner:
        CFI Block cfiBlock699 Using cfiCommon0
        CFI Function ZDSecMgrSetupPartner
        CODE
// 3326 {
        FUNCALL ZDSecMgrSetupPartner, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 3327   AddrMgrEntry_t entry;
// 3328   ZStatus_t      status;
// 3329 
// 3330   status = ZFailure;
        MOV     ?V0 + 2,#0x1
// 3331 
// 3332   // update the address manager
// 3333   entry.user    = ADDRMGR_USER_SECURITY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
// 3334   entry.nwkAddr = partNwkAddr;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine31 & 0xFFFF
// 3335   AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
??CrossCallReturnLabel_46:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine79 & 0xFFFF
// 3336 
// 3337   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_126:
        JNZ     ??ZDSecMgrSetupPartner_0
// 3338   {
// 3339     status = ZSuccess;
        MOV     ?V0 + 2,#0x0
// 3340 
// 3341     // check for address discovery
// 3342     if ( partNwkAddr == INVALID_NODE_ADDR )
        MOV     A,#-0x2
        XRL     A,?V0 + 0
        JNZ     ??ZDSecMgrSetupPartner_1
        MOV     A,#-0x1
        XRL     A,?V0 + 1
??ZDSecMgrSetupPartner_1:
        JNZ     ??ZDSecMgrSetupPartner_2
// 3343     {
// 3344       status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
        ; Setup parameters for call to function ZDP_NwkAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDP_NwkAddrReq?relay
        SJMP    ??ZDSecMgrSetupPartner_3
// 3345     }
// 3346     else if ( !AddrMgrExtAddrValid( partExtAddr ) )
??ZDSecMgrSetupPartner_2:
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrSetupPartner_0
// 3347     {
// 3348       status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDP_IEEEAddrReq?relay
??ZDSecMgrSetupPartner_3:
        MOV     A,R1
        MOV     ?V0 + 2,A
// 3349     }
// 3350   }
// 3351 
// 3352   return status;
??ZDSecMgrSetupPartner_0:
        MOV     R1,?V0 + 2
        MOV     A,#0xd
        CFI EndBlock cfiBlock699
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
// 3353 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock700 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Valid
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock700
// 3354 #endif // ( ZG_BUILD_JOINING_TYPE )
// 3355 
// 3356 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3357 /******************************************************************************
// 3358  * @fn          ZDSecMgrAppKeyTypeSet
// 3359  *
// 3360  * @brief       Set application key type.
// 3361  *
// 3362  * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
// 3363  *                                                   KEY_TYPE_APP_LINK@3
// 3364  *
// 3365  * @return      ZStatus_t
// 3366  */
// 3367 ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
// 3368 {
// 3369   if ( keyType == KEY_TYPE_APP_LINK )
// 3370   {
// 3371     ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
// 3372   }
// 3373   else
// 3374   {
// 3375     ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
// 3376   }
// 3377 
// 3378   return ZSuccess;
// 3379 }
// 3380 #endif
// 3381 
// 3382 /******************************************************************************
// 3383  * ZigBee Device Security Manager - Stub Implementations
// 3384  */
// 3385 /******************************************************************************
// 3386  * @fn          ZDSecMgrMasterKeyGet (stubs APSME_MasterKeyGet)
// 3387  *
// 3388  * @brief       Get MASTER key for specified EXT address.
// 3389  *
// 3390  * @param       extAddr - [in] EXT address
// 3391  * @param       pKeyNvId - [out] MASTER key NV ID
// 3392  *
// 3393  * @return      ZStatus_t
// 3394  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3395 ZStatus_t ZDSecMgrMasterKeyGet( uint8* extAddr, uint16* pKeyNvId )
APSME_MasterKeyGet:
        CFI Block cfiBlock701 Using cfiCommon0
        CFI Function APSME_MasterKeyGet
        CODE
// 3396 {
        FUNCALL APSME_MasterKeyGet, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_MasterKeyGet, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 3397   ZStatus_t status;
// 3398   uint16 ami;
// 3399 
// 3400   // lookup entry for specified EXT address
// 3401   status = ZDSecMgrExtAddrLookup( extAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        LCALL   ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_209:
        MOV     ?V0 + 0,A
// 3402 
// 3403   if ( status == ZSuccess )
        JNZ     ??APSME_MasterKeyGet_0
// 3404   {
// 3405     ZDSecMgrMasterKeyLookup( ami, pKeyNvId );
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine147_0 & 0xFFFF
// 3406   }
??CrossCallReturnLabel_293:
        LCALL   ??ZDSecMgrMasterKeyLookup?relay
        SJMP    ??APSME_MasterKeyGet_1
// 3407   else
// 3408   {
// 3409     *pKeyNvId = SEC_NO_KEY_NV_ID;
??APSME_MasterKeyGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3410   }
// 3411 
// 3412   return status;
??APSME_MasterKeyGet_1:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock701
// 3413 }
// 3414 
// 3415 /******************************************************************************
// 3416  * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
// 3417  *
// 3418  * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
// 3419  *
// 3420  * @param       extAddr - [in] EXT address
// 3421  * @param       data    - [in] APSME_LinkKeyData_t
// 3422  *
// 3423  * @return      ZStatus_t
// 3424  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3425 ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
APSME_LinkKeySet:
        CFI Block cfiBlock702 Using cfiCommon0
        CFI Function APSME_LinkKeySet
        CODE
// 3426 {
        FUNCALL APSME_LinkKeySet, ZDSecMgrEntryLookupExtGetIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 3427   ZStatus_t status;
// 3428   ZDSecMgrEntry_t* entry;
// 3429   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 3430   uint16 Index;
// 3431 
// 3432   // lookup entry index for specified EXT address
// 3433   status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExtGetIndex?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     ?V0 + 0,A
// 3434 
// 3435   if ( status == ZSuccess )
        JZ      $+5
        LJMP    ??APSME_LinkKeySet_0 & 0xFFFF
// 3436   {
// 3437     // point to NV item
// 3438     entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x2
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_122:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine128_0 & 0xFFFF
// 3439 
// 3440     pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
??CrossCallReturnLabel_237:
        ; Setup parameters for call to function osal_mem_alloc
        LCALL   ?Subroutine80 & 0xFFFF
// 3441 
// 3442     if (pApsLinkKey != NULL)
??CrossCallReturnLabel_128:
        JNZ     $+5
        LJMP    ??APSME_LinkKeySet_0 & 0xFFFF
// 3443     {
// 3444       // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
// 3445       osal_nv_read( entry->keyNvId, 0,
// 3446                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 4,#0x18
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine153_0 & 0xFFFF
??CrossCallReturnLabel_324:
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_87:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
// 3447 
// 3448       // set new values of the key
// 3449       osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??Subroutine138_0 & 0xFFFF
??CrossCallReturnLabel_264:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
// 3450       pApsLinkKey->rxFrmCntr = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     A,?V0 + 2
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 3
        LCALL   ??Subroutine163_0 & 0xFFFF
??CrossCallReturnLabel_380:
        LCALL   ?XSTORE_R2345
// 3451       pApsLinkKey->txFrmCntr = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     A,?V0 + 2
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,?V0 + 3
        LCALL   ??Subroutine163_0 & 0xFFFF
??CrossCallReturnLabel_381:
        LCALL   ?XSTORE_R2345
// 3452 
// 3453       osal_nv_write( entry->keyNvId, 0,
// 3454                     sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 4,#0x18
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_93:
        LCALL   ??Subroutine119_0 & 0xFFFF
??CrossCallReturnLabel_186:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
// 3455 
// 3456       // clear copy of key in RAM
// 3457       osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_memset
        LCALL   ?Subroutine42 & 0xFFFF
// 3458 
// 3459       osal_mem_free(pApsLinkKey);
??CrossCallReturnLabel_66:
        LCALL   ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_325:
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_113:
        LCALL   ?Subroutine86 & 0xFFFF
??CrossCallReturnLabel_135:
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     A,R0
        ADD     A,#-0x9
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x13
        MOV     DPH,A
        LCALL   ?XSTORE_R2345
// 3460 
// 3461       // set initial values for counters in RAM
// 3462       ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
// 3463       ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     A,R0
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x13
        MOV     DPH,A
        LCALL   ?XSTORE_R2345
// 3464     }
// 3465   }
// 3466 
// 3467   return status;
??APSME_LinkKeySet_0:
        MOV     R1,?V0 + 0
        MOV     A,#0x4
        LJMP    ??Subroutine117_0 & 0xFFFF
        CFI EndBlock cfiBlock702
// 3468 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine71:
        CFI Block cfiCond703 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_111
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond704 Using cfiCommon0
        CFI (cfiCond704) NoFunction
        CFI (cfiCond704) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond704) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond704) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond704) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond704) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond704) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond704) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond704) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond704) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond704) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond704) CFA_SP SP+0
        CFI (cfiCond704) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond705 Using cfiCommon0
        CFI (cfiCond705) NoFunction
        CFI (cfiCond705) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond705) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond705) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond705) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond705) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond705) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond705) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond705) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond705) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond705) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond705) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond705) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond705) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond705) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond705) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond705) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond705) CFA_SP SP+0
        CFI (cfiCond705) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker706 Using cfiCommon1
        CFI (cfiPicker706) NoFunction
        CFI (cfiPicker706) Picker
        LCALL   ?Subroutine107 & 0xFFFF
??CrossCallReturnLabel_353:
        MOV     A,R0
        RET
        CFI EndBlock cfiCond703
        CFI EndBlock cfiCond704
        CFI EndBlock cfiCond705
        CFI EndBlock cfiPicker706

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine57:
        CFI Block cfiCond707 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_86
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond708 Using cfiCommon0
        CFI (cfiCond708) NoFunction
        CFI (cfiCond708) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond708) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond708) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond708) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond708) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond708) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond708) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond708) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond708) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond708) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond708) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond708) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond708) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond708) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond708) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond708) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond708) CFA_SP SP+0
        CFI (cfiCond708) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond709 Using cfiCommon0
        CFI (cfiCond709) NoFunction
        CFI (cfiCond709) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond709) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond709) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond709) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond709) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond709) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond709) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond709) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond709) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond709) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond709) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond709) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond709) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond709) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond709) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond709) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond709) CFA_SP SP+0
        CFI (cfiCond709) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker710 Using cfiCommon1
        CFI (cfiPicker710) NoFunction
        CFI (cfiPicker710) Picker
        LCALL   ??Subroutine154_0 & 0xFFFF
??CrossCallReturnLabel_335:
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond707
        CFI EndBlock cfiCond708
        CFI EndBlock cfiCond709
        CFI EndBlock cfiPicker710
// 3469 
// 3470 /******************************************************************************
// 3471  * @fn          ZDSecMgrAuthenticationSet
// 3472  *
// 3473  * @brief       Mark the specific device as authenticated or not
// 3474  *
// 3475  * @param       extAddr - [in] EXT address
// 3476  * @param       option  - [in] authenticated or not
// 3477  *
// 3478  * @return      ZStatus_t
// 3479  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3480 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
ZDSecMgrAuthenticationSet:
        CFI Block cfiBlock711 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticationSet
        CODE
// 3481 {
        FUNCALL ZDSecMgrAuthenticationSet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
// 3482   ZStatus_t        status;
// 3483   ZDSecMgrEntry_t* entry;
// 3484 
// 3485 
// 3486   // lookup entry index for specified EXT address
// 3487   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
// 3488 
// 3489   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrAuthenticationSet_0
// 3490   {
// 3491     entry->authenticateOption = option;
        LCALL   ?Subroutine66 & 0xFFFF
// 3492   }
??CrossCallReturnLabel_326:
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
// 3493 
// 3494   return status;
??ZDSecMgrAuthenticationSet_0:
        LJMP    ??Subroutine135_0 & 0xFFFF
        CFI EndBlock cfiBlock711
// 3495 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine66:
        CFI Block cfiCond712 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_325
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond713 Using cfiCommon0
        CFI (cfiCond713) NoFunction
        CFI (cfiCond713) Conditional ??CrossCallReturnLabel_326
        CFI (cfiCond713) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond713) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond713) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond713) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond713) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond713) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond713) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond713) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond713) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond713) CFA_SP SP+0
        CFI (cfiCond713) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker714 Using cfiCommon1
        CFI (cfiPicker714) NoFunction
        CFI (cfiPicker714) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond712
        CFI EndBlock cfiCond713
        CFI EndBlock cfiPicker714
        REQUIRE ??Subroutine153_0
        ; // Fall through to label ??Subroutine153_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine153_0:
        CFI Block cfiCond715 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_324
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond716 Using cfiCommon0
        CFI (cfiCond716) NoFunction
        CFI (cfiCond716) Conditional ??CrossCallReturnLabel_325
        CFI (cfiCond716) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond716) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond716) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond716) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond716) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond716) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond716) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond716) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond716) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond716) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond716) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond716) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond716) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond716) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond716) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond716) CFA_SP SP+0
        CFI (cfiCond716) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond717 Using cfiCommon0
        CFI (cfiCond717) NoFunction
        CFI (cfiCond717) Conditional ??CrossCallReturnLabel_326
        CFI (cfiCond717) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond717) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond717) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond717) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond717) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond717) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond717) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond717) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond717) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond717) CFA_SP SP+0
        CFI (cfiCond717) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker718 Using cfiCommon1
        CFI (cfiPicker718) NoFunction
        CFI (cfiPicker718) Picker
        LCALL   ?Subroutine100 & 0xFFFF
??CrossCallReturnLabel_329:
        RET
        CFI EndBlock cfiCond715
        CFI EndBlock cfiCond716
        CFI EndBlock cfiCond717
        CFI EndBlock cfiPicker718

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine100:
        CFI Block cfiCond719 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_328, ??CrossCallReturnLabel_101
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond720 Using cfiCommon0
        CFI (cfiCond720) NoFunction
        CFI (cfiCond720) Conditional ??CrossCallReturnLabel_328, ??CrossCallReturnLabel_102
        CFI (cfiCond720) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond720) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond720) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond720) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond720) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond720) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond720) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond720) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond720) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond720) CFA_SP SP+0
        CFI (cfiCond720) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond721 Using cfiCommon0
        CFI (cfiCond721) NoFunction
        CFI (cfiCond721) Conditional ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_325
        CFI (cfiCond721) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond721) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond721) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond721) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond721) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond721) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond721) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond721) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond721) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond721) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond721) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond721) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond721) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond721) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond721) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond721) CFA_SP SP+0
        CFI (cfiCond721) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond722 Using cfiCommon0
        CFI (cfiCond722) NoFunction
        CFI (cfiCond722) Conditional ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_326
        CFI (cfiCond722) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond722) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond722) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond722) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond722) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond722) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond722) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond722) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond722) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond722) CFA_SP SP+0
        CFI (cfiCond722) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond723 Using cfiCommon0
        CFI (cfiCond723) NoFunction
        CFI (cfiCond723) Conditional ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_324
        CFI (cfiCond723) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond723) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond723) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond723) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond723) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond723) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond723) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond723) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond723) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond723) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond723) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond723) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond723) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond723) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond723) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond723) CFA_SP SP+0
        CFI (cfiCond723) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond724 Using cfiCommon0
        CFI (cfiCond724) NoFunction
        CFI (cfiCond724) Conditional ??CrossCallReturnLabel_327, ??CrossCallReturnLabel_93
        CFI (cfiCond724) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond724) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond724) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond724) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond724) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond724) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond724) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond724) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond724) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond724) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond724) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond724) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond724) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond724) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond724) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond724) CFA_SP SP+0
        CFI (cfiCond724) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond725 Using cfiCommon0
        CFI (cfiCond725) NoFunction
        CFI (cfiCond725) Conditional ??CrossCallReturnLabel_327, ??CrossCallReturnLabel_94
        CFI (cfiCond725) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond725) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond725) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond725) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond725) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond725) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond725) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond725) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond725) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond725) CFA_SP SP+0
        CFI (cfiCond725) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker726 Using cfiCommon1
        CFI (cfiPicker726) NoFunction
        CFI (cfiPicker726) Picker
        LCALL   ?Subroutine115 & 0xFFFF
??CrossCallReturnLabel_333:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond719
        CFI EndBlock cfiCond720
        CFI EndBlock cfiCond721
        CFI EndBlock cfiCond722
        CFI EndBlock cfiCond723
        CFI EndBlock cfiCond724
        CFI EndBlock cfiCond725
        CFI EndBlock cfiPicker726
// 3496 
// 3497 /******************************************************************************
// 3498  * @fn          ZDSecMgrAuthenticationCheck
// 3499  *
// 3500  * @brief       Check if the specific device has been authenticated or not
// 3501  *              For non-trust center device, always return TRUE
// 3502  *
// 3503  * @param       shortAddr - [in] short address
// 3504  *
// 3505  * @return      TRUE @ authenticated with CBKE
// 3506  *              FALSE @ not authenticated
// 3507  */
// 3508 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3509 uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
ZDSecMgrAuthenticationCheck:
        CFI Block cfiBlock727 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticationCheck
        CODE
// 3510 {
        ; Saved register size: 0
        ; Auto size: 0
// 3511 #if defined (TC_LINKKEY_JOIN)
// 3512 
// 3513   ZDSecMgrEntry_t* entry;
// 3514   uint8 extAddr[Z_EXTADDR_LEN];
// 3515 
// 3516   // If the local device is not the trust center, always return TRUE
// 3517   if ( NLME_GetShortAddr() != zgTrustCenterAddr )
// 3518   {
// 3519     return TRUE;
// 3520   }
// 3521   // Otherwise, check the authentication option
// 3522   else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
// 3523   {
// 3524     // lookup entry index for specified EXT address
// 3525     if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
// 3526     {
// 3527       if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
// 3528       {
// 3529         return TRUE;
// 3530       }
// 3531       else
// 3532       {
// 3533         return FALSE;
// 3534       }
// 3535     }
// 3536   }
// 3537   return FALSE;
// 3538 
// 3539 #else
// 3540   (void)shortAddr;  // Intentionally unreferenced parameter
// 3541 
// 3542   // For non AMI/SE Profile, perform no check and always return TRUE.
// 3543   return TRUE;
        MOV     R1,#0x1
        LJMP    ?BRET
        CFI EndBlock cfiBlock727
// 3544 
// 3545 #endif // TC_LINKKEY_JOIN
// 3546 }
// 3547 
// 3548 /******************************************************************************
// 3549  * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
// 3550  *
// 3551  * @brief       Get Key NV ID for specified NWK address.
// 3552  *
// 3553  * @param       extAddr - [in] EXT address
// 3554  * @param       keyNvId - [out] NV ID
// 3555  *
// 3556  * @return      ZStatus_t
// 3557  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3558 ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
APSME_LinkKeyNVIdGet:
        CFI Block cfiBlock728 Using cfiCommon0
        CFI Function APSME_LinkKeyNVIdGet
        CODE
// 3559 {
        FUNCALL APSME_LinkKeyNVIdGet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 3560   ZStatus_t status;
// 3561   ZDSecMgrEntry_t* entry;
// 3562 
// 3563   // lookup entry index for specified NWK address
// 3564   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
// 3565 
// 3566   if ( status == ZSuccess )
        JNZ     ??APSME_LinkKeyNVIdGet_0
// 3567   {
// 3568     // return the index to the NV table
// 3569     *pKeyNvId = entry->keyNvId;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine60 & 0xFFFF
// 3570   }
??CrossCallReturnLabel_94:
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??APSME_LinkKeyNVIdGet_1
// 3571   else
// 3572   {
// 3573     *pKeyNvId = SEC_NO_KEY_NV_ID;
??APSME_LinkKeyNVIdGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??APSME_LinkKeyNVIdGet_1:
        MOVX    @DPTR,A
// 3574   }
// 3575 
// 3576   return status;
        LJMP    ??Subroutine135_0 & 0xFFFF
        CFI EndBlock cfiBlock728
// 3577 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine60:
        CFI Block cfiCond729 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_93
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond730 Using cfiCommon0
        CFI (cfiCond730) NoFunction
        CFI (cfiCond730) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond730) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond730) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond730) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond730) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond730) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond730) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond730) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond730) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond730) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond730) CFA_SP SP+0
        CFI (cfiCond730) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker731 Using cfiCommon1
        CFI (cfiPicker731) NoFunction
        CFI (cfiPicker731) Picker
        LCALL   ?Subroutine100 & 0xFFFF
??CrossCallReturnLabel_327:
        LCALL   ??Subroutine131_0 & 0xFFFF
??CrossCallReturnLabel_252:
        RET
        CFI EndBlock cfiCond729
        CFI EndBlock cfiCond730
        CFI EndBlock cfiPicker731
// 3578 
// 3579 /******************************************************************************
// 3580  * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
// 3581  *
// 3582  * @brief       Verifies if Link Key in NV has been set.
// 3583  *
// 3584  * @param       extAddr - [in] EXT address
// 3585  *
// 3586  * @return      TRUE - Link Key has been established
// 3587  *              FALSE - Link Key in NV has default value.
// 3588  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3589 uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
APSME_IsLinkKeyValid:
        CFI Block cfiBlock732 Using cfiCommon0
        CFI Function APSME_IsLinkKeyValid
        CODE
// 3590 {
        FUNCALL APSME_IsLinkKeyValid, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, APSME_LinkKeyNVIdGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 3591   APSME_LinkKeyData_t *pKeyData;
// 3592   uint16 apsLinkKeyNvId;
// 3593   uint8 nullKey[SEC_KEY_LEN];
// 3594   uint8 status = FALSE;
        MOV     ?V0 + 0,#0x0
// 3595 
// 3596   // initialize default vealue to compare to
// 3597   osal_memset(nullKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine46 & 0xFFFF
// 3598 
// 3599   // check for APS link NV ID
// 3600   APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
??CrossCallReturnLabel_71:
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??APSME_LinkKeyNVIdGet?relay
// 3601 
// 3602   if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
        LCALL   ??Subroutine151_0 & 0xFFFF
??CrossCallReturnLabel_319:
        JZ      ??CrossCallReturnLabel_67
// 3603   {
// 3604     pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        LCALL   ?Subroutine80 & 0xFFFF
// 3605 
// 3606     if (pKeyData != NULL)
??CrossCallReturnLabel_129:
        JZ      ??CrossCallReturnLabel_67
// 3607     {
// 3608       // retrieve key from NV
// 3609       if ( osal_nv_read( apsLinkKeyNvId, 0,
// 3610                         sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 4,#0x18
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        JNZ     ??APSME_IsLinkKeyValid_0
// 3611       {
// 3612         // if stored key is different than default value, then a key has been established
// 3613         if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   ??osal_memcmp?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        JNZ     ??APSME_IsLinkKeyValid_0
// 3614         {
// 3615           status = TRUE;
        MOV     ?V0 + 0,#0x1
// 3616         }
// 3617       }
// 3618 
// 3619       // clear copy of key in RAM
// 3620       osal_memset(pKeyData, 0x00, sizeof(APSME_LinkKeyData_t));
??APSME_IsLinkKeyValid_0:
        ; Setup parameters for call to function osal_memset
        LCALL   ?Subroutine42 & 0xFFFF
// 3621 
// 3622       osal_mem_free(pKeyData);
// 3623     }
// 3624   }
// 3625 
// 3626   return status;
??CrossCallReturnLabel_67:
        MOV     R1,?V0 + 0
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock732
// 3627 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine80:
        CFI Block cfiCond733 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_127
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond734 Using cfiCommon0
        CFI (cfiCond734) NoFunction
        CFI (cfiCond734) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond734) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond734) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond734) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond734) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond734) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond734) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond734) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond734) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond734) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond734) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond734) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond734) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond734) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond734) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond734) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond734) CFA_SP SP+0
        CFI (cfiCond734) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond735 Using cfiCommon0
        CFI (cfiCond735) NoFunction
        CFI (cfiCond735) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond735) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond735) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond735) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond735) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond735) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond735) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond735) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond735) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond735) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond735) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond735) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond735) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond735) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond735) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond735) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond735) CFA_SP SP+0
        CFI (cfiCond735) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond736 Using cfiCommon0
        CFI (cfiCond736) NoFunction
        CFI (cfiCond736) Conditional ??CrossCallReturnLabel_130
        CFI (cfiCond736) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond736) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond736) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond736) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond736) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond736) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond736) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond736) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond736) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond736) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond736) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond736) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond736) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond736) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond736) CFA_SP SP+0
        CFI (cfiCond736) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker737 Using cfiCommon1
        CFI (cfiPicker737) NoFunction
        CFI (cfiPicker737) Picker
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        RET
        CFI EndBlock cfiCond733
        CFI EndBlock cfiCond734
        CFI EndBlock cfiCond735
        CFI EndBlock cfiCond736
        CFI EndBlock cfiPicker737

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiCond738 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond739 Using cfiCommon0
        CFI (cfiCond739) NoFunction
        CFI (cfiCond739) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond739) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond739) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond739) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond739) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond739) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond739) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond739) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond739) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond739) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond739) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond739) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond739) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond739) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond739) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond739) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond739) CFA_SP SP+0
        CFI (cfiCond739) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond740 Using cfiCommon0
        CFI (cfiCond740) NoFunction
        CFI (cfiCond740) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond740) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond740) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond740) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond740) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond740) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond740) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond740) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond740) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond740) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond740) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond740) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond740) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond740) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond740) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond740) CFA_SP SP+0
        CFI (cfiCond740) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker741 Using cfiCommon1
        CFI (cfiPicker741) NoFunction
        CFI (cfiPicker741) Picker
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_memset?relay
        ; Setup parameters for call to function osal_mem_free
        ; Setup parameters for call to function osal_mem_free
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
        RET
        CFI EndBlock cfiCond738
        CFI EndBlock cfiCond739
        CFI EndBlock cfiCond740
        CFI EndBlock cfiPicker741
// 3628 
// 3629 /******************************************************************************
// 3630  * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
// 3631  *
// 3632  * @brief       Verify and process key transportation to child.
// 3633  *
// 3634  * @param       ind - [in] APSME_TransportKeyInd_t
// 3635  *
// 3636  * @return      uint8 - success(TRUE:FALSE)
// 3637  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3638 uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
APSME_KeyFwdToChild:
        CFI Block cfiBlock742 Using cfiCommon0
        CFI Function APSME_KeyFwdToChild
        CODE
// 3639 {
        FUNCALL APSME_KeyFwdToChild, AssocGetWithExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_KeyFwdToChild, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3640   // verify from Trust Center
// 3641   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine152_0 & 0xFFFF
??CrossCallReturnLabel_317:
        JNZ     ??APSME_KeyFwdToChild_0
// 3642   {
// 3643     // check for initial NWK key
// 3644     if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
// 3645          ( ind->keyType == 6                 ) ||
// 3646          ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??APSME_KeyFwdToChild_1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      ??APSME_KeyFwdToChild_1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??APSME_KeyFwdToChild_2
// 3647     {
// 3648       // set association status to authenticated
// 3649       ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
??APSME_KeyFwdToChild_1:
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine75 & 0xFFFF
// 3650     }
??CrossCallReturnLabel_119:
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
// 3651 
// 3652     return TRUE;
??APSME_KeyFwdToChild_2:
        MOV     R1,#0x1
        SJMP    ??APSME_KeyFwdToChild_3
// 3653   }
// 3654 
// 3655   return FALSE;
??APSME_KeyFwdToChild_0:
        MOV     R1,#0x0
??APSME_KeyFwdToChild_3:
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock742
// 3656 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine75:
        CFI Block cfiCond743 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_118
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond744 Using cfiCommon0
        CFI (cfiCond744) NoFunction
        CFI (cfiCond744) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond744) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond744) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond744) CFA_SP SP+-5
        CFI Block cfiPicker745 Using cfiCommon1
        CFI (cfiPicker745) NoFunction
        CFI (cfiPicker745) Picker
        LCALL   ??Subroutine154_0 & 0xFFFF
??CrossCallReturnLabel_337:
        LCALL   ??AssocGetWithExt?relay
        RET
        CFI EndBlock cfiCond743
        CFI EndBlock cfiCond744
        CFI EndBlock cfiPicker745

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine101:
        CFI Block cfiCond746 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_116
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond747 Using cfiCommon0
        CFI (cfiCond747) NoFunction
        CFI (cfiCond747) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_117
        CFI (cfiCond747) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond747) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond747) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond747) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond747) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond747) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond747) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond747) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond747) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond747) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond747) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond747) CFA_SP SP+0
        CFI (cfiCond747) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond748 Using cfiCommon0
        CFI (cfiCond748) NoFunction
        CFI (cfiCond748) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_114
        CFI (cfiCond748) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond748) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond748) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond748) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond748) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond748) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond748) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond748) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond748) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond748) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond748) CFA_SP SP+0
        CFI (cfiCond748) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond749 Using cfiCommon0
        CFI (cfiCond749) NoFunction
        CFI (cfiCond749) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_115
        CFI (cfiCond749) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond749) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond749) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond749) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond749) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond749) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond749) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond749) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond749) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond749) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond749) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond749) CFA_SP SP+0
        CFI (cfiCond749) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker750 Using cfiCommon1
        CFI (cfiPicker750) NoFunction
        CFI (cfiPicker750) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond746
        CFI EndBlock cfiCond747
        CFI EndBlock cfiCond748
        CFI EndBlock cfiCond749
        CFI EndBlock cfiPicker750
        REQUIRE ??Subroutine154_0
        ; // Fall through to label ??Subroutine154_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine154_0:
        CFI Block cfiCond751 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_256
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond752 Using cfiCommon0
        CFI (cfiCond752) NoFunction
        CFI (cfiCond752) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_257
        CFI (cfiCond752) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond752) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond752) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond752) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond752) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond752) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond752) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond752) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond752) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond752) CFA_SP SP+0
        CFI (cfiCond752) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond753 Using cfiCommon0
        CFI (cfiCond753) NoFunction
        CFI (cfiCond753) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_258
        CFI (cfiCond753) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond753) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond753) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond753) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond753) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond753) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond753) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond753) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond753) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond753) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond753) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond753) CFA_SP SP+0
        CFI (cfiCond753) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond754 Using cfiCommon0
        CFI (cfiCond754) NoFunction
        CFI (cfiCond754) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_259
        CFI (cfiCond754) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond754) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond754) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond754) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond754) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond754) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond754) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond754) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond754) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond754) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond754) CFA_SP SP+0
        CFI (cfiCond754) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond755 Using cfiCommon0
        CFI (cfiCond755) NoFunction
        CFI (cfiCond755) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_84
        CFI (cfiCond755) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond755) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond755) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond755) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond755) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond755) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond755) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond755) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond755) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond755) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond755) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond755) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond755) CFA_SP SP+0
        CFI (cfiCond755) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond756 Using cfiCommon0
        CFI (cfiCond756) NoFunction
        CFI (cfiCond756) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_85
        CFI (cfiCond756) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond756) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond756) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond756) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond756) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond756) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond756) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond756) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond756) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond756) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond756) CFA_SP SP+0
        CFI (cfiCond756) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond757 Using cfiCommon0
        CFI (cfiCond757) NoFunction
        CFI (cfiCond757) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_295
        CFI (cfiCond757) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond757) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond757) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond757) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond757) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond757) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond757) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond757) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond757) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond757) CFA_SP SP+0
        CFI (cfiCond757) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond758 Using cfiCommon0
        CFI (cfiCond758) NoFunction
        CFI (cfiCond758) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_296
        CFI (cfiCond758) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond758) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond758) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond758) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond758) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond758) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond758) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond758) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond758) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond758) CFA_SP SP+0
        CFI (cfiCond758) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond759 Using cfiCommon0
        CFI (cfiCond759) NoFunction
        CFI (cfiCond759) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_294
        CFI (cfiCond759) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond759) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond759) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond759) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond759) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond759) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond759) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond759) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond759) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond759) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond759) CFA_SP SP+0
        CFI (cfiCond759) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond760 Using cfiCommon0
        CFI (cfiCond760) NoFunction
        CFI (cfiCond760) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_287
        CFI (cfiCond760) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond760) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond760) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond760) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond760) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond760) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond760) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond760) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond760) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond760) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond760) CFA_SP SP+0
        CFI (cfiCond760) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond761 Using cfiCommon0
        CFI (cfiCond761) NoFunction
        CFI (cfiCond761) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_288
        CFI (cfiCond761) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond761) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond761) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond761) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond761) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond761) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond761) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond761) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond761) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond761) CFA_SP SP+0
        CFI (cfiCond761) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond762 Using cfiCommon0
        CFI (cfiCond762) NoFunction
        CFI (cfiCond762) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_289
        CFI (cfiCond762) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond762) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond762) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond762) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond762) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond762) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond762) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond762) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond762) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond762) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond762) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond762) CFA_SP SP+0
        CFI (cfiCond762) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond763 Using cfiCommon0
        CFI (cfiCond763) NoFunction
        CFI (cfiCond763) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_290
        CFI (cfiCond763) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond763) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond763) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond763) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond763) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond763) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond763) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond763) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond763) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond763) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond763) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond763) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond763) CFA_SP SP+0
        CFI (cfiCond763) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond764 Using cfiCommon0
        CFI (cfiCond764) NoFunction
        CFI (cfiCond764) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_291
        CFI (cfiCond764) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond764) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond764) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond764) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond764) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond764) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond764) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond764) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond764) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond764) CFA_SP SP+0
        CFI (cfiCond764) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond765 Using cfiCommon0
        CFI (cfiCond765) NoFunction
        CFI (cfiCond765) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_292
        CFI (cfiCond765) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond765) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond765) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond765) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond765) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond765) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond765) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond765) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond765) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond765) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond765) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond765) CFA_SP SP+0
        CFI (cfiCond765) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond766 Using cfiCommon0
        CFI (cfiCond766) NoFunction
        CFI (cfiCond766) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_293
        CFI (cfiCond766) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond766) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond766) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond766) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond766) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond766) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond766) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond766) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond766) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond766) CFA_SP SP+0
        CFI (cfiCond766) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond767 Using cfiCommon0
        CFI (cfiCond767) NoFunction
        CFI (cfiCond767) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_86
        CFI (cfiCond767) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond767) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond767) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond767) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond767) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond767) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond767) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond767) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond767) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond767) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond767) CFA_SP SP+0
        CFI (cfiCond767) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond768 Using cfiCommon0
        CFI (cfiCond768) NoFunction
        CFI (cfiCond768) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_87
        CFI (cfiCond768) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond768) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond768) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond768) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond768) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond768) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond768) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond768) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond768) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond768) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond768) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond768) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond768) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond768) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond768) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond768) CFA_SP SP+0
        CFI (cfiCond768) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond769 Using cfiCommon0
        CFI (cfiCond769) NoFunction
        CFI (cfiCond769) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_88
        CFI (cfiCond769) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond769) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond769) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond769) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond769) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond769) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond769) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond769) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond769) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond769) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond769) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond769) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond769) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond769) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond769) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond769) CFA_SP SP+0
        CFI (cfiCond769) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond770 Using cfiCommon0
        CFI (cfiCond770) NoFunction
        CFI (cfiCond770) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_118
        CFI (cfiCond770) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond770) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond770) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond770) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond770) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond770) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond770) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond770) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond770) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond770) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond770) CFA_SP SP+0
        CFI (cfiCond770) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond771 Using cfiCommon0
        CFI (cfiCond771) NoFunction
        CFI (cfiCond771) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_119
        CFI (cfiCond771) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond771) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond771) CFA_SP SP+-5
        CFI Block cfiCond772 Using cfiCommon0
        CFI (cfiCond772) NoFunction
        CFI (cfiCond772) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_109
        CFI (cfiCond772) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond772) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond772) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond772) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond772) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond772) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond772) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond772) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond772) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond772) CFA_SP SP+0
        CFI (cfiCond772) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond773 Using cfiCommon0
        CFI (cfiCond773) NoFunction
        CFI (cfiCond773) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_110
        CFI (cfiCond773) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond773) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond773) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond773) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond773) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond773) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond773) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond773) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond773) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond773) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond773) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond773) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond773) CFA_SP SP+0
        CFI (cfiCond773) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond774 Using cfiCommon0
        CFI (cfiCond774) NoFunction
        CFI (cfiCond774) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_116
        CFI (cfiCond774) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond774) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond774) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond774) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond774) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond774) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond774) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond774) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond774) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond774) CFA_SP SP+0
        CFI (cfiCond774) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond775 Using cfiCommon0
        CFI (cfiCond775) NoFunction
        CFI (cfiCond775) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_117
        CFI (cfiCond775) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond775) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond775) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond775) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond775) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond775) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond775) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond775) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond775) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond775) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond775) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond775) CFA_SP SP+0
        CFI (cfiCond775) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond776 Using cfiCommon0
        CFI (cfiCond776) NoFunction
        CFI (cfiCond776) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_114
        CFI (cfiCond776) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond776) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond776) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond776) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond776) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond776) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond776) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond776) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond776) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond776) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond776) CFA_SP SP+0
        CFI (cfiCond776) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond777 Using cfiCommon0
        CFI (cfiCond777) NoFunction
        CFI (cfiCond777) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_115
        CFI (cfiCond777) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond777) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond777) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond777) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond777) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond777) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond777) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond777) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond777) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond777) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond777) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond777) CFA_SP SP+0
        CFI (cfiCond777) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker778 Using cfiCommon1
        CFI (cfiPicker778) NoFunction
        CFI (cfiPicker778) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond751
        CFI EndBlock cfiCond752
        CFI EndBlock cfiCond753
        CFI EndBlock cfiCond754
        CFI EndBlock cfiCond755
        CFI EndBlock cfiCond756
        CFI EndBlock cfiCond757
        CFI EndBlock cfiCond758
        CFI EndBlock cfiCond759
        CFI EndBlock cfiCond760
        CFI EndBlock cfiCond761
        CFI EndBlock cfiCond762
        CFI EndBlock cfiCond763
        CFI EndBlock cfiCond764
        CFI EndBlock cfiCond765
        CFI EndBlock cfiCond766
        CFI EndBlock cfiCond767
        CFI EndBlock cfiCond768
        CFI EndBlock cfiCond769
        CFI EndBlock cfiCond770
        CFI EndBlock cfiCond771
        CFI EndBlock cfiCond772
        CFI EndBlock cfiCond773
        CFI EndBlock cfiCond774
        CFI EndBlock cfiCond775
        CFI EndBlock cfiCond776
        CFI EndBlock cfiCond777
        CFI EndBlock cfiPicker778
// 3657 
// 3658 /******************************************************************************
// 3659  * @fn          ZDSecMgrAddLinkKey
// 3660  *
// 3661  * @brief       Add the application link key to ZDSecMgr. Also mark the device
// 3662  *              as authenticated in the authenticateOption. Note that this function
// 3663  *              is hardwared to CBKE right now.
// 3664  *
// 3665  * @param       shortAddr - short address of the partner device
// 3666  * @param       extAddr - extended address of the partner device
// 3667  * @param       key - link key
// 3668  *
// 3669  * @return      ZStatus_t
// 3670  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3671 ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
ZDSecMgrAddLinkKey:
        CFI Block cfiBlock779 Using cfiCommon0
        CFI Function ZDSecMgrAddLinkKey
        CODE
// 3672 {
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, APSME_LinkKeySet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
// 3673   uint16           ami;
// 3674   ZDSecMgrEntry_t* entry;
// 3675 
// 3676   /* Store the device address in the addr manager */
// 3677   if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JZ      ??ZDSecMgrAddLinkKey_0
// 3678   {
// 3679     /* Adding to Addr Manager fails */
// 3680     return ZFailure;
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAddLinkKey_1
// 3681   }
// 3682 
// 3683   /* Lookup entry using specified address index */
// 3684   ZDSecMgrEntryLookupAMI( ami, &entry );
??ZDSecMgrAddLinkKey_0:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine70 & 0xFFFF
// 3685 
// 3686   // If no existing entry, create one
// 3687   if ( entry == NULL )
??CrossCallReturnLabel_110:
        LCALL   ??Subroutine151_0 & 0xFFFF
??CrossCallReturnLabel_320:
        JNZ     ??CrossCallReturnLabel_238
// 3688   {
// 3689     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrEntryNew?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrAddLinkKey_2
// 3690     {
// 3691       entry->ami = ami;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine68 & 0xFFFF
// 3692     }
??CrossCallReturnLabel_106:
        LCALL   ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_123:
        LCALL   ??Subroutine128_0 & 0xFFFF
// 3693     else
// 3694     {
// 3695       /* Security Manager full */
// 3696       return ZBufferFull;
// 3697     }
// 3698   }
// 3699   // Write the link key
// 3700   APSME_LinkKeySet( extAddr, key );
??CrossCallReturnLabel_238:
        ; Setup parameters for call to function APSME_LinkKeySet
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??APSME_LinkKeySet?relay
// 3701 
// 3702 #if defined (TC_LINKKEY_JOIN)
// 3703   // Mark the device as authenticated.
// 3704   ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
// 3705 #endif
// 3706 
// 3707 #if defined NV_RESTORE
// 3708   ZDSecMgrWriteNV();  // Write the new established link key to NV.
// 3709 #endif
// 3710 
// 3711   return ZSuccess;
        MOV     R1,#0x0
??ZDSecMgrAddLinkKey_1:
        MOV     A,#0x4
        LJMP    ?Subroutine6 & 0xFFFF
??ZDSecMgrAddLinkKey_2:
        MOV     R1,#0x11
        SJMP    ??ZDSecMgrAddLinkKey_1
        CFI EndBlock cfiBlock779
// 3712 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine78:
        CFI Block cfiCond780 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_122
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond781 Using cfiCommon0
        CFI (cfiCond781) NoFunction
        CFI (cfiCond781) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond781) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond781) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond781) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond781) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond781) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond781) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond781) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond781) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond781) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond781) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond781) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond781) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond781) CFA_SP SP+0
        CFI (cfiCond781) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker782 Using cfiCommon1
        CFI (cfiPicker782) NoFunction
        CFI (cfiPicker782) Picker
        LCALL   ??Subroutine131_0 & 0xFFFF
??CrossCallReturnLabel_253:
        MOV     DPH,A
        MOV     DPL,R2
        RET
        CFI EndBlock cfiCond780
        CFI EndBlock cfiCond781
        CFI EndBlock cfiPicker782

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine70:
        CFI Block cfiCond783 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_109
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond784 Using cfiCommon0
        CFI (cfiCond784) NoFunction
        CFI (cfiCond784) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond784) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond784) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond784) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond784) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond784) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond784) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond784) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond784) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond784) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond784) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond784) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond784) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond784) CFA_SP SP+0
        CFI (cfiCond784) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker785 Using cfiCommon1
        CFI (cfiPicker785) NoFunction
        CFI (cfiPicker785) Picker
        LCALL   ??Subroutine154_0 & 0xFFFF
??CrossCallReturnLabel_336:
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        RET
        CFI EndBlock cfiCond783
        CFI EndBlock cfiCond784
        CFI EndBlock cfiPicker785

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine68:
        CFI Block cfiCond786 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_105
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond787 Using cfiCommon0
        CFI (cfiCond787) NoFunction
        CFI (cfiCond787) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond787) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond787) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond787) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond787) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond787) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond787) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond787) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond787) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond787) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond787) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond787) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond787) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond787) CFA_SP SP+0
        CFI (cfiCond787) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker788 Using cfiCommon1
        CFI (cfiPicker788) NoFunction
        CFI (cfiPicker788) Picker
        LCALL   ?Subroutine99 & 0xFFFF
??CrossCallReturnLabel_158:
        RET
        CFI EndBlock cfiCond786
        CFI EndBlock cfiCond787
        CFI EndBlock cfiPicker788

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine99:
        CFI Block cfiCond789 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_217
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond790 Using cfiCommon0
        CFI (cfiCond790) NoFunction
        CFI (cfiCond790) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_218
        CFI (cfiCond790) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond790) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond790) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond790) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond790) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond790) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond790) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond790) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond790) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond790) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond790) CFA_SP SP+0
        CFI (cfiCond790) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond791 Using cfiCommon0
        CFI (cfiCond791) NoFunction
        CFI (cfiCond791) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_239
        CFI (cfiCond791) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond791) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond791) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond791) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond791) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond791) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond791) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond791) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond791) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond791) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond791) CFA_SP SP+0
        CFI (cfiCond791) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond792 Using cfiCommon0
        CFI (cfiCond792) NoFunction
        CFI (cfiCond792) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_240
        CFI (cfiCond792) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond792) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond792) CFA_SP SP+-5
        CFI (cfiCond792) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond793 Using cfiCommon0
        CFI (cfiCond793) NoFunction
        CFI (cfiCond793) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_270
        CFI (cfiCond793) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond793) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond793) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond793) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond793) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond793) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond793) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond793) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond793) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond793) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond793) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond793) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond793) CFA_SP SP+0
        CFI (cfiCond793) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond794 Using cfiCommon0
        CFI (cfiCond794) NoFunction
        CFI (cfiCond794) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_271
        CFI (cfiCond794) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond794) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond794) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond794) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond794) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond794) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond794) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond794) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond794) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond794) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond794) CFA_SP SP+0
        CFI (cfiCond794) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond795 Using cfiCommon0
        CFI (cfiCond795) NoFunction
        CFI (cfiCond795) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_297
        CFI (cfiCond795) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond795) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond795) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond795) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond795) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond795) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond795) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond795) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond795) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond795) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond795) CFA_SP SP+0
        CFI (cfiCond795) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond796 Using cfiCommon0
        CFI (cfiCond796) NoFunction
        CFI (cfiCond796) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_298
        CFI (cfiCond796) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond796) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond796) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond796) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond796) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond796) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond796) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond796) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond796) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond796) CFA_SP SP+0
        CFI (cfiCond796) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond797 Using cfiCommon0
        CFI (cfiCond797) NoFunction
        CFI (cfiCond797) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_105
        CFI (cfiCond797) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond797) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond797) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond797) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond797) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond797) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond797) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond797) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond797) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond797) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond797) CFA_SP SP+0
        CFI (cfiCond797) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond798 Using cfiCommon0
        CFI (cfiCond798) NoFunction
        CFI (cfiCond798) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_106
        CFI (cfiCond798) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond798) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond798) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond798) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond798) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond798) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond798) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond798) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond798) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond798) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond798) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond798) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond798) CFA_SP SP+0
        CFI (cfiCond798) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker799 Using cfiCommon1
        CFI (cfiPicker799) NoFunction
        CFI (cfiPicker799) Picker
        LCALL   ?Subroutine114 & 0xFFFF
??CrossCallReturnLabel_357:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond789
        CFI EndBlock cfiCond790
        CFI EndBlock cfiCond791
        CFI EndBlock cfiCond792
        CFI EndBlock cfiCond793
        CFI EndBlock cfiCond794
        CFI EndBlock cfiCond795
        CFI EndBlock cfiCond796
        CFI EndBlock cfiCond797
        CFI EndBlock cfiCond798
        CFI EndBlock cfiPicker799
// 3713 
// 3714 #if defined ( NV_RESTORE )
// 3715 /******************************************************************************
// 3716  * @fn          ZDSecMgrInitNV
// 3717  *
// 3718  * @brief       Initialize the SecMgr entry data in NV with all values set to 0
// 3719  *
// 3720  * @param       none
// 3721  *
// 3722  * @return      uint8 - <osal_nv_item_init> return codes
// 3723  */
// 3724 uint8 ZDSecMgrInitNV(void)
// 3725 {
// 3726 
// 3727   uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE,
// 3728                 (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
// 3729 
// 3730   // If the item does not already exist, set all values to 0
// 3731   if (rtrn != SUCCESS)
// 3732   {
// 3733     nvDeviceListHdr_t hdr;
// 3734     hdr.numRecs = 0;
// 3735     osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
// 3736   }
// 3737 
// 3738   return rtrn;
// 3739 }
// 3740 #endif // NV_RESTORE
// 3741 
// 3742 #if defined ( NV_RESTORE )
// 3743 /*********************************************************************
// 3744  * @fn      ZDSecMgrWriteNV()
// 3745  *
// 3746  * @brief   Save off the APS link key list to NV
// 3747  *
// 3748  * @param   none
// 3749  *
// 3750  * @return  none
// 3751  */
// 3752 static void ZDSecMgrWriteNV( void )
// 3753 {
// 3754   uint16 i;
// 3755   nvDeviceListHdr_t hdr;
// 3756 
// 3757   hdr.numRecs = 0;
// 3758 
// 3759   if (ZDSecMgrEntries != NULL)
// 3760   {
// 3761     for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
// 3762     {
// 3763       // Save off the record
// 3764       osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 3765                     (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
// 3766                     sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
// 3767 
// 3768       if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
// 3769       {
// 3770         hdr.numRecs++;
// 3771       }
// 3772     }
// 3773   }
// 3774 
// 3775   // Save off the header
// 3776   osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
// 3777 }
// 3778 #endif // NV_RESTORE
// 3779 
// 3780 #if defined ( NV_RESTORE )
// 3781 /******************************************************************************
// 3782  * @fn          ZDSecMgrRestoreFromNV
// 3783  *
// 3784  * @brief       Restore the APS Link Key entry data from NV. It does not restore
// 3785  *              the key data itself as they remain in NV until they are used.
// 3786  *              Only list data is restored.
// 3787  *
// 3788  * @param       none
// 3789  *
// 3790  * @return      None.
// 3791  */
// 3792 static void ZDSecMgrRestoreFromNV( void )
// 3793 {
// 3794   nvDeviceListHdr_t hdr;
// 3795   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 3796 
// 3797   if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
// 3798       ((hdr.numRecs > 0) && (hdr.numRecs <= ZDSECMGR_ENTRY_MAX)))
// 3799   {
// 3800     uint8 x;
// 3801 
// 3802     pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
// 3803 
// 3804     for (x = 0; x < ZDSECMGR_ENTRY_MAX; x++)
// 3805     {
// 3806       if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
// 3807                         (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
// 3808                         sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
// 3809       {
// 3810         // update data only for valid entries
// 3811         if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
// 3812         {
// 3813           if (pApsLinkKey != NULL)
// 3814           {
// 3815             // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
// 3816             osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0,
// 3817                          sizeof(APSME_LinkKeyData_t), pApsLinkKey );
// 3818 
// 3819             // set new values for the counter
// 3820             pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
// 3821 
// 3822             // restore values for counters in RAM
// 3823             ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr =
// 3824                                             pApsLinkKey->txFrmCntr;
// 3825 
// 3826             ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr =
// 3827                                             pApsLinkKey->rxFrmCntr;
// 3828 
// 3829             osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0,
// 3830                           sizeof(APSME_LinkKeyData_t), pApsLinkKey );
// 3831 
// 3832             // clear copy of key in RAM
// 3833             osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
// 3834           }
// 3835         }
// 3836       }
// 3837     }
// 3838 
// 3839     if (pApsLinkKey != NULL)
// 3840     {
// 3841       osal_mem_free(pApsLinkKey);
// 3842     }
// 3843   }
// 3844 }
// 3845 #endif // NV_RESTORE
// 3846 
// 3847 /*********************************************************************
// 3848  * @fn          ZDSecMgrSetDefaultNV
// 3849  *
// 3850  * @brief       Write the defaults to NV for Entry table and for APS key data table
// 3851  *
// 3852  * @param       none
// 3853  *
// 3854  * @return      none
// 3855  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3856 void ZDSecMgrSetDefaultNV( void )
ZDSecMgrSetDefaultNV:
        CFI Block cfiBlock800 Using cfiCommon0
        CFI Function ZDSecMgrSetDefaultNV
        CODE
// 3857 {
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
// 3858   uint16 i;
// 3859   nvDeviceListHdr_t hdr;
// 3860   ZDSecMgrEntry_t secMgrEntry;
// 3861   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 3862 
// 3863   // Initialize the header
// 3864   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine93 & 0xFFFF
// 3865 
// 3866   // clear the header
// 3867   osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
??CrossCallReturnLabel_248:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_187:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
// 3868 
// 3869   osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine45 & 0xFFFF
// 3870 
// 3871   for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
// 3872   {
// 3873     // Clear the record
// 3874     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 3875                 (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
// 3876                         sizeof(ZDSecMgrEntry_t), &secMgrEntry );
??CrossCallReturnLabel_177:
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x5
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   ??Subroutine120_0 & 0xFFFF
// 3877   }
??CrossCallReturnLabel_188:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_61:
        JC      ??CrossCallReturnLabel_177
// 3878 
// 3879   pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x18
        LCALL   ?Subroutine83 & 0xFFFF
// 3880 
// 3881   if (pApsLinkKey != NULL)
??CrossCallReturnLabel_131:
        JZ      ??ZDSecMgrSetDefaultNV_0
// 3882   {
// 3883     osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??Subroutine116_0 & 0xFFFF
// 3884 
// 3885     for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
// 3886     {
// 3887       // Clear the record
// 3888       osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
// 3889                     sizeof(APSME_LinkKeyData_t), pApsLinkKey);
??CrossCallReturnLabel_178:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 2,#0x18
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        LCALL   ?Subroutine40 & 0xFFFF
// 3890     }
??CrossCallReturnLabel_179:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_62:
        JC      ??CrossCallReturnLabel_178
// 3891 
// 3892     osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
// 3893   }
// 3894 }
??ZDSecMgrSetDefaultNV_0:
        MOV     A,#0x7
        CFI EndBlock cfiBlock800
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock801 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock801
        REQUIRE ??Subroutine155_0
        ; // Fall through to label ??Subroutine155_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine155_0:
        CFI Block cfiBlock802 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock802

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond803 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond804 Using cfiCommon0
        CFI (cfiCond804) NoFunction
        CFI (cfiCond804) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond804) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond804) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond804) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond804) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond804) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond804) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond804) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond804) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond804) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond804) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond804) CFA_SP SP+0
        CFI (cfiCond804) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond805 Using cfiCommon0
        CFI (cfiCond805) NoFunction
        CFI (cfiCond805) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond805) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond805) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond805) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond805) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond805) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond805) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond805) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond805) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond805) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond805) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond805) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond805) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond805) CFA_SP SP+0
        CFI (cfiCond805) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond806 Using cfiCommon0
        CFI (cfiCond806) NoFunction
        CFI (cfiCond806) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond806) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond806) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond806) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond806) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond806) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond806) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond806) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond806) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond806) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond806) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond806) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond806) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond806) CFA_SP SP+0
        CFI (cfiCond806) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond807 Using cfiCommon0
        CFI (cfiCond807) NoFunction
        CFI (cfiCond807) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond807) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond807) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond807) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond807) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond807) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond807) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond807) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond807) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond807) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond807) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond807) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond807) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond807) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond807) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond807) CFA_SP SP+0
        CFI (cfiCond807) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker808 Using cfiCommon1
        CFI (cfiPicker808) NoFunction
        CFI (cfiPicker808) Picker
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        CLR     C
        MOV     A,R6
        SUBB    A,#0x3
        MOV     A,R7
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond803
        CFI EndBlock cfiCond804
        CFI EndBlock cfiCond805
        CFI EndBlock cfiCond806
        CFI EndBlock cfiCond807
        CFI EndBlock cfiPicker808
// 3895 
// 3896 #if defined ( NV_RESTORE )
// 3897 /*********************************************************************
// 3898  * @fn      ZDSecMgrUpdateNV()
// 3899  *
// 3900  * @brief   Updates one entry of the APS link key table to NV
// 3901  *
// 3902  * @param   index - to the entry in security manager table
// 3903  *
// 3904  * @return  none
// 3905  */
// 3906 static void ZDSecMgrUpdateNV( uint16 index )
// 3907 {
// 3908   nvDeviceListHdr_t hdr;
// 3909 
// 3910   if (ZDSecMgrEntries != NULL)
// 3911   {
// 3912     // Save off the record
// 3913     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 3914                    (uint16)((sizeof(nvDeviceListHdr_t)) + (index * sizeof(ZDSecMgrEntry_t))),
// 3915                    sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[index] );
// 3916   }
// 3917 
// 3918   if (osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS)
// 3919   {
// 3920     if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
// 3921     {
// 3922       if (hdr.numRecs > 0)
// 3923       {
// 3924         hdr.numRecs--;
// 3925       }
// 3926     }
// 3927     else
// 3928     {
// 3929       hdr.numRecs++;
// 3930     }
// 3931 
// 3932     // Save off the header
// 3933     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
// 3934   }
// 3935 }
// 3936 #endif // NV_RESTORE
// 3937 
// 3938 /******************************************************************************
// 3939  * @fn          ZDSecMgrAPSRemove
// 3940  *
// 3941  * @brief       Remove device from network.
// 3942  *
// 3943  * @param       nwkAddr - device's NWK address
// 3944  * @param       extAddr - device's Extended address
// 3945  * @param       parentAddr - parent's NWK address
// 3946  *
// 3947  * @return      ZStatus_t
// 3948  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3949 ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
ZDSecMgrAPSRemove:
        CFI Block cfiBlock809 Using cfiCommon0
        CFI Function ZDSecMgrAPSRemove
        CODE
// 3950 {
        FUNCALL ZDSecMgrAPSRemove, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine157_0 & 0xFFFF
// 3951   ZDSecMgrDevice_t device;
// 3952 
// 3953   if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
// 3954        ( extAddr == NULL )              ||
// 3955        ( parentAddr == INVALID_NODE_ADDR ) )
??CrossCallReturnLabel_346:
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??ZDSecMgrAPSRemove_0
        MOV     A,#-0x1
        XRL     A,R3
??ZDSecMgrAPSRemove_0:
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,R4
        ORL     A,R5
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDSecMgrAPSRemove_2
        MOV     A,#-0x1
        XRL     A,R1
??ZDSecMgrAPSRemove_2:
        JNZ     ??ZDSecMgrAPSRemove_3
// 3956   {
// 3957     return ( ZFailure );
??ZDSecMgrAPSRemove_1:
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAPSRemove_4
// 3958   }
// 3959 
// 3960   device.nwkAddr = nwkAddr;
??ZDSecMgrAPSRemove_3:
        LCALL   ?Subroutine37 & 0xFFFF
// 3961   device.extAddr = extAddr;
??CrossCallReturnLabel_371:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3962   device.parentAddr = parentAddr;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
// 3963 
// 3964   // remove device
// 3965   ZDSecMgrDeviceRemove( &device );
// 3966 
// 3967   return ( ZSuccess );
??CrossCallReturnLabel_4:
        MOV     R1,#0x0
??ZDSecMgrAPSRemove_4:
        LJMP    ?Subroutine9 & 0xFFFF
        CFI EndBlock cfiBlock809
// 3968 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine72:
        CFI Block cfiCond810 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_348
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond811 Using cfiCommon0
        CFI (cfiCond811) NoFunction
        CFI (cfiCond811) Conditional ??CrossCallReturnLabel_349
        CFI (cfiCond811) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond811) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond811) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond811) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond811) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond811) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond811) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond811) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond811) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond811) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond811) CFA_SP SP+0
        CFI (cfiCond811) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker812 Using cfiCommon1
        CFI (cfiPicker812) NoFunction
        CFI (cfiPicker812) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond810
        CFI EndBlock cfiCond811
        CFI EndBlock cfiPicker812
        REQUIRE ??Subroutine156_0
        ; // Fall through to label ??Subroutine156_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine156_0:
        CFI Block cfiCond813 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_347
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond814 Using cfiCommon0
        CFI (cfiCond814) NoFunction
        CFI (cfiCond814) Conditional ??CrossCallReturnLabel_348
        CFI (cfiCond814) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond814) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond814) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond814) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond814) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond814) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond814) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond814) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond814) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond814) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond814) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond814) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond814) CFA_SP SP+0
        CFI (cfiCond814) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond815 Using cfiCommon0
        CFI (cfiCond815) NoFunction
        CFI (cfiCond815) Conditional ??CrossCallReturnLabel_349
        CFI (cfiCond815) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond815) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond815) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond815) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond815) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond815) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond815) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond815) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond815) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond815) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond815) CFA_SP SP+0
        CFI (cfiCond815) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker816 Using cfiCommon1
        CFI (cfiPicker816) NoFunction
        CFI (cfiPicker816) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond813
        CFI EndBlock cfiCond814
        CFI EndBlock cfiCond815
        CFI EndBlock cfiPicker816
        REQUIRE ??Subroutine157_0
        ; // Fall through to label ??Subroutine157_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine157_0:
        CFI Block cfiCond817 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_342
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond818 Using cfiCommon0
        CFI (cfiCond818) NoFunction
        CFI (cfiCond818) Conditional ??CrossCallReturnLabel_343
        CFI (cfiCond818) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond818) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond818) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond818) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond818) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond818) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond818) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond818) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond818) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond818) CFA_SP SP+0
        CFI (cfiCond818) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond819 Using cfiCommon0
        CFI (cfiCond819) NoFunction
        CFI (cfiCond819) Conditional ??CrossCallReturnLabel_344
        CFI (cfiCond819) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond819) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond819) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond819) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond819) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond819) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond819) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond819) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond819) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond819) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond819) CFA_SP SP+0
        CFI (cfiCond819) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond820 Using cfiCommon0
        CFI (cfiCond820) NoFunction
        CFI (cfiCond820) Conditional ??CrossCallReturnLabel_345
        CFI (cfiCond820) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond820) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond820) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond820) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond820) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond820) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond820) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond820) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond820) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond820) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond820) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond820) CFA_SP SP+0
        CFI (cfiCond820) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond821 Using cfiCommon0
        CFI (cfiCond821) NoFunction
        CFI (cfiCond821) Conditional ??CrossCallReturnLabel_346
        CFI (cfiCond821) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond821) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond821) CFA_SP SP+-5
        CFI (cfiCond821) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond822 Using cfiCommon0
        CFI (cfiCond822) NoFunction
        CFI (cfiCond822) Conditional ??CrossCallReturnLabel_347
        CFI (cfiCond822) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond822) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond822) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond822) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond822) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond822) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond822) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond822) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond822) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond822) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond822) CFA_SP SP+0
        CFI (cfiCond822) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond823 Using cfiCommon0
        CFI (cfiCond823) NoFunction
        CFI (cfiCond823) Conditional ??CrossCallReturnLabel_348
        CFI (cfiCond823) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond823) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond823) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond823) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond823) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond823) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond823) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond823) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond823) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond823) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond823) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond823) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond823) CFA_SP SP+0
        CFI (cfiCond823) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond824 Using cfiCommon0
        CFI (cfiCond824) NoFunction
        CFI (cfiCond824) Conditional ??CrossCallReturnLabel_349
        CFI (cfiCond824) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond824) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond824) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond824) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond824) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond824) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond824) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond824) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond824) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond824) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond824) CFA_SP SP+0
        CFI (cfiCond824) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker825 Using cfiCommon1
        CFI (cfiPicker825) NoFunction
        CFI (cfiPicker825) Picker
        LCALL   ?Subroutine107 & 0xFFFF
??CrossCallReturnLabel_355:
        RET
        CFI EndBlock cfiCond817
        CFI EndBlock cfiCond818
        CFI EndBlock cfiCond819
        CFI EndBlock cfiCond820
        CFI EndBlock cfiCond821
        CFI EndBlock cfiCond822
        CFI EndBlock cfiCond823
        CFI EndBlock cfiCond824
        CFI EndBlock cfiPicker825

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine107:
        CFI Block cfiCond826 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_82
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond827 Using cfiCommon0
        CFI (cfiCond827) NoFunction
        CFI (cfiCond827) Conditional ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_83
        CFI (cfiCond827) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond827) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond827) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond827) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond827) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond827) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond827) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond827) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond827) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond827) CFA_SP SP+0
        CFI (cfiCond827) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond828 Using cfiCommon0
        CFI (cfiCond828) NoFunction
        CFI (cfiCond828) Conditional ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_47
        CFI (cfiCond828) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond828) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond828) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond828) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond828) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond828) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond828) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond828) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond828) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond828) CFA_SP SP+0
        CFI (cfiCond828) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond829 Using cfiCommon0
        CFI (cfiCond829) NoFunction
        CFI (cfiCond829) Conditional ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_48
        CFI (cfiCond829) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond829) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond829) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond829) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond829) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond829) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond829) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond829) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond829) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond829) CFA_SP SP+0
        CFI (cfiCond829) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond830 Using cfiCommon0
        CFI (cfiCond830) NoFunction
        CFI (cfiCond830) Conditional ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_49
        CFI (cfiCond830) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond830) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond830) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond830) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond830) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond830) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond830) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond830) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond830) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond830) CFA_SP SP+0
        CFI (cfiCond830) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond831 Using cfiCommon0
        CFI (cfiCond831) NoFunction
        CFI (cfiCond831) Conditional ??CrossCallReturnLabel_354, ??CrossCallReturnLabel_268
        CFI (cfiCond831) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond831) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond831) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond831) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond831) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond831) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond831) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond831) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond831) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond831) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond831) CFA_SP SP+0
        CFI (cfiCond831) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond832 Using cfiCommon0
        CFI (cfiCond832) NoFunction
        CFI (cfiCond832) Conditional ??CrossCallReturnLabel_354, ??CrossCallReturnLabel_269
        CFI (cfiCond832) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond832) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond832) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond832) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond832) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond832) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond832) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond832) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond832) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond832) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond832) CFA_SP SP+0
        CFI (cfiCond832) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond833 Using cfiCommon0
        CFI (cfiCond833) NoFunction
        CFI (cfiCond833) Conditional ??CrossCallReturnLabel_354, ??CrossCallReturnLabel_265
        CFI (cfiCond833) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond833) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond833) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond833) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond833) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond833) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond833) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond833) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond833) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond833) CFA_SP SP+0
        CFI (cfiCond833) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond834 Using cfiCommon0
        CFI (cfiCond834) NoFunction
        CFI (cfiCond834) Conditional ??CrossCallReturnLabel_354, ??CrossCallReturnLabel_266
        CFI (cfiCond834) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond834) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond834) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond834) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond834) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond834) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond834) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond834) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond834) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond834) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond834) CFA_SP SP+0
        CFI (cfiCond834) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond835 Using cfiCommon0
        CFI (cfiCond835) NoFunction
        CFI (cfiCond835) Conditional ??CrossCallReturnLabel_354, ??CrossCallReturnLabel_267
        CFI (cfiCond835) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond835) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond835) CFA_SP SP+-5
        CFI (cfiCond835) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond836 Using cfiCommon0
        CFI (cfiCond836) NoFunction
        CFI (cfiCond836) Conditional ??CrossCallReturnLabel_350, ??CrossCallReturnLabel_15
        CFI (cfiCond836) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond836) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond836) CFA_SP SP+-5
        CFI (cfiCond836) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond837 Using cfiCommon0
        CFI (cfiCond837) NoFunction
        CFI (cfiCond837) Conditional ??CrossCallReturnLabel_350, ??CrossCallReturnLabel_16
        CFI (cfiCond837) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond837) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond837) CFA_SP SP+-5
        CFI (cfiCond837) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond838 Using cfiCommon0
        CFI (cfiCond838) NoFunction
        CFI (cfiCond838) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_111
        CFI (cfiCond838) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond838) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond838) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond838) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond838) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond838) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond838) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond838) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond838) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond838) CFA_SP SP+0
        CFI (cfiCond838) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond839 Using cfiCommon0
        CFI (cfiCond839) NoFunction
        CFI (cfiCond839) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_112
        CFI (cfiCond839) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond839) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond839) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond839) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond839) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond839) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond839) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond839) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond839) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond839) CFA_SP SP+0
        CFI (cfiCond839) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond840 Using cfiCommon0
        CFI (cfiCond840) NoFunction
        CFI (cfiCond840) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_113
        CFI (cfiCond840) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond840) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond840) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond840) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond840) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond840) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond840) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond840) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond840) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond840) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond840) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond840) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond840) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond840) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond840) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond840) CFA_SP SP+0
        CFI (cfiCond840) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond841 Using cfiCommon0
        CFI (cfiCond841) NoFunction
        CFI (cfiCond841) Conditional ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_348
        CFI (cfiCond841) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond841) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond841) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond841) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond841) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond841) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond841) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond841) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond841) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond841) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond841) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond841) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond841) CFA_SP SP+0
        CFI (cfiCond841) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond842 Using cfiCommon0
        CFI (cfiCond842) NoFunction
        CFI (cfiCond842) Conditional ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_349
        CFI (cfiCond842) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond842) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond842) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond842) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond842) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond842) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond842) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond842) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond842) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond842) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond842) CFA_SP SP+0
        CFI (cfiCond842) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond843 Using cfiCommon0
        CFI (cfiCond843) NoFunction
        CFI (cfiCond843) Conditional ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_347
        CFI (cfiCond843) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond843) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond843) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond843) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond843) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond843) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond843) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond843) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond843) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond843) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond843) CFA_SP SP+0
        CFI (cfiCond843) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond844 Using cfiCommon0
        CFI (cfiCond844) NoFunction
        CFI (cfiCond844) Conditional ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_342
        CFI (cfiCond844) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond844) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond844) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond844) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond844) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond844) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond844) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond844) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond844) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond844) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond844) CFA_SP SP+0
        CFI (cfiCond844) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond845 Using cfiCommon0
        CFI (cfiCond845) NoFunction
        CFI (cfiCond845) Conditional ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_343
        CFI (cfiCond845) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond845) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond845) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond845) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond845) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond845) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond845) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond845) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond845) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond845) CFA_SP SP+0
        CFI (cfiCond845) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond846 Using cfiCommon0
        CFI (cfiCond846) NoFunction
        CFI (cfiCond846) Conditional ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_344
        CFI (cfiCond846) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond846) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond846) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond846) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond846) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond846) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond846) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond846) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond846) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond846) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond846) CFA_SP SP+0
        CFI (cfiCond846) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond847 Using cfiCommon0
        CFI (cfiCond847) NoFunction
        CFI (cfiCond847) Conditional ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_345
        CFI (cfiCond847) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond847) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond847) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond847) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond847) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond847) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond847) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond847) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond847) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond847) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond847) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond847) CFA_SP SP+0
        CFI (cfiCond847) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond848 Using cfiCommon0
        CFI (cfiCond848) NoFunction
        CFI (cfiCond848) Conditional ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_346
        CFI (cfiCond848) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond848) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond848) CFA_SP SP+-5
        CFI (cfiCond848) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker849 Using cfiCommon1
        CFI (cfiPicker849) NoFunction
        CFI (cfiPicker849) Picker
        LCALL   ?Subroutine114 & 0xFFFF
??CrossCallReturnLabel_359:
        RET
        CFI EndBlock cfiCond826
        CFI EndBlock cfiCond827
        CFI EndBlock cfiCond828
        CFI EndBlock cfiCond829
        CFI EndBlock cfiCond830
        CFI EndBlock cfiCond831
        CFI EndBlock cfiCond832
        CFI EndBlock cfiCond833
        CFI EndBlock cfiCond834
        CFI EndBlock cfiCond835
        CFI EndBlock cfiCond836
        CFI EndBlock cfiCond837
        CFI EndBlock cfiCond838
        CFI EndBlock cfiCond839
        CFI EndBlock cfiCond840
        CFI EndBlock cfiCond841
        CFI EndBlock cfiCond842
        CFI EndBlock cfiCond843
        CFI EndBlock cfiCond844
        CFI EndBlock cfiCond845
        CFI EndBlock cfiCond846
        CFI EndBlock cfiCond847
        CFI EndBlock cfiCond848
        CFI EndBlock cfiPicker849

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine114:
        CFI Block cfiCond850 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_201
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond851 Using cfiCommon0
        CFI (cfiCond851) NoFunction
        CFI (cfiCond851) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_202
        CFI (cfiCond851) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond851) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond851) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond851) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond851) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond851) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond851) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond851) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond851) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond851) CFA_SP SP+0
        CFI (cfiCond851) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond852 Using cfiCommon0
        CFI (cfiCond852) NoFunction
        CFI (cfiCond852) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_203
        CFI (cfiCond852) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond852) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond852) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond852) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond852) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond852) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond852) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond852) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond852) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond852) CFA_SP SP+0
        CFI (cfiCond852) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond853 Using cfiCommon0
        CFI (cfiCond853) NoFunction
        CFI (cfiCond853) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_204
        CFI (cfiCond853) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond853) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond853) CFA_SP SP+-5
        CFI Block cfiCond854 Using cfiCommon0
        CFI (cfiCond854) NoFunction
        CFI (cfiCond854) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_40
        CFI (cfiCond854) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond854) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond854) CFA_SP SP+-5
        CFI Block cfiCond855 Using cfiCommon0
        CFI (cfiCond855) NoFunction
        CFI (cfiCond855) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_41
        CFI (cfiCond855) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond855) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond855) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond855) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond855) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond855) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond855) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond855) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond855) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond855) CFA_SP SP+0
        CFI (cfiCond855) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond856 Using cfiCommon0
        CFI (cfiCond856) NoFunction
        CFI (cfiCond856) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_306
        CFI (cfiCond856) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond856) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond856) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond856) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond856) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond856) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond856) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond856) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond856) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond856) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond856) CFA_SP SP+0
        CFI (cfiCond856) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond857 Using cfiCommon0
        CFI (cfiCond857) NoFunction
        CFI (cfiCond857) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_307
        CFI (cfiCond857) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond857) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond857) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond857) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond857) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond857) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond857) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond857) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond857) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond857) CFA_SP SP+0
        CFI (cfiCond857) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond858 Using cfiCommon0
        CFI (cfiCond858) NoFunction
        CFI (cfiCond858) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_308
        CFI (cfiCond858) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond858) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond858) CFA_SP SP+-5
        CFI (cfiCond858) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond859 Using cfiCommon0
        CFI (cfiCond859) NoFunction
        CFI (cfiCond859) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_318
        CFI (cfiCond859) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond859) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond859) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond859) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond859) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond859) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond859) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond859) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond859) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond859) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond859) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond859) CFA_SP SP+0
        CFI (cfiCond859) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond860 Using cfiCommon0
        CFI (cfiCond860) NoFunction
        CFI (cfiCond860) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_319
        CFI (cfiCond860) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond860) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond860) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond860) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond860) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond860) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond860) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond860) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond860) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond860) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond860) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond860) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond860) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond860) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond860) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond860) CFA_SP SP+0
        CFI (cfiCond860) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond861 Using cfiCommon0
        CFI (cfiCond861) NoFunction
        CFI (cfiCond861) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_320
        CFI (cfiCond861) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond861) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond861) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond861) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond861) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond861) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond861) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond861) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond861) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond861) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond861) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond861) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond861) CFA_SP SP+0
        CFI (cfiCond861) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond862 Using cfiCommon0
        CFI (cfiCond862) NoFunction
        CFI (cfiCond862) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_309
        CFI (cfiCond862) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond862) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond862) CFA_SP SP+-5
        CFI Block cfiCond863 Using cfiCommon0
        CFI (cfiCond863) NoFunction
        CFI (cfiCond863) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_310
        CFI (cfiCond863) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond863) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond863) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond863) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond863) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond863) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond863) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond863) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond863) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond863) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond863) CFA_SP SP+0
        CFI (cfiCond863) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond864 Using cfiCommon0
        CFI (cfiCond864) NoFunction
        CFI (cfiCond864) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_311
        CFI (cfiCond864) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond864) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond864) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond864) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond864) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond864) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond864) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond864) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond864) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond864) CFA_SP SP+0
        CFI (cfiCond864) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond865 Using cfiCommon0
        CFI (cfiCond865) NoFunction
        CFI (cfiCond865) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_312
        CFI (cfiCond865) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond865) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond865) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond865) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond865) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond865) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond865) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond865) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond865) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond865) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond865) CFA_SP SP+0
        CFI (cfiCond865) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond866 Using cfiCommon0
        CFI (cfiCond866) NoFunction
        CFI (cfiCond866) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_313
        CFI (cfiCond866) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond866) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond866) CFA_SP SP+-5
        CFI Block cfiCond867 Using cfiCommon0
        CFI (cfiCond867) NoFunction
        CFI (cfiCond867) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_314
        CFI (cfiCond867) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond867) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond867) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond867) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond867) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond867) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond867) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond867) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond867) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond867) CFA_SP SP+0
        CFI (cfiCond867) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond868 Using cfiCommon0
        CFI (cfiCond868) NoFunction
        CFI (cfiCond868) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_315
        CFI (cfiCond868) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond868) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond868) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond868) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond868) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond868) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond868) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond868) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond868) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond868) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond868) CFA_SP SP+0
        CFI (cfiCond868) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond869 Using cfiCommon0
        CFI (cfiCond869) NoFunction
        CFI (cfiCond869) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_316
        CFI (cfiCond869) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond869) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond869) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond869) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond869) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond869) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond869) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond869) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond869) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond869) CFA_SP SP+0
        CFI (cfiCond869) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond870 Using cfiCommon0
        CFI (cfiCond870) NoFunction
        CFI (cfiCond870) Conditional ??CrossCallReturnLabel_358, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_317
        CFI (cfiCond870) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond870) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond870) CFA_SP SP+-5
        CFI Block cfiCond871 Using cfiCommon0
        CFI (cfiCond871) NoFunction
        CFI (cfiCond871) Conditional ??CrossCallReturnLabel_356, ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_24
        CFI (cfiCond871) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond871) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond871) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond871) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond871) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond871) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond871) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond871) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond871) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond871) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond871) CFA_SP SP+0
        CFI (cfiCond871) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond872 Using cfiCommon0
        CFI (cfiCond872) NoFunction
        CFI (cfiCond872) Conditional ??CrossCallReturnLabel_356, ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_25
        CFI (cfiCond872) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond872) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond872) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond872) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond872) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond872) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond872) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond872) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond872) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond872) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond872) CFA_SP SP+0
        CFI (cfiCond872) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond873 Using cfiCommon0
        CFI (cfiCond873) NoFunction
        CFI (cfiCond873) Conditional ??CrossCallReturnLabel_356, ??CrossCallReturnLabel_142, ??CrossCallReturnLabel_26
        CFI (cfiCond873) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond873) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond873) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond873) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond873) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond873) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond873) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond873) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond873) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond873) CFA_SP SP+0
        CFI (cfiCond873) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond874 Using cfiCommon0
        CFI (cfiCond874) NoFunction
        CFI (cfiCond874) Conditional ??CrossCallReturnLabel_356, ??CrossCallReturnLabel_142, ??CrossCallReturnLabel_27
        CFI (cfiCond874) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond874) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond874) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond874) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond874) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond874) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond874) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond874) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond874) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond874) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond874) CFA_SP SP+0
        CFI (cfiCond874) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond875 Using cfiCommon0
        CFI (cfiCond875) NoFunction
        CFI (cfiCond875) Conditional ??CrossCallReturnLabel_356, ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_28
        CFI (cfiCond875) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond875) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond875) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond875) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond875) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond875) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond875) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond875) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond875) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond875) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond875) CFA_SP SP+0
        CFI (cfiCond875) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond876 Using cfiCommon0
        CFI (cfiCond876) NoFunction
        CFI (cfiCond876) Conditional ??CrossCallReturnLabel_356, ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_29
        CFI (cfiCond876) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond876) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond876) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond876) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond876) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond876) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond876) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond876) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond876) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond876) CFA_SP SP+0
        CFI (cfiCond876) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond877 Using cfiCommon0
        CFI (cfiCond877) NoFunction
        CFI (cfiCond877) Conditional ??CrossCallReturnLabel_357, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_217
        CFI (cfiCond877) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond877) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond877) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond877) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond877) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond877) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond877) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond877) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond877) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond877) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond877) CFA_SP SP+0
        CFI (cfiCond877) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond878 Using cfiCommon0
        CFI (cfiCond878) NoFunction
        CFI (cfiCond878) Conditional ??CrossCallReturnLabel_357, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_218
        CFI (cfiCond878) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond878) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond878) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond878) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond878) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond878) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond878) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond878) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond878) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond878) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond878) CFA_SP SP+0
        CFI (cfiCond878) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond879 Using cfiCommon0
        CFI (cfiCond879) NoFunction
        CFI (cfiCond879) Conditional ??CrossCallReturnLabel_357, ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_239
        CFI (cfiCond879) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond879) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond879) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond879) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond879) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond879) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond879) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond879) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond879) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond879) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond879) CFA_SP SP+0
        CFI (cfiCond879) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond880 Using cfiCommon0
        CFI (cfiCond880) NoFunction
        CFI (cfiCond880) Conditional ??CrossCallReturnLabel_357, ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_240
        CFI (cfiCond880) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond880) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond880) CFA_SP SP+-5
        CFI (cfiCond880) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond881 Using cfiCommon0
        CFI (cfiCond881) NoFunction
        CFI (cfiCond881) Conditional ??CrossCallReturnLabel_357, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_270
        CFI (cfiCond881) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond881) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond881) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond881) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond881) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond881) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond881) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond881) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond881) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond881) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond881) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond881) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond881) CFA_SP SP+0
        CFI (cfiCond881) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond882 Using cfiCommon0
        CFI (cfiCond882) NoFunction
        CFI (cfiCond882) Conditional ??CrossCallReturnLabel_357, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_271
        CFI (cfiCond882) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond882) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond882) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond882) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond882) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond882) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond882) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond882) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond882) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond882) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond882) CFA_SP SP+0
        CFI (cfiCond882) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond883 Using cfiCommon0
        CFI (cfiCond883) NoFunction
        CFI (cfiCond883) Conditional ??CrossCallReturnLabel_357, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_297
        CFI (cfiCond883) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond883) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond883) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond883) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond883) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond883) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond883) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond883) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond883) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond883) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond883) CFA_SP SP+0
        CFI (cfiCond883) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond884 Using cfiCommon0
        CFI (cfiCond884) NoFunction
        CFI (cfiCond884) Conditional ??CrossCallReturnLabel_357, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_298
        CFI (cfiCond884) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond884) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond884) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond884) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond884) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond884) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond884) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond884) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond884) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond884) CFA_SP SP+0
        CFI (cfiCond884) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond885 Using cfiCommon0
        CFI (cfiCond885) NoFunction
        CFI (cfiCond885) Conditional ??CrossCallReturnLabel_357, ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_105
        CFI (cfiCond885) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond885) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond885) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond885) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond885) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond885) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond885) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond885) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond885) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond885) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond885) CFA_SP SP+0
        CFI (cfiCond885) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond886 Using cfiCommon0
        CFI (cfiCond886) NoFunction
        CFI (cfiCond886) Conditional ??CrossCallReturnLabel_357, ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_106
        CFI (cfiCond886) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond886) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond886) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond886) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond886) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond886) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond886) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond886) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond886) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond886) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond886) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond886) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond886) CFA_SP SP+0
        CFI (cfiCond886) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond887 Using cfiCommon0
        CFI (cfiCond887) NoFunction
        CFI (cfiCond887) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_82
        CFI (cfiCond887) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond887) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond887) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond887) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond887) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond887) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond887) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond887) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond887) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond887) CFA_SP SP+0
        CFI (cfiCond887) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond888 Using cfiCommon0
        CFI (cfiCond888) NoFunction
        CFI (cfiCond888) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_83
        CFI (cfiCond888) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond888) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond888) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond888) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond888) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond888) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond888) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond888) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond888) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond888) CFA_SP SP+0
        CFI (cfiCond888) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond889 Using cfiCommon0
        CFI (cfiCond889) NoFunction
        CFI (cfiCond889) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_47
        CFI (cfiCond889) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond889) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond889) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond889) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond889) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond889) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond889) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond889) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond889) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond889) CFA_SP SP+0
        CFI (cfiCond889) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond890 Using cfiCommon0
        CFI (cfiCond890) NoFunction
        CFI (cfiCond890) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_48
        CFI (cfiCond890) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond890) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond890) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond890) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond890) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond890) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond890) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond890) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond890) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond890) CFA_SP SP+0
        CFI (cfiCond890) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond891 Using cfiCommon0
        CFI (cfiCond891) NoFunction
        CFI (cfiCond891) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_49
        CFI (cfiCond891) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond891) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond891) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond891) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond891) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond891) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond891) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond891) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond891) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond891) CFA_SP SP+0
        CFI (cfiCond891) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond892 Using cfiCommon0
        CFI (cfiCond892) NoFunction
        CFI (cfiCond892) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_354, ??CrossCallReturnLabel_268
        CFI (cfiCond892) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond892) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond892) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond892) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond892) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond892) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond892) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond892) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond892) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond892) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond892) CFA_SP SP+0
        CFI (cfiCond892) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond893 Using cfiCommon0
        CFI (cfiCond893) NoFunction
        CFI (cfiCond893) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_354, ??CrossCallReturnLabel_269
        CFI (cfiCond893) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond893) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond893) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond893) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond893) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond893) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond893) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond893) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond893) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond893) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond893) CFA_SP SP+0
        CFI (cfiCond893) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond894 Using cfiCommon0
        CFI (cfiCond894) NoFunction
        CFI (cfiCond894) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_354, ??CrossCallReturnLabel_265
        CFI (cfiCond894) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond894) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond894) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond894) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond894) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond894) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond894) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond894) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond894) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond894) CFA_SP SP+0
        CFI (cfiCond894) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond895 Using cfiCommon0
        CFI (cfiCond895) NoFunction
        CFI (cfiCond895) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_354, ??CrossCallReturnLabel_266
        CFI (cfiCond895) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond895) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond895) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond895) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond895) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond895) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond895) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond895) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond895) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond895) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond895) CFA_SP SP+0
        CFI (cfiCond895) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond896 Using cfiCommon0
        CFI (cfiCond896) NoFunction
        CFI (cfiCond896) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_354, ??CrossCallReturnLabel_267
        CFI (cfiCond896) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond896) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond896) CFA_SP SP+-5
        CFI (cfiCond896) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond897 Using cfiCommon0
        CFI (cfiCond897) NoFunction
        CFI (cfiCond897) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_350, ??CrossCallReturnLabel_15
        CFI (cfiCond897) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond897) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond897) CFA_SP SP+-5
        CFI (cfiCond897) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond898 Using cfiCommon0
        CFI (cfiCond898) NoFunction
        CFI (cfiCond898) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_350, ??CrossCallReturnLabel_16
        CFI (cfiCond898) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond898) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond898) CFA_SP SP+-5
        CFI (cfiCond898) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond899 Using cfiCommon0
        CFI (cfiCond899) NoFunction
        CFI (cfiCond899) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_111
        CFI (cfiCond899) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond899) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond899) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond899) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond899) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond899) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond899) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond899) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond899) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond899) CFA_SP SP+0
        CFI (cfiCond899) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond900 Using cfiCommon0
        CFI (cfiCond900) NoFunction
        CFI (cfiCond900) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_112
        CFI (cfiCond900) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond900) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond900) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond900) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond900) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond900) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond900) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond900) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond900) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond900) CFA_SP SP+0
        CFI (cfiCond900) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond901 Using cfiCommon0
        CFI (cfiCond901) NoFunction
        CFI (cfiCond901) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_113
        CFI (cfiCond901) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond901) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond901) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond901) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond901) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond901) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond901) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond901) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond901) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond901) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond901) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond901) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond901) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond901) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond901) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond901) CFA_SP SP+0
        CFI (cfiCond901) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond902 Using cfiCommon0
        CFI (cfiCond902) NoFunction
        CFI (cfiCond902) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_348
        CFI (cfiCond902) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond902) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond902) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond902) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond902) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond902) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond902) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond902) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond902) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond902) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond902) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond902) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond902) CFA_SP SP+0
        CFI (cfiCond902) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond903 Using cfiCommon0
        CFI (cfiCond903) NoFunction
        CFI (cfiCond903) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_349
        CFI (cfiCond903) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond903) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond903) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond903) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond903) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond903) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond903) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond903) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond903) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond903) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond903) CFA_SP SP+0
        CFI (cfiCond903) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond904 Using cfiCommon0
        CFI (cfiCond904) NoFunction
        CFI (cfiCond904) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_347
        CFI (cfiCond904) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond904) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond904) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond904) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond904) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond904) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond904) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond904) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond904) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond904) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond904) CFA_SP SP+0
        CFI (cfiCond904) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond905 Using cfiCommon0
        CFI (cfiCond905) NoFunction
        CFI (cfiCond905) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_342
        CFI (cfiCond905) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond905) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond905) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond905) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond905) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond905) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond905) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond905) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond905) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond905) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond905) CFA_SP SP+0
        CFI (cfiCond905) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond906 Using cfiCommon0
        CFI (cfiCond906) NoFunction
        CFI (cfiCond906) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_343
        CFI (cfiCond906) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond906) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond906) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond906) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond906) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond906) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond906) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond906) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond906) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond906) CFA_SP SP+0
        CFI (cfiCond906) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond907 Using cfiCommon0
        CFI (cfiCond907) NoFunction
        CFI (cfiCond907) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_344
        CFI (cfiCond907) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond907) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond907) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond907) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond907) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond907) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond907) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond907) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond907) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond907) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond907) CFA_SP SP+0
        CFI (cfiCond907) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond908 Using cfiCommon0
        CFI (cfiCond908) NoFunction
        CFI (cfiCond908) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_345
        CFI (cfiCond908) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond908) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond908) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond908) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond908) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond908) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond908) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond908) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond908) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond908) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond908) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond908) CFA_SP SP+0
        CFI (cfiCond908) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond909 Using cfiCommon0
        CFI (cfiCond909) NoFunction
        CFI (cfiCond909) Conditional ??CrossCallReturnLabel_359, ??CrossCallReturnLabel_355, ??CrossCallReturnLabel_346
        CFI (cfiCond909) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond909) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond909) CFA_SP SP+-5
        CFI (cfiCond909) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker910 Using cfiCommon1
        CFI (cfiPicker910) NoFunction
        CFI (cfiPicker910) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond850
        CFI EndBlock cfiCond851
        CFI EndBlock cfiCond852
        CFI EndBlock cfiCond853
        CFI EndBlock cfiCond854
        CFI EndBlock cfiCond855
        CFI EndBlock cfiCond856
        CFI EndBlock cfiCond857
        CFI EndBlock cfiCond858
        CFI EndBlock cfiCond859
        CFI EndBlock cfiCond860
        CFI EndBlock cfiCond861
        CFI EndBlock cfiCond862
        CFI EndBlock cfiCond863
        CFI EndBlock cfiCond864
        CFI EndBlock cfiCond865
        CFI EndBlock cfiCond866
        CFI EndBlock cfiCond867
        CFI EndBlock cfiCond868
        CFI EndBlock cfiCond869
        CFI EndBlock cfiCond870
        CFI EndBlock cfiCond871
        CFI EndBlock cfiCond872
        CFI EndBlock cfiCond873
        CFI EndBlock cfiCond874
        CFI EndBlock cfiCond875
        CFI EndBlock cfiCond876
        CFI EndBlock cfiCond877
        CFI EndBlock cfiCond878
        CFI EndBlock cfiCond879
        CFI EndBlock cfiCond880
        CFI EndBlock cfiCond881
        CFI EndBlock cfiCond882
        CFI EndBlock cfiCond883
        CFI EndBlock cfiCond884
        CFI EndBlock cfiCond885
        CFI EndBlock cfiCond886
        CFI EndBlock cfiCond887
        CFI EndBlock cfiCond888
        CFI EndBlock cfiCond889
        CFI EndBlock cfiCond890
        CFI EndBlock cfiCond891
        CFI EndBlock cfiCond892
        CFI EndBlock cfiCond893
        CFI EndBlock cfiCond894
        CFI EndBlock cfiCond895
        CFI EndBlock cfiCond896
        CFI EndBlock cfiCond897
        CFI EndBlock cfiCond898
        CFI EndBlock cfiCond899
        CFI EndBlock cfiCond900
        CFI EndBlock cfiCond901
        CFI EndBlock cfiCond902
        CFI EndBlock cfiCond903
        CFI EndBlock cfiCond904
        CFI EndBlock cfiCond905
        CFI EndBlock cfiCond906
        CFI EndBlock cfiCond907
        CFI EndBlock cfiCond908
        CFI EndBlock cfiCond909
        CFI EndBlock cfiPicker910

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond911 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond912 Using cfiCommon0
        CFI (cfiCond912) NoFunction
        CFI (cfiCond912) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond912) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond912) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond912) CFA_SP SP+-5
        CFI (cfiCond912) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker913 Using cfiCommon1
        CFI (cfiPicker913) NoFunction
        CFI (cfiPicker913) Picker
        LCALL   ?Subroutine90 & 0xFFFF
??CrossCallReturnLabel_303:
        LCALL   ??ZDSecMgrDeviceRemove?relay
        RET
        CFI EndBlock cfiCond911
        CFI EndBlock cfiCond912
        CFI EndBlock cfiPicker913
// 3969 
// 3970 /******************************************************************************
// 3971  * @fn          APSME_TCLinkKeyInit
// 3972  *
// 3973  * @brief       Initialize the NV table for preconfigured TC link key
// 3974  *
// 3975  *              When zgUseDefaultTCL is set to TRUE, the default preconfig
// 3976  *              Trust Center Link Key is written to NV. A single tclk is used
// 3977  *              by all devices joining the network.
// 3978  *
// 3979  * @param       setDefault - TRUE to set default values
// 3980  *
// 3981  * @return      none
// 3982  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3983 void APSME_TCLinkKeyInit(uint8 setDefault)
APSME_TCLinkKeyInit:
        CFI Block cfiBlock914 Using cfiCommon0
        CFI Function APSME_TCLinkKeyInit
        CODE
// 3984 {
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
// 3985   uint8             i;
// 3986   APSME_TCLinkKey_t tcLinkKey;
// 3987   uint8             rtrn;
// 3988 
// 3989   // Initialize all NV items for preconfigured TCLK
// 3990   for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 3991   {
// 3992     // Making sure data is cleared for every key all the time
// 3993     osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 3994 
// 3995     // Initialize first element of the table with the default TCLK
// 3996     if((i == 0) && ( zgUseDefaultTCLK == TRUE ))
        MOV     DPTR,#zgUseDefaultTCLK
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??APSME_TCLinkKeyInit_0
// 3997     {
// 3998       osal_memset( tcLinkKey.extAddr, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 3999       osal_memcpy( tcLinkKey.key, defaultTCLinkKey, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#defaultTCLinkKey & 0xff
        MOV     ?V0 + 1,#(defaultTCLinkKey >> 8) & 0xff
        MOV     ?V0 + 2,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine82 & 0xFFFF
// 4000     }
??CrossCallReturnLabel_263:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
// 4001 
// 4002     // If the item doesn't exist in NV memory, create and initialize
// 4003     // it with the default value passed in, either defaultTCLK or 0
// 4004     rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i),
// 4005                                sizeof(APSME_TCLinkKey_t), &tcLinkKey);
// 4006 
// 4007     if (rtrn == SUCCESS)
??APSME_TCLinkKeyInit_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??Subroutine160_0 & 0xFFFF
??CrossCallReturnLabel_376:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeyInit_1
// 4008     {
// 4009       // set the Frame counters to 0 to existing keys in NV
// 4010       osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0,
// 4011                      sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 47)
        LCALL   ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_360:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
// 4012 
// 4013 #if defined ( NV_RESTORE )
// 4014       if (setDefault == TRUE)
// 4015       {
// 4016         // clear the value stored in NV
// 4017         tcLinkKey.txFrmCntr = 0;
// 4018       }
// 4019       else
// 4020       {
// 4021         // increase the value stored in NV
// 4022         tcLinkKey.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
// 4023       }
// 4024 #else
// 4025       // Clear the counters if NV_RESTORE is not enabled and this NV item
// 4026       // already existed in the NV memory
// 4027       tcLinkKey.txFrmCntr = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
// 4028       tcLinkKey.rxFrmCntr = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
// 4029 #endif  // NV_RESTORE
// 4030 
// 4031       osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
// 4032                       sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_189:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
// 4033 
// 4034       // set initial values for counters in RAM
// 4035       TCLinkKeyFrmCntr[i].txFrmCntr = tcLinkKey.txFrmCntr;
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#TCLinkKeyFrmCntr
        LCALL   ?XSTORE_R2345
// 4036       TCLinkKeyFrmCntr[i].rxFrmCntr = tcLinkKey.rxFrmCntr;
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#TCLinkKeyFrmCntr + 4
        LCALL   ?XSTORE_R2345
// 4037     }
// 4038   }
// 4039 
// 4040   // clear copy of key in RAM
// 4041   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
??APSME_TCLinkKeyInit_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 4042 
// 4043 }
        MOV     A,#0x20
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock914
// 4044 
// 4045 /******************************************************************************
// 4046  * @fn          APSME_TCLinkKeySync
// 4047  *
// 4048  * @brief       Sync Trust Center LINK key data.
// 4049  *
// 4050  * @param       srcAddr - [in] srcAddr
// 4051  * @param       si      - [in, out] SSP_Info_t
// 4052  *
// 4053  * @return      ZStatus_t
// 4054  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4055 ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
APSME_TCLinkKeySync:
        CFI Block cfiBlock915 Using cfiCommon0
        CFI Function APSME_TCLinkKeySync
        CODE
// 4056 {
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_IsDefaultTCLK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 4057   uint8 i;
// 4058   ZStatus_t status = ZSecNoKey;
        MOV     ?V0 + 2,#-0x5f
// 4059   APSME_TCLinkKey_t tcLinkKey;
// 4060   uint32 *tclkRxFrmCntr;
// 4061 
// 4062   // Look up the IEEE address of the trust center if it's available
// 4063   if ( AddrMgrExtAddrValid( si->extAddr ) == FALSE )
        ; Setup parameters for call to function AddrMgrExtAddrValid
        LCALL   ?Subroutine113 & 0xFFFF
??CrossCallReturnLabel_174:
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeySync_0
// 4064   {
// 4065     APSME_LookupExtAddr( srcAddr, si->extAddr );
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,R6
        ADD     A,#0x6
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??APSME_LookupExtAddr?relay
// 4066   }
// 4067 
// 4068   // Look up the TC link key associated with the device
// 4069   // or the default TC link key (extAddr is all FFs), whichever is found
// 4070   for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 4071   {
// 4072     // Read entry i of the TC link key table from NV
// 4073     osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
// 4074                  sizeof(APSME_TCLinkKey_t), &tcLinkKey );
??APSME_TCLinkKeySync_0:
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        LCALL   ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_361:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
// 4075 
// 4076     if( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) ||
// 4077         APSME_IsDefaultTCLK(tcLinkKey.extAddr))
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine89 & 0xFFFF
??CrossCallReturnLabel_139:
        JNZ     ??APSME_TCLinkKeySync_1
        ; Setup parameters for call to function APSME_IsDefaultTCLK
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_IsDefaultTCLK?relay
        MOV     A,R1
        JZ      ??APSME_TCLinkKeySync_2
// 4078     {
// 4079       tclkRxFrmCntr = &TCLinkKeyFrmCntr[i].rxFrmCntr;
// 4080 
// 4081       // verify that the incoming frame counter is valid
// 4082       if ( si->frmCntr >= *tclkRxFrmCntr )
??APSME_TCLinkKeySync_1:
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_390:
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#TCLinkKeyFrmCntr + 4
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?UL_GT_X
        JC      ??APSME_TCLinkKeySync_3
// 4083       {
// 4084         // set the keyNvId to use
// 4085         si->keyNvId = (ZCD_NV_TCLK_TABLE_START + i);
        LCALL   ?Subroutine48 & 0xFFFF
// 4086 
// 4087         // update the rx frame counter
// 4088         *tclkRxFrmCntr = si->frmCntr + 1;
??CrossCallReturnLabel_75:
        LCALL   ??Subroutine161_0 & 0xFFFF
??CrossCallReturnLabel_389:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     DPTR,#TCLinkKeyFrmCntr + 4
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
// 4089 
// 4090         status = ZSuccess;
        MOV     ?V0 + 2,#0x0
        SJMP    ??APSME_TCLinkKeySync_2
// 4091       }
// 4092       else
// 4093       {
// 4094         status = ZSecOldFrmCount;
??APSME_TCLinkKeySync_3:
        MOV     ?V0 + 2,#-0x5e
// 4095       }
// 4096       // break from the loop
// 4097       break;
// 4098     }
// 4099   }
// 4100 
// 4101   // clear copy of key in RAM
// 4102   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
??APSME_TCLinkKeySync_2:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 4103 
// 4104   return status;
        MOV     R1,?V0 + 2
        MOV     A,#0x20
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock915
// 4105 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine113:
        CFI Block cfiCond916 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_173
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond917 Using cfiCommon0
        CFI (cfiCond917) NoFunction
        CFI (cfiCond917) Conditional ??CrossCallReturnLabel_174
        CFI (cfiCond917) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond917) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond917) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond917) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond917) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond917) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond917) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond917) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond917) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond917) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond917) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond917) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond917) CFA_SP SP+0
        CFI (cfiCond917) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond918 Using cfiCommon0
        CFI (cfiCond918) NoFunction
        CFI (cfiCond918) Conditional ??CrossCallReturnLabel_175, ??CrossCallReturnLabel_139
        CFI (cfiCond918) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond918) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond918) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond918) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond918) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond918) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond918) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond918) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond918) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond918) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond918) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond918) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond918) CFA_SP SP+0
        CFI (cfiCond918) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond919 Using cfiCommon0
        CFI (cfiCond919) NoFunction
        CFI (cfiCond919) Conditional ??CrossCallReturnLabel_175, ??CrossCallReturnLabel_140
        CFI (cfiCond919) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond919) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond919) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond919) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond919) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond919) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond919) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond919) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond919) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond919) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond919) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond919) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond919) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond919) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond919) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond919) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond919) CFA_SP SP+0
        CFI (cfiCond919) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker920 Using cfiCommon1
        CFI (cfiPicker920) NoFunction
        CFI (cfiPicker920) Picker
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond916
        CFI EndBlock cfiCond917
        CFI EndBlock cfiCond918
        CFI EndBlock cfiCond919
        CFI EndBlock cfiPicker920

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine81:
        CFI Block cfiCond921 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_360
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond922 Using cfiCommon0
        CFI (cfiCond922) NoFunction
        CFI (cfiCond922) Conditional ??CrossCallReturnLabel_361
        CFI (cfiCond922) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond922) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond922) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond922) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond922) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond922) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond922) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond922) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond922) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond922) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond922) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond922) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond922) CFA_SP SP+0
        CFI (cfiCond922) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond923 Using cfiCommon0
        CFI (cfiCond923) NoFunction
        CFI (cfiCond923) Conditional ??CrossCallReturnLabel_362
        CFI (cfiCond923) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond923) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond923) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond923) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond923) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond923) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond923) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond923) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond923) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond923) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond923) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond923) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond923) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond923) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond923) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond923) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond923) CFA_SP SP+0
        CFI (cfiCond923) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiCond924 Using cfiCommon0
        CFI (cfiCond924) NoFunction
        CFI (cfiCond924) Conditional ??CrossCallReturnLabel_363
        CFI (cfiCond924) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond924) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond924) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond924) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond924) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond924) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond924) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond924) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond924) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond924) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond924) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond924) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond924) CFA_SP SP+0
        CFI (cfiCond924) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker925 Using cfiCommon1
        CFI (cfiPicker925) NoFunction
        CFI (cfiPicker925) Picker
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        CFI EndBlock cfiCond921
        CFI EndBlock cfiCond922
        CFI EndBlock cfiCond923
        CFI EndBlock cfiCond924
        CFI EndBlock cfiPicker925
        REQUIRE ??Subroutine158_0
        ; // Fall through to label ??Subroutine158_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine158_0:
        CFI Block cfiCond926 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_364
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond927 Using cfiCommon0
        CFI (cfiCond927) NoFunction
        CFI (cfiCond927) Conditional ??CrossCallReturnLabel_365
        CFI (cfiCond927) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond927) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond927) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond927) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond927) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond927) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond927) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond927) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond927) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond927) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond927) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond927) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond927) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond927) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond927) CFA_SP SP+0
        CFI (cfiCond927) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond928 Using cfiCommon0
        CFI (cfiCond928) NoFunction
        CFI (cfiCond928) Conditional ??CrossCallReturnLabel_360
        CFI (cfiCond928) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond928) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond928) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond928) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond928) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond928) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond928) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond928) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond928) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond928) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond928) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond928) CFA_SP SP+0
        CFI (cfiCond928) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond929 Using cfiCommon0
        CFI (cfiCond929) NoFunction
        CFI (cfiCond929) Conditional ??CrossCallReturnLabel_361
        CFI (cfiCond929) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond929) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond929) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond929) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond929) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond929) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond929) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond929) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond929) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond929) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond929) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond929) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond929) CFA_SP SP+0
        CFI (cfiCond929) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond930 Using cfiCommon0
        CFI (cfiCond930) NoFunction
        CFI (cfiCond930) Conditional ??CrossCallReturnLabel_362
        CFI (cfiCond930) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond930) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond930) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond930) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond930) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond930) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond930) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond930) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond930) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond930) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond930) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond930) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond930) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond930) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond930) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond930) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond930) CFA_SP SP+0
        CFI (cfiCond930) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiCond931 Using cfiCommon0
        CFI (cfiCond931) NoFunction
        CFI (cfiCond931) Conditional ??CrossCallReturnLabel_363
        CFI (cfiCond931) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond931) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond931) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond931) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond931) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond931) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond931) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond931) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond931) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond931) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond931) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond931) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond931) CFA_SP SP+0
        CFI (cfiCond931) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker932 Using cfiCommon1
        CFI (cfiPicker932) NoFunction
        CFI (cfiPicker932) Picker
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond926
        CFI EndBlock cfiCond927
        CFI EndBlock cfiCond928
        CFI EndBlock cfiCond929
        CFI EndBlock cfiCond930
        CFI EndBlock cfiCond931
        CFI EndBlock cfiPicker932
// 4106 
// 4107 /******************************************************************************
// 4108  * @fn          APSME_TCLinkKeyLoad
// 4109  *
// 4110  * @brief       Load Trust Center LINK key data.
// 4111  *
// 4112  * @param       dstAddr - [in] dstAddr
// 4113  * @param       si      - [in, out] SSP_Info_t
// 4114  *
// 4115  * @return      ZStatus_t
// 4116  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4117 ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
APSME_TCLinkKeyLoad:
        CFI Block cfiBlock933 Using cfiCommon0
        CFI Function APSME_TCLinkKeyLoad
        CODE
// 4118 {
        FUNCALL APSME_TCLinkKeyLoad, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, APSME_IsDefaultTCLK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 45
        MOV     A,#-0x2d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 4119   uint8 i;
// 4120   ZStatus_t status = ZSecNoKey;
        MOV     ?V0 + 2,#-0x5f
// 4121   APSME_TCLinkKey_t tcLinkKey;
// 4122   AddrMgrEntry_t addrEntry;
// 4123   uint32 *tclkTxFrmCntr;
// 4124   uint8 extAddrFound;
// 4125   uint8 defaultTCLKIdx = ZDSECMGR_TC_DEVICE_MAX;
// 4126 
// 4127   // Look up the ami of the srcAddr if available
// 4128   addrEntry.user    = ADDRMGR_USER_DEFAULT;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
// 4129   addrEntry.nwkAddr = dstAddr;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine159_0 & 0xFFFF
// 4130 
// 4131   APSME_LookupExtAddr( dstAddr, si->extAddr );
??CrossCallReturnLabel_369:
        MOV     A,R6
        ADD     A,#0x6
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     R4,?V0 + 0
        MOV     R5,A
        LCALL   ??APSME_LookupExtAddr?relay
// 4132 
// 4133   extAddrFound = AddrMgrExtAddrValid( si->extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        MOV     ?V0 + 3,A
// 4134 
// 4135   // Look up the TC link key associated with the device
// 4136   // or the master TC link key (ami = 0xFFFF), whichever is found
// 4137   for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 4138   {
// 4139     // Read entry i of the TC link key table from NV
// 4140     osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
// 4141                  sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 63)
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 65)
        LCALL   ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_362:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 61)
// 4142 
// 4143     if( extAddrFound && AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
        MOV     A,?V0 + 3
        JZ      ??APSME_TCLinkKeyLoad_0
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine89 & 0xFFFF
??CrossCallReturnLabel_140:
        JNZ     ??APSME_TCLinkKeyLoad_1
// 4144     {
// 4145       status = ZSuccess;
// 4146 
// 4147       break; // break from the loop
// 4148     }
// 4149 
// 4150     if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
// 4151     {
// 4152       if ( !extAddrFound )
// 4153       {
// 4154         status = ZSuccess;
// 4155 
// 4156         break; // break from the loop
// 4157       }
// 4158 
// 4159       // Remember the default TCLK index
// 4160       defaultTCLKIdx = i;
// 4161     }
// 4162   }
// 4163 
// 4164   if ( (status != ZSuccess) && (defaultTCLKIdx < ZDSECMGR_TC_DEVICE_MAX) )
// 4165   {
// 4166     // Exact match was not found; use the default TC Link Key
// 4167     i = defaultTCLKIdx;
// 4168     status = ZSuccess;
// 4169   }
// 4170 
// 4171   if ( status == ZSuccess )
??APSME_TCLinkKeyLoad_0:
        ; Setup parameters for call to function APSME_IsDefaultTCLK
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_IsDefaultTCLK?relay
        MOV     A,R1
        JZ      ??APSME_TCLinkKeyLoad_2
        MOV     A,?V0 + 3
??APSME_TCLinkKeyLoad_1:
        MOV     ?V0 + 2,#0x0
// 4172   {
// 4173     tclkTxFrmCntr = &TCLinkKeyFrmCntr[i].txFrmCntr;
// 4174 
// 4175     // set the keyNvId to use
// 4176     si->keyNvId = (ZCD_NV_TCLK_TABLE_START + i);
        LCALL   ?Subroutine48 & 0xFFFF
// 4177 
// 4178     // update link key related fields
// 4179     si->keyID   = SEC_KEYID_LINK;
??CrossCallReturnLabel_76:
        ADD     A,#0xe
        LCALL   ??Subroutine162_0 & 0xFFFF
??CrossCallReturnLabel_388:
        CLR     A
        MOVX    @DPTR,A
// 4180     si->frmCntr = *tclkTxFrmCntr;
        MOV     DPTR,#TCLinkKeyFrmCntr
        LCALL   ?XLOAD_R2345
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_391:
        LCALL   ?XSTORE_R2345
// 4181 
// 4182     // update outgoing frame counter
// 4183     (*tclkTxFrmCntr)++;
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#TCLinkKeyFrmCntr
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_TO_X
        SJMP    ??APSME_TCLinkKeyLoad_3
??APSME_TCLinkKeyLoad_2:
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
// 4184 
// 4185 #if defined ( NV_RESTORE )
// 4186     // write periodically to NV
// 4187     if ( !(*tclkTxFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
// 4188     {
// 4189       // set the flag to write key to NV
// 4190       TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
// 4191 
// 4192       // Notify the ZDApp that the frame counter has changed.
// 4193       osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
// 4194     }
// 4195 #endif
// 4196   }
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine87 & 0xFFFF
??CrossCallReturnLabel_285:
        JNZ     ??APSME_TCLinkKeyLoad_3
// 4197 
// 4198   // If no TC link key found, remove the device from the address manager
// 4199   if ( (status != ZSuccess) && (AddrMgrEntryLookupNwk(&addrEntry) == TRUE) )
// 4200   {
// 4201     AddrMgrEntryRelease( &addrEntry );
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryRelease?relay
// 4202   }
// 4203 
// 4204     // clear copy of key in RAM
// 4205   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
??APSME_TCLinkKeyLoad_3:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 4206 
// 4207   return status;
        MOV     R1,?V0 + 2
        MOV     A,#0x2d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock933
// 4208 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine89:
        CFI Block cfiCond934 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_139
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond935 Using cfiCommon0
        CFI (cfiCond935) NoFunction
        CFI (cfiCond935) Conditional ??CrossCallReturnLabel_140
        CFI (cfiCond935) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond935) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond935) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond935) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond935) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond935) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond935) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond935) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond935) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond935) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond935) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond935) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond935) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond935) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond935) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond935) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond935) CFA_SP SP+0
        CFI (cfiCond935) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker936 Using cfiCommon1
        CFI (cfiPicker936) NoFunction
        CFI (cfiPicker936) Picker
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?Subroutine113 & 0xFFFF
??CrossCallReturnLabel_175:
        LCALL   ??AddrMgrExtAddrEqual?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond934
        CFI EndBlock cfiCond935
        CFI EndBlock cfiPicker936

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
        CFI Block cfiCond937 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond938 Using cfiCommon0
        CFI (cfiCond938) NoFunction
        CFI (cfiCond938) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond938) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond938) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond938) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond938) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond938) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond938) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond938) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond938) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond938) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond938) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond938) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond938) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond938) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond938) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond938) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond938) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond938) CFA_SP SP+0
        CFI (cfiCond938) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker939 Using cfiCommon1
        CFI (cfiPicker939) NoFunction
        CFI (cfiPicker939) Picker
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,R6
        RET
        CFI EndBlock cfiCond937
        CFI EndBlock cfiCond938
        CFI EndBlock cfiPicker939

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond940 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_370
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond941 Using cfiCommon0
        CFI (cfiCond941) NoFunction
        CFI (cfiCond941) Conditional ??CrossCallReturnLabel_371
        CFI (cfiCond941) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond941) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond941) CFA_SP SP+-5
        CFI (cfiCond941) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker942 Using cfiCommon1
        CFI (cfiPicker942) NoFunction
        CFI (cfiPicker942) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond940
        CFI EndBlock cfiCond941
        CFI EndBlock cfiPicker942
        REQUIRE ??Subroutine159_0
        ; // Fall through to label ??Subroutine159_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine159_0:
        CFI Block cfiCond943 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_366
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond944 Using cfiCommon0
        CFI (cfiCond944) NoFunction
        CFI (cfiCond944) Conditional ??CrossCallReturnLabel_367
        CFI (cfiCond944) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond944) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond944) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond944) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond944) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond944) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond944) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond944) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond944) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond944) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond944) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond944) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond944) CFA_SP SP+0
        CFI (cfiCond944) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond945 Using cfiCommon0
        CFI (cfiCond945) NoFunction
        CFI (cfiCond945) Conditional ??CrossCallReturnLabel_368
        CFI (cfiCond945) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond945) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond945) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond945) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond945) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond945) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond945) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond945) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond945) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond945) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond945) CFA_SP SP+0
        CFI (cfiCond945) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond946 Using cfiCommon0
        CFI (cfiCond946) NoFunction
        CFI (cfiCond946) Conditional ??CrossCallReturnLabel_369
        CFI (cfiCond946) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond946) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond946) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond946) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond946) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond946) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond946) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond946) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond946) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond946) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond946) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond946) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond946) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond946) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond946) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond946) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond946) CFA_SP SP+0
        CFI (cfiCond946) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond947 Using cfiCommon0
        CFI (cfiCond947) NoFunction
        CFI (cfiCond947) Conditional ??CrossCallReturnLabel_370
        CFI (cfiCond947) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond947) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond947) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond947) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond947) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond947) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond947) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond947) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond947) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond947) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond947) CFA_SP SP+0
        CFI (cfiCond947) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond948 Using cfiCommon0
        CFI (cfiCond948) NoFunction
        CFI (cfiCond948) Conditional ??CrossCallReturnLabel_371
        CFI (cfiCond948) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond948) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond948) CFA_SP SP+-5
        CFI (cfiCond948) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker949 Using cfiCommon1
        CFI (cfiPicker949) NoFunction
        CFI (cfiPicker949) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond943
        CFI EndBlock cfiCond944
        CFI EndBlock cfiCond945
        CFI EndBlock cfiCond946
        CFI EndBlock cfiCond947
        CFI EndBlock cfiCond948
        CFI EndBlock cfiPicker949
// 4209 
// 4210 /******************************************************************************
// 4211  * @fn          APSME_IsDefaultTCLK
// 4212  *
// 4213  * @brief       Return TRUE or FALSE based on the extended address.  If the
// 4214  *              input ext address is all FFs, it means the trust center link
// 4215  *              assoiciated with the address is the default trust center link key
// 4216  *
// 4217  * @param       extAddr - [in] extended address
// 4218  *
// 4219  * @return      uint8 TRUE/FALSE
// 4220  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4221 uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
APSME_IsDefaultTCLK:
        CFI Block cfiBlock950 Using cfiCommon0
        CFI Function APSME_IsDefaultTCLK
        CODE
// 4222 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 4223   uint8 i = 0;
        MOV     R4,#0x0
// 4224 
// 4225   if( extAddr == NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??APSME_IsDefaultTCLK_0
// 4226   {
// 4227     return FALSE;
??APSME_IsDefaultTCLK_1:
        MOV     R1,#0x0
        SJMP    ??APSME_IsDefaultTCLK_2
// 4228   }
// 4229 
// 4230   while( i++ < Z_EXTADDR_LEN )
// 4231   {
// 4232     if( *extAddr++ != 0xFF )
??APSME_IsDefaultTCLK_3:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??APSME_IsDefaultTCLK_1
// 4233     {
// 4234       return FALSE;
// 4235     }
// 4236   }
??APSME_IsDefaultTCLK_0:
        MOV     A,R4
        INC     R4
        CLR     C
        SUBB    A,#0x8
        JC      ??APSME_IsDefaultTCLK_3
// 4237 
// 4238   return TRUE;
        MOV     R1,#0x1
??APSME_IsDefaultTCLK_2:
        LJMP    ??Subroutine140_0 & 0xFFFF
        CFI EndBlock cfiBlock950
// 4239 }
// 4240 
// 4241 /******************************************************************************
// 4242  * @fn          ZDSecMgrNwkKeyInit
// 4243  *
// 4244  * @brief       Initialize the NV items for
// 4245  *                  ZCD_NV_NWKKEY,
// 4246  *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and
// 4247  *                  ZCD_NV_NWK_ALTERN_KEY_INFO
// 4248  *
// 4249  * @param       setDefault
// 4250  *
// 4251  * @return      none
// 4252  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4253 void ZDSecMgrNwkKeyInit(uint8 setDefault)
ZDSecMgrNwkKeyInit:
        CFI Block cfiBlock951 Using cfiCommon0
        CFI Function ZDSecMgrNwkKeyInit
        CODE
// 4254 {
        FUNCALL ZDSecMgrNwkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 38
        MOV     A,#-0x26
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
// 4255   uint8 status;
// 4256   nwkKeyDesc nwkKey;
// 4257 
// 4258   // Initialize NV items for NWK key, this structure contains the frame counter
// 4259   // and is only used when NV_RESTORE is enabled
// 4260   nwkActiveKeyItems keyItems;
// 4261 
// 4262   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 4263 
// 4264   status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
// 4265 
// 4266 #if defined ( NV_RESTORE )
// 4267   // reset the values of NV items if NV_RESTORE is not enabled
// 4268   if ((status == SUCCESS) && (setDefault == TRUE))
// 4269   {
// 4270     // clear NV data to default values
// 4271     osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
// 4272   }
// 4273 #else
// 4274   (void)setDefault;   // to eliminate compiler warning
// 4275 
// 4276   // reset the values of NV items if NV_RESTORE is not enabled
// 4277   if (status == SUCCESS)
        ; Setup parameters for call to function osal_nv_item_init
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_372:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDSecMgrNwkKeyInit_0
// 4278   {
// 4279     osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   ??Subroutine120_0 & 0xFFFF
// 4280   }
??CrossCallReturnLabel_190:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
// 4281 #endif // defined (NV_RESTORE)
// 4282 
// 4283   // Initialize NV items for NWK Active and Alternate keys. These items are used
// 4284   // all the time, independently of NV_RESTORE being set or not
// 4285   osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
??ZDSecMgrNwkKeyInit_0:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine46 & 0xFFFF
// 4286 
// 4287   status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
// 4288 
// 4289 #if defined ( NV_RESTORE )
// 4290   // reset the values of NV items if NV_RESTORE is not enabled
// 4291   if ((status == SUCCESS) && (setDefault == TRUE))
// 4292   {
// 4293     // clear NV data to default values
// 4294     osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
// 4295   }
// 4296 #else
// 4297   // reset the values of NV items if NV_RESTORE is not enabled
// 4298   if (status == SUCCESS)
??CrossCallReturnLabel_72:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x3a
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_373:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDSecMgrNwkKeyInit_1
// 4299   {
// 4300     osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,#0x11
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3a
        MOV     R3,#0x0
        LCALL   ??Subroutine120_0 & 0xFFFF
// 4301   }
??CrossCallReturnLabel_191:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
// 4302 #endif // defined (NV_RESTORE)
// 4303 
// 4304   status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
// 4305 
// 4306 #if defined ( NV_RESTORE )
// 4307   // reset the values of NV items if NV_RESTORE is not enabled
// 4308   if ((status == SUCCESS) && (setDefault == TRUE))
// 4309   {
// 4310     // clear NV data to default values
// 4311     osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
// 4312   }
// 4313 #else
// 4314   // reset the values of NV items if NV_RESTORE is not enabled
// 4315   if (status == SUCCESS)
??ZDSecMgrNwkKeyInit_1:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#0x3b
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_374:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JNZ     ??ZDSecMgrNwkKeyInit_2
// 4316   {
// 4317     osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,#0x11
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3b
        MOV     R3,#0x0
        LCALL   ??Subroutine120_0 & 0xFFFF
// 4318   }
??CrossCallReturnLabel_192:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
// 4319 #endif // defined (NV_RESTORE)
// 4320 
// 4321 }
??ZDSecMgrNwkKeyInit_2:
        MOV     A,#0x26
        LJMP    ??Subroutine132_0 & 0xFFFF
        CFI EndBlock cfiBlock951

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiCond952 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond953 Using cfiCommon0
        CFI (cfiCond953) NoFunction
        CFI (cfiCond953) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond953) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond953) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond953) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond953) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond953) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond953) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond953) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond953) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond953) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond953) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond953) CFA_SP SP+0
        CFI (cfiCond953) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiPicker954 Using cfiCommon1
        CFI (cfiPicker954) NoFunction
        CFI (cfiPicker954) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        ; Setup parameters for call to function APSME_LinkKeyNVIdGet
        ; Setup parameters for call to function osal_nv_item_init
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond952
        CFI EndBlock cfiCond953
        CFI EndBlock cfiPicker954
// 4322 
// 4323 /*********************************************************************
// 4324  * @fn          ZDSecMgrReadKeyFromNv
// 4325  *
// 4326  * @brief       Looks for a specific key in NV based on Index value
// 4327  *
// 4328  * @param   keyNvId - Index of key to look in NV
// 4329  *                    valid values are:
// 4330  *                    ZCD_NV_NWK_ACTIVE_KEY_INFO
// 4331  *                    ZCD_NV_NWK_ALTERN_KEY_INFO
// 4332  *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
// 4333  *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
// 4334  *                    ZCD_NV_MASTER_KEY_DATA_START + <offset_in_table>
// 4335  *                    ZCD_NV_PRECFGKEY
// 4336  *
// 4337  * @param  *keyinfo - Data is read into this buffer.
// 4338  *
// 4339  * @return  SUCCESS if NV data was copied to the keyinfo parameter .
// 4340  *          Otherwise, NV_OPER_FAILED for failure.
// 4341  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4342 ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
ZDSecMgrReadKeyFromNv:
        CFI Block cfiBlock955 Using cfiCommon0
        CFI Function ZDSecMgrReadKeyFromNv
        CODE
// 4343 {
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 4344   if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
// 4345       (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
        MOV     A,#0x3a
        XRL     A,R2
        JNZ     ??ZDSecMgrReadKeyFromNv_0
        MOV     A,R3
??ZDSecMgrReadKeyFromNv_0:
        JZ      ??ZDSecMgrReadKeyFromNv_1
        MOV     A,#0x3b
        XRL     A,R2
        JNZ     ??ZDSecMgrReadKeyFromNv_2
        MOV     A,R3
??ZDSecMgrReadKeyFromNv_2:
        JNZ     ??ZDSecMgrReadKeyFromNv_3
// 4346   {
// 4347     // get NWK active or alternate key from NV
// 4348     return (osal_nv_read(keyNvId,
// 4349                          osal_offsetof(nwkKeyDesc, key),
// 4350                          SEC_KEY_LEN,
// 4351                          keyinfo));
??ZDSecMgrReadKeyFromNv_1:
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x1
??ZDSecMgrReadKeyFromNv_4:
        MOV     R5,#0x0
// 4352   }
??ZDSecMgrReadKeyFromNv_5:
        LCALL   ??Subroutine158_0 & 0xFFFF
??CrossCallReturnLabel_364:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ??ZDSecMgrReadKeyFromNv_6 & 0xFFFF
// 4353   else if ((keyNvId >= ZCD_NV_TCLK_TABLE_START) &&
// 4354            (keyNvId < (ZCD_NV_TCLK_TABLE_START + ZDSECMGR_TC_DEVICE_MAX)))
??ZDSecMgrReadKeyFromNv_3:
        MOV     A,R2
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#-0x2
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZDSecMgrReadKeyFromNv_7
// 4355   {
// 4356     // Read entry keyNvId of the TC link key table from NV. keyNvId should be
// 4357     // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
// 4358     return (osal_nv_read(keyNvId,
// 4359                          osal_offsetof(APSME_TCLinkKey_t, key),
// 4360                          SEC_KEY_LEN,
// 4361                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x8
        SJMP    ??ZDSecMgrReadKeyFromNv_4
        CFI CFA_XSP16 add(XSP16, 10)
// 4362   }
// 4363   else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
// 4364            (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
??ZDSecMgrReadKeyFromNv_7:
        DEC     R1
        CLR     C
        MOV     A,R0
        SUBB    A,#0x3
        MOV     A,R1
        SUBB    A,#0x0
        JNC     ??ZDSecMgrReadKeyFromNv_8
// 4365   {
// 4366     // Read entry keyNvId of the APS link key table from NV. keyNvId should be
// 4367     // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
// 4368     return (osal_nv_read(keyNvId,
// 4369                          osal_offsetof(APSME_LinkKeyData_t, key),
// 4370                          SEC_KEY_LEN,
// 4371                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
??ZDSecMgrReadKeyFromNv_9:
        SJMP    ??ZDSecMgrReadKeyFromNv_5
        CFI CFA_XSP16 add(XSP16, 10)
// 4372   }
// 4373   else if ((keyNvId >= ZCD_NV_MASTER_KEY_DATA_START) &&
// 4374            (keyNvId < (ZCD_NV_MASTER_KEY_DATA_START + ZDSECMGR_MASTERKEY_MAX)))
??ZDSecMgrReadKeyFromNv_8:
        DEC     R1
        CLR     C
        MOV     A,R0
        SUBB    A,#0x3
        MOV     A,R1
        SUBB    A,#0x0
        JNC     ??ZDSecMgrReadKeyFromNv_10
// 4375   {
// 4376     // Read entry keyNvId of the MASTER key table from NV. keyNvId should be
// 4377     // ZCD_NV_MASTER_KEY_DATA_START + <offset_in_table>
// 4378     return (osal_nv_read(keyNvId,
// 4379                          osal_offsetof(ZDSecMgrMasterKeyData_t, key),
// 4380                          SEC_KEY_LEN,
// 4381                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        SJMP    ??ZDSecMgrReadKeyFromNv_4
        CFI CFA_XSP16 add(XSP16, 10)
// 4382   }
// 4383   else if (keyNvId == ZCD_NV_PRECFGKEY)
??ZDSecMgrReadKeyFromNv_10:
        MOV     A,#0x62
        XRL     A,R2
        JNZ     ??ZDSecMgrReadKeyFromNv_11
        MOV     A,R3
??ZDSecMgrReadKeyFromNv_11:
        JNZ     ??ZDSecMgrReadKeyFromNv_12
// 4384   {
// 4385     // Read entry keyNvId of the Preconfig key from NV.
// 4386     return (osal_nv_read(keyNvId,
// 4387                          0,
// 4388                          SEC_KEY_LEN,
// 4389                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x62
        MOV     R3,#0x0
        SJMP    ??ZDSecMgrReadKeyFromNv_9
        CFI CFA_XSP16 add(XSP16, 10)
// 4390   }
// 4391 
// 4392   return NV_OPER_FAILED;
??ZDSecMgrReadKeyFromNv_12:
        MOV     R1,#0xa
??ZDSecMgrReadKeyFromNv_6:
        LJMP    ??Subroutine133_0 & 0xFFFF
        CFI EndBlock cfiBlock955
// 4393 }
// 4394 
// 4395 /******************************************************************************
// 4396  * @fn          ZDSecMgrApsLinkKeyInit
// 4397  *
// 4398  * @brief       Initialize the NV table for Application link keys
// 4399  *
// 4400  * @param       none
// 4401  *
// 4402  * @return      none
// 4403  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4404 void ZDSecMgrApsLinkKeyInit(void)
ZDSecMgrApsLinkKeyInit:
        CFI Block cfiBlock956 Using cfiCommon0
        CFI Function ZDSecMgrApsLinkKeyInit
        CODE
// 4405 {
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 24
        MOV     A,#-0x18
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
// 4406   APSME_LinkKeyData_t pApsLinkKey;
// 4407   uint8 i;
// 4408   uint8 status;
// 4409 
// 4410   // Initialize all NV items for APS link key, if not exist already.
// 4411   osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 4412 
// 4413   for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     R6,#0x0
// 4414   {
// 4415     status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i),
// 4416                                sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
// 4417 
// 4418 #if defined ( NV_RESTORE )
// 4419     (void)status;   // to eliminate compiler warning
// 4420 #else
// 4421     // reset the values of NV items if NV_RESTORE is not enabled
// 4422     if (status == SUCCESS)
??ZDSecMgrApsLinkKeyInit_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x18
        MOV     R5,#0x0
        MOV     ?V0 + 0,R6
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
        ADDC    A,#0x2
        MOV     R3,A
        LCALL   ??Subroutine160_0 & 0xFFFF
??CrossCallReturnLabel_377:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R1
        JNZ     ??ZDSecMgrApsLinkKeyInit_1
// 4423     {
// 4424       osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
// 4425                     sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     ?V0 + 0,DPL
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 0,#0x18
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     ?V0 + 0,R6
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
        LCALL   ??Subroutine118_0 & 0xFFFF
// 4426 
// 4427     }
// 4428 #endif // defined (NV_RESTORE)
// 4429   }
??CrossCallReturnLabel_181:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
??ZDSecMgrApsLinkKeyInit_1:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDSecMgrApsLinkKeyInit_0
// 4430 }
        MOV     A,#0x18
        LJMP    ??Subroutine132_0 & 0xFFFF
        CFI EndBlock cfiBlock956

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiCond957 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_372
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond958 Using cfiCommon0
        CFI (cfiCond958) NoFunction
        CFI (cfiCond958) Conditional ??CrossCallReturnLabel_373
        CFI (cfiCond958) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond958) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond958) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond958) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond958) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond958) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond958) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond958) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond958) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond958) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond958) CFA_SP SP+0
        CFI (cfiCond958) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond959 Using cfiCommon0
        CFI (cfiCond959) NoFunction
        CFI (cfiCond959) Conditional ??CrossCallReturnLabel_374
        CFI (cfiCond959) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond959) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond959) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond959) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond959) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond959) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond959) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond959) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond959) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond959) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond959) CFA_SP SP+0
        CFI (cfiCond959) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiPicker960 Using cfiCommon1
        CFI (cfiPicker960) NoFunction
        CFI (cfiPicker960) Picker
        MOV     R3,#0x0
        CFI EndBlock cfiCond957
        CFI EndBlock cfiCond958
        CFI EndBlock cfiCond959
        CFI EndBlock cfiPicker960
        REQUIRE ??Subroutine160_0
        ; // Fall through to label ??Subroutine160_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine160_0:
        CFI Block cfiCond961 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_375
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond962 Using cfiCommon0
        CFI (cfiCond962) NoFunction
        CFI (cfiCond962) Conditional ??CrossCallReturnLabel_376
        CFI (cfiCond962) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond962) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond962) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond962) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond962) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond962) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond962) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond962) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond962) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond962) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond962) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond962) CFA_SP SP+0
        CFI (cfiCond962) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond963 Using cfiCommon0
        CFI (cfiCond963) NoFunction
        CFI (cfiCond963) Conditional ??CrossCallReturnLabel_377
        CFI (cfiCond963) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond963) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond963) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond963) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond963) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond963) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond963) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond963) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond963) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond963) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond963) CFA_SP SP+0
        CFI (cfiCond963) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond964 Using cfiCommon0
        CFI (cfiCond964) NoFunction
        CFI (cfiCond964) Conditional ??CrossCallReturnLabel_372
        CFI (cfiCond964) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond964) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond964) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond964) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond964) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond964) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond964) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond964) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond964) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond964) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond964) CFA_SP SP+0
        CFI (cfiCond964) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond965 Using cfiCommon0
        CFI (cfiCond965) NoFunction
        CFI (cfiCond965) Conditional ??CrossCallReturnLabel_373
        CFI (cfiCond965) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond965) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond965) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond965) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond965) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond965) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond965) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond965) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond965) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond965) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond965) CFA_SP SP+0
        CFI (cfiCond965) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond966 Using cfiCommon0
        CFI (cfiCond966) NoFunction
        CFI (cfiCond966) Conditional ??CrossCallReturnLabel_374
        CFI (cfiCond966) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond966) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond966) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond966) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond966) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond966) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond966) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond966) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond966) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond966) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond966) CFA_SP SP+0
        CFI (cfiCond966) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiPicker967 Using cfiCommon1
        CFI (cfiPicker967) NoFunction
        CFI (cfiPicker967) Picker
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond961
        CFI EndBlock cfiCond962
        CFI EndBlock cfiCond963
        CFI EndBlock cfiCond964
        CFI EndBlock cfiCond965
        CFI EndBlock cfiCond966
        CFI EndBlock cfiPicker967
// 4431 
// 4432 /******************************************************************************
// 4433  * @fn          ZDSecMgrInitNVKeyTables
// 4434  *
// 4435  * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
// 4436  *
// 4437  * @param       setDefault - TRUE to set default values
// 4438  *
// 4439  * @return      none
// 4440  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4441 void ZDSecMgrInitNVKeyTables(uint8 setDefault)
ZDSecMgrInitNVKeyTables:
        CFI Block cfiBlock968 Using cfiCommon0
        CFI Function ZDSecMgrInitNVKeyTables
        CODE
// 4442 {
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrNwkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrMasterKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrApsLinkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, APSME_TCLinkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 4443   ZDSecMgrNwkKeyInit(setDefault);
        ; Setup parameters for call to function ZDSecMgrNwkKeyInit
        LCALL   ??ZDSecMgrNwkKeyInit?relay
// 4444   ZDSecMgrMasterKeyInit();
        ; Setup parameters for call to function ZDSecMgrMasterKeyInit
        LCALL   ??ZDSecMgrMasterKeyInit?relay
// 4445   ZDSecMgrApsLinkKeyInit();
        ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
        LCALL   ??ZDSecMgrApsLinkKeyInit?relay
// 4446   APSME_TCLinkKeyInit(setDefault);
        ; Setup parameters for call to function APSME_TCLinkKeyInit
        MOV     A,R6
        MOV     R1,A
        LCALL   ??APSME_TCLinkKeyInit?relay
// 4447 }
        LJMP    ??Subroutine137_0 & 0xFFFF
        CFI EndBlock cfiBlock968
// 4448 
// 4449 /******************************************************************************
// 4450  * @fn          ZDSecMgrSaveApsLinkKey
// 4451  *
// 4452  * @brief       Save APS Link Key to NV. It will loop through all the keys
// 4453  *              to see which one to save.
// 4454  *
// 4455  * @param       none
// 4456  *
// 4457  * @return      none
// 4458  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4459 void ZDSecMgrSaveApsLinkKey(void)
ZDSecMgrSaveApsLinkKey:
        CFI Block cfiBlock969 Using cfiCommon0
        CFI Function ZDSecMgrSaveApsLinkKey
        CODE
// 4460 {
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 4461   APSME_LinkKeyData_t *pKeyData = NULL;
// 4462   int i;
// 4463 
// 4464   pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        LCALL   ?Subroutine80 & 0xFFFF
// 4465 
// 4466   if (pKeyData != NULL)
??CrossCallReturnLabel_130:
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_68 & 0xFFFF
// 4467   {
// 4468     // checks all pending flags to know which one to save
// 4469     for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
        MOV     R6,#0x0
        MOV     R7,#0x0
// 4470     {
// 4471       if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
??ZDSecMgrSaveApsLinkKey_0:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x9
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(ApsLinkKeyFrmCntr + 8) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((ApsLinkKeyFrmCntr + 8) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
// 4472       {
// 4473         // retrieve key from NV
// 4474         if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
// 4475                          sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 0,#0x18
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x2
        MOV     R3,A
        LCALL   ??Subroutine158_0 & 0xFFFF
??CrossCallReturnLabel_365:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??ZDSecMgrSaveApsLinkKey_1
// 4476         {
// 4477           pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        LCALL   ?Subroutine86 & 0xFFFF
??CrossCallReturnLabel_136:
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     DPL,R0
        MOV     DPH,A
        LCALL   ?XLOAD_R2345
        MOV     A,?V0 + 2
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,?V0 + 3
        LCALL   ??Subroutine163_0 & 0xFFFF
??CrossCallReturnLabel_382:
        LCALL   ?XSTORE_R2345
// 4478           pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XLOAD_R2345
        MOV     A,?V0 + 2
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 3
        LCALL   ??Subroutine163_0 & 0xFFFF
??CrossCallReturnLabel_383:
        LCALL   ?XSTORE_R2345
// 4479 
// 4480           // Write the APS link key back to the NV
// 4481           osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
// 4482                         sizeof(APSME_LinkKeyData_t), pKeyData);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 4,#0x18
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_180:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
// 4483 
// 4484           // clear the pending write flag
// 4485           ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 4486         }
// 4487       }
// 4488     }
??ZDSecMgrSaveApsLinkKey_1:
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??ZDSecMgrSaveApsLinkKey_0 & 0xFFFF
// 4489 
// 4490     // clear copy of key in RAM
// 4491     osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        LCALL   ?Subroutine42 & 0xFFFF
// 4492 
// 4493     osal_mem_free(pKeyData);
// 4494   }
// 4495 }
??CrossCallReturnLabel_68:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock969

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine86:
        CFI Block cfiCond970 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_135
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond971 Using cfiCommon0
        CFI (cfiCond971) NoFunction
        CFI (cfiCond971) Conditional ??CrossCallReturnLabel_136
        CFI (cfiCond971) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond971) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond971) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond971) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond971) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond971) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond971) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond971) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond971) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond971) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond971) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond971) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond971) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond971) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond971) CFA_SP SP+0
        CFI (cfiCond971) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker972 Using cfiCommon1
        CFI (cfiPicker972) NoFunction
        CFI (cfiPicker972) Picker
        MOV     B,#0x9
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x9
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#ApsLinkKeyFrmCntr & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        RET
        CFI EndBlock cfiCond970
        CFI EndBlock cfiCond971
        CFI EndBlock cfiPicker972
// 4496 
// 4497 /******************************************************************************
// 4498  * @fn          ZDSecMgrSaveTCLinkKey
// 4499  *
// 4500  * @brief       Save TC Link Key to NV. It will loop through all the keys
// 4501  *              to see which one to save.
// 4502  *
// 4503  * @param       none
// 4504  *
// 4505  * @return      none
// 4506  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4507 void ZDSecMgrSaveTCLinkKey(void)
ZDSecMgrSaveTCLinkKey:
        CFI Block cfiBlock973 Using cfiCommon0
        CFI Function ZDSecMgrSaveTCLinkKey
        CODE
// 4508 {
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 4509   APSME_TCLinkKey_t *pKeyData = NULL;
// 4510   uint16 i;
// 4511 
// 4512   pKeyData = (APSME_TCLinkKey_t *)osal_mem_alloc(sizeof(APSME_TCLinkKey_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x20
        LCALL   ?Subroutine83 & 0xFFFF
// 4513 
// 4514   if (pKeyData != NULL)
??CrossCallReturnLabel_132:
        JZ      ??ZDSecMgrSaveTCLinkKey_0
// 4515   {
// 4516     for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 4517     {
// 4518       if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
        MOV     DPTR,#TCLinkKeyFrmCntr + 8
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrSaveTCLinkKey_1
// 4519       {
// 4520         if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0,
// 4521                          sizeof(APSME_TCLinkKey_t), pKeyData) == SUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 2,#0x20
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        LCALL   ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_363:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        JNZ     ??ZDSecMgrSaveTCLinkKey_1
// 4522         {
// 4523           pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
        MOV     DPTR,#TCLinkKeyFrmCntr
        LCALL   ?XLOAD_R2345
        MOV     A,?V0 + 0
        ADD     A,#0x18
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine163_0 & 0xFFFF
??CrossCallReturnLabel_384:
        LCALL   ?XSTORE_R2345
// 4524           pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
        MOV     DPTR,#TCLinkKeyFrmCntr + 4
        LCALL   ?XLOAD_R2345
        MOV     A,?V0 + 0
        ADD     A,#0x1c
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine163_0 & 0xFFFF
??CrossCallReturnLabel_385:
        LCALL   ?XSTORE_R2345
// 4525 
// 4526           // Write the TC link key back to the NV
// 4527           osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0,
// 4528                         sizeof(APSME_TCLinkKey_t), pKeyData);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_193:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 4529 
// 4530           // clear the pending write flag
// 4531           TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
        MOV     DPTR,#TCLinkKeyFrmCntr + 8
        CLR     A
        MOVX    @DPTR,A
// 4532         }
// 4533       }
// 4534     }
// 4535       // clear copy of key in RAM
// 4536     osal_memset( pKeyData, 0x00, sizeof(APSME_TCLinkKey_t) );
??ZDSecMgrSaveTCLinkKey_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_memset?relay
// 4537 
// 4538     osal_mem_free(pKeyData);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
// 4539   }
// 4540 }
??ZDSecMgrSaveTCLinkKey_0:
        LJMP    ??Subroutine155_0 & 0xFFFF
        CFI EndBlock cfiBlock973

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine83:
        CFI Block cfiCond974 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_131
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond975 Using cfiCommon0
        CFI (cfiCond975) NoFunction
        CFI (cfiCond975) Conditional ??CrossCallReturnLabel_132
        CFI (cfiCond975) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond975) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond975) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond975) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond975) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond975) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond975) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond975) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond975) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond975) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond975) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond975) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond975) CFA_SP SP+0
        CFI (cfiCond975) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker976 Using cfiCommon1
        CFI (cfiPicker976) NoFunction
        CFI (cfiPicker976) Picker
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        RET
        CFI EndBlock cfiCond974
        CFI EndBlock cfiCond975
        CFI EndBlock cfiPicker976

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
        CFI Block cfiCond977 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_390
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond978 Using cfiCommon0
        CFI (cfiCond978) NoFunction
        CFI (cfiCond978) Conditional ??CrossCallReturnLabel_391
        CFI (cfiCond978) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond978) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond978) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond978) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond978) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond978) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond978) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond978) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond978) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond978) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond978) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond978) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond978) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond978) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond978) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond978) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond978) CFA_SP SP+0
        CFI (cfiCond978) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker979 Using cfiCommon1
        CFI (cfiPicker979) NoFunction
        CFI (cfiPicker979) Picker
        MOV     A,R6
        CFI EndBlock cfiCond977
        CFI EndBlock cfiCond978
        CFI EndBlock cfiPicker979
        REQUIRE ??Subroutine161_0
        ; // Fall through to label ??Subroutine161_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine161_0:
        CFI Block cfiCond980 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_389
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond981 Using cfiCommon0
        CFI (cfiCond981) NoFunction
        CFI (cfiCond981) Conditional ??CrossCallReturnLabel_390
        CFI (cfiCond981) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond981) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond981) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond981) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond981) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond981) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond981) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond981) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond981) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond981) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond981) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond981) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond981) CFA_SP SP+0
        CFI (cfiCond981) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond982 Using cfiCommon0
        CFI (cfiCond982) NoFunction
        CFI (cfiCond982) Conditional ??CrossCallReturnLabel_391
        CFI (cfiCond982) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond982) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond982) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond982) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond982) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond982) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond982) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond982) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond982) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond982) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond982) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond982) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond982) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond982) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond982) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond982) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond982) CFA_SP SP+0
        CFI (cfiCond982) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker983 Using cfiCommon1
        CFI (cfiPicker983) NoFunction
        CFI (cfiPicker983) Picker
        ADD     A,#0x12
        CFI EndBlock cfiCond980
        CFI EndBlock cfiCond981
        CFI EndBlock cfiCond982
        CFI EndBlock cfiPicker983
        REQUIRE ??Subroutine162_0
        ; // Fall through to label ??Subroutine162_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine162_0:
        CFI Block cfiCond984 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_386
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond985 Using cfiCommon0
        CFI (cfiCond985) NoFunction
        CFI (cfiCond985) Conditional ??CrossCallReturnLabel_387
        CFI (cfiCond985) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond985) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond985) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond985) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond985) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond985) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond985) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond985) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond985) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond985) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond985) CFA_SP SP+0
        CFI (cfiCond985) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond986 Using cfiCommon0
        CFI (cfiCond986) NoFunction
        CFI (cfiCond986) Conditional ??CrossCallReturnLabel_388
        CFI (cfiCond986) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond986) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond986) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond986) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond986) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond986) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond986) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond986) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond986) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond986) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond986) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond986) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond986) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond986) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond986) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond986) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond986) CFA_SP SP+0
        CFI (cfiCond986) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond987 Using cfiCommon0
        CFI (cfiCond987) NoFunction
        CFI (cfiCond987) Conditional ??CrossCallReturnLabel_389
        CFI (cfiCond987) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond987) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond987) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond987) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond987) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond987) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond987) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond987) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond987) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond987) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond987) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond987) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond987) CFA_SP SP+0
        CFI (cfiCond987) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond988 Using cfiCommon0
        CFI (cfiCond988) NoFunction
        CFI (cfiCond988) Conditional ??CrossCallReturnLabel_390
        CFI (cfiCond988) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond988) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond988) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond988) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond988) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond988) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond988) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond988) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond988) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond988) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond988) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond988) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond988) CFA_SP SP+0
        CFI (cfiCond988) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond989 Using cfiCommon0
        CFI (cfiCond989) NoFunction
        CFI (cfiCond989) Conditional ??CrossCallReturnLabel_391
        CFI (cfiCond989) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond989) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond989) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond989) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond989) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond989) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond989) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond989) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond989) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond989) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond989) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond989) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond989) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond989) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond989) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond989) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond989) CFA_SP SP+0
        CFI (cfiCond989) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker990 Using cfiCommon1
        CFI (cfiPicker990) NoFunction
        CFI (cfiPicker990) Picker
        MOV     DPL,A
        MOV     A,R7
        CFI EndBlock cfiCond984
        CFI EndBlock cfiCond985
        CFI EndBlock cfiCond986
        CFI EndBlock cfiCond987
        CFI EndBlock cfiCond988
        CFI EndBlock cfiCond989
        CFI EndBlock cfiPicker990
        REQUIRE ??Subroutine163_0
        ; // Fall through to label ??Subroutine163_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine163_0:
        CFI Block cfiCond991 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_378
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond992 Using cfiCommon0
        CFI (cfiCond992) NoFunction
        CFI (cfiCond992) Conditional ??CrossCallReturnLabel_379
        CFI (cfiCond992) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond992) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond992) CFA_SP SP+-5
        CFI Block cfiCond993 Using cfiCommon0
        CFI (cfiCond993) NoFunction
        CFI (cfiCond993) Conditional ??CrossCallReturnLabel_380
        CFI (cfiCond993) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond993) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond993) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond993) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond993) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond993) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond993) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond993) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond993) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond993) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond993) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond993) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond993) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond993) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond993) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond993) CFA_SP SP+0
        CFI (cfiCond993) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond994 Using cfiCommon0
        CFI (cfiCond994) NoFunction
        CFI (cfiCond994) Conditional ??CrossCallReturnLabel_381
        CFI (cfiCond994) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond994) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond994) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond994) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond994) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond994) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond994) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond994) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond994) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond994) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond994) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond994) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond994) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond994) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond994) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond994) CFA_SP SP+0
        CFI (cfiCond994) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond995 Using cfiCommon0
        CFI (cfiCond995) NoFunction
        CFI (cfiCond995) Conditional ??CrossCallReturnLabel_382
        CFI (cfiCond995) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond995) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond995) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond995) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond995) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond995) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond995) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond995) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond995) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond995) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond995) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond995) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond995) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond995) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond995) CFA_SP SP+0
        CFI (cfiCond995) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond996 Using cfiCommon0
        CFI (cfiCond996) NoFunction
        CFI (cfiCond996) Conditional ??CrossCallReturnLabel_383
        CFI (cfiCond996) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond996) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond996) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond996) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond996) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond996) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond996) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond996) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond996) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond996) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond996) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond996) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond996) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond996) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond996) CFA_SP SP+0
        CFI (cfiCond996) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond997 Using cfiCommon0
        CFI (cfiCond997) NoFunction
        CFI (cfiCond997) Conditional ??CrossCallReturnLabel_384
        CFI (cfiCond997) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond997) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond997) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond997) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond997) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond997) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond997) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond997) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond997) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond997) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond997) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond997) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond997) CFA_SP SP+0
        CFI (cfiCond997) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond998 Using cfiCommon0
        CFI (cfiCond998) NoFunction
        CFI (cfiCond998) Conditional ??CrossCallReturnLabel_385
        CFI (cfiCond998) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond998) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond998) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond998) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond998) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond998) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond998) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond998) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond998) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond998) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond998) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond998) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond998) CFA_SP SP+0
        CFI (cfiCond998) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond999 Using cfiCommon0
        CFI (cfiCond999) NoFunction
        CFI (cfiCond999) Conditional ??CrossCallReturnLabel_386
        CFI (cfiCond999) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond999) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond999) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond999) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond999) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond999) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond999) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond999) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond999) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond999) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond999) CFA_SP SP+0
        CFI (cfiCond999) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond1000 Using cfiCommon0
        CFI (cfiCond1000) NoFunction
        CFI (cfiCond1000) Conditional ??CrossCallReturnLabel_387
        CFI (cfiCond1000) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond1000) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond1000) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond1000) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond1000) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond1000) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond1000) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond1000) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond1000) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond1000) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond1000) CFA_SP SP+0
        CFI (cfiCond1000) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond1001 Using cfiCommon0
        CFI (cfiCond1001) NoFunction
        CFI (cfiCond1001) Conditional ??CrossCallReturnLabel_388
        CFI (cfiCond1001) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond1001) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond1001) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond1001) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond1001) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond1001) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond1001) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond1001) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond1001) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond1001) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond1001) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond1001) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond1001) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond1001) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond1001) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond1001) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond1001) CFA_SP SP+0
        CFI (cfiCond1001) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond1002 Using cfiCommon0
        CFI (cfiCond1002) NoFunction
        CFI (cfiCond1002) Conditional ??CrossCallReturnLabel_389
        CFI (cfiCond1002) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond1002) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond1002) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond1002) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond1002) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond1002) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond1002) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond1002) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond1002) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond1002) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond1002) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond1002) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond1002) CFA_SP SP+0
        CFI (cfiCond1002) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond1003 Using cfiCommon0
        CFI (cfiCond1003) NoFunction
        CFI (cfiCond1003) Conditional ??CrossCallReturnLabel_390
        CFI (cfiCond1003) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond1003) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond1003) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond1003) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond1003) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond1003) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond1003) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond1003) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond1003) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond1003) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond1003) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond1003) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond1003) CFA_SP SP+0
        CFI (cfiCond1003) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond1004 Using cfiCommon0
        CFI (cfiCond1004) NoFunction
        CFI (cfiCond1004) Conditional ??CrossCallReturnLabel_391
        CFI (cfiCond1004) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond1004) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond1004) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond1004) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond1004) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond1004) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond1004) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond1004) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond1004) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond1004) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond1004) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond1004) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond1004) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond1004) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond1004) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond1004) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond1004) CFA_SP SP+0
        CFI (cfiCond1004) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker1005 Using cfiCommon1
        CFI (cfiPicker1005) NoFunction
        CFI (cfiPicker1005) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond991
        CFI EndBlock cfiCond992
        CFI EndBlock cfiCond993
        CFI EndBlock cfiCond994
        CFI EndBlock cfiCond995
        CFI EndBlock cfiCond996
        CFI EndBlock cfiCond997
        CFI EndBlock cfiCond998
        CFI EndBlock cfiCond999
        CFI EndBlock cfiCond1000
        CFI EndBlock cfiCond1001
        CFI EndBlock cfiCond1002
        CFI EndBlock cfiCond1003
        CFI EndBlock cfiCond1004
        CFI EndBlock cfiPicker1005

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDSecMgrAppKeyType>`:
        DATA8
        DB 3

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddrStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrExtAddrStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrExtAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrExtAddrLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrExtAddrLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddrClear?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddrClear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupAMI?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupAMI

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupExt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupExtGetIndex?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupExtGetIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupAMIGetIndex?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupAMIGetIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryFree?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryNew?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlRelease?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlRelease

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlAdd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlTerm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlTerm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAppKeyGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAppKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAppKeyReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAppKeyReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSendMasterKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSendMasterKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSendNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSendNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceEntryRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceEntryRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceRemoveByExtAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceRemoveByExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddrMgrUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddrMgrUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceEntryAdd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceEntryAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlHandler?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlSetup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlSetup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_SKA_TimerExpired?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_SKA_TimerExpired

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateSKKE?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateSKKE

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateRM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateRM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateCM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateCM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoin?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoinDirect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoinDirect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoinFwd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoinFwd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceNew?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAssocDeviceAuth?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAssocDeviceAuth

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthInitiate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthInitiate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrConfig?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrPermitJoining?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrPermitJoining

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrPermitJoiningTimeout?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrPermitJoiningTimeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrNewDeviceEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrNewDeviceEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKeyCfm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKeyCfm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTCExtAddrCheck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTCExtAddrCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTCDataLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTCDataLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTransportKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTransportKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrUpdateDeviceInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrUpdateDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRemoveDeviceInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRemoveDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRequestKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRequestKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSwitchKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSwitchKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticateInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticateInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticateCfm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticateCfm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRequestAppKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRequestAppKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSetupPartner?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSetupPartner

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_MasterKeyGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_MasterKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_LinkKeySet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_LinkKeySet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticationSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticationSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticationCheck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticationCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_LinkKeyNVIdGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_LinkKeyNVIdGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_IsLinkKeyValid?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_IsLinkKeyValid

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_KeyFwdToChild?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_KeyFwdToChild

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddLinkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSetDefaultNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSetDefaultNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAPSRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAPSRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_TCLinkKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_TCLinkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_TCLinkKeySync?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_TCLinkKeySync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_TCLinkKeyLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_TCLinkKeyLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_IsDefaultTCLK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_IsDefaultTCLK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrNwkKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrNwkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrReadKeyFromNv?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrReadKeyFromNv

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrApsLinkKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrApsLinkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrInitNVKeyTables?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrInitNVKeyTables

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSaveApsLinkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSaveApsLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSaveTCLinkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSaveTCLinkKey

        END
// 4541 
// 4542 #if defined ( ZBA_FALLBACK_NWKKEY )
// 4543 /******************************************************************************
// 4544  * @fn          ZDSecMgrFallbackNwkKey
// 4545  *
// 4546  * @brief       Use the ZBA fallback network key.
// 4547  *
// 4548  * @param       none
// 4549  *
// 4550  * @return      none
// 4551  */
// 4552 void ZDSecMgrFallbackNwkKey( void )
// 4553 {
// 4554   if ( !_NIB.nwkKeyLoaded )
// 4555   {
// 4556     uint8 fallbackKey[SEC_KEY_LEN];
// 4557 
// 4558     ZDSecMgrReadKeyFromNv( ZCD_NV_PRECFGKEY, fallbackKey );
// 4559     SSP_UpdateNwkKey( fallbackKey, 0);
// 4560     SSP_SwitchNwkKey( 0 );
// 4561 
// 4562     // clear local copy of key
// 4563     osal_memset( fallbackKey, 0x00, SEC_KEY_LEN );
// 4564 
// 4565     // handle next step in authentication process
// 4566     ZDSecMgrAuthNwkKey();
// 4567   }
// 4568 }
// 4569 #endif // defined ( ZBA_FALLBACK_NWKKEY )
// 4570 
// 4571 #if defined ( NV_RESTORE )
// 4572 /******************************************************************************
// 4573  * @fn          ZDSecMgrClearNVKeyValues
// 4574  *
// 4575  * @brief       If NV_RESTORE is enabled and the status of the network needs
// 4576  *              default values this fuction clears ZCD_NV_NWKKEY,
// 4577  *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link
// 4578  *
// 4579  * @param       none
// 4580  *
// 4581  * @return      none
// 4582  */
// 4583 void ZDSecMgrClearNVKeyValues(void)
// 4584 {
// 4585   nwkActiveKeyItems keyItems;
// 4586   nwkKeyDesc nwkKey;
// 4587 
// 4588   osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
// 4589 
// 4590   osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
// 4591 
// 4592   // Initialize NV items for NWK Active and Alternate keys.
// 4593   osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
// 4594 
// 4595   osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
// 4596 
// 4597   osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
// 4598 }
// 4599 #endif // defined ( NV_RESTORE )
// 4600 
// 4601 /******************************************************************************
// 4602 ******************************************************************************/
// 
// 9 729 bytes in segment BANKED_CODE
//   522 bytes in segment BANK_RELAYS
//    16 bytes in segment CODE_C
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//     8 bytes in segment XDATA_ROM_C
//    83 bytes in segment XDATA_Z
// 
// 10 268 bytes of CODE  memory
//      0 bytes of CONST memory (+ 8 bytes shared)
//     84 bytes of XDATA memory
//
//Errors: none
//Warnings: none
