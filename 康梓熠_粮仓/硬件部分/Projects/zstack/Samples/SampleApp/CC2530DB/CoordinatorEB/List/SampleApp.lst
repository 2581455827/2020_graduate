###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         26/Dec/2019  18:43:23 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\Source\Sample #
#                          App.c                                              #
#    Command line       =  -f C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼ #
#                          þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼ #
#                          þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO  #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿·Ö\Projects\zstack\Samples\ #
#                          SampleApp\Source\SampleApp.c -D ZAPP_P1 -D         #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\25814\Desktop\202 #
#                          0±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿·Ö\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\CoordinatorEB\List\ -lA        #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\List\ --diag_suppress Pe001,Pa010 -o     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\Obj\ -e --no_code_motion --debug         #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\202 #
#                          0±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿·Ö\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\ -I C:\Users\25814\Desktop\202 #
#                          0±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿·Ö\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\Source\ -I                  #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\ZMain\TI2530DB\ -I C:\Users\25814\Desktop\202 #
#                          0±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿·Ö\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\hal\ #
#                          include\ -I C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ #
#                          _Á¸²Ö\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\hal\target\CC253 #
#                          0EB\ -I C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸² #
#                          Ö\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\include\ -I      #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\high_level\ -I           #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\ -I      #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\single_c #
#                          hip\ -I C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸² #
#                          Ö\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mt\ -I               #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\osal\include\ -I             #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\saddr\ -I           #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\sdata\ -I           #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\af\ -I                 #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\nwk\ -I                #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sapi\ -I               #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sec\ -I                #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sys\ -I                #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\zdo\ -I                #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\ -I                     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\f8w\ -Ohz               #
#    List file          =  C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\List\SampleApp.lst                       #
#    Object file        =  C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿ #
#                          ·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\Obj\SampleApp.r51                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          #include <stdio.h>
     79          #include <string.h>
     80          
     81          //MY DEVICE
     82          #include "DHT11.h"
     83           
     84          
     85          /*********************************************************************
     86           * MACROS
     87           */
     88          #define FAN P1_3
     89          #define GAS P0_6
     90          #define FIRE P1_1
     91          #define BEEP P0_4
     92          #define MAN P0_5
     93          /*********************************************************************
     94           * CONSTANTS
     95           */
     96          
     97          /*********************************************************************
     98           * TYPEDEFS
     99           */
    100          
    101          /*********************************************************************
    102           * GLOBAL VARIABLES
    103           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    104          uint8 AppTitle[] = "ALD2530 Example"; //Ó¦ÓÃ³ÌÐòÃû³Æ 
   \                     AppTitle:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for AppTitle>`
   \   000010                REQUIRE __INIT_XDATA_I
    105          uint16 ReadGasData( void );

   \                                 In  segment XDATA_I, align 1, keep-with-next
    106          uint8 AutoMode = 1;
   \                     AutoMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AutoMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    107          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    108          void myDelay(){
   \                     myDelay:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    109            for(int j =0;j<100;j++)
   \   000000   7A64         MOV     R2,#0x64
    110              for(int i = 0;i<0xffff;i++)
   \                     ??myDelay_0:
   \   000002   7800         MOV     R0,#0x0
   \   000004   7900         MOV     R1,#0x0
   \                     ??myDelay_1:
   \   000006   E8           MOV     A,R0
   \   000007   2401         ADD     A,#0x1
   \   000009   08           INC     R0
   \   00000A   E9           MOV     A,R1
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   68           XRL     A,R0
   \   000011   7003         JNZ     ??myDelay_2
   \   000013   74FF         MOV     A,#-0x1
   \   000015   69           XRL     A,R1
   \                     ??myDelay_2:
   \   000016   70EE         JNZ     ??myDelay_1
    111              {}
   \   000018   1A           DEC     R2
   \   000019   EA           MOV     A,R2
   \   00001A   70E6         JNZ     ??myDelay_0
    112          }
   \   00001C   02....       LJMP    ?BRET
    113          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    114          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    115          {
    116            SAMPLEAPP_PERIODIC_CLUSTERID,
    117            SAMPLEAPP_FLASH_CLUSTERID
    118          };
    119          

   \                                 In  segment XDATA_ROM_C, align 1
    120          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    121          {
    122            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    123            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    124            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    125            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    126            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    127            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    128            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    129            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    130            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    131          };
    132          
    133          // This is the Endpoint/Interface description.  It is defined here, but
    134          // filled-in in SampleApp_Init().  Another way to go would be to fill
    135          // in the structure here and make it a "const" (in code space).  The
    136          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    138          
    139          /*********************************************************************
    140           * EXTERNAL VARIABLES
    141           */
    142          
    143          /*********************************************************************
    144           * EXTERNAL FUNCTIONS
    145           */
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153                                    // This variable will be received when
    154                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    163          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    166          
    167          #ifndef ZDO_COORDINATOR
    168            byte state_fan = 1;
    169            byte state_beep = 1;
    170            byte recv_fan = 0;
    171            byte recv_beep = 0;
    172          #endif
    173          /*********************************************************************
    174           * LOCAL FUNCTIONS
    175           */
    176          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    177          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    178          void SampleApp_SendPeriodicMessage( void );
    179          void SampleApp_SendFlashMessage( uint16 flashTime );
    180          void SampleApp_Send_P2P_Message(void);
    181          /*********************************************************************
    182           * NETWORK LAYER CALLBACKS
    183           */
    184          
    185          /*********************************************************************
    186           * PUBLIC FUNCTIONS
    187           */
    188           
    189          /*********************************************************************
    190           * @fn      SampleApp_Init
    191           *
    192           * @brief   Initialization function for the Generic App Task.
    193           *          This is called during initialization and should contain
    194           *          any application specific initialization (ie. hardware
    195           *          initialization/setup, table initialization, power up
    196           *          notificaiton ... ).
    197           *
    198           * @param   task_id - the ID assigned by OSAL.  This ID should be
    199           *                    used to send messages and set timers.
    200           *
    201           * @return  none
    202           */
    203          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    205          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    206            
    207           
    208            SampleApp_TaskID = task_id;   //osal·ÖÅäµÄÈÎÎñIDËæ×ÅÓÃ»§Ìí¼ÓÈÎÎñµÄÔö¶à¶ø¸Ä±ä
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    209            SampleApp_NwkState = DEV_INIT;//Éè±¸×´Ì¬Éè¶¨ÎªZDO²ãÖÐ¶¨ÒåµÄ³õÊ¼»¯×´Ì¬
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    210            SampleApp_TransID = 0;        //ÏûÏ¢·¢ËÍID£¨¶àÏûÏ¢Ê±ÓÐË³ÐòÖ®·Ö£©
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    211            //Ä£¿é³õÊ¼»¯
    212            P0SEL&=~0x40;
   \   000016   53F3BF       ANL     0xf3,#0xbf
    213            P0DIR&=~0x40;//³õÊ¼»¯ÆøÌå
   \   000019   53FDBF       ANL     0xfd,#0xbf
    214            P1SEL&=~0x2;
   \   00001C   53F4FD       ANL     0xf4,#0xfd
    215            P1DIR&=~0x2;//³õÊ¼»¯»ðÑæ p1_1
   \   00001F   53FEFD       ANL     0xfe,#0xfd
    216            P0DIR |= 0x10;//·äÃùÆ÷
   \   000022   43FD10       ORL     0xfd,#0x10
    217            P0SEL&=~0x20;
   \   000025   53F3DF       ANL     0xf3,#0xdf
    218            P0DIR&=~0x20;//ºìÍâ
   \   000028   53FDDF       ANL     0xfd,#0xdf
    219            FAN = 0;
   \   00002B   C293         CLR     0x90.3
    220            BEEP = 0;
   \   00002D   C284         CLR     0x80.4
    221            //´®¿ÚÅäÖÃ
    222            MT_UartInit();
   \   00002F                ; Setup parameters for call to function MT_UartInit
   \   00002F   12....       LCALL   ??MT_UartInit?relay
    223            MT_UartRegisterTaskID(task_id);  
   \   000032                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000032   EE           MOV     A,R6
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??MT_UartRegisterTaskID?relay
    224            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n")); 
   \   000037                ; Setup parameters for call to function HalUARTWrite
   \   000037   7C0D         MOV     R4,#0xd
   \   000039   7D00         MOV     R5,#0x0
   \   00003B   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   00003D   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   00003F   7900         MOV     R1,#0x0
   \   000041   12....       LCALL   ??HalUARTWrite?relay
    225            
    226          
    227            // Device hardware initialization can be added here or in main() (Zmain.c).
    228            // If the hardware is application specific - add it here.
    229            // If the hardware is other parts of the device add it in main().
    230          
    231          #if defined ( BUILD_ALL_DEVICES )
    232            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    233            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    234            // together - if they are - we will start up a coordinator. Otherwise,
    235            // the device will start as a router.
    236            if ( readCoordinatorJumper() )
    237              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    238            else
    239              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    240          #endif // BUILD_ALL_DEVICES
    241          
    242          //¸Ã¶ÎµÄÒâË¼ÊÇ£¬Èç¹ûÉèÖÃÁËHOLD_AUTO_STARTºê¶¨Òå£¬½«»áÔÚÆô¶¯Ð¾Æ¬µÄÊ±ºò»áÔÝÍ£Æô¶¯
    243          //Á÷³Ì£¬Ö»ÓÐÍâ²¿´¥·¢ÒÔºó²Å»áÆô¶¯Ð¾Æ¬¡£ÆäÊµ¾ÍÊÇÐèÒªÒ»¸ö°´Å¥´¥·¢ËüµÄÆô¶¯Á÷³Ì¡£  
    244          #if defined ( HOLD_AUTO_START )
    245            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    246            //  from starting the device and wait for the application to
    247            //  start the device.
    248            ZDOInitDevice(0);
    249          #endif
    250          
    251            // Setup for the periodic message's destination address ÉèÖÃ·¢ËÍÊý¾ÝµÄ·½Ê½ºÍÄ¿µÄµØÖ·Ñ°Ö·Ä£Ê½
    252            // Broadcast to everyone ·¢ËÍÄ£Ê½:¹ã²¥·¢ËÍ
    253            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥
   \   000044   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000047   740F         MOV     A,#0xf
   \   000049   F0           MOVX    @DPTR,A
    254            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   00004A   A3           INC     DPTR
   \   00004B   7414         MOV     A,#0x14
   \   00004D   F0           MOVX    @DPTR,A
    255            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//Ö¸¶¨Ä¿µÄÍøÂçµØÖ·Îª¹ã²¥µØÖ·
   \   00004E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000051   74FF         MOV     A,#-0x1
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   F0           MOVX    @DPTR,A
    256          
    257            // Setup for the flash command's destination address - Group 1 ×é²¥·¢ËÍ
    258            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //×éÑ°Ö·
   \   000056   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000059   7401         MOV     A,#0x1
   \   00005B   F0           MOVX    @DPTR,A
    259            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   00005C   A3           INC     DPTR
   \   00005D   7414         MOV     A,#0x14
   \   00005F   F0           MOVX    @DPTR,A
    260            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×éºÅ0x0001
   \   000060   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000063   7401         MOV     A,#0x1
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   E4           CLR     A
   \   000068   F0           MOVX    @DPTR,A
    261          
    262            // Fill out the endpoint description. ¶¨Òå±¾Éè±¸ÓÃÀ´Í¨ÐÅµÄAPS²ã¶ËµãÃèÊö·û
    263            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000069   90....       MOV     DPTR,#SampleApp_epDesc
   \   00006C   7414         MOV     A,#0x14
   \   00006E   F0           MOVX    @DPTR,A
    264            SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp ÃèÊö·ûµÄÈÎÎñID
   \   00006F   A3           INC     DPTR
   \   000070   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000076   F0           MOVX    @DPTR,A
    265            SampleApp_epDesc.simpleDesc
    266                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleApp¼òµ¥ÃèÊö·û
   \   000077   A3           INC     DPTR
   \   000078   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00007E   F0           MOVX    @DPTR,A
    267            SampleApp_epDesc.latencyReq = noLatencyReqs;    //ÑÓÊ±²ßÂÔ
   \   00007F   A3           INC     DPTR
   \   000080   E4           CLR     A
   \   000081   F0           MOVX    @DPTR,A
    268          
    269            // Register the endpoint description with the AF
    270            afRegister( &SampleApp_epDesc );    //ÏòAF²ãµÇ¼ÇÃèÊö·û
   \   000082                ; Setup parameters for call to function afRegister
   \   000082   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000084   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000086   12....       LCALL   ??afRegister?relay
    271          
    272            // Register for all key events - This app will handle all key events
    273            RegisterForKeys( SampleApp_TaskID ); // µÇ¼ÇËùÓÐµÄ°´¼üÊÂ¼þ
   \   000089                ; Setup parameters for call to function RegisterForKeys
   \   000089   90....       MOV     DPTR,#SampleApp_TaskID
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F9           MOV     R1,A
   \   00008E   12....       LCALL   ??RegisterForKeys?relay
    274          
    275            // By default, all devices start out in Group 1
    276            SampleApp_Group.ID = 0x0001;//×éºÅ
   \   000091   90....       MOV     DPTR,#SampleApp_Group
   \   000094   7401         MOV     A,#0x1
   \   000096   F0           MOVX    @DPTR,A
   \   000097   A3           INC     DPTR
   \   000098   E4           CLR     A
   \   000099   F0           MOVX    @DPTR,A
    277            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//Éè¶¨×éÃû
   \   00009A                ; Setup parameters for call to function osal_memcpy
   \   00009A   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00009D   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000A0   F5..         MOV     ?V0 + 2,A
   \   0000A2   78..         MOV     R0,#?V0 + 0
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A7   7C07         MOV     R4,#0x7
   \   0000A9   7D00         MOV     R5,#0x0
   \   0000AB   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000AD   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000AF   12....       LCALL   ??osal_memcpy?relay
   \   0000B2   7403         MOV     A,#0x3
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
    278            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//°Ñ¸Ã×éµÇ¼ÇÌí¼Óµ½APSÖÐ
   \   0000B7                ; Setup parameters for call to function aps_AddGroup
   \   0000B7   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B9   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000BB   7914         MOV     R1,#0x14
   \   0000BD   12....       LCALL   ??aps_AddGroup?relay
    279          
    280          #if defined ( LCD_SUPPORTED )
    281            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //Èç¹ûÖ§³ÖLCD£¬ÏÔÊ¾ÌáÊ¾ÐÅÏ¢
   \   0000C0                ; Setup parameters for call to function HalLcdWriteString
   \   0000C0   7900         MOV     R1,#0x0
   \   0000C2   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000C4   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000C6   12....       LCALL   ??HalLcdWriteString?relay
    282          #endif
    283          }
   \   0000C9                REQUIRE ?Subroutine0
   \   0000C9                REQUIRE P0SEL
   \   0000C9                REQUIRE P0DIR
   \   0000C9                REQUIRE P1SEL
   \   0000C9                REQUIRE P1DIR
   \   0000C9                REQUIRE _A_P1
   \   0000C9                REQUIRE _A_P0
   \   0000C9                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    284          
    285          /*********************************************************************
    286           * @fn      SampleApp_ProcessEvent
    287           *
    288           * @brief   Generic Application Task event processor.  This function
    289           *          is called to process all events for the task.  Events
    290           *          include timers, messages and any other user defined events.
    291           *
    292           * @param   task_id  - The OSAL assigned task ID.
    293           * @param   events - events to process.  This is a bit map and can
    294           *                   contain more than one event.
    295           *
    296           * @return  none
    297           */
    298          //ÓÃ»§Ó¦ÓÃÈÎÎñµÄÊÂ¼þ´¦Àíº¯Êý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    300          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    301            afIncomingMSGPacket_t *MSGpkt;
    302            (void)task_id;  // Intentionally unreferenced parameter
    303          
    304            if ( events & SYS_EVENT_MSG ) //½ÓÊÕÏµÍ³ÏûÏ¢ÔÙ½øÐÐÅÐ¶Ï
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    305            {
    306              //½ÓÊÕÊôÓÚ±¾Ó¦ÓÃÈÎÎñSampleAppµÄÏûÏ¢£¬ÒÔSampleApp_TaskID±ê¼Ç
    307              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    308              while ( MSGpkt )
    309              {
    310                switch ( MSGpkt->hdr.event )
    311                {
    312                  // Received when a key is pressed
    313                  case KEY_CHANGE://°´¼üÊÂ¼þ
    314                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    315                    break;
    316          
    317                  // Received when a messages is received (OTA) for this endpoint
    318                case AF_INCOMING_MSG_CMD://½ÓÊÕÊý¾ÝÊÂ¼þ,µ÷ÓÃº¯ÊýAF_DataRequest()½ÓÊÕÊý¾Ý
    319                    SampleApp_MessageMSGCB( MSGpkt );//µ÷ÓÃ»Øµ÷º¯Êý¶ÔÊÕµ½µÄÊý¾Ý½øÐÐ´¦Àí
    320                    break;
    321          
    322                  // Received whenever the device changes state in the network
    323                  case ZDO_STATE_CHANGE:
    324                    //Ö»ÒªÍøÂç×´Ì¬·¢Éú¸Ä±ä£¬¾ÍÍ¨¹ýZDO_STATE_CHANGEÊÂ¼þÍ¨ÖªËùÓÐµÄÈÎÎñ¡£
    325                    //Í¬Ê±Íê³É¶ÔÐ­µ÷Æ÷£¬Â·ÓÉÆ÷£¬ÖÕ¶ËµÄÉèÖÃ
    326                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    327                    //if ( (SampleApp_NwkState == DEV_ZB_COORD)//ÊµÑéÖÐÐ­µ÷Æ÷Ö»½ÓÊÕÊý¾ÝËùÒÔÈ¡Ïû·¢ËÍÊÂ¼þ
    328                    if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    329                    {
    330                      // Start sending the periodic message in a regular interval.
    331                      //Õâ¸ö¶¨Ê±Æ÷Ö»ÊÇÎª·¢ËÍÖÜÆÚÐÅÏ¢¿ªÆôµÄ£¬Éè±¸Æô¶¯³õÊ¼»¯ºó´ÓÕâÀï¿ªÊ¼
    332                      //´¥·¢µÚÒ»¸öÖÜÆÚÐÅÏ¢µÄ·¢ËÍ£¬È»ºóÖÜ¶ø¸´Ê¼ÏÂÈ¥
    333                      osal_start_timerEx( SampleApp_TaskID,
    334                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    335                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    336                     
    337                    }
    338                    else
    339                    {
    340                        
    341                    }
    342                    break;
    343          
    344                  default:
    345                    break;
    346                }
    347          
    348                // Release the memory ÊÂ¼þ´¦ÀíÍêÁË£¬ÊÍ·ÅÏûÏ¢Õ¼ÓÃµÄÄÚ´æ
    349                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    350             
    351                // Next - if one is available Ö¸ÕëÖ¸ÏòÏÂÒ»¸ö·ÅÔÚ»º³åÇøµÄ´ý´¦ÀíµÄÊÂ¼þ£¬
    352                //·µ»Øwhile ( MSGpkt )ÖØÐÂ´¦ÀíÊÂ¼þ£¬Ö±µ½»º³åÇøÃ»ÓÐµÈ´ý´¦ÀíÊÂ¼þÎªÖ¹
    353                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    354              }
    355          
    356              // return unprocessed events ·µ»ØÎ´´¦ÀíµÄÊÂ¼þ
    357              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    358            }
    359          
    360            // Send a message out - This event is generated by a timer
    361            //  (setup in SampleApp_Init()).
    362            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    363            {
    364              // Send the periodic message ´¦ÀíÖÜÆÚÐÔÊÂ¼þ£¬
    365              //ÀûÓÃSampleApp_SendPeriodicMessage()´¦ÀíÍêµ±Ç°µÄÖÜÆÚÐÔÊÂ¼þ£¬È»ºóÆô¶¯¶¨Ê±Æ÷
    366              //¿ªÆôÏÂÒ»¸öÖÜÆÚÐÔÊÂÇé£¬ÕâÑùÒ»ÖÖÑ­»·ÏÂÈ¥£¬Ò²¼´ÊÇÉÏÃæËµµÄÖÜÆÚÐÔÊÂ¼þÁË£¬
    367              //¿ÉÒÔ×öÎª´«¸ÐÆ÷¶¨Ê±²É¼¯¡¢ÉÏ´«ÈÎÎñ
    368              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    369              
    370              // Setup to send message again in normal period (+ a little jitter)
    371              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    372                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24E8         ADD     A,#-0x18
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3403         ADDC    A,#0x3
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    373          
    374              // return unprocessed events ·µ»ØÎ´´¦ÀíµÄÊÂ¼þ
    375              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    376            }
    377          
    378            // Discard unknown events
    379            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    380          }
    381          
    382          /*********************************************************************
    383           * Event Generation Functions
    384           */
    385          /*********************************************************************
    386           * @fn      SampleApp_HandleKeys
    387           *
    388           * @brief   Handles all key events for this device.
    389           *
    390           * @param   shift - true if in shift/alt.
    391           * @param   keys - bit field for key events. Valid entries:
    392           *                 HAL_KEY_SW_2
    393           *                 HAL_KEY_SW_1
    394           *
    395           * @return  none
    396           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    397          void SampleApp_HandleKeys( uint8 shift, uint8 keys )  
   \                     SampleApp_HandleKeys:
    398          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    399            (void)shift;  // Intentionally unreferenced parameter
    400            
    401            if ( keys & HAL_KEY_SW_1 )
   \   000006   A2E0         MOV     C,0xE0 /* A   */.0
   \   000008   5007         JNC     ??SampleApp_HandleKeys_0
    402            {
    403              /* This key sends the Flash Command is sent to Group 1.
    404               * This device will not receive the Flash Command from this
    405               * device (even if it belongs to group 1).
    406               */
    407             SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000A                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000A   7AE8         MOV     R2,#-0x18
   \   00000C   7B03         MOV     R3,#0x3
   \   00000E   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    408             
    409              
    410            
    411            }
    412          
    413            if ( keys & HAL_KEY_SW_6 )
    414            {
    415              /* The Flashr Command is sent to Group 1.
    416               * This key toggles this device in and out of group 1.
    417               * If this device doesn't belong to group 1, this application
    418               * will not receive the Flash command sent to group 1.
    419               */
    420            
    421             /*
    422              aps_Group_t *grp;
    423              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    424              if ( grp )
    425              {
    426                // Remove from the group
    427                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    428              }
    429              else
    430              {
    431                // Add to the flash group
    432                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    433              }
    434             */
    435            }
    436          }
   \                     ??SampleApp_HandleKeys_0:
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
    437          
    438          /*********************************************************************
    439           * LOCAL FUNCTIONS
    440           */
    441          
    442          /*********************************************************************
    443           * @fn      SampleApp_MessageMSGCB
    444           *
    445           * @brief   Data message processor callback.  This function processes
    446           *          any incoming data - probably from other devices.  So, based
    447           *          on cluster ID, perform the intended action.
    448           *
    449           * @param   none
    450           *
    451           * @return  none
    452           */
    453          //½ÓÊÕÊý¾Ý£¬²ÎÊýÎª½ÓÊÕµ½µÄÊý¾Ý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    454          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    455          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    456            uint16 flashTime;
    457            unsigned short len = 6+2+1+1;
    458            byte buf[6+2+1+1]={0}; 
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00001E   740A         MOV     A,#0xa
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    459            
    460            switch ( pkt->clusterId ) //ÅÐ¶Ï´ØID
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 1,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000037   0100         DW        1
   \   000039   01           DB        1
   \   00003A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00003C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00003E   ....         DW        ??SampleApp_MessageMSGCB_2
    461            {
    462              case SAMPLEAPP_PERIODIC_CLUSTERID: //ÊÕµ½¹ã²¥Êý¾Ý
    463               
    464          #ifndef ZDO_COORDINATOR 
    465                //½Úµã
    466                 osal_memset(buf, 0 , 4);
    467                 osal_memcpy(buf, pkt->cmd.Data, 4);
    468                 
    469                 if(osal_memcmp(buf,"FAN1",4)){
    470                  FAN^=1;
    471                  AutoMode^=1;
    472                 }
    473                 else if(osal_memcmp(buf,"BEEP",4)){
    474                  BEEP^=1;
    475                  AutoMode^=1;
    476                 }
    477                 
    478                HalUARTWrite(0,buf, len);
    479          #else
    480                //Ð­µ÷Æ÷
    481                osal_memset(buf, 0 , len);
   \                     ??SampleApp_MessageMSGCB_1:
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C0A         MOV     R4,#0xa
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7900         MOV     R1,#0x0
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??osal_memset?relay
    482                osal_memcpy(buf, pkt->cmd.Data, len); //¸´ÖÆÊý¾Ýµ½»º³åÇøÖÐ
   \   000053                ; Setup parameters for call to function osal_memcpy
   \   000053   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000056   F5..         MOV     ?V0 + 0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V0 + 1,A
   \   00005C   75..00       MOV     ?V0 + 2,#0x0
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000064   7C0A         MOV     R4,#0xa
   \   000066   7D00         MOV     R5,#0x0
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   \   000071   12....       LCALL   ??osal_memcpy?relay
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    483                if(is_fan||is_beep){
   \   000079   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00007C   7008         JNZ     ??SampleApp_MessageMSGCB_3
   \   00007E   90....       MOV     DPTR,#is_beep
   \   000081   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000084   6003         JZ      ??SampleApp_MessageMSGCB_4
    484                  SampleApp_SendPeriodicMessage();
   \                     ??SampleApp_MessageMSGCB_3:
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    485                }
    486                HalUARTWrite(0,buf, len);
   \                     ??SampleApp_MessageMSGCB_4:
   \   000089                ; Setup parameters for call to function HalUARTWrite
   \   000089   7C0A         MOV     R4,#0xa
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   85..82       MOV     DPL,?XSP + 0
   \   000090   85..83       MOV     DPH,?XSP + 1
   \   000093   AA82         MOV     R2,DPL
   \   000095   AB83         MOV     R3,DPH
   \   000097   7900         MOV     R1,#0x0
   \   000099   12....       LCALL   ??HalUARTWrite?relay
    487          #endif
    488                break;
   \   00009C   8033         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   00009E   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000A1   F8           MOV     R0,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F9           MOV     R1,A
   \   0000A5                ; Setup parameters for call to function HalLedBlink
   \   0000A5   8882         MOV     DPL,R0
   \   0000A7   8983         MOV     DPH,R1
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   FA           MOV     R2,A
   \   0000AC   8882         MOV     DPL,R0
   \   0000AE   8983         MOV     DPH,R1
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   EA           MOV     A,R2
   \   0000B5   2400         ADD     A,#0x0
   \   0000B7   F5..         MOV     ?V0 + 0,A
   \   0000B9   E4           CLR     A
   \   0000BA   39           ADDC    A,R1
   \   0000BB   F5..         MOV     ?V0 + 1,A
   \   0000BD   7402         MOV     A,#0x2
   \   0000BF   78..         MOV     R0,#?V0 + 0
   \   0000C1   12....       LCALL   ?US_SHR
   \   0000C4   AC..         MOV     R4,?V0 + 0
   \   0000C6   AD..         MOV     R5,?V0 + 1
   \   0000C8   7B32         MOV     R3,#0x32
   \   0000CA   7A04         MOV     R2,#0x4
   \   0000CC   7908         MOV     R1,#0x8
    489          
    490              case SAMPLEAPP_FLASH_CLUSTERID: //ÊÕµ½×é²¥Êý¾Ý  
    491                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    492                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   0000CE   12....       LCALL   ??HalLedBlink?relay
    493                break;
    494            case SAMPLEAPP_P2P_CLUSTERID:
    495           
    496              break;
    497            }
    498          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000D1   740A         MOV     A,#0xa
   \   0000D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D6   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#is_fan
   \   000003                REQUIRE ??Subroutine4_0
   \   000003                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET
    499          
    500          /*********************************************************************
    501           * @fn      SampleApp_SendPeriodicMessage
    502           *
    503           * @brief   Send the periodic message.
    504           *
    505           * @param   none
    506           *
    507           * @return  none
    508           */
    509          //·ÖÎö·¢ËÍÖÜÆÚÐÅÏ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    510          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    511          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    512          #ifndef ZDO_COORDINATOR 
    513            //»ñµÃµÄÊý¾ÝÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾  
    514            char str[6+2+1+1]={0};
    515            //»ñÈ¡ÎÂÊª¶È
    516            unsigned char temp_humi[6]={0};
    517            strcpy(temp_humi,DHT11());
    518            //»ñÈ¡ÆøÌå
    519            uint16 gas = ReadGasData();
    520            //»ñÈ¡»ðÑæ
    521            byte fire = 0;
    522            if(FIRE){
    523              fire = 0;
    524            }
    525            else{
    526              fire = 1;
    527            }
    528            if(AutoMode){
    529              FAN = gas>65?1:0;
    530              BEEP = fire==1?1:0;
    531            }
    532            /*
    533            if(state_fan){
    534              FAN = gas>65?1:0;
    535            }
    536            if(state_beep){
    537              BEEP = fire?1:0;
    538            }
    539            */
    540           //ÈËÌåºìÍâ
    541            byte man = 0;
    542            man = MAN==1?1:0;
    543            sprintf(str,"%s%2d%d%d\n",temp_humi,gas,fire,man);
    544            HalUARTWrite(0,str,sizeof(str));
    545          
    546             // µ÷ÓÃAF_DataRequest½«Êý¾ÝÎÞÏß¹ã²¥³öÈ¥
    547            if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    548                                 &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    549                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    550                                 sizeof(str),       //·¢ËÍÊý¾Ý³¤¶È
    551                                 (uchar*)str,// ·¢ËÍÊý¾Ý»º³åÇø
    552                                 &SampleApp_TransID,     // ÈÎÎñIDºÅ
    553                                 AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    554                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
    555            {
    556            }
    557            else
    558            {
    559              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
    560              // Error occurred in request to send.
    561            }
    562          #elif defined ZDO_COORDINATOR
    563            //Ð­µ÷Æ÷·¢ËÍ
    564           
    565            if(is_beep)
   \   00000A   90....       MOV     DPTR,#is_beep
   \   00000D   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000010   6064         JZ      ??SampleApp_SendPeriodicMessage_0
    566            {
    567              char str[]="BEEP";
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   AC82         MOV     R4,DPL
   \   00001A   AD83         MOV     R5,DPH
   \   00001C   7583..       MOV     DPH,#(`?<Constant "BEEP">` >> 8) & 0xff
   \   00001F   7582..       MOV     DPL,#`?<Constant "BEEP">` & 0xff
   \   000022   7405         MOV     A,#0x5
   \   000024   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    568               if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    569                                 &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    570                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    571                                 sizeof(str),       //·¢ËÍÊý¾Ý³¤¶È
    572                                 (uchar*)str,// ·¢ËÍÊý¾Ý»º³åÇø
    573                                 &SampleApp_TransID,     // ÈÎÎñIDºÅ
    574                                 AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    575                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
   \   000027                ; Setup parameters for call to function AF_DataRequest
   \   000027   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002F   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000032   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   7403         MOV     A,#0x3
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   8582..       MOV     ?V0 + 0,DPL
   \   000042   8583..       MOV     ?V0 + 1,DPH
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   75..05       MOV     ?V0 + 0,#0x5
   \   00004D   75..00       MOV     ?V0 + 1,#0x0
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   75..01       MOV     ?V0 + 0,#0x1
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   7920         MOV     R1,#0x20
   \   00005F   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000061   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000063   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000065   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000067   12....       LCALL   ??AF_DataRequest?relay
   \   00006A   7409         MOV     A,#0x9
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    576            {
    577            }
    578            is_beep = 0;
   \   00006F   90....       MOV     DPTR,#is_beep
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   F0           MOVX    @DPTR,A
    579            }
    580            if(is_fan){
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   000076   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000079   6064         JZ      ??SampleApp_SendPeriodicMessage_1
    581              char str[]="FAN1";
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   AC82         MOV     R4,DPL
   \   000083   AD83         MOV     R5,DPH
   \   000085   7583..       MOV     DPH,#(`?<Constant "FAN1">` >> 8) & 0xff
   \   000088   7582..       MOV     DPL,#`?<Constant "FAN1">` & 0xff
   \   00008B   7405         MOV     A,#0x5
   \   00008D   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    582              if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    583                                 &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    584                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    585                                 sizeof(str),       //·¢ËÍÊý¾Ý³¤¶È
    586                                 (uchar*)str,// ·¢ËÍÊý¾Ý»º³åÇø
    587                                 &SampleApp_TransID,     // ÈÎÎñIDºÅ
    588                                 AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    589                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
   \   000090                ; Setup parameters for call to function AF_DataRequest
   \   000090   75..1E       MOV     ?V0 + 0,#0x1e
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000098   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00009B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00009E   78..         MOV     R0,#?V0 + 0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   8582..       MOV     ?V0 + 0,DPL
   \   0000AB   8583..       MOV     ?V0 + 1,DPH
   \   0000AE   78..         MOV     R0,#?V0 + 0
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   75..05       MOV     ?V0 + 0,#0x5
   \   0000B6   75..00       MOV     ?V0 + 1,#0x0
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BE   75..01       MOV     ?V0 + 0,#0x1
   \   0000C1   78..         MOV     R0,#?V0 + 0
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   7920         MOV     R1,#0x20
   \   0000C8   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000CA   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000CC   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   0000CE   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   0000D0   12....       LCALL   ??AF_DataRequest?relay
   \   0000D3   7409         MOV     A,#0x9
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
    590            {
    591            }
    592              is_fan = 0;
   \   0000D8   90....       MOV     DPTR,#is_fan
   \   0000DB   E4           CLR     A
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   F0           MOVX    @DPTR,A
    593              
    594            }
    595          
    596          #endif 
    597            
    598           
    599          }
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   0000DF   7405         MOV     A,#0x5
   \   0000E1   02....       LJMP    ??Subroutine5_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    600          
    601          /*********************************************************************
    602           * @fn      SampleApp_SendFlashMessage
    603           *
    604           * @brief   Send the flash message to group 1.
    605           *
    606           * @param   flashTime - in milliseconds
    607           *
    608           * @return  none
    609           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    610          void SampleApp_SendFlashMessage( uint16 flashTime )  
   \                     SampleApp_SendFlashMessage:
    611          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    612            uint8 buffer[3];
    613            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    614            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    615            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    616          
    617            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    618                                 SAMPLEAPP_FLASH_CLUSTERID,
    619                                 3,
    620                                 buffer,
    621                                 &SampleApp_TransID,
    622                                 AF_DISCV_ROUTE,
    623                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029                REQUIRE ?Subroutine1
   \   000029                ; // Fall through to label ?Subroutine1
    624            {
    625            }
    626            else
    627            {
    628              // Error occurred in request to send.
    629            }
    630          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..1E       MOV     ?V0 + 0,#0x1e
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000008   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00000B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000013   7403         MOV     A,#0x3
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   8582..       MOV     ?V0 + 0,DPL
   \   00001B   8583..       MOV     ?V0 + 1,DPH
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..03       MOV     ?V0 + 0,#0x3
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..02       MOV     ?V0 + 0,#0x2
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7920         MOV     R1,#0x20
   \   000038   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00003A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003C   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   00003E   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000040   12....       LCALL   ??AF_DataRequest?relay
   \   000043   7409         MOV     A,#0x9
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   7403         MOV     A,#0x3
   \   00004A                REQUIRE ??Subroutine5_0
   \   00004A                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    631          void SampleApp_Send_P2P_Message(void){
   \                     SampleApp_Send_P2P_Message:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    632            uchar cmd[3] ="LED";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "LED">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "LED">` & 0xff
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    633            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    634                                 SAMPLEAPP_FLASH_CLUSTERID,
    635                                 3,
    636                                 cmd,
    637                                 &SampleApp_TransID,
    638                                 AF_DISCV_ROUTE,
    639                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   80..         SJMP    ?Subroutine1
    640            {
    641            }
    642          }
    643          /*********************************************************************
    644          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    645           uint16 ReadGasData( void )
   \                     ReadGasData:
    646          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    647            uint16 reading = 0;
    648            
    649            /* Enable channel */
    650            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    651            
    652            /* writing to this register starts the extra conversion */
    653            ADCCON3 = 0x86;// AVDD5 Òý½Å  00£º 64 ³éÈ¡ÂÊ(7 Î»ENOB)  0110£º AIN6
   \   000003   75B686       MOV     0xb6,#-0x7a
    654            
    655            /* Wait for the conversion to be done */
    656            while (!(ADCCON1 & 0x80));
   \                     ??ReadGasData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadGasData_0
    657            
    658            /* Disable channel after done conversion */
    659            ADCCFG &= (0x40 ^ 0xFF); //°´Î»Òì»ò¡£Èç1010^1111=0101£¨¶þ½øÖÆ£©
   \   00000C   53F2BF       ANL     0xf2,#0xbf
    660            
    661            /* Read the result */
    662            reading = ADCL;
   \   00000F   E5BA         MOV     A,0xba
    663            reading |= (int16) (ADCH << 8); 
    664            
    665            reading >>= 8;
    666            
    667            return (reading);
   \   000011   E5BB         MOV     A,0xbb
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   FB           MOV     R3,A
   \   000016   02....       LJMP    ?BRET
   \   000019                REQUIRE ADCCFG
   \   000019                REQUIRE ADCCON3
   \   000019                REQUIRE ADCCON1
   \   000019                REQUIRE ADCL
   \   000019                REQUIRE ADCH
    668          } 

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 Example"
   \            35333020
   \            4578616D
   \            706C6500

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AutoMode>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??myDelay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    myDelay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BEEP">`:
   \   000000   42454550     DB "BEEP"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FAN1">`:
   \   000000   46414E31     DB "FAN1"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED">`:
   \   000000   4C4544       DB 4CH, 45H, 44H

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadGasData                        0      0      0
     SampleApp_HandleKeys               0      0     21
       -> SampleApp_SendFlashMessage
                                        0      0     18
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0     36
       -> osal_memset                   0      0     42
       -> osal_memcpy                   0      0     48
       -> SampleApp_SendPeriodicMessage
                                        0      0     42
       -> HalUARTWrite                  0      0     42
       -> HalLedBlink                   0      0     42
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     31
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     45
       -> AF_DataRequest                0      0     48
       -> AF_DataRequest                0      0     48
     SampleApp_Send_P2P_Message         2      0     22
       -> AF_DataRequest                0      0     44
     myDelay                            0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_P1                                    1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     P1SEL                                    1
     P0DIR                                    1
     P1DIR                                    1
     AppTitle                                16
     AutoMode                                 1
     myDelay                                 31
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         201
     ?Subroutine0                             5
     SampleApp_ProcessEvent                 176
     SampleApp_HandleKeys                    22
     SampleApp_MessageMSGCB                 217
     ?Subroutine3                            12
     ?Subroutine2                             3
     ??Subroutine4_0                          8
     SampleApp_SendPeriodicMessage          228
     ??Subroutine5_0                          8
     SampleApp_SendFlashMessage              41
     ?Subroutine1                            74
     SampleApp_Send_P2P_Message              33
     ReadGasData                             25
     ?<Initializer for AppTitle>             16
     ?<Initializer for AutoMode>              1
     ??myDelay?relay                          6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??ReadGasData?relay                      6
     ?<Constant "UartInit OK\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant {0}>                         10
     ?<Constant "BEEP">                       5
     ?<Constant "FAN1">                       5
     ?<Constant "LED">                        3

 
 1 084 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
    11 bytes in segment SFR_AN
    17 bytes in segment XDATA_I
    17 bytes in segment XDATA_ID
    70 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
 1 155 bytes of CODE  memory
    70 bytes of CONST memory
     0 bytes of DATA  memory (+ 11 bytes shared)
    70 bytes of XDATA memory

Errors: none
Warnings: none
