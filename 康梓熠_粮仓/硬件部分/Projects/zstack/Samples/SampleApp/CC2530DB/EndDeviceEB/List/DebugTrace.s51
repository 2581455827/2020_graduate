///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        26/Nov/2019  18:52:53 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Co /
//                          mponents\mt\DebugTrace.c                          /
//    Command line       =  -f C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ       /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO        /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\6.Z /
//                          Stack-2.5.1a¹¤³ÌÄ£°å\Components\mt\DebugTrace.c   /
//                          -D NWK_AUTO_POLL -D ZAPP_P1 -D MT_TASK -D         /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\EndDevic /
//                          eEB\List\ -lA C:\Users\25814\Desktop\6.ZStack-2.5 /
//                          .1a¹¤³ÌÄ£°å\Projects\zstack\Samples\SampleApp\CC2 /
//                          530DB\EndDeviceEB\List\ --diag_suppress           /
//                          Pe001,Pa010 -o C:\Users\25814\Desktop\6.ZStack-2. /
//                          5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\EndDeviceEB\Obj\ -e --no_code_motion       /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\ -I   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\Sourc /
//                          e\ -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ /
//                          £°å\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\ZMain\TI2530DB\ -I                         /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\hal\include\ -I                 /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\hal\target\CC2530EB\ -I         /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\include\ -I                 /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\high_level\ -I              /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\low_level\srf04\ -I         /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\low_level\srf04\single_chip /
//                          \ -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£ /
//                          °å\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\mt\ -I                     /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\osal\include\ -I                /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\services\saddr\ -I              /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\services\sdata\ -I              /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\af\ -I                    /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\nwk\ -I                   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\sapi\ -I                  /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\sec\ -I                   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\sys\ -I                   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\zdo\ -I                   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\zmac\ -I                        /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\zmac\f8w\ -Ohz                  /
//    List file          =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\EndDevic /
//                          eEB\List\DebugTrace.s51                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME DebugTrace

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??debug_msg?relay
        FUNCTION ??debug_msg?relay,0203H
        PUBLIC ??debug_str?relay
        FUNCTION ??debug_str?relay,0203H
        PUBLIC debug_msg
        FUNCTION debug_msg,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC debug_str
        FUNCTION debug_str,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_msg_send       SYMBOL "osal_msg_send"
osal_strlen         SYMBOL "osal_strlen"
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
??osal_strlen?relay SYMBOL "?relay", osal_strlen
debug_msg           SYMBOL "debug_msg"
??debug_msg?relay   SYMBOL "?relay", debug_msg
debug_str           SYMBOL "debug_str"
??debug_str?relay   SYMBOL "?relay", debug_str

        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN MT_TaskID
        EXTERN debugCompId
        EXTERN debugThreshold

// C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Components\mt\DebugTrace.c
//    1 /**************************************************************************************************
//    2   Filename:       DebugTrace.c
//    3   Revised:        $Date: 2008-01-17 12:22:57 -0800 (Thu, 17 Jan 2008) $
//    4   Revision:       $Revision: 16223 $
//    5 
//    6 
//    7   Description:    This interface provides quick one-function-call functions to
//    8                   Monitor and Test reporting mechanisms.
//    9 
//   10 
//   11   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   12 
//   13   IMPORTANT: Your use of this Software is limited to those specific rights
//   14   granted under the terms of a software license agreement between the user
//   15   who downloaded the software, his/her employer (which must be your employer)
//   16   and Texas Instruments Incorporated (the "License").  You may not use this
//   17   Software unless you agree to abide by the terms of the License. The License
//   18   limits your use, and you acknowledge, that the Software may not be modified,
//   19   copied or distributed unless embedded on a Texas Instruments microcontroller
//   20   or used solely and exclusively in conjunction with a Texas Instruments radio
//   21   frequency transceiver, which is integrated into your product.  Other than for
//   22   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   23   works of, modify, distribute, perform, display or sell this Software and/or
//   24   its documentation for any purpose.
//   25 
//   26   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   27   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   28   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   29   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   30   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   31   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   32   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   33   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   34   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   35   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   36   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   37 
//   38   Should you have any questions regarding your right to use this Software,
//   39   contact Texas Instruments Incorporated at www.TI.com.
//   40 
//   41 **************************************************************************************************/
//   42 
//   43 #if defined( MT_TASK ) || defined( APP_DEBUG )
//   44 
//   45 /*********************************************************************
//   46  * INCLUDES
//   47  */
//   48 #include "ZComDef.h"
//   49 #include "OSAL.h"
//   50 #include "MT.h"
//   51 #include "MT_TASK.h"
//   52 #include "MT_DEBUG.h"
//   53 #include "DebugTrace.h"
//   54 
//   55 #if defined ( APP_DEBUG )
//   56   #include "DebugApp.h"
//   57 #endif
//   58 
//   59  /*********************************************************************
//   60  * MACROS
//   61  */
//   62 
//   63 /*********************************************************************
//   64  * CONSTANTS
//   65  */
//   66 
//   67 
//   68 /*********************************************************************
//   69  * TYPEDEFS
//   70  */
//   71 
//   72 /*********************************************************************
//   73  * GLOBAL VARIABLES
//   74  */
//   75 
//   76 /*********************************************************************
//   77  * EXTERNAL VARIABLES
//   78  */
//   79 
//   80 /*********************************************************************
//   81  * EXTERNAL FUNCTIONS
//   82  */
//   83 
//   84  /*********************************************************************
//   85  * LOCAL VARIABLES
//   86  */
//   87 
//   88 /*********************************************************************
//   89  * LOCAL FUNCTIONS
//   90  */
//   91 
//   92 /*********************************************************************
//   93  * @fn      debug_msg
//   94  *
//   95  * @brief
//   96  *
//   97  *   This feature allows modules to display debug information as
//   98  *   applications execute in real-time.  This feature will work similar
//   99  *   to "printf()" but will output to the serial port for display in
//  100  *   the Z-Test tool.
//  101  *
//  102  *   This feature will most likely be compiled out in the production code
//  103  *   to save code space.
//  104  *
//  105  * @param   byte compID - Component ID
//  106  * @param   byte severity - CRITICAL(0x01), ERROR(0x02), INFORMATION(0x03)
//  107  *                          or TRACE(0x04)
//  108  * @param   byte numParams - number of parameter fields (param1-3)
//  109  * @param   UINT16 param1 - user defined data
//  110  * @param   UINT16 param2 - user defined data
//  111  * @param   UINT16 param3 - user defined data
//  112  *
//  113  * @return  void
//  114  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  115 void debug_msg( byte compID, byte severity, byte numParams, UINT16 param1,
debug_msg:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function debug_msg
        CODE
//  116 																								UINT16 param2, UINT16 param3 )
//  117 {
        FUNCALL debug_msg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL debug_msg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  118 
//  119   mtDebugMsg_t *mtDebugMsg;
//  120   UINT16 timestamp;
//  121 
//  122   if ( debugThreshold == 0 || debugCompId != compID )
        MOV     DPTR,#debugThreshold
        MOVX    A,@DPTR
        JZ      ??debug_msg_0
        MOV     DPTR,#debugCompId
        MOVX    A,@DPTR
        XRL     A,?V0 + 4
        JNZ     ??debug_msg_0
//  123     return;
//  124 
//  125   // Fill in the timestamp
//  126   timestamp = 0;
//  127 
//  128   // Get a message buffer to build the debug message
//  129   mtDebugMsg = (mtDebugMsg_t *)osal_msg_allocate( sizeof( mtDebugMsg_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0xd
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
//  130   if ( mtDebugMsg )
        MOV     A,R2
        ORL     A,R3
        JZ      ??debug_msg_0
//  131   {
//  132       mtDebugMsg->hdr.event = CMD_DEBUG_MSG;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x2
        MOVX    @DPTR,A
//  133       mtDebugMsg->compID = compID;
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 4
        LCALL   ?Subroutine3 & 0xFFFF
//  134       mtDebugMsg->severity = severity;
??CrossCallReturnLabel_6:
        MOV     A,?V0 + 5
        LCALL   ?Subroutine1 & 0xFFFF
//  135       mtDebugMsg->numParams = numParams;
??CrossCallReturnLabel_2:
        MOV     A,?V0 + 6
        LCALL   ?Subroutine1 & 0xFFFF
//  136 
//  137       mtDebugMsg->param1 = param1;
??CrossCallReturnLabel_3:
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine0 & 0xFFFF
//  138       mtDebugMsg->param2 = param2;
??CrossCallReturnLabel_0:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        LCALL   ?Subroutine0 & 0xFFFF
//  139       mtDebugMsg->param3 = param3;
??CrossCallReturnLabel_1:
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  140       mtDebugMsg->timestamp = timestamp;
        MOV     A,R2
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  141 
//  142       osal_msg_send( MT_TaskID, (uint8 *)mtDebugMsg );
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#MT_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
??debug_msg_0:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  143   }
//  144 
//  145 } /* debug_msg() */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        RET
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_3
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_0
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_1
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        INC     DPTR
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_2
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_3
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_0
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_1
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
//  146 
//  147 /*********************************************************************
//  148  * @fn      debug_str
//  149  *
//  150  * @brief
//  151  *
//  152  *   This feature allows modules to display a debug text string as
//  153  *   applications execute in real-time. This feature will output to
//  154  *   the serial port for display in the Z-Test tool.
//  155  *
//  156  *   This feature will most likely be compiled out in the production
//  157  *   code in order to save code space.
//  158  *
//  159  * @param   byte *str_ptr - pointer to null-terminated string
//  160  *
//  161  * @return  void
//  162  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  163 void debug_str( byte *str_ptr )
debug_str:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function debug_str
        CODE
//  164 {
        FUNCALL debug_str, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL debug_str, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL debug_str, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL debug_str, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  165   mtDebugStr_t *msg;
//  166   byte mln;
//  167   byte strLen;
//  168 
//  169   // Text string length
//  170   strLen = (byte)osal_strlen( (void*)str_ptr );
        ; Setup parameters for call to function osal_strlen
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 2,A
//  171 
//  172   // Debug string message length
//  173   mln = sizeof ( mtDebugStr_t ) + strLen;
//  174 
//  175   // Get a message buffer to build the debug message
//  176   msg = (mtDebugStr_t *)osal_msg_allocate( mln );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,#0x5
        ADD     A,?V0 + 2
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  177   if ( msg )
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??debug_str_0
//  178   {
//  179     // Message type, length
//  180     msg->hdr.event = CMD_DEBUG_STR;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x6
        MOVX    @DPTR,A
//  181     msg->strLen = strLen;
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  182 
//  183     // Append message, no terminator
//  184     msg->pString = (uint8 *)(msg+1);
        MOV     A,R2
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        INC     R2
        INC     R2
        INC     R2
        MOV     R3,A
        MOV     A,?V0 + 0
        ADD     A,#0x5
        INC     R0
        INC     R0
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  185     osal_memcpy ( msg->pString, str_ptr, strLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V0 + 2
        MOV     R5,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  186 
//  187     osal_msg_send( MT_TaskID, (uint8 *)msg );
        ; Setup parameters for call to function osal_msg_send
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     DPTR,#MT_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  188   }
//  189 } // debug_str()
??debug_str_0:
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock18

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??debug_msg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    debug_msg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??debug_str?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    debug_str

        END
//  190 
//  191 /*********************************************************************
//  192 *********************************************************************/
//  193 #endif  // MT_TASK
// 
// 293 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
// 
// 305 bytes of CODE memory
//
//Errors: none
//Warnings: none
