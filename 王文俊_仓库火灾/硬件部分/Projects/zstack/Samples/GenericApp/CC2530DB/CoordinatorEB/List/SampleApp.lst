###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         25/Nov/2019  21:03:22 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\SampleApp\Source\SampleApp.c  #
#    Command line       =  -f C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\ #
#                          Projects\zstack\Samples\GenericApp\CC2530DB\..\..\ #
#                          ..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ         #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\ #
#                          Projects\zstack\Samples\GenericApp\CC2530DB\..\..\ #
#                          ..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO       #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\6.ZS #
#                          tack-2.5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\Sample #
#                          App\Source\SampleApp.c -D ZTOOL_P1 -D MT_TASK -D   #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å #
#                          \Projects\zstack\Samples\GenericApp\CC2530DB\Coord #
#                          inatorEB\List\ -lA C:\Users\25814\Desktop\6.ZStack #
#                          -2.5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\GenericApp #
#                          \CC2530DB\CoordinatorEB\List\ --diag_suppress      #
#                          Pe001,Pa010 -o C:\Users\25814\Desktop\6.ZStack-2.5 #
#                          .1a¹¤³ÌÄ£°å\Projects\zstack\Samples\GenericApp\CC2 #
#                          530DB\CoordinatorEB\Obj\ -e --no_code_motion       #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\ #
#                          Projects\zstack\Samples\GenericApp\CC2530DB\ -I    #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\Source #
#                          \ -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£° #
#                          å\Projects\zstack\Samples\GenericApp\CC2530DB\..\. #
#                          .\..\ZMain\TI2530DB\ -I C:\Users\25814\Desktop\6.Z #
#                          Stack-2.5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\Components\hal\inclu #
#                          de\ -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ #
#                          £°å\Projects\zstack\Samples\GenericApp\CC2530DB\.. #
#                          \..\..\..\..\Components\hal\target\CC2530EB\ -I    #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\mac\include\ -I                   #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\mac\high_level\ -I                #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\mac\low_level\srf04\ -I           #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\mac\low_level\srf04\single_chip\  #
#                          -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\ #
#                          Projects\zstack\Samples\GenericApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\mt\ -I                         #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\services\saddr\ -I                #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\services\sdata\ -I                #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\af\ -I                      #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\nwk\ -I                     #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sapi\ -I                    #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sys\ -I                     #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\zdo\ -I                     #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\zmac\ -I                          #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\zmac\f8w\ -Ohz                    #
#    List file          =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\Coordinat #
#                          orEB\List\SampleApp.lst                            #
#    Object file        =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\Coordinat #
#                          orEB\Obj\SampleApp.r51                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          #include <stdio.h>
     79          #include <string.h>
     80          
     81          //MY DEVICE
     82          #include "DHT11.h"
     83          #include "gy30.h"
     84          
     85          /*********************************************************************
     86           * MACROS
     87           */
     88          #define FAN P1_1
     89          #define LED P1_0
     90          #define GAS P0_6
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          uint8 AppTitle[] = "ALD2530 Example"; //Ó¦ÓÃ³ÌÐòÃû³Æ 
   \                     AppTitle:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for AppTitle>`
   \   000010                REQUIRE __INIT_XDATA_I
    103          uint16 ReadGasData( void );

   \                                 In  segment XDATA_I, align 1, keep-with-next
    104          byte fan_state = 1;//·çÉÈÄ¬ÈÏÎª×Ô¶¯¿ØÖÆ
   \                     fan_state:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for fan_state>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    105          byte led_state = 1;//ledÄ¬ÈÏÎª×Ô¶¯¿ØÖÆ
   \                     led_state:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for led_state>`
   \   000001                REQUIRE __INIT_XDATA_I
    106          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    107          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    108          {
    109            SAMPLEAPP_PERIODIC_CLUSTERID,
    110            SAMPLEAPP_FLASH_CLUSTERID
    111          };
    112          

   \                                 In  segment XDATA_ROM_C, align 1
    113          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    114          {
    115            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    116            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    117            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    118            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    119            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    120            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    121            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    122            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    123            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    124          };
    125          
    126          // This is the Endpoint/Interface description.  It is defined here, but
    127          // filled-in in SampleApp_Init().  Another way to go would be to fill
    128          // in the structure here and make it a "const" (in code space).  The
    129          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    131          
    132          /*********************************************************************
    133           * EXTERNAL VARIABLES
    134           */
    135          
    136          /*********************************************************************
    137           * EXTERNAL FUNCTIONS
    138           */
    139          
    140          /*********************************************************************
    141           * LOCAL VARIABLES
    142           */
    143          
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146                                    // This variable will be received when
    147                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    154          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    159          
    160          /*********************************************************************
    161           * LOCAL FUNCTIONS
    162           */
    163          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    164          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    165          void SampleApp_SendPeriodicMessage( void );
    166          void SampleApp_SendFlashMessage( uint16 flashTime );
    167          void SampleApp_Send_P2P_Message(void);
    168          /*********************************************************************
    169           * NETWORK LAYER CALLBACKS
    170           */
    171          
    172          /*********************************************************************
    173           * PUBLIC FUNCTIONS
    174           */
    175           
    176          /*********************************************************************
    177           * @fn      SampleApp_Init
    178           *
    179           * @brief   Initialization function for the Generic App Task.
    180           *          This is called during initialization and should contain
    181           *          any application specific initialization (ie. hardware
    182           *          initialization/setup, table initialization, power up
    183           *          notificaiton ... ).
    184           *
    185           * @param   task_id - the ID assigned by OSAL.  This ID should be
    186           *                    used to send messages and set timers.
    187           *
    188           * @return  none
    189           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    190          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    191          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    192            
    193            LIGHT_INIT();//³õÊ¼»¯¹âÕÕ 
   \   000007   53F3CF       ANL     0xf3,#0xcf
   \   00000A   43FD30       ORL     0xfd,#0x30
   \   00000D   D285         SETB    0x80.5
   \   00000F   D284         SETB    0x80.4
    194            P0SEL&=~0x40;
   \   000011   53F3BF       ANL     0xf3,#0xbf
    195            P0DIR&=~0x40;//³õÊ¼»¯ÆøÌå
   \   000014   53FDBF       ANL     0xfd,#0xbf
    196            SampleApp_TaskID = task_id;   //osal·ÖÅäµÄÈÎÎñIDËæ×ÅÓÃ»§Ìí¼ÓÈÎÎñµÄÔö¶à¶ø¸Ä±ä
   \   000017   90....       MOV     DPTR,#SampleApp_TaskID
   \   00001A   F0           MOVX    @DPTR,A
    197            SampleApp_NwkState = DEV_INIT;//Éè±¸×´Ì¬Éè¶¨ÎªZDO²ãÖÐ¶¨ÒåµÄ³õÊ¼»¯×´Ì¬
   \   00001B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00001E   7401         MOV     A,#0x1
   \   000020   F0           MOVX    @DPTR,A
    198            SampleApp_TransID = 0;        //ÏûÏ¢·¢ËÍID£¨¶àÏûÏ¢Ê±ÓÐË³ÐòÖ®·Ö£©
   \   000021   90....       MOV     DPTR,#SampleApp_TransID
   \   000024   E4           CLR     A
   \   000025   F0           MOVX    @DPTR,A
    199            
    200            LED = 0;//¹ØµÆ
   \   000026   C290         CLR     0x90.0
    201            FAN = 0;//¹Ø·çÉÈ
   \   000028   C291         CLR     0x90.1
    202            //´®¿ÚÅäÖÃ
    203            MT_UartInit();
   \   00002A                ; Setup parameters for call to function MT_UartInit
   \   00002A   12....       LCALL   ??MT_UartInit?relay
    204            MT_UartRegisterTaskID(task_id); 
   \   00002D                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00002D   EE           MOV     A,R6
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??MT_UartRegisterTaskID?relay
    205             
    206            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n")); 
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032   7C0D         MOV     R4,#0xd
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   000038   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??HalUARTWrite?relay
    207            
    208          
    209            // Device hardware initialization can be added here or in main() (Zmain.c).
    210            // If the hardware is application specific - add it here.
    211            // If the hardware is other parts of the device add it in main().
    212          
    213           #if defined ( BUILD_ALL_DEVICES )
    214            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    215            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    216            // together - if they are - we will start up a coordinator. Otherwise,
    217            // the device will start as a router.
    218            if ( readCoordinatorJumper() )
    219              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    220            else
    221              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    222          #endif // BUILD_ALL_DEVICES
    223          
    224          //¸Ã¶ÎµÄÒâË¼ÊÇ£¬Èç¹ûÉèÖÃÁËHOLD_AUTO_STARTºê¶¨Òå£¬½«»áÔÚÆô¶¯Ð¾Æ¬µÄÊ±ºò»áÔÝÍ£Æô¶¯
    225          //Á÷³Ì£¬Ö»ÓÐÍâ²¿´¥·¢ÒÔºó²Å»áÆô¶¯Ð¾Æ¬¡£ÆäÊµ¾ÍÊÇÐèÒªÒ»¸ö°´Å¥´¥·¢ËüµÄÆô¶¯Á÷³Ì¡£  
    226          #if defined ( HOLD_AUTO_START )
    227            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    228            //  from starting the device and wait for the application to
    229            //  start the device.
    230            ZDOInitDevice(0);
    231          #endif
    232          
    233            // Setup for the periodic message's destination address ÉèÖÃ·¢ËÍÊý¾ÝµÄ·½Ê½ºÍÄ¿µÄµØÖ·Ñ°Ö·Ä£Ê½
    234            // Broadcast to everyone ·¢ËÍÄ£Ê½:¹ã²¥·¢ËÍ
    235            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥
   \   00003F   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000042   740F         MOV     A,#0xf
   \   000044   F0           MOVX    @DPTR,A
    236            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000045   A3           INC     DPTR
   \   000046   7414         MOV     A,#0x14
   \   000048   F0           MOVX    @DPTR,A
    237            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//Ö¸¶¨Ä¿µÄÍøÂçµØÖ·Îª¹ã²¥µØÖ·
   \   000049   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00004C   74FF         MOV     A,#-0x1
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   F0           MOVX    @DPTR,A
    238          
    239            // Setup for the flash command's destination address - Group 1 ×é²¥·¢ËÍ
    240            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //×éÑ°Ö·
   \   000051   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
    241            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000057   A3           INC     DPTR
   \   000058   7414         MOV     A,#0x14
   \   00005A   F0           MOVX    @DPTR,A
    242            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×éºÅ0x0001
   \   00005B   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00005E   7401         MOV     A,#0x1
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E4           CLR     A
   \   000063   F0           MOVX    @DPTR,A
    243          
    244            // Fill out the endpoint description. ¶¨Òå±¾Éè±¸ÓÃÀ´Í¨ÐÅµÄAPS²ã¶ËµãÃèÊö·û
    245            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000064   90....       MOV     DPTR,#SampleApp_epDesc
   \   000067   7414         MOV     A,#0x14
   \   000069   F0           MOVX    @DPTR,A
    246            SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp ÃèÊö·ûµÄÈÎÎñID
   \   00006A   A3           INC     DPTR
   \   00006B   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000071   F0           MOVX    @DPTR,A
    247            SampleApp_epDesc.simpleDesc
    248                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleApp¼òµ¥ÃèÊö·û
   \   000072   A3           INC     DPTR
   \   000073   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000079   F0           MOVX    @DPTR,A
    249            SampleApp_epDesc.latencyReq = noLatencyReqs;    //ÑÓÊ±²ßÂÔ
   \   00007A   A3           INC     DPTR
   \   00007B   E4           CLR     A
   \   00007C   F0           MOVX    @DPTR,A
    250          
    251            // Register the endpoint description with the AF
    252            afRegister( &SampleApp_epDesc );    //ÏòAF²ãµÇ¼ÇÃèÊö·û
   \   00007D                ; Setup parameters for call to function afRegister
   \   00007D   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007F   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000081   12....       LCALL   ??afRegister?relay
    253          
    254            // Register for all key events - This app will handle all key events
    255            RegisterForKeys( SampleApp_TaskID ); // µÇ¼ÇËùÓÐµÄ°´¼üÊÂ¼þ
   \   000084                ; Setup parameters for call to function RegisterForKeys
   \   000084   90....       MOV     DPTR,#SampleApp_TaskID
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F9           MOV     R1,A
   \   000089   12....       LCALL   ??RegisterForKeys?relay
    256          
    257            // By default, all devices start out in Group 1
    258            SampleApp_Group.ID = 0x0001;//×éºÅ
   \   00008C   90....       MOV     DPTR,#SampleApp_Group
   \   00008F   7401         MOV     A,#0x1
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   \   000093   E4           CLR     A
   \   000094   F0           MOVX    @DPTR,A
    259            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//Éè¶¨×éÃû
   \   000095                ; Setup parameters for call to function osal_memcpy
   \   000095   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000098   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00009B   F5..         MOV     ?V0 + 2,A
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A2   7C07         MOV     R4,#0x7
   \   0000A4   7D00         MOV     R5,#0x0
   \   0000A6   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A8   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000AA   12....       LCALL   ??osal_memcpy?relay
   \   0000AD   7403         MOV     A,#0x3
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
    260            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//°Ñ¸Ã×éµÇ¼ÇÌí¼Óµ½APSÖÐ
   \   0000B2                ; Setup parameters for call to function aps_AddGroup
   \   0000B2   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B4   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B6   7914         MOV     R1,#0x14
   \   0000B8   12....       LCALL   ??aps_AddGroup?relay
    261          
    262          #if defined ( LCD_SUPPORTED )
    263            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //Èç¹ûÖ§³ÖLCD£¬ÏÔÊ¾ÌáÊ¾ÐÅÏ¢
   \   0000BB                ; Setup parameters for call to function HalLcdWriteString
   \   0000BB   7900         MOV     R1,#0x0
   \   0000BD   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000BF   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000C1   12....       LCALL   ??HalLcdWriteString?relay
    264          #endif
    265          }
   \   0000C4                REQUIRE ?Subroutine0
   \   0000C4                REQUIRE P0SEL
   \   0000C4                REQUIRE P0DIR
   \   0000C4                REQUIRE _A_P0
   \   0000C4                REQUIRE _A_P1
   \   0000C4                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    266          
    267          /*********************************************************************
    268           * @fn      SampleApp_ProcessEvent
    269           *
    270           * @brief   Generic Application Task event processor.  This function
    271           *          is called to process all events for the task.  Events
    272           *          include timers, messages and any other user defined events.
    273           *
    274           * @param   task_id  - The OSAL assigned task ID.
    275           * @param   events - events to process.  This is a bit map and can
    276           *                   contain more than one event.
    277           *
    278           * @return  none
    279           */
    280          //ÓÃ»§Ó¦ÓÃÈÎÎñµÄÊÂ¼þ´¦Àíº¯Êý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    282          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    283            afIncomingMSGPacket_t *MSGpkt;
    284            (void)task_id;  // Intentionally unreferenced parameter
    285          
    286            if ( events & SYS_EVENT_MSG ) //½ÓÊÕÏµÍ³ÏûÏ¢ÔÙ½øÐÐÅÐ¶Ï
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    287            {
    288              //½ÓÊÕÊôÓÚ±¾Ó¦ÓÃÈÎÎñSampleAppµÄÏûÏ¢£¬ÒÔSampleApp_TaskID±ê¼Ç
    289              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    290              while ( MSGpkt )
    291              {
    292                switch ( MSGpkt->hdr.event )
    293                {
    294                  // Received when a key is pressed
    295                  case KEY_CHANGE://°´¼üÊÂ¼þ
    296                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    297                    break;
    298          
    299                  // Received when a messages is received (OTA) for this endpoint
    300                  case AF_INCOMING_MSG_CMD://½ÓÊÕÊý¾ÝÊÂ¼þ,µ÷ÓÃº¯ÊýAF_DataRequest()½ÓÊÕÊý¾Ý
    301                    SampleApp_MessageMSGCB( MSGpkt );//µ÷ÓÃ»Øµ÷º¯Êý¶ÔÊÕµ½µÄÊý¾Ý½øÐÐ´¦Àí
    302                    break;
    303          
    304                  // Received whenever the device changes state in the network
    305                  case ZDO_STATE_CHANGE:
    306                    //Ö»ÒªÍøÂç×´Ì¬·¢Éú¸Ä±ä£¬¾ÍÍ¨¹ýZDO_STATE_CHANGEÊÂ¼þÍ¨ÖªËùÓÐµÄÈÎÎñ¡£
    307                    //Í¬Ê±Íê³É¶ÔÐ­µ÷Æ÷£¬Â·ÓÉÆ÷£¬ÖÕ¶ËµÄÉèÖÃ
    308                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    309                    //if ( (SampleApp_NwkState == DEV_ZB_COORD)//ÊµÑéÖÐÐ­µ÷Æ÷Ö»½ÓÊÕÊý¾ÝËùÒÔÈ¡Ïû·¢ËÍÊÂ¼þ
    310                    if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    311                    {
    312                      // Start sending the periodic message in a regular interval.
    313                      //Õâ¸ö¶¨Ê±Æ÷Ö»ÊÇÎª·¢ËÍÖÜÆÚÐÅÏ¢¿ªÆôµÄ£¬Éè±¸Æô¶¯³õÊ¼»¯ºó´ÓÕâÀï¿ªÊ¼
    314                      //´¥·¢µÚÒ»¸öÖÜÆÚÐÅÏ¢µÄ·¢ËÍ£¬È»ºóÖÜ¶ø¸´Ê¼ÏÂÈ¥
    315                      osal_start_timerEx( SampleApp_TaskID,
    316                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    317                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    318                     
    319                    }
    320                    else
    321                    {
    322                        
    323                    }
    324                    break;
    325          
    326                  default:
    327                    break;
    328                }
    329          
    330                // Release the memory ÊÂ¼þ´¦ÀíÍêÁË£¬ÊÍ·ÅÏûÏ¢Õ¼ÓÃµÄÄÚ´æ
    331                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    332             
    333                // Next - if one is available Ö¸ÕëÖ¸ÏòÏÂÒ»¸ö·ÅÔÚ»º³åÇøµÄ´ý´¦ÀíµÄÊÂ¼þ£¬
    334                //·µ»Øwhile ( MSGpkt )ÖØÐÂ´¦ÀíÊÂ¼þ£¬Ö±µ½»º³åÇøÃ»ÓÐµÈ´ý´¦ÀíÊÂ¼þÎªÖ¹
    335                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    336              }
    337          
    338              // return unprocessed events ·µ»ØÎ´´¦ÀíµÄÊÂ¼þ
    339              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    340            }
    341          
    342            // Send a message out - This event is generated by a timer
    343            //  (setup in SampleApp_Init()).
    344            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    345            {
    346              // Send the periodic message ´¦ÀíÖÜÆÚÐÔÊÂ¼þ£¬
    347              //ÀûÓÃSampleApp_SendPeriodicMessage()´¦ÀíÍêµ±Ç°µÄÖÜÆÚÐÔÊÂ¼þ£¬È»ºóÆô¶¯¶¨Ê±Æ÷
    348              //¿ªÆôÏÂÒ»¸öÖÜÆÚÐÔÊÂÇé£¬ÕâÑùÒ»ÖÖÑ­»·ÏÂÈ¥£¬Ò²¼´ÊÇÉÏÃæËµµÄÖÜÆÚÐÔÊÂ¼þÁË£¬
    349              //¿ÉÒÔ×öÎª´«¸ÐÆ÷¶¨Ê±²É¼¯¡¢ÉÏ´«ÈÎÎñ
    350              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    351              
    352              // Setup to send message again in normal period (+ a little jitter)
    353              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    354                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24E8         ADD     A,#-0x18
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3403         ADDC    A,#0x3
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    355          
    356              // return unprocessed events ·µ»ØÎ´´¦ÀíµÄÊÂ¼þ
    357              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    358            }
    359          
    360            // Discard unknown events
    361            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    362          }
    363          
    364          /*********************************************************************
    365           * Event Generation Functions
    366           */
    367          /*********************************************************************
    368           * @fn      SampleApp_HandleKeys
    369           *
    370           * @brief   Handles all key events for this device.
    371           *
    372           * @param   shift - true if in shift/alt.
    373           * @param   keys - bit field for key events. Valid entries:
    374           *                 HAL_KEY_SW_2
    375           *                 HAL_KEY_SW_1
    376           *
    377           * @return  none
    378           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    379          void SampleApp_HandleKeys( uint8 shift, uint8 keys )  
   \                     SampleApp_HandleKeys:
    380          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    381            (void)shift;  // Intentionally unreferenced parameter
    382            
    383            if ( keys & HAL_KEY_SW_1 )
   \   00000C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000E   5058         JNC     ??SampleApp_HandleKeys_0
    384            {
    385              /* This key sends the Flash Command is sent to Group 1.
    386               * This device will not receive the Flash Command from this
    387               * device (even if it belongs to group 1).
    388               */
    389             SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   000010                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   000010   7AE8         MOV     R2,#-0x18
   \   000012   7B03         MOV     R3,#0x3
   \   000014   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    390             //°´ÏÂs2¼ü£¬·¢ËÍ#1£¬ÈÃ½ÚµãµãÁÁled
    391          #if defined(ZDO_COORDINATOR) 
    392             unsigned char buf[] = "#1";
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   AC82         MOV     R4,DPL
   \   00001F   AD83         MOV     R5,DPH
   \   000021   7583..       MOV     DPH,#(`?<Constant "#1">` >> 8) & 0xff
   \   000024   7582..       MOV     DPL,#`?<Constant "#1">` & 0xff
   \   000027   7403         MOV     A,#0x3
   \   000029   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    393             if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    394                                 &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    395                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    396                                 2,       // ·¢ËÍÊý¾Ý³¤¶È
    397                                 buf,// ·¢ËÍÊý¾Ý»º³åÇø
    398                                 &SampleApp_TransID,     // ÈÎÎñIDºÅ
    399                                 AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    400                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
   \   00002C                ; Setup parameters for call to function AF_DataRequest
   \   00002C   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000034   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000037   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   8582..       MOV     ?V0 + 0,DPL
   \   000047   8583..       MOV     ?V0 + 1,DPH
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   75..02       MOV     ?V0 + 0,#0x2
   \   000052   75..00       MOV     ?V0 + 1,#0x0
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   75..01       MOV     ?V0 + 0,#0x1
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   12....       LCALL   ?Subroutine3 & 0xFFFF
    401            {
    402            }
    403          #endif
    404              
    405            
    406            }
   \                     ??CrossCallReturnLabel_2:
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
    407          
    408            if ( keys & HAL_KEY_SW_6 )
   \                     ??SampleApp_HandleKeys_0:
   \   000068   EE           MOV     A,R6
   \   000069   A2E5         MOV     C,0xE0 /* A   */.5
   \   00006B   5051         JNC     ??SampleApp_HandleKeys_1
    409            {
    410              /* The Flashr Command is sent to Group 1.
    411               * This key toggles this device in and out of group 1.
    412               * If this device doesn't belong to group 1, this application
    413               * will not receive the Flash command sent to group 1.
    414               */
    415             
    416          #if defined(ZDO_COORDINATOR) 
    417             
    418             unsigned char buf[] = "#2";
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   AC82         MOV     R4,DPL
   \   000075   AD83         MOV     R5,DPH
   \   000077   7583..       MOV     DPH,#(`?<Constant "#2">` >> 8) & 0xff
   \   00007A   7582..       MOV     DPL,#`?<Constant "#2">` & 0xff
   \   00007D   7403         MOV     A,#0x3
   \   00007F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    419             if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    420                                 &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    421                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    422                                 2,       // ·¢ËÍÊý¾Ý³¤¶È
    423                                 buf,// ·¢ËÍÊý¾Ý»º³åÇø
    424                                 &SampleApp_TransID,     // ÈÎÎñIDºÅ
    425                                 AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    426                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
   \   000082                ; Setup parameters for call to function AF_DataRequest
   \   000082   75..1E       MOV     ?V0 + 0,#0x1e
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008A   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00008D   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   7403         MOV     A,#0x3
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   8582..       MOV     ?V0 + 0,DPL
   \   00009D   8583..       MOV     ?V0 + 1,DPH
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   75..02       MOV     ?V0 + 0,#0x2
   \   0000A8   75..00       MOV     ?V0 + 1,#0x0
   \   0000AB   78..         MOV     R0,#?V0 + 0
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B0   75..01       MOV     ?V0 + 0,#0x1
   \   0000B3   78..         MOV     R0,#?V0 + 0
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   12....       LCALL   ?Subroutine3 & 0xFFFF
    427            {
    428            }
    429            
    430          #endif
    431             /*
    432              aps_Group_t *grp;
    433              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    434              if ( grp )
    435              {
    436                // Remove from the group
    437                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    438              }
    439              else
    440              {
    441                // Add to the flash group
    442                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    443              }
    444             */
    445            }
   \                     ??CrossCallReturnLabel_3:
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
    446          }
   \                     ??SampleApp_HandleKeys_1:
   \   0000BE   02....       LJMP    ??Subroutine5_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7920         MOV     R1,#0x20
   \   000002   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000004   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000006   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000008   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00000A                REQUIRE ??Subroutine4_0
   \   00000A                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   7403         MOV     A,#0x3
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F02         MOV     R7,#0x2
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA
    447          
    448          /*********************************************************************
    449           * LOCAL FUNCTIONS
    450           */
    451          
    452          /*********************************************************************
    453           * @fn      SampleApp_MessageMSGCB
    454           *
    455           * @brief   Data message processor callback.  This function processes
    456           *          any incoming data - probably from other devices.  So, based
    457           *          on cluster ID, perform the intended action.
    458           *
    459           * @param   none
    460           *
    461           * @return  none
    462           */
    463          //½ÓÊÕÊý¾Ý£¬²ÎÊýÎª½ÓÊÕµ½µÄÊý¾Ý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    464          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    465          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    466            uint16 flashTime;
    467            unsigned short len = 6+5+3+1;
    468            byte buf[6+5+3+1]; 
    469            
    470            switch ( pkt->clusterId ) //ÅÐ¶Ï´ØID
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 1,A
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000022   0100         DW        1
   \   000024   01           DB        1
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000027   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000029   ....         DW        ??SampleApp_MessageMSGCB_2
    471            {
    472              case SAMPLEAPP_PERIODIC_CLUSTERID: //ÊÕµ½¹ã²¥Êý¾Ý
    473                osal_memset(buf, 0 , len);
   \                     ??SampleApp_MessageMSGCB_1:
   \   00002B                ; Setup parameters for call to function osal_memset
   \   00002B   7C0F         MOV     R4,#0xf
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7900         MOV     R1,#0x0
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   12....       LCALL   ??osal_memset?relay
    474                osal_memcpy(buf, pkt->cmd.Data, len); //¸´ÖÆÊý¾Ýµ½»º³åÇøÖÐ
   \   00003E                ; Setup parameters for call to function osal_memcpy
   \   00003E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000041   F5..         MOV     ?V0 + 0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0 + 1,A
   \   000047   75..00       MOV     ?V0 + 2,#0x0
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004F   7C0F         MOV     R4,#0xf
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   AA82         MOV     R2,DPL
   \   00005A   AB83         MOV     R3,DPH
   \   00005C   12....       LCALL   ??osal_memcpy?relay
   \   00005F   7403         MOV     A,#0x3
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
    475                HalUARTWrite(0,buf, len);
   \   000064                ; Setup parameters for call to function HalUARTWrite
   \   000064   7C0F         MOV     R4,#0xf
   \   000066   7D00         MOV     R5,#0x0
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   AA82         MOV     R2,DPL
   \   000070   AB83         MOV     R3,DPH
   \   000072   7900         MOV     R1,#0x0
   \   000074   12....       LCALL   ??HalUARTWrite?relay
    476          #ifndef ZDO_COORDINATOR
    477                //Èç¹û½ÚµãÊÕµ½#1,ledÁÁ/Ãð
    478                if(buf[0]=='#'&&buf[1]=='1'){
    479                  //ÊÕµ½#1
    480                  LED^=1;
    481                  if(LED==0){
    482                    //Èç¹ûledÃð£¬Ôò»Ö¸´×Ô¶¯¿ØÖÆ
    483                    led_state = 1;
    484                  }
    485                }
    486                //ÊÕµ½#2,·çÉÈ¿ª/¹Ø
    487                else if(buf[0]=='#'&&buf[1]=='2'){
    488                  FAN^=1;
    489                  if(FAN==0){
    490                    //Èç¹û·çÉÈ¹Ø£¬Ôò»Ö¸´×Ô¶¯¿ØÖÆ
    491                    fan_state = 1;
    492                  }
    493                }
    494          #endif
    495                /*
    496                if(buf[0]=='D' && buf[1]=='1')      //ÅÐ¶ÏÊÕµ½µÄÊý¾ÝÊÇ·ñÎª"D1"         
    497                {
    498                    HalLedBlink(HAL_LED_1, 0, 50, 500);//Èç¹ûÊÇÔòLed1¼ä¸ô500msÉÁË¸
    499          #if defined(ZDO_COORDINATOR) //Ð­µ÷Æ÷ÊÕµ½"D1"ºó,·µ»Ø"D1"¸øÖÕ¶Ë£¬ÈÃÖÕ¶ËLed1Ò²ÉÁË¸
    500                    SampleApp_SendPeriodicMessage();
    501          #endif
    502                }
    503                else
    504                {
    505                    HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);                   
    506                }
    507                */
    508                break;
   \   000077   8033         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   000079   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00007C   F8           MOV     R0,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080                ; Setup parameters for call to function HalLedBlink
   \   000080   8882         MOV     DPL,R0
   \   000082   8983         MOV     DPH,R1
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   FA           MOV     R2,A
   \   000087   8882         MOV     DPL,R0
   \   000089   8983         MOV     DPH,R1
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   EA           MOV     A,R2
   \   000090   2400         ADD     A,#0x0
   \   000092   F5..         MOV     ?V0 + 0,A
   \   000094   E4           CLR     A
   \   000095   39           ADDC    A,R1
   \   000096   F5..         MOV     ?V0 + 1,A
   \   000098   7402         MOV     A,#0x2
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?US_SHR
   \   00009F   AC..         MOV     R4,?V0 + 0
   \   0000A1   AD..         MOV     R5,?V0 + 1
   \   0000A3   7B32         MOV     R3,#0x32
   \   0000A5   7A04         MOV     R2,#0x4
   \   0000A7   7908         MOV     R1,#0x8
    509          
    510              case SAMPLEAPP_FLASH_CLUSTERID: //ÊÕµ½×é²¥Êý¾Ý
    511              
    512                
    513                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    514                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   0000A9   12....       LCALL   ??HalLedBlink?relay
    515                break;
    516            case SAMPLEAPP_P2P_CLUSTERID:
    517           
    518              break;
    519            }
    520          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000AC   740F         MOV     A,#0xf
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B1   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    521          
    522          /*********************************************************************
    523           * @fn      SampleApp_SendPeriodicMessage
    524           *
    525           * @brief   Send the periodic message.
    526           *
    527           * @param   none
    528           *
    529           * @return  none
    530           */
    531          //·ÖÎö·¢ËÍÖÜÆÚÐÅÏ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    532          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    533          { 
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    534            //»ñµÃµÄÊý¾ÝÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾  
    535            char str[6+5+3+1]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   C082         PUSH    DPL
   \   00000F   7406         MOV     A,#0x6
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   D082         POP     DPL
   \   00001D   740F         MOV     A,#0xf
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    536            //»ñÈ¡ÎÂÊª¶È
    537            unsigned char temp_humi[6]={0};
   \   000022   90....       MOV     DPTR,#`?<Constant {0}>_1`
   \   000025   C082         PUSH    DPL
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AC82         MOV     R4,DPL
   \   00002F   AD83         MOV     R5,DPH
   \   000031   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   000034   D082         POP     DPL
   \   000036   7406         MOV     A,#0x6
   \   000038   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    538            strcpy(temp_humi,DHT11());
                          ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

    strcpy(temp_humi,DHT11());
                     ^
"C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",538  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   00003B                ; Setup parameters for call to function strcpy
   \   00003B                ; Setup parameters for call to function DHT11
   \   00003B   12....       LCALL   ??DHT11?relay
   \   00003E   EA           MOV     A,R2
   \   00003F   FC           MOV     R4,A
   \   000040   EB           MOV     A,R3
   \   000041   FD           MOV     R5,A
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   12....       LCALL   ??strcpy?relay
    539            unsigned int lt = Light();//»ñÈ¡¹âÇ¿
   \   00004F                ; Setup parameters for call to function Light
   \   00004F   12....       LCALL   ??Light?relay
   \   000052   8A..         MOV     ?V0 + 0,R2
   \   000054   8B..         MOV     ?V0 + 1,R3
    540            uint16 gas = ReadGasData();
   \   000056                ; Setup parameters for call to function ReadGasData
   \   000056   12....       LCALL   ??ReadGasData?relay
   \   000059   8A..         MOV     ?V0 + 2,R2
   \   00005B   8B..         MOV     ?V0 + 3,R3
    541            //×Ô¶¯¿ØÖÆ
    542            if(led_state)
   \   00005D   90....       MOV     DPTR,#led_state
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6018         JZ      ??SampleApp_SendPeriodicMessage_0
    543              LED = (lt<100)?1:0;
   \   000063   C3           CLR     C
   \   000064   E5..         MOV     A,?V0 + 0
   \   000066   9464         SUBB    A,#0x64
   \   000068   E5..         MOV     A,?V0 + 1
   \   00006A   9400         SUBB    A,#0x0
   \   00006C   5004         JNC     ??SampleApp_SendPeriodicMessage_1
   \   00006E   7801         MOV     R0,#0x1
   \   000070   8002         SJMP    ??SampleApp_SendPeriodicMessage_2
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   000072   7800         MOV     R0,#0x0
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   000074   E590         MOV     A,0x90
   \   000076   54FE         ANL     A,#0xfe
   \   000078   48           ORL     A,R0
   \   000079   F590         MOV     0x90,A
    544            if(fan_state)
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   00007B   90....       MOV     DPTR,#fan_state
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   6018         JZ      ??SampleApp_SendPeriodicMessage_3
    545              FAN =(gas<75)?0:1;
   \   000081   C3           CLR     C
   \   000082   EA           MOV     A,R2
   \   000083   944B         SUBB    A,#0x4b
   \   000085   EB           MOV     A,R3
   \   000086   9400         SUBB    A,#0x0
   \   000088   5003         JNC     ??SampleApp_SendPeriodicMessage_4
   \   00008A   E4           CLR     A
   \   00008B   8002         SJMP    ??SampleApp_SendPeriodicMessage_5
   \                     ??SampleApp_SendPeriodicMessage_4:
   \   00008D   7401         MOV     A,#0x1
   \                     ??SampleApp_SendPeriodicMessage_5:
   \   00008F   C3           CLR     C
   \   000090   33           RLC     A
   \   000091   F8           MOV     R0,A
   \   000092   E590         MOV     A,0x90
   \   000094   54FD         ANL     A,#0xfd
   \   000096   48           ORL     A,R0
   \   000097   F590         MOV     0x90,A
    546            sprintf(str,"%s%5d%3d\n",temp_humi,lt,gas);
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   000099                ; Setup parameters for call to function sprintf
   \   000099   78..         MOV     R0,#?V0 + 2
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   78..         MOV     R0,#?V0 + 0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   7404         MOV     A,#0x4
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   8582..       MOV     ?V0 + 0,DPL
   \   0000AB   8583..       MOV     ?V0 + 1,DPH
   \   0000AE   78..         MOV     R0,#?V0 + 0
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   7C..         MOV     R4,#`?<Constant "%s%5d%3d\\n">` & 0xff
   \   0000B5   7D..         MOV     R5,#(`?<Constant "%s%5d%3d\\n">` >> 8) & 0xff
   \   0000B7   740C         MOV     A,#0xc
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   AA82         MOV     R2,DPL
   \   0000BE   AB83         MOV     R3,DPH
   \   0000C0   12....       LCALL   ??sprintf?relay
   \   0000C3   7406         MOV     A,#0x6
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
    547            HalUARTWrite(0,str,sizeof(str));  
                                  ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000C8                ; Setup parameters for call to function HalUARTWrite
   \   0000C8   7C0F         MOV     R4,#0xf
   \   0000CA   7D00         MOV     R5,#0x0
   \   0000CC   7406         MOV     A,#0x6
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   AA82         MOV     R2,DPL
   \   0000D3   AB83         MOV     R3,DPH
   \   0000D5   7900         MOV     R1,#0x0
   \   0000D7   12....       LCALL   ??HalUARTWrite?relay
    548            // µ÷ÓÃAF_DataRequest½«Êý¾ÝÎÞÏß¹ã²¥³öÈ¥
    549            if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    550                                 &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    551                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    552                                 sizeof(str),       //·¢ËÍÊý¾Ý³¤¶È
    553                                 (uchar*)str,// ·¢ËÍÊý¾Ý»º³åÇø
    554                                 &SampleApp_TransID,     // ÈÎÎñIDºÅ
    555                                 AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    556                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
   \   0000DA                ; Setup parameters for call to function AF_DataRequest
   \   0000DA   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000DD   78..         MOV     R0,#?V0 + 0
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E2   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0000E5   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0000E8   78..         MOV     R0,#?V0 + 0
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000ED   7409         MOV     A,#0x9
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   8582..       MOV     ?V0 + 0,DPL
   \   0000F5   8583..       MOV     ?V0 + 1,DPH
   \   0000F8   78..         MOV     R0,#?V0 + 0
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FD   75..0F       MOV     ?V0 + 0,#0xf
   \   000100   75..00       MOV     ?V0 + 1,#0x0
   \   000103   78..         MOV     R0,#?V0 + 0
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   75..01       MOV     ?V0 + 0,#0x1
   \   00010B   78..         MOV     R0,#?V0 + 0
   \   00010D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000110   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
   \   000116   E9           MOV     A,R1
   \   000117   6007         JZ      ??SampleApp_SendPeriodicMessage_6
    557            {
    558            }
    559            else
    560            {
    561              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   000119                ; Setup parameters for call to function HalLedSet
   \   000119   7A01         MOV     R2,#0x1
   \   00011B   7901         MOV     R1,#0x1
   \   00011D   12....       LCALL   ??HalLedSet?relay
    562              // Error occurred in request to send.
    563            }
    564          }
   \                     ??SampleApp_SendPeriodicMessage_6:
   \   000120   7415         MOV     A,#0x15
   \   000122   12....       LCALL   ?DEALLOC_XSTACK8
   \   000125   7F06         MOV     R7,#0x6
   \   000127   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00012A                REQUIRE _A_P1
    565          
    566          /*********************************************************************
    567           * @fn      SampleApp_SendFlashMessage
    568           *
    569           * @brief   Send the flash message to group 1.
    570           *
    571           * @param   flashTime - in milliseconds
    572           *
    573           * @return  none
    574           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    575          void SampleApp_SendFlashMessage( uint16 flashTime )  
   \                     SampleApp_SendFlashMessage:
    576          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    577            uint8 buffer[3];
    578            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    579            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    580            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    581          
    582            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    583                                 SAMPLEAPP_FLASH_CLUSTERID,
    584                                 3,
    585                                 buffer,
    586                                 &SampleApp_TransID,
    587                                 AF_DISCV_ROUTE,
    588                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029                REQUIRE ?Subroutine1
   \   000029                ; // Fall through to label ?Subroutine1
    589            {
    590            }
    591            else
    592            {
    593              // Error occurred in request to send.
    594            }
    595          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..1E       MOV     ?V0 + 0,#0x1e
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000008   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00000B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000013   7403         MOV     A,#0x3
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   8582..       MOV     ?V0 + 0,DPL
   \   00001B   8583..       MOV     ?V0 + 1,DPH
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..03       MOV     ?V0 + 0,#0x3
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..02       MOV     ?V0 + 0,#0x2
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7920         MOV     R1,#0x20
   \   000038   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00003A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003C   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   00003E   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000040   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   \   000046                REQUIRE ??Subroutine5_0
   \   000046                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          void SampleApp_Send_P2P_Message(void){
   \                     SampleApp_Send_P2P_Message:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    597            uchar cmd[3] ="LED";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "LED">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "LED">` & 0xff
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    598            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    599                                 SAMPLEAPP_FLASH_CLUSTERID,
    600                                 3,
    601                                 cmd,
    602                                 &SampleApp_TransID,
    603                                 AF_DISCV_ROUTE,
    604                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   80..         SJMP    ?Subroutine1
    605            {
    606            }
    607          }
    608          /*********************************************************************
    609          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    610          uint16 ReadGasData( void )
   \                     ReadGasData:
    611          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    612            uint16 reading = 0;
    613            
    614            /* Enable channel */
    615            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    616            
    617            /* writing to this register starts the extra conversion */
    618            ADCCON3 = 0x86;// AVDD5 Òý½Å  00£º 64 ³éÈ¡ÂÊ(7 Î»ENOB)  0110£º AIN6
   \   000003   75B686       MOV     0xb6,#-0x7a
    619            
    620            /* Wait for the conversion to be done */
    621            while (!(ADCCON1 & 0x80));
   \                     ??ReadGasData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadGasData_0
    622            
    623            /* Disable channel after done conversion */
    624            ADCCFG &= (0x40 ^ 0xFF); //°´Î»Òì»ò¡£Èç1010^1111=0101£¨¶þ½øÖÆ£©
   \   00000C   53F2BF       ANL     0xf2,#0xbf
    625            
    626            /* Read the result */
    627            reading = ADCL;
   \   00000F   E5BA         MOV     A,0xba
    628            reading |= (int16) (ADCH << 8); 
    629            
    630            reading >>= 8;
    631            
    632            return (reading);
   \   000011   E5BB         MOV     A,0xbb
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   FB           MOV     R3,A
   \   000016   02....       LJMP    ?BRET
   \   000019                REQUIRE ADCCFG
   \   000019                REQUIRE ADCCON3
   \   000019                REQUIRE ADCCON1
   \   000019                REQUIRE ADCL
   \   000019                REQUIRE ADCH
    633          } 

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 Example"
   \            35333020
   \            4578616D
   \            706C6500

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for fan_state>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for led_state>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#1">`:
   \   000000   233100       DB "#1"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#2">`:
   \   000000   233200       DB "#2"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s%5d%3d\\n">`:
   \   000000   25732535     DB "%s%5d%3d\012"
   \            64253364
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED">`:
   \   000000   4C4544       DB 4CH, 45H, 44H

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadGasData                        0      0     35
     SampleApp_HandleKeys               2      0     34
       -> SampleApp_SendFlashMessage
                                        0      0     26
       -> AF_DataRequest                0      0     44
       -> AF_DataRequest                0      0     44
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     41
       -> osal_memset                   0      0     52
       -> osal_memcpy                   0      0     58
       -> HalUARTWrite                  0      0     52
       -> HalLedBlink                   0      0     52
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     35
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     56
       -> DHT11                         0      0     70
       -> strcpy                        0      0     70
       -> Light                         0      0     70
       -> ReadGasData                   0      0     70
       -> sprintf                       0      0     82
       -> HalUARTWrite                  0      0     70
       -> AF_DataRequest                0      0     88
       -> HalLedSet                     0      0     70
     SampleApp_Send_P2P_Message         2      0     22
       -> AF_DataRequest                0      0     44


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_P1                                    1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     P0DIR                                    1
     AppTitle                                16
     fan_state                                1
     led_state                                1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         196
     ?Subroutine0                             5
     SampleApp_ProcessEvent                 176
     SampleApp_HandleKeys                   193
     ?Subroutine3                            10
     ??Subroutine4_0                          6
     ??Subroutine5_0                         10
     SampleApp_MessageMSGCB                 180
     ?Subroutine2                            12
     SampleApp_SendPeriodicMessage          298
     SampleApp_SendFlashMessage              41
     ?Subroutine1                            70
     SampleApp_Send_P2P_Message              33
     ReadGasData                             25
     ?<Initializer for AppTitle>             16
     ?<Initializer for fan_state>             1
     ?<Initializer for led_state>             1
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??ReadGasData?relay                      6
     ?<Constant "UartInit OK\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "#1">                         3
     ?<Constant "#2">                         3
     ?<Constant {0}>                         15
     ?<Constant {0}>_1                        6
     ?<Constant "%s%5d%3d\n">                10
     ?<Constant "LED">                        3

 
 1 255 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     9 bytes in segment SFR_AN
    18 bytes in segment XDATA_I
    18 bytes in segment XDATA_ID
    87 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
 1 321 bytes of CODE  memory
    87 bytes of CONST memory
     0 bytes of DATA  memory (+ 9 bytes shared)
    71 bytes of XDATA memory

Errors: none
Warnings: 3
