###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         07/Jan/2020  22:32:55 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\Source\Sa #
#                          mpleApp.c                                          #
#    Command line       =  -f C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ #
#                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg            #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f C:\Users\25814\Desktop\2020 #
#                          ±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó²¼þ²¿·Ö\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8w #
#                          Config.cfg (-DZIGBEEPRO -DSECURE=0                 #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó²¼þ²¿·Ö\Projects\zstack\Samp #
#                          les\SampleApp\Source\SampleApp.c -D NWK_AUTO_POLL  #
#                          -D ZAPP_P1 -D MT_TASK -D MT_SYS_FUNC -D            #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\List\ -lA C:\Users\25814\Desktop\2020± #
#                          ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó²¼þ²¿·Ö\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\EndDeviceEB\List\            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\Obj\ -e --no_code_motion --debug       #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\202 #
#                          0±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó²¼þ²¿·Ö\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\ -I                        #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\Source\ -I C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ #
#                          ¿¡_²Ö¿â»ðÔÖ\Ó²¼þ²¿·Ö\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\include\ -I          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\include\ -I          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\high_level\ -I       #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡ #
#                          _²Ö¿â»ðÔÖ\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\Components\mt\ -I       #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\osal\include\ -I         #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\saddr\ -I       #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\sdata\ -I       #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\af\ -I             #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\nwk\ -I            #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sapi\ -I           #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sec\ -I            #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sys\ -I            #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\zdo\ -I            #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\ -I                 #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\f8w\ -Ohz           #
#    List file          =  C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\List\SampleApp.lst                     #
#    Object file        =  C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó² #
#                          ¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\Obj\SampleApp.r51                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          #include <stdio.h>
     79          #include <string.h>
     80          
     81          //MY DEVICE
     82          #include "DHT11.h"
     83           
     84          
     85          /*********************************************************************
     86           * MACROS
     87           */
     88          #define FAN P1_3
     89          #define GAS P0_6
     90          #define FIRE P1_1
     91          #define BEEP P0_4
     92           
     93          /*********************************************************************
     94           * CONSTANTS
     95           */
     96          
     97          /*********************************************************************
     98           * TYPEDEFS
     99           */
    100          
    101          /*********************************************************************
    102           * GLOBAL VARIABLES
    103           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    104          uint8 AppTitle[] = "ALD2530 Example"; //Ó¦ÓÃ³ÌÐòÃû³Æ 
   \                     AppTitle:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for AppTitle>`
   \   000010                REQUIRE __INIT_XDATA_I
    105          uint16 ReadGasData( void );

   \                                 In  segment XDATA_I, align 1, keep-with-next
    106          uint8 AutoMode = 1;
   \                     AutoMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AutoMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    107          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    108          void myDelay(){
   \                     myDelay:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    109            for(int j =0;j<100;j++)
   \   000000   7A64         MOV     R2,#0x64
    110              for(int i = 0;i<0xffff;i++)
   \                     ??myDelay_0:
   \   000002   7800         MOV     R0,#0x0
   \   000004   7900         MOV     R1,#0x0
   \                     ??myDelay_1:
   \   000006   E8           MOV     A,R0
   \   000007   2401         ADD     A,#0x1
   \   000009   08           INC     R0
   \   00000A   E9           MOV     A,R1
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   68           XRL     A,R0
   \   000011   7003         JNZ     ??myDelay_2
   \   000013   74FF         MOV     A,#-0x1
   \   000015   69           XRL     A,R1
   \                     ??myDelay_2:
   \   000016   70EE         JNZ     ??myDelay_1
    111              {}
   \   000018   1A           DEC     R2
   \   000019   EA           MOV     A,R2
   \   00001A   70E6         JNZ     ??myDelay_0
    112          }
   \   00001C   02....       LJMP    ?BRET
    113          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    114          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    115          {
    116            SAMPLEAPP_PERIODIC_CLUSTERID,
    117            SAMPLEAPP_FLASH_CLUSTERID
    118          };
    119          

   \                                 In  segment XDATA_ROM_C, align 1
    120          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    121          {
    122            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    123            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    124            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    125            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    126            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    127            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    128            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    129            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    130            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    131          };
    132          
    133          // This is the Endpoint/Interface description.  It is defined here, but
    134          // filled-in in SampleApp_Init().  Another way to go would be to fill
    135          // in the structure here and make it a "const" (in code space).  The
    136          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    138          
    139          /*********************************************************************
    140           * EXTERNAL VARIABLES
    141           */
    142          
    143          /*********************************************************************
    144           * EXTERNAL FUNCTIONS
    145           */
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153                                    // This variable will be received when
    154                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    163          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    166          
    167          #ifndef ZDO_COORDINATOR

   \                                 In  segment XDATA_I, align 1, keep-with-next
    168            byte state_fan = 1;
   \                     state_fan:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for state_fan>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    169            byte state_beep = 1;
   \                     state_beep:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for state_beep>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170            byte recv_fan = 0;
   \                     recv_fan:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171            byte recv_beep = 0;
   \                     recv_beep:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    172          #endif
    173          /*********************************************************************
    174           * LOCAL FUNCTIONS
    175           */
    176          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    177          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    178          void SampleApp_SendPeriodicMessage( void );
    179          void SampleApp_SendFlashMessage( uint16 flashTime );
    180          void SampleApp_Send_P2P_Message(void);
    181          /*********************************************************************
    182           * NETWORK LAYER CALLBACKS
    183           */
    184          
    185          /*********************************************************************
    186           * PUBLIC FUNCTIONS
    187           */
    188           
    189          /*********************************************************************
    190           * @fn      SampleApp_Init
    191           *
    192           * @brief   Initialization function for the Generic App Task.
    193           *          This is called during initialization and should contain
    194           *          any application specific initialization (ie. hardware
    195           *          initialization/setup, table initialization, power up
    196           *          notificaiton ... ).
    197           *
    198           * @param   task_id - the ID assigned by OSAL.  This ID should be
    199           *                    used to send messages and set timers.
    200           *
    201           * @return  none
    202           */
    203          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    205          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    206            
    207           
    208            SampleApp_TaskID = task_id;   //osal·ÖÅäµÄÈÎÎñIDËæ×ÅÓÃ»§Ìí¼ÓÈÎÎñµÄÔö¶à¶ø¸Ä±ä
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    209            SampleApp_NwkState = DEV_INIT;//Éè±¸×´Ì¬Éè¶¨ÎªZDO²ãÖÐ¶¨ÒåµÄ³õÊ¼»¯×´Ì¬
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    210            SampleApp_TransID = 0;        //ÏûÏ¢·¢ËÍID£¨¶àÏûÏ¢Ê±ÓÐË³ÐòÖ®·Ö£©
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    211            //Ä£¿é³õÊ¼»¯
    212            P0SEL&=~0x40;
   \   000016   53F3BF       ANL     0xf3,#0xbf
    213            P0DIR&=~0x40;//³õÊ¼»¯ÆøÌå
   \   000019   53FDBF       ANL     0xfd,#0xbf
    214            P1SEL&=~0x2;
   \   00001C   53F4FD       ANL     0xf4,#0xfd
    215            P1DIR&=~0x2;//³õÊ¼»¯»ðÑæ p1_1
   \   00001F   53FEFD       ANL     0xfe,#0xfd
    216            P0DIR |= 0x10;//·äÃùÆ÷
   \   000022   43FD10       ORL     0xfd,#0x10
    217           
    218            FAN = 0;
   \   000025   C293         CLR     0x90.3
    219            BEEP = 0;
   \   000027   C284         CLR     0x80.4
    220            //´®¿ÚÅäÖÃ
    221            MT_UartInit();
   \   000029                ; Setup parameters for call to function MT_UartInit
   \   000029   12....       LCALL   ??MT_UartInit?relay
    222            MT_UartRegisterTaskID(task_id);  
   \   00002C                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00002C   EE           MOV     A,R6
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??MT_UartRegisterTaskID?relay
    223            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n")); 
   \   000031                ; Setup parameters for call to function HalUARTWrite
   \   000031   7C0D         MOV     R4,#0xd
   \   000033   7D00         MOV     R5,#0x0
   \   000035   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   000037   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   000039   7900         MOV     R1,#0x0
   \   00003B   12....       LCALL   ??HalUARTWrite?relay
    224            
    225          
    226            // Device hardware initialization can be added here or in main() (Zmain.c).
    227            // If the hardware is application specific - add it here.
    228            // If the hardware is other parts of the device add it in main().
    229          
    230          #if defined ( BUILD_ALL_DEVICES )
    231            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    232            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    233            // together - if they are - we will start up a coordinator. Otherwise,
    234            // the device will start as a router.
    235            if ( readCoordinatorJumper() )
    236              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    237            else
    238              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    239          #endif // BUILD_ALL_DEVICES
    240          
    241          //¸Ã¶ÎµÄÒâË¼ÊÇ£¬Èç¹ûÉèÖÃÁËHOLD_AUTO_STARTºê¶¨Òå£¬½«»áÔÚÆô¶¯Ð¾Æ¬µÄÊ±ºò»áÔÝÍ£Æô¶¯
    242          //Á÷³Ì£¬Ö»ÓÐÍâ²¿´¥·¢ÒÔºó²Å»áÆô¶¯Ð¾Æ¬¡£ÆäÊµ¾ÍÊÇÐèÒªÒ»¸ö°´Å¥´¥·¢ËüµÄÆô¶¯Á÷³Ì¡£  
    243          #if defined ( HOLD_AUTO_START )
    244            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    245            //  from starting the device and wait for the application to
    246            //  start the device.
    247            ZDOInitDevice(0);
    248          #endif
    249          
    250            // Setup for the periodic message's destination address ÉèÖÃ·¢ËÍÊý¾ÝµÄ·½Ê½ºÍÄ¿µÄµØÖ·Ñ°Ö·Ä£Ê½
    251            // Broadcast to everyone ·¢ËÍÄ£Ê½:¹ã²¥·¢ËÍ
    252            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥
   \   00003E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000041   740F         MOV     A,#0xf
   \   000043   F0           MOVX    @DPTR,A
    253            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000044   A3           INC     DPTR
   \   000045   7414         MOV     A,#0x14
   \   000047   F0           MOVX    @DPTR,A
    254            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//Ö¸¶¨Ä¿µÄÍøÂçµØÖ·Îª¹ã²¥µØÖ·
   \   000048   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00004B   74FF         MOV     A,#-0x1
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   F0           MOVX    @DPTR,A
    255          
    256            // Setup for the flash command's destination address - Group 1 ×é²¥·¢ËÍ
    257            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //×éÑ°Ö·
   \   000050   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000053   7401         MOV     A,#0x1
   \   000055   F0           MOVX    @DPTR,A
    258            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000056   A3           INC     DPTR
   \   000057   7414         MOV     A,#0x14
   \   000059   F0           MOVX    @DPTR,A
    259            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×éºÅ0x0001
   \   00005A   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00005D   7401         MOV     A,#0x1
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
    260          
    261            // Fill out the endpoint description. ¶¨Òå±¾Éè±¸ÓÃÀ´Í¨ÐÅµÄAPS²ã¶ËµãÃèÊö·û
    262            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000063   90....       MOV     DPTR,#SampleApp_epDesc
   \   000066   7414         MOV     A,#0x14
   \   000068   F0           MOVX    @DPTR,A
    263            SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp ÃèÊö·ûµÄÈÎÎñID
   \   000069   A3           INC     DPTR
   \   00006A   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000070   F0           MOVX    @DPTR,A
    264            SampleApp_epDesc.simpleDesc
    265                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleApp¼òµ¥ÃèÊö·û
   \   000071   A3           INC     DPTR
   \   000072   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000078   F0           MOVX    @DPTR,A
    266            SampleApp_epDesc.latencyReq = noLatencyReqs;    //ÑÓÊ±²ßÂÔ
   \   000079   A3           INC     DPTR
   \   00007A   E4           CLR     A
   \   00007B   F0           MOVX    @DPTR,A
    267          
    268            // Register the endpoint description with the AF
    269            afRegister( &SampleApp_epDesc );    //ÏòAF²ãµÇ¼ÇÃèÊö·û
   \   00007C                ; Setup parameters for call to function afRegister
   \   00007C   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007E   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000080   12....       LCALL   ??afRegister?relay
    270          
    271            // Register for all key events - This app will handle all key events
    272            RegisterForKeys( SampleApp_TaskID ); // µÇ¼ÇËùÓÐµÄ°´¼üÊÂ¼þ
   \   000083                ; Setup parameters for call to function RegisterForKeys
   \   000083   90....       MOV     DPTR,#SampleApp_TaskID
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   12....       LCALL   ??RegisterForKeys?relay
    273          
    274            // By default, all devices start out in Group 1
    275            SampleApp_Group.ID = 0x0001;//×éºÅ
   \   00008B   90....       MOV     DPTR,#SampleApp_Group
   \   00008E   7401         MOV     A,#0x1
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   E4           CLR     A
   \   000093   F0           MOVX    @DPTR,A
    276            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//Éè¶¨×éÃû
   \   000094                ; Setup parameters for call to function osal_memcpy
   \   000094   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000097   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00009A   F5..         MOV     ?V0 + 2,A
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A1   7C07         MOV     R4,#0x7
   \   0000A3   7D00         MOV     R5,#0x0
   \   0000A5   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A7   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A9   12....       LCALL   ??osal_memcpy?relay
   \   0000AC   7403         MOV     A,#0x3
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
    277            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//°Ñ¸Ã×éµÇ¼ÇÌí¼Óµ½APSÖÐ
   \   0000B1                ; Setup parameters for call to function aps_AddGroup
   \   0000B1   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B3   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B5   7914         MOV     R1,#0x14
   \   0000B7   12....       LCALL   ??aps_AddGroup?relay
    278          
    279          #if defined ( LCD_SUPPORTED )
    280            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //Èç¹ûÖ§³ÖLCD£¬ÏÔÊ¾ÌáÊ¾ÐÅÏ¢
   \   0000BA                ; Setup parameters for call to function HalLcdWriteString
   \   0000BA   7900         MOV     R1,#0x0
   \   0000BC   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000BE   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000C0   12....       LCALL   ??HalLcdWriteString?relay
    281          #endif
    282          }
   \   0000C3                REQUIRE ?Subroutine0
   \   0000C3                REQUIRE P0SEL
   \   0000C3                REQUIRE P0DIR
   \   0000C3                REQUIRE P1SEL
   \   0000C3                REQUIRE P1DIR
   \   0000C3                REQUIRE _A_P1
   \   0000C3                REQUIRE _A_P0
   \   0000C3                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    283          
    284          /*********************************************************************
    285           * @fn      SampleApp_ProcessEvent
    286           *
    287           * @brief   Generic Application Task event processor.  This function
    288           *          is called to process all events for the task.  Events
    289           *          include timers, messages and any other user defined events.
    290           *
    291           * @param   task_id  - The OSAL assigned task ID.
    292           * @param   events - events to process.  This is a bit map and can
    293           *                   contain more than one event.
    294           *
    295           * @return  none
    296           */
    297          //ÓÃ»§Ó¦ÓÃÈÎÎñµÄÊÂ¼þ´¦Àíº¯Êý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    298          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    299          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    300            afIncomingMSGPacket_t *MSGpkt;
    301            (void)task_id;  // Intentionally unreferenced parameter
    302          
    303            if ( events & SYS_EVENT_MSG ) //½ÓÊÕÏµÍ³ÏûÏ¢ÔÙ½øÐÐÅÐ¶Ï
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    304            {
    305              //½ÓÊÕÊôÓÚ±¾Ó¦ÓÃÈÎÎñSampleAppµÄÏûÏ¢£¬ÒÔSampleApp_TaskID±ê¼Ç
    306              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    307              while ( MSGpkt )
    308              {
    309                switch ( MSGpkt->hdr.event )
    310                {
    311                  // Received when a key is pressed
    312                  case KEY_CHANGE://°´¼üÊÂ¼þ
    313                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    314                    break;
    315          
    316                  // Received when a messages is received (OTA) for this endpoint
    317                case AF_INCOMING_MSG_CMD://½ÓÊÕÊý¾ÝÊÂ¼þ,µ÷ÓÃº¯ÊýAF_DataRequest()½ÓÊÕÊý¾Ý
    318                    SampleApp_MessageMSGCB( MSGpkt );//µ÷ÓÃ»Øµ÷º¯Êý¶ÔÊÕµ½µÄÊý¾Ý½øÐÐ´¦Àí
    319                    break;
    320          
    321                  // Received whenever the device changes state in the network
    322                  case ZDO_STATE_CHANGE:
    323                    //Ö»ÒªÍøÂç×´Ì¬·¢Éú¸Ä±ä£¬¾ÍÍ¨¹ýZDO_STATE_CHANGEÊÂ¼þÍ¨ÖªËùÓÐµÄÈÎÎñ¡£
    324                    //Í¬Ê±Íê³É¶ÔÐ­µ÷Æ÷£¬Â·ÓÉÆ÷£¬ÖÕ¶ËµÄÉèÖÃ
    325                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    326                    //if ( (SampleApp_NwkState == DEV_ZB_COORD)//ÊµÑéÖÐÐ­µ÷Æ÷Ö»½ÓÊÕÊý¾ÝËùÒÔÈ¡Ïû·¢ËÍÊÂ¼þ
    327                    if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    328                    {
    329                      // Start sending the periodic message in a regular interval.
    330                      //Õâ¸ö¶¨Ê±Æ÷Ö»ÊÇÎª·¢ËÍÖÜÆÚÐÅÏ¢¿ªÆôµÄ£¬Éè±¸Æô¶¯³õÊ¼»¯ºó´ÓÕâÀï¿ªÊ¼
    331                      //´¥·¢µÚÒ»¸öÖÜÆÚÐÅÏ¢µÄ·¢ËÍ£¬È»ºóÖÜ¶ø¸´Ê¼ÏÂÈ¥
    332                      osal_start_timerEx( SampleApp_TaskID,
    333                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    334                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    335                     
    336                    }
    337                    else
    338                    {
    339                        
    340                    }
    341                    break;
    342          
    343                  default:
    344                    break;
    345                }
    346          
    347                // Release the memory ÊÂ¼þ´¦ÀíÍêÁË£¬ÊÍ·ÅÏûÏ¢Õ¼ÓÃµÄÄÚ´æ
    348                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    349             
    350                // Next - if one is available Ö¸ÕëÖ¸ÏòÏÂÒ»¸ö·ÅÔÚ»º³åÇøµÄ´ý´¦ÀíµÄÊÂ¼þ£¬
    351                //·µ»Øwhile ( MSGpkt )ÖØÐÂ´¦ÀíÊÂ¼þ£¬Ö±µ½»º³åÇøÃ»ÓÐµÈ´ý´¦ÀíÊÂ¼þÎªÖ¹
    352                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    353              }
    354          
    355              // return unprocessed events ·µ»ØÎ´´¦ÀíµÄÊÂ¼þ
    356              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    357            }
    358          
    359            // Send a message out - This event is generated by a timer
    360            //  (setup in SampleApp_Init()).
    361            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    362            {
    363              // Send the periodic message ´¦ÀíÖÜÆÚÐÔÊÂ¼þ£¬
    364              //ÀûÓÃSampleApp_SendPeriodicMessage()´¦ÀíÍêµ±Ç°µÄÖÜÆÚÐÔÊÂ¼þ£¬È»ºóÆô¶¯¶¨Ê±Æ÷
    365              //¿ªÆôÏÂÒ»¸öÖÜÆÚÐÔÊÂÇé£¬ÕâÑùÒ»ÖÖÑ­»·ÏÂÈ¥£¬Ò²¼´ÊÇÉÏÃæËµµÄÖÜÆÚÐÔÊÂ¼þÁË£¬
    366              //¿ÉÒÔ×öÎª´«¸ÐÆ÷¶¨Ê±²É¼¯¡¢ÉÏ´«ÈÎÎñ
    367              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    368              
    369              // Setup to send message again in normal period (+ a little jitter)
    370              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    371                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24E8         ADD     A,#-0x18
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3403         ADDC    A,#0x3
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    372          
    373              // return unprocessed events ·µ»ØÎ´´¦ÀíµÄÊÂ¼þ
    374              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    375            }
    376          
    377            // Discard unknown events
    378            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB                REQUIRE ?Subroutine1
   \   0000AB                ; // Fall through to label ?Subroutine1
    379          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    380          
    381          /*********************************************************************
    382           * Event Generation Functions
    383           */
    384          /*********************************************************************
    385           * @fn      SampleApp_HandleKeys
    386           *
    387           * @brief   Handles all key events for this device.
    388           *
    389           * @param   shift - true if in shift/alt.
    390           * @param   keys - bit field for key events. Valid entries:
    391           *                 HAL_KEY_SW_2
    392           *                 HAL_KEY_SW_1
    393           *
    394           * @return  none
    395           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    396          void SampleApp_HandleKeys( uint8 shift, uint8 keys )  
   \                     SampleApp_HandleKeys:
    397          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    398            (void)shift;  // Intentionally unreferenced parameter
    399            
    400            if ( keys & HAL_KEY_SW_1 )
   \   000006   A2E0         MOV     C,0xE0 /* A   */.0
   \   000008   5007         JNC     ??SampleApp_HandleKeys_0
    401            {
    402              /* This key sends the Flash Command is sent to Group 1.
    403               * This device will not receive the Flash Command from this
    404               * device (even if it belongs to group 1).
    405               */
    406             SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000A                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000A   7AE8         MOV     R2,#-0x18
   \   00000C   7B03         MOV     R3,#0x3
   \   00000E   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    407             
    408              
    409            
    410            }
    411          
    412            if ( keys & HAL_KEY_SW_6 )
    413            {
    414              /* The Flashr Command is sent to Group 1.
    415               * This key toggles this device in and out of group 1.
    416               * If this device doesn't belong to group 1, this application
    417               * will not receive the Flash command sent to group 1.
    418               */
    419            
    420             /*
    421              aps_Group_t *grp;
    422              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    423              if ( grp )
    424              {
    425                // Remove from the group
    426                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    427              }
    428              else
    429              {
    430                // Add to the flash group
    431                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    432              }
    433             */
    434            }
    435          }
   \                     ??SampleApp_HandleKeys_0:
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
    436          
    437          /*********************************************************************
    438           * LOCAL FUNCTIONS
    439           */
    440          
    441          /*********************************************************************
    442           * @fn      SampleApp_MessageMSGCB
    443           *
    444           * @brief   Data message processor callback.  This function processes
    445           *          any incoming data - probably from other devices.  So, based
    446           *          on cluster ID, perform the intended action.
    447           *
    448           * @param   none
    449           *
    450           * @return  none
    451           */
    452          //½ÓÊÕÊý¾Ý£¬²ÎÊýÎª½ÓÊÕµ½µÄÊý¾Ý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    453          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    454          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    455            uint16 flashTime;
    456            unsigned short len = 6+2+2+1;
    457            byte buf[6+2+1+2]={0}; 
   \   00000E   90....       MOV     DPTR,#`?<Constant {0}>`
   \   000011   C082         PUSH    DPL
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   AC82         MOV     R4,DPL
   \   00001B   AD83         MOV     R5,DPH
   \   00001D   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   000020   D082         POP     DPL
   \   000022   740B         MOV     A,#0xb
   \   000024   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    458            
    459            switch ( pkt->clusterId ) //ÅÐ¶Ï´ØID
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 1,A
   \   000036   78..         MOV     R0,#?V0 + 0
   \   000038   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00003B   0100         DW        1
   \   00003D   01           DB        1
   \   00003E   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000040   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000042   ....         DW        ??SampleApp_MessageMSGCB_2
    460            {
    461              case SAMPLEAPP_PERIODIC_CLUSTERID: //ÊÕµ½¹ã²¥Êý¾Ý
    462               
    463          #ifndef ZDO_COORDINATOR 
    464                //½Úµã
    465                 osal_memset(buf, 0 , 4);
   \                     ??SampleApp_MessageMSGCB_1:
   \   000044                ; Setup parameters for call to function osal_memset
   \   000044   7C04         MOV     R4,#0x4
   \   000046   7D00         MOV     R5,#0x0
   \   000048   7900         MOV     R1,#0x0
   \   00004A   85..82       MOV     DPL,?XSP + 0
   \   00004D   85..83       MOV     DPH,?XSP + 1
   \   000050   AA82         MOV     R2,DPL
   \   000052   AB83         MOV     R3,DPH
   \   000054   12....       LCALL   ??osal_memset?relay
    466                 osal_memcpy(buf, pkt->cmd.Data, 4);
   \   000057                ; Setup parameters for call to function osal_memcpy
   \   000057   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00005A   F5..         MOV     ?V0 + 0,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F5..         MOV     ?V0 + 1,A
   \   000060   75..00       MOV     ?V0 + 2,#0x0
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000068   7C04         MOV     R4,#0x4
   \   00006A   7D00         MOV     R5,#0x0
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   AA82         MOV     R2,DPL
   \   000073   AB83         MOV     R3,DPH
   \   000075   12....       LCALL   ??osal_memcpy?relay
   \   000078   7403         MOV     A,#0x3
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
    467                 
    468                 if(osal_memcmp(buf,"FAN1",4)){
   \   00007D                ; Setup parameters for call to function osal_memcmp
   \   00007D   75....       MOV     ?V0 + 0,#`?<Constant "FAN1">` & 0xff
   \   000080   75....       MOV     ?V0 + 1,#(`?<Constant "FAN1">` >> 8) & 0xff
   \   000083   78..         MOV     R0,#?V0 + 0
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000088   7C04         MOV     R4,#0x4
   \   00008A   7D00         MOV     R5,#0x0
   \   00008C   7403         MOV     A,#0x3
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   A982         MOV     R1,DPL
   \   000093   AA83         MOV     R2,DPH
   \   000095   7B00         MOV     R3,#0x0
   \   000097   12....       LCALL   ??osal_memcmp?relay
   \   00009A   7403         MOV     A,#0x3
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009F   E9           MOV     A,R1
   \   0000A0   6005         JZ      ??SampleApp_MessageMSGCB_3
    469                  FAN^=1;
   \   0000A2   639008       XRL     0x90,#0x8
    470                  AutoMode^=1;
   \   0000A5   8028         SJMP    ??SampleApp_MessageMSGCB_4
    471                 }
    472                 else if(osal_memcmp(buf,"BEEP",4)){
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000A7                ; Setup parameters for call to function osal_memcmp
   \   0000A7   75....       MOV     ?V0 + 0,#`?<Constant "BEEP">` & 0xff
   \   0000AA   75....       MOV     ?V0 + 1,#(`?<Constant "BEEP">` >> 8) & 0xff
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B2   7C04         MOV     R4,#0x4
   \   0000B4   7D00         MOV     R5,#0x0
   \   0000B6   7403         MOV     A,#0x3
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   A982         MOV     R1,DPL
   \   0000BD   AA83         MOV     R2,DPH
   \   0000BF   7B00         MOV     R3,#0x0
   \   0000C1   12....       LCALL   ??osal_memcmp?relay
   \   0000C4   7403         MOV     A,#0x3
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C9   E9           MOV     A,R1
   \   0000CA   600A         JZ      ??SampleApp_MessageMSGCB_5
    473                  BEEP^=1;
   \   0000CC   638010       XRL     0x80,#0x10
    474                  AutoMode^=1;
   \                     ??SampleApp_MessageMSGCB_4:
   \   0000CF   90....       MOV     DPTR,#AutoMode
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   6401         XRL     A,#0x1
   \   0000D5   F0           MOVX    @DPTR,A
    475                 }
    476                 
    477                HalUARTWrite(0,buf, len);
   \                     ??SampleApp_MessageMSGCB_5:
   \   0000D6                ; Setup parameters for call to function HalUARTWrite
   \   0000D6   7C0B         MOV     R4,#0xb
   \   0000D8   7D00         MOV     R5,#0x0
   \   0000DA   85..82       MOV     DPL,?XSP + 0
   \   0000DD   85..83       MOV     DPH,?XSP + 1
   \   0000E0   AA82         MOV     R2,DPL
   \   0000E2   AB83         MOV     R3,DPH
   \   0000E4   7900         MOV     R1,#0x0
   \   0000E6   12....       LCALL   ??HalUARTWrite?relay
    478          #else
    479                //Ð­µ÷Æ÷
    480                
    481                osal_memset(buf, 0 , len);
    482                osal_memcpy(buf, pkt->cmd.Data, len); //¸´ÖÆÊý¾Ýµ½»º³åÇøÖÐ
    483                if(is_fan||is_beep){
    484                  SampleApp_SendPeriodicMessage();
    485                }
    486                HalUARTWrite(0,buf, len);
    487          #endif
    488                break;
   \   0000E9   8033         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   0000EB   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000EE   F8           MOV     R0,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F9           MOV     R1,A
   \   0000F2                ; Setup parameters for call to function HalLedBlink
   \   0000F2   8882         MOV     DPL,R0
   \   0000F4   8983         MOV     DPH,R1
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   FA           MOV     R2,A
   \   0000F9   8882         MOV     DPL,R0
   \   0000FB   8983         MOV     DPH,R1
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F9           MOV     R1,A
   \   000101   EA           MOV     A,R2
   \   000102   2400         ADD     A,#0x0
   \   000104   F5..         MOV     ?V0 + 0,A
   \   000106   E4           CLR     A
   \   000107   39           ADDC    A,R1
   \   000108   F5..         MOV     ?V0 + 1,A
   \   00010A   7402         MOV     A,#0x2
   \   00010C   78..         MOV     R0,#?V0 + 0
   \   00010E   12....       LCALL   ?US_SHR
   \   000111   AC..         MOV     R4,?V0 + 0
   \   000113   AD..         MOV     R5,?V0 + 1
   \   000115   7B32         MOV     R3,#0x32
   \   000117   7A04         MOV     R2,#0x4
   \   000119   7908         MOV     R1,#0x8
    489          
    490              case SAMPLEAPP_FLASH_CLUSTERID: //ÊÕµ½×é²¥Êý¾Ý  
    491                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    492                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   00011B   12....       LCALL   ??HalLedBlink?relay
    493                break;
    494            case SAMPLEAPP_P2P_CLUSTERID:
    495           
    496              break;
    497            }
    498          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   00011E   740B         MOV     A,#0xb
   \   000120   12....       LCALL   ?DEALLOC_XSTACK8
   \   000123   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000126                REQUIRE _A_P1
   \   000126                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    499          
    500          /*********************************************************************
    501           * @fn      SampleApp_SendPeriodicMessage
    502           *
    503           * @brief   Send the periodic message.
    504           *
    505           * @param   none
    506           *
    507           * @return  none
    508           */
    509          //·ÖÎö·¢ËÍÖÜÆÚÐÅÏ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    510          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    511          { 
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    512          #ifndef ZDO_COORDINATOR 
    513            //»ñµÃµÄÊý¾ÝÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾  
    514            
    515            char str[6+2+1+2]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>_1`
   \   00000D   C082         PUSH    DPL
   \   00000F   7406         MOV     A,#0x6
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   00001B   D082         POP     DPL
   \   00001D   740B         MOV     A,#0xb
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    516            
    517            //»ñÈ¡ÎÂÊª¶È
    518            unsigned char temp_humi[6]={0};
   \   000022   90....       MOV     DPTR,#`?<Constant {0}>_2`
   \   000025   C082         PUSH    DPL
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AC82         MOV     R4,DPL
   \   00002F   AD83         MOV     R5,DPH
   \   000031   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   000034   D082         POP     DPL
   \   000036   7406         MOV     A,#0x6
   \   000038   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    519            strcpy(temp_humi,DHT11());
                          ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

    strcpy(temp_humi,DHT11());
                     ^
"C:\Users\25814\Desktop\2020±ÏÉè\ÍõÎÄ¿¡_²Ö¿â»ðÔÖ\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",519  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   00003B                ; Setup parameters for call to function strcpy
   \   00003B                ; Setup parameters for call to function DHT11
   \   00003B   12....       LCALL   ??DHT11?relay
   \   00003E   EA           MOV     A,R2
   \   00003F   FC           MOV     R4,A
   \   000040   EB           MOV     A,R3
   \   000041   FD           MOV     R5,A
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   12....       LCALL   ??strcpy?relay
    520            //»ñÈ¡ÆøÌå
    521            uint16 gas = ReadGasData();
   \   00004F                ; Setup parameters for call to function ReadGasData
   \   00004F   12....       LCALL   ??ReadGasData?relay
   \   000052   8A..         MOV     ?V0 + 0,R2
   \   000054   8B..         MOV     ?V0 + 1,R3
    522            //»ñÈ¡»ðÑæ
    523            byte fire = 0;
    524            if(FIRE){
    525              fire = 1;
    526            }
    527            else{
    528              fire = 0;
   \   000056   A291         MOV     C,0x90.1
   \   000058   E4           CLR     A
   \   000059   33           RLC     A
   \   00005A   F5..         MOV     ?V0 + 2,A
    529            }
    530            if(AutoMode){
   \   00005C   90....       MOV     DPTR,#AutoMode
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6021         JZ      ??SampleApp_SendPeriodicMessage_0
    531              FAN = gas>65?1:0;
   \   000062   EA           MOV     A,R2
   \   000063   9442         SUBB    A,#0x42
   \   000065   EB           MOV     A,R3
   \   000066   9400         SUBB    A,#0x0
   \   000068   4004         JC      ??SampleApp_SendPeriodicMessage_1
   \   00006A   7401         MOV     A,#0x1
   \   00006C   8001         SJMP    ??SampleApp_SendPeriodicMessage_2
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   00006E   E4           CLR     A
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   00006F   33           RLC     A
   \   000070   33           RLC     A
   \   000071   33           RLC     A
   \   000072   54F8         ANL     A,#0xf8
   \   000074   F8           MOV     R0,A
   \   000075   E590         MOV     A,0x90
   \   000077   54F7         ANL     A,#0xf7
   \   000079   48           ORL     A,R0
   \   00007A   F590         MOV     0x90,A
    532              BEEP = fire==1?0:1 ;
   \   00007C   E5..         MOV     A,?V0 + 2
   \   00007E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000080   B3           CPL     C
   \   000081   9284         MOV     0x80.4,C
    533            }
    534            /*
    535            if(state_fan){
    536              FAN = gas>65?1:0;
    537            }
    538            if(state_beep){
    539              BEEP = fire?1:0;
    540            }
    541            
    542          */
    543            sprintf(str,"#%4s%3d%d\n",temp_humi,gas,fire);
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   000083                ; Setup parameters for call to function sprintf
   \   000083   75..00       MOV     ?V0 + 3,#0x0
   \   000086   78..         MOV     R0,#?V0 + 2
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   7404         MOV     A,#0x4
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   8582..       MOV     ?V0 + 0,DPL
   \   000098   8583..       MOV     ?V0 + 1,DPH
   \   00009B   78..         MOV     R0,#?V0 + 0
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   7C..         MOV     R4,#`?<Constant "#%4s%3d%d\\n">` & 0xff
   \   0000A2   7D..         MOV     R5,#(`?<Constant "#%4s%3d%d\\n">` >> 8) & 0xff
   \   0000A4   740C         MOV     A,#0xc
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   AA82         MOV     R2,DPL
   \   0000AB   AB83         MOV     R3,DPH
   \   0000AD   12....       LCALL   ??sprintf?relay
   \   0000B0   7406         MOV     A,#0x6
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
    544             HalUARTWrite(0,str, 10);
                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000B5                ; Setup parameters for call to function HalUARTWrite
   \   0000B5   7C0A         MOV     R4,#0xa
   \   0000B7   7D00         MOV     R5,#0x0
   \   0000B9   7406         MOV     A,#0x6
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   AA82         MOV     R2,DPL
   \   0000C0   AB83         MOV     R3,DPH
   \   0000C2   7900         MOV     R1,#0x0
   \   0000C4   12....       LCALL   ??HalUARTWrite?relay
    545             // µ÷ÓÃAF_DataRequest½«Êý¾ÝÎÞÏß¹ã²¥³öÈ¥
    546            if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    547                                 &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    548                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    549                                 sizeof(str),       //·¢ËÍÊý¾Ý³¤¶È
    550                                 (uchar*)str,// ·¢ËÍÊý¾Ý»º³åÇø
    551                                 &SampleApp_TransID,     // ÈÎÎñIDºÅ
    552                                 AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    553                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
   \   0000C7                ; Setup parameters for call to function AF_DataRequest
   \   0000C7   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000CA   78..         MOV     R0,#?V0 + 0
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CF   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0000D2   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0000D5   78..         MOV     R0,#?V0 + 0
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   7409         MOV     A,#0x9
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   8582..       MOV     ?V0 + 0,DPL
   \   0000E2   8583..       MOV     ?V0 + 1,DPH
   \   0000E5   78..         MOV     R0,#?V0 + 0
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EA   75..0B       MOV     ?V0 + 0,#0xb
   \   0000ED   75..00       MOV     ?V0 + 1,#0x0
   \   0000F0   78..         MOV     R0,#?V0 + 0
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F5   75..01       MOV     ?V0 + 0,#0x1
   \   0000F8   78..         MOV     R0,#?V0 + 0
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FD   7920         MOV     R1,#0x20
   \   0000FF   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000101   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000103   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000105   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000107   12....       LCALL   ??AF_DataRequest?relay
   \   00010A   7409         MOV     A,#0x9
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010F   E9           MOV     A,R1
   \   000110   6007         JZ      ??SampleApp_SendPeriodicMessage_3
    554            {
    555            }
    556            else
    557            {
    558              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   000112                ; Setup parameters for call to function HalLedSet
   \   000112   7A01         MOV     R2,#0x1
   \   000114   7901         MOV     R1,#0x1
   \   000116   12....       LCALL   ??HalLedSet?relay
    559              // Error occurred in request to send.
    560            }
    561          #elif defined ZDO_COORDINATOR
    562            //Ð­µ÷Æ÷·¢ËÍ
    563           
    564            if(is_beep)
    565            {
    566              char str[]="BEEP";
    567               if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    568                                 &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    569                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    570                                 sizeof(str),       //·¢ËÍÊý¾Ý³¤¶È
    571                                 (uchar*)str,// ·¢ËÍÊý¾Ý»º³åÇø
    572                                 &SampleApp_TransID,     // ÈÎÎñIDºÅ
    573                                 AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    574                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
    575            {
    576            }
    577            is_beep = 0;
    578            }
    579            if(is_fan){
    580              char str[]="FAN1";
    581              if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    582                                 &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    583                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    584                                 sizeof(str),       //·¢ËÍÊý¾Ý³¤¶È
    585                                 (uchar*)str,// ·¢ËÍÊý¾Ý»º³åÇø
    586                                 &SampleApp_TransID,     // ÈÎÎñIDºÅ
    587                                 AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    588                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
    589            {
    590            }
    591              is_fan = 0;
    592              
    593            }
    594          
    595          #endif 
    596            
    597           
    598          }
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   000119   7411         MOV     A,#0x11
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011E   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000121                REQUIRE _A_P1
   \   000121                REQUIRE _A_P0
    599          
    600          /*********************************************************************
    601           * @fn      SampleApp_SendFlashMessage
    602           *
    603           * @brief   Send the flash message to group 1.
    604           *
    605           * @param   flashTime - in milliseconds
    606           *
    607           * @return  none
    608           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    609          void SampleApp_SendFlashMessage( uint16 flashTime )  
   \                     SampleApp_SendFlashMessage:
    610          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    611            uint8 buffer[3];
    612            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    613            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    614            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    615          
    616            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    617                                 SAMPLEAPP_FLASH_CLUSTERID,
    618                                 3,
    619                                 buffer,
    620                                 &SampleApp_TransID,
    621                                 AF_DISCV_ROUTE,
    622                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029                REQUIRE ?Subroutine2
   \   000029                ; // Fall through to label ?Subroutine2
    623            {
    624            }
    625            else
    626            {
    627              // Error occurred in request to send.
    628            }
    629          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75..1E       MOV     ?V0 + 0,#0x1e
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000008   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00000B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000013   7403         MOV     A,#0x3
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   8582..       MOV     ?V0 + 0,DPL
   \   00001B   8583..       MOV     ?V0 + 1,DPH
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..03       MOV     ?V0 + 0,#0x3
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..02       MOV     ?V0 + 0,#0x2
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7920         MOV     R1,#0x20
   \   000038   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00003A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003C   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   00003E   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000040   12....       LCALL   ??AF_DataRequest?relay
   \   000043   7409         MOV     A,#0x9
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004D   7F02         MOV     R7,#0x2
   \   00004F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    630          void SampleApp_Send_P2P_Message(void){
   \                     SampleApp_Send_P2P_Message:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    631            uchar cmd[3] ="LED";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "LED">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "LED">` & 0xff
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    632            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    633                                 SAMPLEAPP_FLASH_CLUSTERID,
    634                                 3,
    635                                 cmd,
    636                                 &SampleApp_TransID,
    637                                 AF_DISCV_ROUTE,
    638                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   80..         SJMP    ?Subroutine2
    639            {
    640            }
    641          }
    642          /*********************************************************************
    643          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    644           uint16 ReadGasData( void )
   \                     ReadGasData:
    645          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    646            uint16 reading = 0;
    647            
    648            /* Enable channel */
    649            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    650            
    651            /* writing to this register starts the extra conversion */
    652            ADCCON3 = 0x86;// 0x87;
   \   000003   75B686       MOV     0xb6,#-0x7a
    653            
    654            /* Wait for the conversion to be done */
    655            while (!(ADCCON1 & 0x80));
   \                     ??ReadGasData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadGasData_0
    656            
    657            /* Disable channel after done conversion */
    658            ADCCFG &= (0x80 ^ 0xFF); //°´Î»Òì»ò¡£Èç1010^1111=0101£¨¶þ½øÖÆ£©
   \   00000C   53F27F       ANL     0xf2,#0x7f
    659            
    660            /* Read the result */
    661            reading = ADCL;
   \   00000F   E5BA         MOV     A,0xba
    662            reading |= (int16) (ADCH << 8); 
    663            
    664            reading >>= 8;
    665            
    666            return (reading);
   \   000011   E5BB         MOV     A,0xbb
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   FB           MOV     R3,A
   \   000016   02....       LJMP    ?BRET
   \   000019                REQUIRE ADCCFG
   \   000019                REQUIRE ADCCON3
   \   000019                REQUIRE ADCCON1
   \   000019                REQUIRE ADCL
   \   000019                REQUIRE ADCH
    667          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 Example"
   \            35333020
   \            4578616D
   \            706C6500

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AutoMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for state_fan>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for state_beep>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??myDelay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    myDelay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   0000         DB 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FAN1">`:
   \   000000   46414E31     DB "FAN1"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BEEP">`:
   \   000000   42454550     DB "BEEP"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   0000         DB 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#%4s%3d%d\\n">`:
   \   000000   23253473     DB "#%4s%3d%d\012"
   \            25336425
   \            640A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED">`:
   \   000000   4C4544       DB 4CH, 45H, 44H

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadGasData                        0      0     29
     SampleApp_HandleKeys               0      0     21
       -> SampleApp_SendFlashMessage
                                        0      0     18
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0     37
       -> osal_memset                   0      0     44
       -> osal_memcpy                   0      0     50
       -> osal_memcmp                   0      0     50
       -> osal_memcmp                   0      0     50
       -> HalUARTWrite                  0      0     44
       -> HalLedBlink                   0      0     44
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     31
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     50
       -> DHT11                         0      0     58
       -> strcpy                        0      0     58
       -> ReadGasData                   0      0     58
       -> sprintf                       0      0     70
       -> HalUARTWrite                  0      0     58
       -> AF_DataRequest                0      0     76
       -> HalLedSet                     0      0     58
     SampleApp_Send_P2P_Message         2      0     22
       -> AF_DataRequest                0      0     44
     myDelay                            0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_P1                                    1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     P1SEL                                    1
     P0DIR                                    1
     P1DIR                                    1
     AppTitle                                16
     AutoMode                                 1
     myDelay                                 31
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     state_fan                                1
     state_beep                               1
     recv_fan                                 1
     recv_beep                                1
     SampleApp_Init                         195
     ?Subroutine0                             5
     SampleApp_ProcessEvent                 171
     ?Subroutine1                             5
     SampleApp_HandleKeys                    22
     SampleApp_MessageMSGCB                 294
     ?Subroutine3                            12
     SampleApp_SendPeriodicMessage          289
     SampleApp_SendFlashMessage              41
     ?Subroutine2                            82
     SampleApp_Send_P2P_Message              33
     ReadGasData                             25
     ?<Initializer for AppTitle>             16
     ?<Initializer for AutoMode>              1
     ?<Initializer for state_fan>             1
     ?<Initializer for state_beep>            1
     ??myDelay?relay                          6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??ReadGasData?relay                      6
     ?<Constant "UartInit OK\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant {0}>                         11
     ?<Constant "FAN1">                       5
     ?<Constant "BEEP">                       5
     ?<Constant {0}>_1                       11
     ?<Constant {0}>_2                        6
     ?<Constant "#%4s%3d%d\n">               11
     ?<Constant "LED">                        3

 
 1 205 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
    11 bytes in segment SFR_AN
    19 bytes in segment XDATA_I
    19 bytes in segment XDATA_ID
    99 bytes in segment XDATA_ROM_C
    55 bytes in segment XDATA_Z
 
 1 278 bytes of CODE  memory
    99 bytes of CONST memory
     0 bytes of DATA  memory (+ 11 bytes shared)
    74 bytes of XDATA memory

Errors: none
Warnings: 3
