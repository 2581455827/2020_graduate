///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        25/Nov/2019  20:55:44 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Co /
//                          mponents\stack\nwk\BindingTable.c                 /
//    Command line       =  -f C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å /
//                          \Projects\zstack\Samples\GenericApp\CC2530DB\..\. /
//                          .\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ      /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å /
//                          \Projects\zstack\Samples\GenericApp\CC2530DB\..\. /
//                          .\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO    /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\6.Z /
//                          Stack-2.5.1a¹¤³ÌÄ£°å\Components\stack\nwk\Binding /
//                          Table.c -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D  /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\Coordin /
//                          atorEB\List\ -lA C:\Users\25814\Desktop\6.ZStack- /
//                          2.5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\GenericApp /
//                          \CC2530DB\CoordinatorEB\List\ --diag_suppress     /
//                          Pe001,Pa010 -o C:\Users\25814\Desktop\6.ZStack-2. /
//                          5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\GenericApp\C /
//                          C2530DB\CoordinatorEB\Obj\ -e --no_code_motion    /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å /
//                          \Projects\zstack\Samples\GenericApp\CC2530DB\ -I  /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\Sour /
//                          ce\ -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³Ì /
//                          Ä£°å\Projects\zstack\Samples\GenericApp\CC2530DB\ /
//                          ..\..\..\ZMain\TI2530DB\ -I                       /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\hal\include\ -I                /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\hal\target\CC2530EB\ -I        /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\mac\include\ -I                /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\mac\high_level\ -I             /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\mac\low_level\srf04\ -I        /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\mac\low_level\srf04\single_chi /
//                          p\ -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ /
//                          £°å\Projects\zstack\Samples\GenericApp\CC2530DB\. /
//                          .\..\..\..\..\Components\mt\ -I                   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\osal\include\ -I               /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\services\saddr\ -I             /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\services\sdata\ -I             /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\af\ -I                   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\nwk\ -I                  /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sapi\ -I                 /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sec\ -I                  /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sys\ -I                  /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\zdo\ -I                  /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\zmac\ -I                       /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\zmac\f8w\ -Ohz                 /
//    List file          =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\Coordin /
//                          atorEB\List\BindingTable.s51                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME BindingTable

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_C_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??BindInitNV?relay
        FUNCTION ??BindInitNV?relay,0203H
        PUBLIC ??BindRestoreFromNV?relay
        FUNCTION ??BindRestoreFromNV?relay,0203H
        PUBLIC ??BindSetDefaultNV?relay
        FUNCTION ??BindSetDefaultNV?relay,0203H
        PUBLIC ??BindWriteNV?relay
        FUNCTION ??BindWriteNV?relay,0203H
        PUBLIC ??GetBindingTableEntry?relay
        FUNCTION ??GetBindingTableEntry?relay,0203H
        PUBLIC ??InitBindingTable?relay
        FUNCTION ??InitBindingTable?relay,0203H
        PUBLIC ??bindAddClusterIdToList?relay
        FUNCTION ??bindAddClusterIdToList?relay,0203H
        PUBLIC ??bindAddEntry?relay
        FUNCTION ??bindAddEntry?relay,0203H
        PUBLIC ??bindAddrIndexGet?relay
        FUNCTION ??bindAddrIndexGet?relay,0203H
        PUBLIC ??bindAddrMgrLocalLoad?relay
        FUNCTION ??bindAddrMgrLocalLoad?relay,0203H
        PUBLIC ??bindCapacity?relay
        FUNCTION ??bindCapacity?relay,0203H
        PUBLIC ??bindFind?relay
        FUNCTION ??bindFind?relay,0203H
        PUBLIC ??bindFindEmpty?relay
        FUNCTION ??bindFindEmpty?relay,0203H
        PUBLIC ??bindFindExisting?relay
        FUNCTION ??bindFindExisting?relay,0203H
        PUBLIC ??bindIsClusterIDinList?relay
        FUNCTION ??bindIsClusterIDinList?relay,0203H
        PUBLIC ??bindNumBoundTo?relay
        FUNCTION ??bindNumBoundTo?relay,0203H
        PUBLIC ??bindNumOfEntries?relay
        FUNCTION ??bindNumOfEntries?relay,0203H
        PUBLIC ??bindNumReflections?relay
        FUNCTION ??bindNumReflections?relay,0203H
        PUBLIC ??bindRemoveClusterIdFromList?relay
        FUNCTION ??bindRemoveClusterIdFromList?relay,0203H
        PUBLIC ??bindRemoveDev?relay
        FUNCTION ??bindRemoveDev?relay,0203H
        PUBLIC ??bindRemoveEntry?relay
        FUNCTION ??bindRemoveEntry?relay,0203H
        PUBLIC ??bindRemoveSrcDev?relay
        FUNCTION ??bindRemoveSrcDev?relay,0203H
        PUBLIC ??bindUpdateAddr?relay
        FUNCTION ??bindUpdateAddr?relay,0203H
        PUBLIC ??bindingAddrMgsHelperConvert?relay
        FUNCTION ??bindingAddrMgsHelperConvert?relay,0203H
        PUBLIC ??bindingAddrMgsHelperConvertShort?relay
        FUNCTION ??bindingAddrMgsHelperConvertShort?relay,0203H
        PUBLIC ??bindingAddrMgsHelperFind?relay
        FUNCTION ??bindingAddrMgsHelperFind?relay,0203H
        PUBLIC BindInitNV
        FUNCTION BindInitNV,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC BindRestoreFromNV
        FUNCTION BindRestoreFromNV,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC BindSetDefaultNV
        FUNCTION BindSetDefaultNV,021603H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC BindWriteNV
        FUNCTION BindWriteNV,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC GetBindingTableEntry
        FUNCTION GetBindingTableEntry,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC InitBindingTable
        FUNCTION InitBindingTable,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bindAddClusterIdToList
        FUNCTION bindAddClusterIdToList,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindAddEntry
        FUNCTION bindAddEntry,021603H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC bindAddrIndexGet
        FUNCTION bindAddrIndexGet,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindAddrMgrLocalLoad
        FUNCTION bindAddrMgrLocalLoad,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC bindCapacity
        FUNCTION bindCapacity,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC bindFind
        FUNCTION bindFind,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bindFindEmpty
        FUNCTION bindFindEmpty,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindFindExisting
        FUNCTION bindFindExisting,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bindIsClusterIDinList
        FUNCTION bindIsClusterIDinList,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindNumBoundTo
        FUNCTION bindNumBoundTo,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindNumOfEntries
        FUNCTION bindNumOfEntries,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindNumReflections
        FUNCTION bindNumReflections,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindRemoveClusterIdFromList
        FUNCTION bindRemoveClusterIdFromList,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC bindRemoveDev
        FUNCTION bindRemoveDev,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindRemoveEntry
        FUNCTION bindRemoveEntry,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindRemoveSrcDev
        FUNCTION bindRemoveSrcDev,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindUpdateAddr
        FUNCTION bindUpdateAddr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC bindingAddrMgsHelperConvert
        FUNCTION bindingAddrMgsHelperConvert,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bindingAddrMgsHelperConvertShort
        FUNCTION bindingAddrMgsHelperConvertShort,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindingAddrMgsHelperFind
        FUNCTION bindingAddrMgsHelperFind,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC pBindInitNV
        PUBLIC pBindRestoreFromNV
        PUBLIC pBindSetDefaultNV
        PUBLIC pBindWriteNV
        PUBLIC pbindAddEntry
        PUBLIC pbindNumOfEntries
        PUBLIC pbindRemoveDev
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_memset         SYMBOL "osal_memset"
osal_memcpy         SYMBOL "osal_memcpy"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_write       SYMBOL "osal_nv_write"
osal_nv_read        SYMBOL "osal_nv_read"
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
NLME_GetCoordExtAddr SYMBOL "NLME_GetCoordExtAddr"
??AddrMgrEntryGet?relay SYMBOL "?relay", AddrMgrEntryGet
??AddrMgrEntryLookupExt?relay SYMBOL "?relay", AddrMgrEntryLookupExt
??AddrMgrEntryLookupNwk?relay SYMBOL "?relay", AddrMgrEntryLookupNwk
??AddrMgrEntryUpdate?relay SYMBOL "?relay", AddrMgrEntryUpdate
??AddrMgrExtAddrSet?relay SYMBOL "?relay", AddrMgrExtAddrSet
??NLME_GetCoordExtAddr?relay SYMBOL "?relay", NLME_GetCoordExtAddr
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
BindInitNV          SYMBOL "BindInitNV"
??BindInitNV?relay  SYMBOL "?relay", BindInitNV
BindRestoreFromNV   SYMBOL "BindRestoreFromNV"
??BindRestoreFromNV?relay SYMBOL "?relay", BindRestoreFromNV
BindSetDefaultNV    SYMBOL "BindSetDefaultNV"
??BindSetDefaultNV?relay SYMBOL "?relay", BindSetDefaultNV
BindWriteNV         SYMBOL "BindWriteNV"
??BindWriteNV?relay SYMBOL "?relay", BindWriteNV
GetBindingTableEntry SYMBOL "GetBindingTableEntry"
??GetBindingTableEntry?relay SYMBOL "?relay", GetBindingTableEntry
InitBindingTable    SYMBOL "InitBindingTable"
??InitBindingTable?relay SYMBOL "?relay", InitBindingTable
bindAddClusterIdToList SYMBOL "bindAddClusterIdToList"
??bindAddClusterIdToList?relay SYMBOL "?relay", bindAddClusterIdToList
bindAddEntry        SYMBOL "bindAddEntry"
??bindAddEntry?relay SYMBOL "?relay", bindAddEntry
bindAddrIndexGet    SYMBOL "bindAddrIndexGet"
??bindAddrIndexGet?relay SYMBOL "?relay", bindAddrIndexGet
bindAddrMgrLocalLoad SYMBOL "bindAddrMgrLocalLoad"
??bindAddrMgrLocalLoad?relay SYMBOL "?relay", bindAddrMgrLocalLoad
bindCapacity        SYMBOL "bindCapacity"
??bindCapacity?relay SYMBOL "?relay", bindCapacity
bindFind            SYMBOL "bindFind"
??bindFind?relay    SYMBOL "?relay", bindFind
bindFindEmpty       SYMBOL "bindFindEmpty"
??bindFindEmpty?relay SYMBOL "?relay", bindFindEmpty
bindFindExisting    SYMBOL "bindFindExisting"
??bindFindExisting?relay SYMBOL "?relay", bindFindExisting
bindIsClusterIDinList SYMBOL "bindIsClusterIDinList"
??bindIsClusterIDinList?relay SYMBOL "?relay", bindIsClusterIDinList
bindNumBoundTo      SYMBOL "bindNumBoundTo"
??bindNumBoundTo?relay SYMBOL "?relay", bindNumBoundTo
bindNumOfEntries    SYMBOL "bindNumOfEntries"
??bindNumOfEntries?relay SYMBOL "?relay", bindNumOfEntries
bindNumReflections  SYMBOL "bindNumReflections"
??bindNumReflections?relay SYMBOL "?relay", bindNumReflections
bindRemoveClusterIdFromList SYMBOL "bindRemoveClusterIdFromList"
??bindRemoveClusterIdFromList?relay SYMBOL "?relay", bindRemoveClusterIdFromList
bindRemoveDev       SYMBOL "bindRemoveDev"
??bindRemoveDev?relay SYMBOL "?relay", bindRemoveDev
bindRemoveEntry     SYMBOL "bindRemoveEntry"
??bindRemoveEntry?relay SYMBOL "?relay", bindRemoveEntry
bindRemoveSrcDev    SYMBOL "bindRemoveSrcDev"
??bindRemoveSrcDev?relay SYMBOL "?relay", bindRemoveSrcDev
bindUpdateAddr      SYMBOL "bindUpdateAddr"
??bindUpdateAddr?relay SYMBOL "?relay", bindUpdateAddr
bindingAddrMgsHelperConvert SYMBOL "bindingAddrMgsHelperConvert"
??bindingAddrMgsHelperConvert?relay SYMBOL "?relay", bindingAddrMgsHelperConvert
bindingAddrMgsHelperConvertShort SYMBOL "bindingAddrMgsHelperConvertShort"
??bindingAddrMgsHelperConvertShort?relay SYMBOL "?relay", bindingAddrMgsHelperConvertShort
bindingAddrMgsHelperFind SYMBOL "bindingAddrMgsHelperFind"
??bindingAddrMgsHelperFind?relay SYMBOL "?relay", bindingAddrMgsHelperFind

        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordExtAddr
        FUNCTION NLME_GetCoordExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AddrMgrEntryGet?relay
        FUNCTION ??AddrMgrEntryGet?relay,00H
        EXTERN ??AddrMgrEntryLookupExt?relay
        FUNCTION ??AddrMgrEntryLookupExt?relay,00H
        EXTERN ??AddrMgrEntryLookupNwk?relay
        FUNCTION ??AddrMgrEntryLookupNwk?relay,00H
        EXTERN ??AddrMgrEntryUpdate?relay
        FUNCTION ??AddrMgrEntryUpdate?relay,00H
        EXTERN ??AddrMgrExtAddrSet?relay
        FUNCTION ??AddrMgrExtAddrSet?relay,00H
        EXTERN ??NLME_GetCoordExtAddr?relay
        FUNCTION ??NLME_GetCoordExtAddr?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN BindingTable
        EXTERN _NIB
        EXTERN gBIND_REC_SIZE
        EXTERN gMAX_BINDING_CLUSTER_IDS
        EXTERN gNWK_MAX_BINDING_ENTRIES

// C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Components\stack\nwk\BindingTable.c
//    1 /**************************************************************************************************
//    2   Filename:       BindingTable.c
//    3   Revised:        $Date: 2012-03-28 15:40:50 -0700 (Wed, 28 Mar 2012) $
//    4   Revision:       $Revision: 29930 $
//    5 
//    6   Description:    Device binding table functions.
//    7 
//    8 
//    9   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "OSAL_Nv.h"
//   46 #include "nwk_globals.h"
//   47 #include "AddrMgr.h"
//   48 #include "BindingTable.h"
//   49 
//   50 /*********************************************************************
//   51  * MACROS
//   52  */
//   53 
//   54 /*********************************************************************
//   55  * CONSTANTS
//   56  */
//   57 #define NV_BIND_EMPTY   0xFF
//   58 #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
//   59 #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
//   60 
//   61 /*********************************************************************
//   62  * TYPEDEFS
//   63  */
//   64 typedef struct
//   65 {
//   66   uint8        srcEP;
//   67   uint16       srcIndex;
//   68   uint16       dstIndex;
//   69   uint8        dstEP;
//   70   uint8        dstAddrMode;
//   71   uint8        clusterIDs;
//   72   uint16*      clusterIDList;
//   73 } bindFields_t;
//   74 
//   75 /*********************************************************************
//   76  * GLOBAL VARIABLES
//   77  */
//   78 
//   79 /*********************************************************************
//   80  * LOCAL FUNCTIONS
//   81  */
//   82 void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
//   83                     AddrMgrEntry_t *entryNew );
//   84 BindingEntry_t *bindFindEmpty( void );
//   85 uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
//   86 uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
//   87 void bindAddrMgrLocalLoad( void );
//   88 uint16 bindAddrIndexGet( zAddrType_t* addr );
//   89 
//   90 /*********************************************************************
//   91  * LOCAL VARIABLES
//   92  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   93 static uint8 bindAddrMgrLocalLoaded = FALSE;
bindAddrMgrLocalLoaded:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   94 
//   95 /*********************************************************************
//   96  * Function Pointers
//   97  */
//   98 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   99 BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
pbindAddEntry:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  100                                   zAddrType_t *dstAddr, byte dstEpInt,
//  101                                   byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  102 uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
pbindNumOfEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  103 void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
pbindRemoveDev:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  104 byte (*pBindInitNV)( void ) = (void*)NULL;
pBindInitNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  105 void (*pBindSetDefaultNV)( void ) = (void*)NULL;
pBindSetDefaultNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  106 uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
pBindRestoreFromNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  107 void (*pBindWriteNV)( void ) = (void*)NULL;
pBindWriteNV:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  108 
//  109 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  110 /*********************************************************************
//  111  * @fn      BindAddrMgrCB()
//  112  *
//  113  * @brief   Address Manager Callback function
//  114  *
//  115  * @param   update -
//  116  * @param   entry -
//  117  *
//  118  * @return  pointer to
//  119  */
//  120 void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
//  121                     AddrMgrEntry_t *entryOld )
//  122 {
//  123   // Check for either deleted items or changed Extended (Duplicate) addresses
//  124 }
//  125 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  126 
//  127 /*********************************************************************
//  128  * @fn      InitBindingTable()
//  129  *
//  130  * @brief
//  131  *
//  132  *   This function is used to initialise the binding table
//  133  *
//  134  * @param   none
//  135  *
//  136  * @return  none
//  137  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  138 void InitBindingTable( void )
InitBindingTable:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function InitBindingTable
        CODE
//  139 {
        FUNCALL InitBindingTable, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  140   osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
        ; Setup parameters for call to function osal_memset
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     A,R4
        MOV     B,?V0 + 0
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,?V0 + 1
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,?V0 + 0
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     R1,#-0x1
        MOV     R2,#BindingTable & 0xff
        MOV     R3,#(BindingTable >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  141 
//  142   pbindAddEntry = bindAddEntry;
        MOV     DPTR,#pbindAddEntry
        MOV     A,#??bindAddEntry?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??bindAddEntry?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  143   pbindNumOfEntries = bindNumOfEntries;
        MOV     DPTR,#pbindNumOfEntries
        MOV     A,#??bindNumOfEntries?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??bindNumOfEntries?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  144   pbindRemoveDev = bindRemoveDev;
        MOV     DPTR,#pbindRemoveDev
        MOV     A,#??bindRemoveDev?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??bindRemoveDev?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  145   pBindInitNV = BindInitNV;
        MOV     DPTR,#pBindInitNV
        MOV     A,#??BindInitNV?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??BindInitNV?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  146   pBindSetDefaultNV = BindSetDefaultNV;
        MOV     DPTR,#pBindSetDefaultNV
        MOV     A,#??BindSetDefaultNV?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??BindSetDefaultNV?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  147   pBindRestoreFromNV = BindRestoreFromNV;
        MOV     DPTR,#pBindRestoreFromNV
        MOV     A,#??BindRestoreFromNV?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??BindRestoreFromNV?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  148   pBindWriteNV = BindWriteNV;
        MOV     DPTR,#pBindWriteNV
        MOV     A,#??BindWriteNV?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??BindWriteNV?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  149 
//  150   bindAddrMgrLocalLoaded = FALSE;
        MOV     DPTR,#bindAddrMgrLocalLoaded
        CLR     A
        MOVX    @DPTR,A
//  151 
//  152 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  153   // Register with the address manager
//  154   AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
//  155 #endif
//  156 }
        SJMP    ??Subroutine41_0
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  157 
//  158 /*********************************************************************
//  159  * @fn      bindFindEmpty()
//  160  *
//  161  * @brief   This function returns a pointer to an empty binding slot
//  162  *
//  163  * @param   none
//  164  *
//  165  * @return  pointer to binding table entry, NULL if not added
//  166  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  167 BindingEntry_t *bindFindEmpty( void )
bindFindEmpty:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function bindFindEmpty
        CODE
//  168 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  169   uint16 x;
//  170 
//  171   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_21
??bindFindEmpty_0:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_0:
        JNC     ??bindFindEmpty_1
//  172   {
//  173     // It's empty if the index is "Not Found"
//  174     if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0xe
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0xe
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_46:
        CPL     A
        JNZ     ??bindFindEmpty_0
//  175     {
//  176       return ( &BindingTable[x] );
        LCALL   ?Subroutine27 & 0xFFFF
//  177     }
//  178   }
??CrossCallReturnLabel_44:
        SJMP    ??bindFindEmpty_2
//  179 
//  180   return ( (BindingEntry_t *)NULL );
??bindFindEmpty_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFindEmpty_2:
        LJMP    ??Subroutine50_0 & 0xFFFF
        CFI EndBlock cfiBlock3
//  181 }
//  182 
//  183 /*********************************************************************
//  184  * @fn      bindNumOfEntries()
//  185  *
//  186  * @brief   This function returns the number of binding table entries.
//  187  *          The return for this is the number of clusters in the
//  188  *          table NOT the number of entries.
//  189  *
//  190  * @param   none
//  191  *
//  192  * @return  number of entries
//  193  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  194 uint16 bindNumOfEntries( void )
bindNumOfEntries:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function bindNumOfEntries
        CODE
//  195 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  196   uint16 x;
//  197   uint16 found;
//  198 
//  199   for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_22
//  200   {
//  201     // It's empty if the index is "Not Found"
//  202     if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
??bindNumOfEntries_0:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0xe
        MUL     AB
        MOV     R4,A
        MOV     R6,B
        MOV     B,#0xe
        MOV     A,R5
        MUL     AB
        ADD     A,R6
        MOV     R5,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        CPL     A
        JZ      ??bindNumOfEntries_1
//  203     {
//  204       found += BindingTable[x].numClusterIds;
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0xe
        MUL     AB
        MOV     R4,A
        MOV     B,#0xe
        MOV     A,R5
        MUL     AB
        ADD     A,R6
        MOV     R5,A
        MOV     A,#(BindingTable + 5) & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#((BindingTable + 5) >> 8) & 0xff
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R2
        ADD     A,R4
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
//  205     }
//  206   }
??bindNumOfEntries_1:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_77:
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        MOV     A,R1
        SUBB    A,R5
        JC      ??bindNumOfEntries_0
//  207 
//  208   return ( found );
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock4
//  209 }
//  210 
//  211 /*********************************************************************
//  212  * @fn      bindCapacity()
//  213  *
//  214  * @brief   This function returns the number of binding entries
//  215  *          possible and used.
//  216  *
//  217  * @param   maxEntries - pointer to a place to put the max entries
//  218  * @param   usedEntries - pointer to a place to put the number
//  219  *               of used entries
//  220  *
//  221  * @return  none
//  222  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  223 void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
bindCapacity:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function bindCapacity
        CODE
//  224 {
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  225   uint16 x;
//  226   uint16 used;
//  227 
//  228   for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_23
//  229   {
//  230     // It's empty if the index is "Not Found"
//  231     if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
??bindCapacity_0:
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_53:
        JZ      ??CrossCallReturnLabel_32
//  232     {
//  233       used++;
        LCALL   ?Subroutine22 & 0xFFFF
//  234     }
//  235   }
??CrossCallReturnLabel_32:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_13:
        JC      ??bindCapacity_0
//  236 
//  237   *maxEntries = gNWK_MAX_BINDING_ENTRIES;
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  238   *usedEntries = used;
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock5
//  239 }
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  240 
//  241 /*********************************************************************
//  242  * @fn      bindAddEntry()
//  243  *
//  244  * @brief   This function is used to Add an entry to the binding table
//  245  *
//  246  * @param       srcAddr - source Address
//  247  * @param       srcEpInt - source endpoint
//  248  * @param       dstAddr - destination Address
//  249  * @param       dstEpInt - destination endpoint
//  250  * @param       numClusterIds - number of cluster Ids in the list
//  251  * @param       clusterIds - pointer to the Object ID list
//  252  *
//  253  * @return  pointer to binding table entry, NULL if not added
//  254  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  255 BindingEntry_t *bindAddEntry( byte srcEpInt,
bindAddEntry:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function bindAddEntry
        CODE
//  256                               zAddrType_t *dstAddr, byte dstEpInt,
//  257                               byte numClusterIds, uint16 *clusterIds )
//  258 {
        FUNCALL bindAddEntry, bindAddrMgrLocalLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddrIndexGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddClusterIdToList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindFindEmpty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 3,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 9,R4
        MOV     ?V0 + 2,R5
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
//  259   uint8           index;
//  260   BindingEntry_t* entry;
//  261   bindFields_t    fields;
//  262 
//  263   // initialize results
//  264   entry = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  265 
//  266   // make sure local addresses have been loaded
//  267   bindAddrMgrLocalLoad();
        ; Setup parameters for call to function bindAddrMgrLocalLoad
        LCALL   ??bindAddrMgrLocalLoad?relay
//  268 
//  269   // setup fields
//  270   fields.dstIndex = bindAddrIndexGet( dstAddr );
        ; Setup parameters for call to function bindAddrIndexGet
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??bindAddrIndexGet?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
//  271   fields.srcEP    = srcEpInt;
//  272 
//  273   if ( dstAddr->addrMode == AddrGroup )
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindAddEntry_0
//  274   {
//  275     fields.dstAddrMode = DSTGROUPMODE_GROUP;
        MOV     ?V0 + 8,#0x1
//  276     fields.dstEP       = 0;
        MOV     ?V0 + 0,R6
        SJMP    ??bindAddEntry_1
//  277   }
//  278   else
//  279   {
//  280     fields.dstAddrMode = DSTGROUPMODE_ADDR;
??bindAddEntry_0:
        MOV     ?V0 + 8,R6
//  281     fields.dstEP       = dstEpInt;
        MOV     ?V0 + 0,?V0 + 9
//  282   }
//  283 
//  284   if ( fields.dstIndex != INVALID_NODE_ADDR  )
??bindAddEntry_1:
        MOV     A,#-0x2
        XRL     A,?V0 + 4
        JNZ     ??bindAddEntry_2
        MOV     A,#-0x1
        XRL     A,?V0 + 5
??bindAddEntry_2:
        JNZ     $+5
        LJMP    ??bindAddEntry_3 & 0xFFFF
//  285   {
//  286     for ( index = 0; index < gNWK_MAX_BINDING_ENTRIES; index++ )
        MOV     ?V0 + 1,R6
        SJMP    ??bindAddEntry_4
??bindAddEntry_5:
        INC     ?V0 + 1
??bindAddEntry_4:
        MOV     ?V0 + 10,?V0 + 1
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_75:
        CLR     C
        MOV     A,?V0 + 10
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        JNC     ??bindAddEntry_6
//  287     {
//  288       if ( ( fields.srcEP       == BindingTable[index].srcEP        ) &&
//  289            ( fields.dstAddrMode == BindingTable[index].dstGroupMode ) &&
//  290            ( fields.dstIndex    == BindingTable[index].dstIdx       ) &&
//  291            ( fields.dstEP       == BindingTable[index].dstEP        )    )
        MOV     A,?V0 + 1
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_85:
        XRL     A,?V0 + 3
        JNZ     ??bindAddEntry_5
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_81:
        XRL     A,?V0 + 8
        JNZ     ??bindAddEntry_5
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_64:
        XRL     A,?V0 + 4
        JNZ     ??bindAddEntry_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 5
??bindAddEntry_7:
        JNZ     ??bindAddEntry_5
        MOV     A,#(BindingTable + 4) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 4) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JNZ     ??bindAddEntry_5
//  292       {
//  293         entry = &BindingTable[index];
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R6,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R7,A
//  294 
//  295         // break from loop
//  296         break;
//  297       }
//  298     }
//  299 
//  300     if ( entry != NULL )
//  301     {
//  302       // Loop through the cluster IDs
//  303       for ( index = 0; index < numClusterIds; index++ )
        MOV     ?V0 + 1,#0x0
??bindAddEntry_8:
        MOV     A,?V0 + 1
        CLR     C
        SUBB    A,?V0 + 2
        JC      $+5
        LJMP    ??bindAddEntry_3 & 0xFFFF
//  304       {
//  305         // Found - is the cluster already defined?
//  306         if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
        ; Setup parameters for call to function bindIsClusterIDinList
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ??bindIsClusterIDinList?relay
        MOV     A,R1
        JNZ     ??bindAddEntry_9
//  307         {
//  308           // Nope, add this cluster
//  309           if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
        ; Setup parameters for call to function bindAddClusterIdToList
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ??bindAddClusterIdToList?relay
        MOV     A,R1
        JNZ     ??bindAddEntry_9
//  310           {
//  311             // Indicate error if cluster list was full
//  312             entry = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  313           }
//  314         }
//  315       }
??bindAddEntry_9:
        INC     ?V0 + 1
        SJMP    ??bindAddEntry_8
//  316     }
//  317     else
//  318     {
//  319       // Find an empty slot
//  320       entry = bindFindEmpty();
??bindAddEntry_6:
        ; Setup parameters for call to function bindFindEmpty
        LCALL   ??bindFindEmpty?relay
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     R6,?V0 + 10
        MOV     R7,?V0 + 11
//  321 
//  322       // Check against the maximum number allowed
//  323       if ( entry != NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??bindAddEntry_3
//  324       {
//  325         // Add new entry
//  326         entry->srcEP         = fields.srcEP;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  327         entry->dstGroupMode  = fields.dstAddrMode;
        INC     DPTR
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
//  328         entry->dstIdx        = fields.dstIndex;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  329         entry->dstEP         = fields.dstEP;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  330 
//  331         if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
        MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR     A
        MOVC    A,@A+DPTR
        CLR     C
        SUBB    A,?V0 + 2
        JNC     ??bindAddEntry_10
//  332         {
//  333           numClusterIds = gMAX_BINDING_CLUSTER_IDS;
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 2,A
//  334         }
//  335 
//  336         entry->numClusterIds = numClusterIds;
??bindAddEntry_10:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  337 
//  338         osal_memcpy( entry->clusterIdList,
//  339                      clusterIds,
//  340                      numClusterIds * sizeof(uint16) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,?V0 + 7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,?V0 + 2
        CLR     C
        RLC     A
        MOV     R4,A
        CLR     A
        RLC     A
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  341       }
//  342     }
//  343   }
//  344 
//  345   return entry;
??bindAddEntry_3:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
//  346 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     A,?V0 + 1
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,?V0 + 6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  347 
//  348 /*********************************************************************
//  349  * @fn      bindRemoveEntry
//  350  *
//  351  * @brief   Removes a binding table entry.
//  352  *
//  353  * @param   pBind - pointer to binding table entry to delete
//  354  *
//  355  * @return  TRUE if Removed, FALSE if not
//  356  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  357 byte bindRemoveEntry( BindingEntry_t *pBind )
bindRemoveEntry:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function bindRemoveEntry
        CODE
//  358 {
        FUNCALL bindRemoveEntry, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  359   osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
        ; Setup parameters for call to function osal_memset
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV     R1,#-0x1
        LCALL   ??osal_memset?relay
//  360   return ( TRUE );
        MOV     R1,#0x1
        LJMP    ??Subroutine50_0 & 0xFFFF
        CFI EndBlock cfiBlock19
//  361 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_78
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond21) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond21) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond21) CFA_SP SP+-5
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        MOV     DPTR,#gBIND_REC_SIZE
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_77
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond26) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond26) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond26) CFA_SP SP+-5
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R4,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
//  362 
//  363 /*********************************************************************
//  364  * @fn      bindIsClusterIDinList()
//  365  *
//  366  * @brief   Is the clusterID in the clusterID list?
//  367  *
//  368  * @param   enter - binding table entry
//  369  * @param   clusterId  - Cluster ID to look for
//  370  *
//  371  * @return  TRUE if found, FALSE if not found
//  372  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  373 byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
bindIsClusterIDinList:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function bindIsClusterIDinList
        CODE
//  374 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  375   uint8 x;
//  376 
//  377   if ( entry != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindIsClusterIDinList_0
//  378   {
//  379     for ( x = 0; x < entry->numClusterIds; x++ )
        MOV     R6,#0x0
        SJMP    ??bindIsClusterIDinList_1
??bindIsClusterIDinList_2:
        INC     R6
??bindIsClusterIDinList_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JNC     ??bindIsClusterIDinList_0
//  380     {
//  381       if ( entry->clusterIdList[x] == clusterId )
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindIsClusterIDinList_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindIsClusterIDinList_3:
        JNZ     ??bindIsClusterIDinList_2
//  382       {
//  383         return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindIsClusterIDinList_4
//  384       }
//  385     }
//  386   }
//  387 
//  388   return ( FALSE );
??bindIsClusterIDinList_0:
        MOV     R1,#0x0
??bindIsClusterIDinList_4:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock29
//  389 }
//  390 
//  391 /*********************************************************************
//  392  * @fn      bindRemoveClusterIdFromList()
//  393  *
//  394  * @brief   Removes a ClusterID from a list of ClusterIDs.
//  395  *
//  396  * @param   enter - binding table entry
//  397  * @param   clusterId  - Cluster ID to look for
//  398  *
//  399  * @return  TRUE if there are at least 1 clusterID left, FALSE if none
//  400  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  401 byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
bindRemoveClusterIdFromList:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function bindRemoveClusterIdFromList
        CODE
//  402 {
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  403   byte x;
//  404   uint16 *listPtr;
//  405   byte numIds;
//  406 
//  407   if ( entry )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindRemoveClusterIdFromList_0
//  408   {
//  409     if ( entry->numClusterIds > 0 )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??bindRemoveClusterIdFromList_0
//  410     {
//  411       listPtr = entry->clusterIdList;
        MOV     A,R2
        ADD     A,#0x6
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
//  412       numIds = entry->numClusterIds;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  413 
//  414       // Copy the new list over
//  415       for ( x = 0; x < numIds; x++ )
        MOV     ?V0 + 0,#0x0
        SJMP    ??bindRemoveClusterIdFromList_1
//  416       {
//  417         if ( entry->clusterIdList[x] != clusterId )
//  418         {
//  419           *listPtr++ = entry->clusterIdList[x];
//  420         }
//  421         else
//  422         {
//  423           entry->numClusterIds--;
??bindRemoveClusterIdFromList_2:
        MOV     A,R2
        ADD     A,#0x5
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  424           if ( entry->numClusterIds == 0 )
        JZ      ??bindRemoveClusterIdFromList_0
//  425           {
//  426             break;
//  427           }
//  428         }
??bindRemoveClusterIdFromList_3:
        INC     ?V0 + 0
??bindRemoveClusterIdFromList_1:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,?V0 + 1
        JNC     ??bindRemoveClusterIdFromList_4
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     R6,A
        CLR     A
        RLC     A
        MOV     R7,A
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_55:
        XRL     A,R4
        JNZ     ??bindRemoveClusterIdFromList_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindRemoveClusterIdFromList_5:
        JZ      ??bindRemoveClusterIdFromList_2
        LCALL   ?Subroutine32 & 0xFFFF
//  429       }
//  430     }
//  431   }
??CrossCallReturnLabel_56:
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     A,R0
        ADD     A,#0x2
        INC     R0
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        SJMP    ??bindRemoveClusterIdFromList_3
??bindRemoveClusterIdFromList_4:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??bindRemoveClusterIdFromList_0
//  432 
//  433   if ( entry && (entry->numClusterIds > 0) )
//  434   {
//  435     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindRemoveClusterIdFromList_6
//  436   }
//  437   else
//  438   {
//  439     return ( FALSE );
??bindRemoveClusterIdFromList_0:
        MOV     R1,#0x0
//  440   }
??bindRemoveClusterIdFromList_6:
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock30
//  441 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_63:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33
//  442 
//  443 /*********************************************************************
//  444  * @fn      bindAddClusterIdToList()
//  445  *
//  446  * @brief   Adds a ClusterID to a list of ClusterIDs.
//  447  *
//  448  * @param   enter - binding table entry
//  449  * @param   clusterId  - Cluster ID to Add
//  450  *
//  451  * @return  TRUE if Added, FALSE if not
//  452  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  453 byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
bindAddClusterIdToList:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function bindAddClusterIdToList
        CODE
//  454 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  455   if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindAddClusterIdToList_0
        MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JNC     ??bindAddClusterIdToList_0
//  456   {
//  457     // Add the new one
//  458     entry->clusterIdList[entry->numClusterIds] = clusterId;
        MOV     A,R2
        ADD     A,#0x5
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R6,A
        CLR     A
        RLC     A
        MOV     R7,A
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  459     entry->numClusterIds++;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  460     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindAddClusterIdToList_1
//  461   }
//  462   return ( FALSE );
??bindAddClusterIdToList_0:
        MOV     R1,#0x0
        CFI EndBlock cfiBlock34
??bindAddClusterIdToList_1:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  463 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_56
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV     A,R2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39
//  464 
//  465 /*********************************************************************
//  466  * @fn      bindFindExisting
//  467  *
//  468  * @brief   Finds an existing src/epint to dst/epint bind record
//  469  *
//  470  * @param   srcAddr - Source address
//  471  * @param   srcEpInt - Source Endpoint/Interface
//  472  * @param   dstAddr - Destination address
//  473  * @param   dstEpInt - Destination Endpoint/Interface
//  474  *
//  475  * @return  pointer to existing entry or NULL
//  476  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  477 BindingEntry_t *bindFindExisting( byte srcEpInt,
bindFindExisting:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function bindFindExisting
        CODE
//  478                                   zAddrType_t *dstAddr, byte dstEpInt )
//  479 {
        FUNCALL bindFindExisting, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 1,R4
//  480   uint16 dstIdx;
//  481   uint16 x;
//  482 
//  483   // Find the records in the assoc list
//  484   if ( dstAddr->addrMode == AddrGroup )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindFindExisting_0
//  485   {
//  486     dstIdx = dstAddr->addr.shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        SJMP    ??bindFindExisting_1
//  487   }
//  488   else
//  489   {
//  490     dstIdx = bindingAddrMgsHelperFind( dstAddr );
??bindFindExisting_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL   ??bindingAddrMgsHelperFind?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
//  491   }
//  492 
//  493   if ( dstIdx == INVALID_NODE_ADDR )
??bindFindExisting_1:
        MOV     A,#-0x2
        XRL     A,R4
        JNZ     ??bindFindExisting_2
        MOV     A,#-0x1
        XRL     A,R5
??bindFindExisting_2:
        JNZ     ??bindFindExisting_3
//  494   {
//  495     return ( (BindingEntry_t *)NULL );
??bindFindExisting_4:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??CrossCallReturnLabel_45
//  496   }
//  497 
//  498   // Start at the beginning
//  499   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
??bindFindExisting_3:
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_24
//  500   {
//  501     if ( (BindingTable[x].srcEP == srcEpInt) )
//  502     {
//  503       if ( ((dstAddr->addrMode == AddrGroup)
//  504               && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
//  505               && (dstIdx == BindingTable[x].dstIdx))
//  506          || ((dstAddr->addrMode != AddrGroup)
//  507              && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
//  508              && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
??bindFindExisting_5:
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_48:
        XRL     A,#0x1
        JNZ     ??bindFindExisting_6
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_42:
        JNZ     ??bindFindExisting_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindFindExisting_7:
        JZ      ??bindFindExisting_8
??bindFindExisting_6:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_1:
        JNC     ??bindFindExisting_4
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0xe
        MUL     AB
        MOV     R2,A
        MOV     ?V0 + 2,B
        MOV     B,#0xe
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 2
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_47:
        XRL     A,?V0 + 0
        JNZ     ??bindFindExisting_6
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bindFindExisting_5
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_49:
        JNZ     ??bindFindExisting_6
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_43:
        JNZ     ??bindFindExisting_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindFindExisting_9:
        JNZ     ??bindFindExisting_6
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0xe
        MUL     AB
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 2
        MOV     R3,A
        MOV     A,#(BindingTable + 4) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((BindingTable + 4) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
        JNZ     ??bindFindExisting_6
//  509       {
//  510         return ( &BindingTable[x] );
??bindFindExisting_8:
        LCALL   ?Subroutine27 & 0xFFFF
//  511       }
//  512     }
//  513   }
??CrossCallReturnLabel_45:
        LJMP    ??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock40
//  514 
//  515   return ( (BindingEntry_t *)NULL );
//  516 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0xe
        MUL     AB
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 2
        MOV     R3,A
        MOV     A,#(BindingTable + 1) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((BindingTable + 1) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOV     R3,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_69:
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_44
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_45
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_17
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_18
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        LCALL   ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        RET
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0xe
        MUL     AB
        MOV     R2,A
        MOV     B,#0xe
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 2
        MOV     R3,A
        MOV     A,#(BindingTable + 2) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((BindingTable + 2) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R4
        RET
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond58 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65
//  517 
//  518 /*********************************************************************
//  519  * @fn       bindRemoveDev()
//  520  *
//  521  * @brief
//  522  *
//  523  *   Remove all bind(s) entries associated to a device address (destination).
//  524  *   Updates binding table.
//  525  *
//  526  * @param   Addr - address of device to be removed from Binding Table
//  527  *
//  528  * @return  none
//  529  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  530 void bindRemoveDev( zAddrType_t *Addr )
bindRemoveDev:
        CFI Block cfiBlock66 Using cfiCommon0
        CFI Function bindRemoveDev
        CODE
//  531 {
        FUNCALL bindRemoveDev, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveDev, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  532   uint16 idx;
//  533   uint16 x;
//  534 
//  535   if ( Addr->addrMode == AddrGroup )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindRemoveDev_0
//  536   {
//  537     idx = Addr->addr.shortAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        SJMP    ??bindRemoveDev_1
//  538   }
//  539   else
//  540   {
//  541     idx = bindingAddrMgsHelperFind( Addr );
??bindRemoveDev_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL   ??bindingAddrMgsHelperFind?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  542   }
//  543 
//  544   if ( idx == INVALID_NODE_ADDR )
??bindRemoveDev_1:
        MOV     A,#-0x2
        XRL     A,?V0 + 2
        JNZ     ??bindRemoveDev_2
        MOV     A,#-0x1
        XRL     A,?V0 + 3
??bindRemoveDev_2:
        JZ      ??bindRemoveDev_3
//  545   {
//  546     return;
//  547   }
//  548 
//  549   // Removes all the entries that match the destination Address/Index
//  550   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??CrossCallReturnLabel_39
//  551   {
//  552     if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
//  553                                          && (BindingTable[x].dstIdx == idx) ) ||
//  554          ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
//  555                                          && (BindingTable[x].dstIdx == idx) ) )
??bindRemoveDev_4:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_82:
        JNZ     ??CrossCallReturnLabel_17
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_15:
        JNZ     ??bindRemoveDev_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 3
??bindRemoveDev_5:
        JNZ     ??CrossCallReturnLabel_17
//  556     {
//  557       bindRemoveEntry( &BindingTable[x] );
??bindRemoveDev_6:
        ; Setup parameters for call to function bindRemoveEntry
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        LCALL   ?Subroutine17 & 0xFFFF
//  558     }
??CrossCallReturnLabel_17:
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_4:
        JNC     ??bindRemoveDev_3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindRemoveDev_4
        LCALL   ?Subroutine11 & 0xFFFF
//  559   }
??CrossCallReturnLabel_83:
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_17
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_16:
        JNZ     ??bindRemoveDev_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 3
??bindRemoveDev_7:
        JZ      ??bindRemoveDev_6
        SJMP    ??CrossCallReturnLabel_17
        CFI EndBlock cfiBlock66
??bindRemoveDev_3:
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
//  560 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock67 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_65:
        XRL     A,?V0 + 2
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_15
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_16
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        MOV     A,#(BindingTable + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_82
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_81
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        MOV     A,#(BindingTable + 1) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((BindingTable + 1) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81
//  561 
//  562 /*********************************************************************
//  563  * @fn       bindRemoveSrcDev()
//  564  *
//  565  * @brief
//  566  *
//  567  *   Remove binds(s) associated to device address (source).
//  568  *   Updates binding table.
//  569  *
//  570  * @param   srcAddr - address of device
//  571  * @param   ep - endpoint to remove, 0xFF is all endpoints
//  572  *
//  573  * @return  none
//  574  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  575 void bindRemoveSrcDev( uint8 ep )
bindRemoveSrcDev:
        CFI Block cfiBlock82 Using cfiCommon0
        CFI Function bindRemoveSrcDev
        CODE
//  576 {
        FUNCALL bindRemoveSrcDev, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     ?V0 + 0,R1
//  577   uint16 x;
//  578 
//  579   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??CrossCallReturnLabel_40
//  580   {
//  581     if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
??bindRemoveSrcDev_0:
        MOV     A,#-0x1
        XRL     A,?V0 + 0
        JZ      ??bindRemoveSrcDev_1
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_86:
        XRL     A,?V0 + 0
        JNZ     ??CrossCallReturnLabel_18
//  582     {
//  583       bindRemoveEntry( &BindingTable[x] );
??bindRemoveSrcDev_1:
        ; Setup parameters for call to function bindRemoveEntry
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        LCALL   ?Subroutine17 & 0xFFFF
//  584     }
//  585   }
??CrossCallReturnLabel_18:
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        JC      ??bindRemoveSrcDev_0
//  586 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond83 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker86 Using cfiCommon1
        CFI (cfiPicker86) NoFunction
        CFI (cfiPicker86) Picker
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        RET
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiPicker86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond87 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker89 Using cfiCommon1
        CFI (cfiPicker89) NoFunction
        CFI (cfiPicker89) Picker
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL   ??bindRemoveEntry?relay
        RET
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiPicker89

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond90 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_86
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker92 Using cfiCommon1
        CFI (cfiPicker92) NoFunction
        CFI (cfiPicker92) Picker
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0xe
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiPicker92
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine45_0:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_85
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker96 Using cfiCommon1
        CFI (cfiPicker96) NoFunction
        CFI (cfiPicker96) Picker
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiPicker96
//  587 
//  588 /*********************************************************************
//  589  * @fn          bindNumBoundTo
//  590  *
//  591  * @brief       Calculate the number items this device is bound to.
//  592  *              When srcMode is set to TRUE, discard what value devAddr
//  593  *              has, it returns number count bound to the local dev.
//  594  *
//  595  * @param       devAddr - device Address
//  596  * @param       devEP - endpoint
//  597  * @param       srcMode - TRUE - assume devHandle is a source address
//  598  *                        FALSE - destination address
//  599  *
//  600  * @return      status
//  601  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  602 byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
bindNumBoundTo:
        CFI Block cfiBlock97 Using cfiCommon0
        CFI Function bindNumBoundTo
        CODE
//  603 {
        FUNCALL bindNumBoundTo, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 1,R1
        MOV     ?V0 + 2,R4
//  604   BindingEntry_t *pBind;
//  605   uint16 idx;
//  606   byte   num;
//  607   uint16 x;
//  608 
//  609   // Init
//  610   num = 0;
        MOV     ?V0 + 0,#0x0
//  611 
//  612   if ( devAddr->addrMode == AddrGroup )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindNumBoundTo_0
//  613   {
//  614     idx = devAddr->addr.shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        SJMP    ??bindNumBoundTo_1
//  615   }
//  616   else
//  617   {
//  618     idx = bindingAddrMgsHelperFind( devAddr );
??bindNumBoundTo_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL   ??bindingAddrMgsHelperFind?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
//  619   }
//  620 
//  621   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
??bindNumBoundTo_1:
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_25
//  622   {
//  623     pBind = &BindingTable[x];
//  624     if ( srcMode )
//  625     {
//  626       if ( pBind->srcEP == devEpInt )
//  627       {
//  628         num++;
//  629       }
//  630     }
//  631     else
//  632     {
//  633       if ( ((devAddr->addrMode == AddrGroup)
//  634               && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
//  635           || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
//  636                                 && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
??bindNumBoundTo_2:
        MOVX    A,@DPTR
        JNZ     ??bindNumBoundTo_3
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindNumBoundTo_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindNumBoundTo_4:
        JNZ     ??bindNumBoundTo_3
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
        JZ      ??bindNumBoundTo_5
??bindNumBoundTo_3:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_2:
        JNC     ??bindNumBoundTo_6
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0xe
        MUL     AB
        MOV     R2,A
        MOV     ?V0 + 3,B
        MOV     B,#0xe
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 3
        MOV     R3,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R3
        MOV     R3,A
        MOV     A,?V0 + 2
        JZ      ??bindNumBoundTo_7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
        JNZ     ??bindNumBoundTo_3
??bindNumBoundTo_5:
        INC     ?V0 + 0
        SJMP    ??bindNumBoundTo_3
??bindNumBoundTo_7:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        JNZ     ??bindNumBoundTo_2
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindNumBoundTo_3
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindNumBoundTo_8
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindNumBoundTo_8:
        JZ      ??bindNumBoundTo_5
        SJMP    ??bindNumBoundTo_3
//  637       {
//  638         num++;
//  639       }
//  640     }
//  641   }
//  642 
//  643   return num;
??bindNumBoundTo_6:
        MOV     R1,?V0 + 0
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock97
//  644 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond98 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker102 Using cfiCommon1
        CFI (cfiPicker102) NoFunction
        CFI (cfiPicker102) Picker
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R3,A
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        RET
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiPicker102
//  645 
//  646 /*********************************************************************
//  647  * @fn          bindNumReflections
//  648  *
//  649  * @brief       Counts the number of reflections needed for a
//  650  *              endpoint and cluster ID combo.
//  651  *
//  652  * @param       ep - source endpoint
//  653  * @param       clusterID - matching clusterID
//  654  *
//  655  * @return      number of reflections needed.
//  656  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  657 uint16 bindNumReflections( uint8 ep, uint16 clusterID )
bindNumReflections:
        CFI Block cfiBlock103 Using cfiCommon0
        CFI Function bindNumReflections
        CODE
//  658 {
        FUNCALL bindNumReflections, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  659   uint16 x;
//  660   BindingEntry_t *pBind;
//  661   uint16 cnt = 0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  662   uint8 bindEP;
//  663 
//  664   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??CrossCallReturnLabel_41
//  665   {
//  666     pBind = &BindingTable[x];
??bindNumReflections_0:
        LCALL   ?Subroutine10 & 0xFFFF
//  667     bindEP = pBind->srcEP;
//  668 
//  669     if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
??CrossCallReturnLabel_84:
        XRL     A,?V0 + 4
        JNZ     ??CrossCallReturnLabel_33
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??bindIsClusterIDinList?relay
        MOV     A,R1
        JZ      ??CrossCallReturnLabel_33
//  670     {
//  671       cnt++;
        LCALL   ?Subroutine22 & 0xFFFF
//  672     }
//  673   }
??CrossCallReturnLabel_33:
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        JC      ??bindNumReflections_0
//  674 
//  675   return ( cnt );
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock103
//  676 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker107 Using cfiCommon1
        CFI (cfiPicker107) NoFunction
        CFI (cfiPicker107) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiPicker107

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond108 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker112 Using cfiCommon1
        CFI (cfiPicker112) NoFunction
        CFI (cfiPicker112) Picker
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        RET
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiPicker112
//  677 
//  678 /*********************************************************************
//  679  * @fn          bindFind
//  680  *
//  681  * @brief       Finds the binding entry for the source address, endpoint
//  682  *              and cluster ID passed in as a parameter.
//  683  *
//  684  * @param       ep - source endpoint
//  685  * @param       clusterID - matching clusterID
//  686  * @param       skip - number of matches to skip before returning
//  687  *
//  688  * @return      pointer to the binding table entry, NULL if not found
//  689  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  690 BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
bindFind:
        CFI Block cfiBlock113 Using cfiCommon0
        CFI Function bindFind
        CODE
//  691 {
        FUNCALL bindFind, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 5,R1
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 6,R4
//  692   BindingEntry_t *pBind;
//  693   byte skipped = 0;
        MOV     ?V0 + 4,#0x0
//  694   uint16 x;
//  695 
//  696   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        SJMP    ??CrossCallReturnLabel_34
//  697   {
//  698     pBind = &BindingTable[x];
//  699 
//  700     if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
//  701     {
//  702       if ( skipped < skipping )
//  703       {
//  704         skipped++;
??bindFind_0:
        INC     ?V0 + 4
//  705       }
??bindFind_1:
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_76:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R0
        MOV     A,?V0 + 1
        SUBB    A,R1
        JNC     ??bindFind_2
        MOV     A,?V0 + 0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0xe
        MOV     A,?V0 + 1
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV     R6,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,?V0 + 5
        JNZ     ??bindFind_1
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??bindIsClusterIDinList?relay
        MOV     A,R1
        JZ      ??bindFind_1
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,?V0 + 6
        JC      ??bindFind_0
//  706       else
//  707       {
//  708         return ( pBind );
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??bindFind_3
//  709       }
//  710     }
//  711   }
//  712 
//  713   return ( (BindingEntry_t *)NULL );
??bindFind_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock113
??bindFind_3:
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
//  714 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock114 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock114
//  715 
//  716 /*********************************************************************
//  717  * @fn          BindInitNV
//  718  *
//  719  * @brief       Initialize the Binding NV Item
//  720  *
//  721  * @param       none
//  722  *
//  723  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  724  *              exist in NV, NV_OPER_FAILED if failure.
//  725  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  726 byte BindInitNV( void )
BindInitNV:
        CFI Block cfiBlock115 Using cfiCommon0
        CFI Function BindInitNV
        CODE
//  727 {
        FUNCALL BindInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindInitNV, BindSetDefaultNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  728   byte ret;
//  729 
//  730   // Initialize the device list
//  731   ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
//  732                   (uint16)(gBIND_REC_SIZE + NV_BIND_ITEM_SIZE), NULL );
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     A,R0
        MOV     B,?V0 + 0
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,?V0 + 0
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPH,#(gBIND_REC_SIZE >> 8) & 0xff
        MOV     DPL,#gBIND_REC_SIZE & 0xff
        CLR     A
        MOVC    A,@A+DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        CLR     A
        MOVC    A,@A+DPTR
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R6,A
//  733 
//  734   if ( ret != ZSUCCESS )
        JZ      ??BindInitNV_0
//  735   {
//  736     BindSetDefaultNV();
        ; Setup parameters for call to function BindSetDefaultNV
        LCALL   ??BindSetDefaultNV?relay
//  737   }
//  738 
//  739   return ( ret );
??BindInitNV_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine41_0 & 0xFFFF
        CFI EndBlock cfiBlock115
//  740 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker119 Using cfiCommon1
        CFI (cfiPicker119) NoFunction
        CFI (cfiPicker119) Picker
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiPicker119
//  741 
//  742 /*********************************************************************
//  743  * @fn          BindSetDefaultNV
//  744  *
//  745  * @brief       Write the defaults to NV
//  746  *
//  747  * @param       none
//  748  *
//  749  * @return      none
//  750  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  751 void BindSetDefaultNV( void )
BindSetDefaultNV:
        CFI Block cfiBlock120 Using cfiCommon0
        CFI Function BindSetDefaultNV
        CODE
//  752 {
        FUNCALL BindSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  753   nvBindingHdr_t hdr;
//  754 
//  755   // Initialize the header
//  756   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine39 & 0xFFFF
//  757 
//  758   // Save off the header
//  759   osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
??CrossCallReturnLabel_70:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  760 }
        MOV     A,#0x2
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock120
//  761 
//  762 /*********************************************************************
//  763  * @fn          BindRestoreFromNV
//  764  *
//  765  * @brief       Restore the binding table from NV
//  766  *
//  767  * @param       none
//  768  *
//  769  * @return      Number of entries restored
//  770  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  771 uint16 BindRestoreFromNV( void )
BindRestoreFromNV:
        CFI Block cfiBlock121 Using cfiCommon0
        CFI Function BindRestoreFromNV
        CODE
//  772 {
        FUNCALL BindRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  773   nvBindingHdr_t hdr;
//  774   uint16 numAdded = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  775 
//  776   if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,R6
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??BindRestoreFromNV_0
//  777   {
//  778     if (hdr.numRecs > 0)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??BindRestoreFromNV_0
//  779     {
//  780       // Read the whole table at once
//  781       if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
//  782                          (uint16)(sizeof(nvBindingHdr_t)),
//  783                          (NV_BIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES), BindingTable ) == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,#BindingTable & 0xff
        MOV     ?V0 + 1,#(BindingTable >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     A,?V0 + 2
        MOV     B,?V0 + 0
        MUL     AB
        XCH     A,?V0 + 2
        MOV     R0,B
        MOV     B,?V0 + 1
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,?V0 + 0
        MOV     A,?V0 + 3
        MUL     AB
        ADD     A,R0
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??BindRestoreFromNV_0
//  784       {
//  785         numAdded = gNWK_MAX_BINDING_ENTRIES;
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        PUSH    A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     DPH,A
        POP     DPL
        MOV     R6,DPL
        MOV     R7,DPH
//  786       }
//  787     }
//  788   }
//  789   return ( numAdded );
??BindRestoreFromNV_0:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,#0x2
        CFI EndBlock cfiBlock121
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  790 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock122 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock122
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine46_0:
        CFI Block cfiBlock123 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock123
//  791 
//  792 /*********************************************************************
//  793  * @fn          BindWriteNV
//  794  *
//  795  * @brief       Save the Binding Table in NV
//  796  *
//  797  * @param       none
//  798  *
//  799  * @return      none
//  800  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  801 void BindWriteNV( void )
BindWriteNV:
        CFI Block cfiBlock124 Using cfiCommon0
        CFI Function BindWriteNV
        CODE
//  802 {
        FUNCALL BindWriteNV, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
//  803   BindingEntry_t *pBind;
//  804   BindingEntry_t bind;
//  805   nvBindingHdr_t hdr;
//  806   uint16 x;
//  807 
//  808   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  809 
//  810   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R6,A
        LJMP    ??BindWriteNV_0 & 0xFFFF
//  811   {
//  812     pBind = &BindingTable[x];
??BindWriteNV_1:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV     ?V0 + 0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 1,A
//  813 
//  814     osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 34)
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
//  815 
//  816     // Save the record to NV
//  817     osal_nv_write( ZCD_NV_BINDING_TABLE,
//  818                    (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
//  819                    NV_BIND_REC_SIZE, &bind );
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     A,R0
        MOV     B,?V0 + 2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V0 + 3
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,?V0 + 2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
//  820 
//  821     if ( pBind->srcEP != NV_BIND_EMPTY )
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        CPL     A
        JZ      ??BindWriteNV_2
//  822     {
//  823       hdr.numRecs++;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  824     }
//  825   }
??BindWriteNV_2:
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
??BindWriteNV_0:
        MOV     R7,A
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        JNC     $+5
        LJMP    ??BindWriteNV_1 & 0xFFFF
//  826 
//  827   // Save off the header
//  828   osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
//  829 }
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock124

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond125 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_89
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker127 Using cfiCommon1
        CFI (cfiPicker127) NoFunction
        CFI (cfiPicker127) Picker
        MOV     A,R0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiPicker127
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine47_0:
        CFI Block cfiCond128 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_44
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_45
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_17
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_18
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker134 Using cfiCommon1
        CFI (cfiPicker134) NoFunction
        CFI (cfiPicker134) Picker
        MOV     B,#0xe
        MOV     A,R1
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiPicker134
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine48_0:
        CFI Block cfiCond135 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_44
        CFI (cfiCond136) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond136) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond136) CFA_SP SP+-5
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_45
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_17
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_18
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker142 Using cfiCommon1
        CFI (cfiPicker142) NoFunction
        CFI (cfiPicker142) Picker
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        RET
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiPicker142

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond143 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker145 Using cfiCommon1
        CFI (cfiPicker145) NoFunction
        CFI (cfiPicker145) Picker
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiPicker145
//  830 
//  831 /*********************************************************************
//  832  * @fn          bindUpdateAddr
//  833  *
//  834  * @brief       Update the network address in the binding table.
//  835  *
//  836  * @param       oldAddr - old network address
//  837  * @param       newAddr - new network address
//  838  *
//  839  * @return      none
//  840  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  841 void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
bindUpdateAddr:
        CFI Block cfiBlock146 Using cfiCommon0
        CFI Function bindUpdateAddr
        CODE
//  842 {
        FUNCALL bindUpdateAddr, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindUpdateAddr, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  843   uint16 oldIdx;
//  844   uint16 newIdx;
//  845   zAddrType_t addr;
//  846   uint16 x;
//  847   BindingEntry_t *pBind;
//  848 
//  849   addr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine39 & 0xFFFF
//  850   addr.addr.shortAddr = oldAddr;
??CrossCallReturnLabel_71:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine24 & 0xFFFF
//  851   oldIdx = bindingAddrMgsHelperFind( &addr );
??CrossCallReturnLabel_37:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  852   addr.addr.shortAddr = newAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine24 & 0xFFFF
//  853   newIdx = bindingAddrMgsHelperFind( &addr );
??CrossCallReturnLabel_38:
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  854 
//  855   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_26
//  856   {
//  857     pBind = &BindingTable[x];
??bindUpdateAddr_0:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0xe
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0xe
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R3
        MOV     R3,A
//  858 
//  859     if ( pBind->dstIdx == oldIdx )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JNZ     ??bindUpdateAddr_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
??bindUpdateAddr_1:
        JNZ     ??bindUpdateAddr_2
//  860     {
//  861       pBind->dstIdx = newIdx;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  862     }
//  863   }
??bindUpdateAddr_2:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        JC      ??bindUpdateAddr_0
//  864 }
        MOV     A,#0x9
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock146

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond147 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_70
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_37
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_38
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_30
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_31
        CFI (cfiCond152) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond152) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond152) CFA_SP SP+-5
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_28
        CFI (cfiCond153) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond153) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond153) CFA_SP SP+-5
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_29
        CFI (cfiCond154) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond154) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond154) CFA_SP SP+-5
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker155 Using cfiCommon1
        CFI (cfiPicker155) NoFunction
        CFI (cfiPicker155) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiPicker155

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond156 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker158 Using cfiCommon1
        CFI (cfiPicker158) NoFunction
        CFI (cfiPicker158) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL   ??bindingAddrMgsHelperFind?relay
        RET
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiPicker158
//  865 
//  866 /*********************************************************************
//  867  * @fn      bindingAddrMgsHelperFind
//  868  *
//  869  * @brief   Turns an zAddrType_t to an Addr Manager index
//  870  *
//  871  * @param   addr - zAddrType_t
//  872  *
//  873  * @return  INVALID_NODE_ADDR if not found, otherwise an index
//  874  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  875 uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
bindingAddrMgsHelperFind:
        CFI Block cfiBlock159 Using cfiCommon0
        CFI Function bindingAddrMgsHelperFind
        CODE
//  876 {
        FUNCALL bindingAddrMgsHelperFind, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperFind, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperFind, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  877   AddrMgrEntry_t entry;
//  878 
//  879   // Resolve addresses with the address manager
//  880   entry.user = ADDRMGR_USER_BINDING;
        LCALL   ?Subroutine23 & 0xFFFF
//  881   if ( addr->addrMode == Addr16Bit )
??CrossCallReturnLabel_35:
        JNZ     ??bindingAddrMgsHelperFind_0
//  882   {
//  883     entry.nwkAddr = addr->addr.shortAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine30 & 0xFFFF
//  884     AddrMgrEntryLookupNwk( &entry );
//  885   }
??CrossCallReturnLabel_50:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_28:
        SJMP    ??CrossCallReturnLabel_57
//  886   else
//  887   {
//  888     AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
??bindingAddrMgsHelperFind_0:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine33 & 0xFFFF
//  889     AddrMgrEntryLookupExt( &entry );
//  890   }
//  891 
//  892   return ( entry.index );
??CrossCallReturnLabel_57:
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock159
//  893 }
//  894 
//  895 /*********************************************************************
//  896  * @fn      bindingAddrMgsHelperConvert
//  897  *
//  898  * @brief   Convert an index into an zAddrType_t
//  899  *
//  900  * @param   idx -
//  901  * @param   addr - zAddrType_t
//  902  *
//  903  * @return  TRUE if found, FALSE if not
//  904  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  905 uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
bindingAddrMgsHelperConvert:
        CFI Block cfiBlock160 Using cfiCommon0
        CFI Function bindingAddrMgsHelperConvert
        CODE
//  906 {
        FUNCALL bindingAddrMgsHelperConvert, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperConvert, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  907   AddrMgrEntry_t entry;
//  908   uint8 stat;
//  909 
//  910   // Resolve addresses with the address manager
//  911   entry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  912   entry.index = idx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
//  913   stat = AddrMgrEntryGet( &entry );
??CrossCallReturnLabel_30:
        MOV     A,R1
        MOV     ?V0 + 0,A
//  914   if ( stat )
        JZ      ??bindingAddrMgsHelperConvert_0
//  915   {
//  916     addr->addrMode = Addr64Bit;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
//  917     osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??sAddrExtCpy?relay
//  918   }
//  919 
//  920   return ( stat );
??bindingAddrMgsHelperConvert_0:
        MOV     R1,?V0 + 0
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock160
//  921 }
//  922 
//  923 /*********************************************************************
//  924  * @fn      bindingAddrMgsHelperConvertShort
//  925  *
//  926  * @brief   Convert an index into a short address
//  927  *
//  928  * @param   idx -
//  929  *
//  930  * @return  INVALID_NODE_ADDR if not available, otherwise the short address
//  931  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  932 uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
bindingAddrMgsHelperConvertShort:
        CFI Block cfiBlock161 Using cfiCommon0
        CFI Function bindingAddrMgsHelperConvertShort
        CODE
//  933 {
        FUNCALL bindingAddrMgsHelperConvertShort, AddrMgrEntryGet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  934   AddrMgrEntry_t entry;
//  935 
//  936   // Resolve addresses with the address manager
//  937   entry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  938   entry.index = idx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
//  939   AddrMgrEntryGet( &entry );
//  940 
//  941   return ( entry.nwkAddr );
??CrossCallReturnLabel_31:
        MOV     A,#0x1
        SJMP    ??Subroutine49_0
        CFI EndBlock cfiBlock161
//  942 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond162 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond163) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond163) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond163) CFA_SP SP+-5
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker164 Using cfiCommon1
        CFI (cfiPicker164) NoFunction
        CFI (cfiPicker164) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ??AddrMgrEntryGet?relay
        RET
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiPicker164

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond165 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_38
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_30
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_31
        CFI (cfiCond168) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond168) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond168) CFA_SP SP+-5
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_28
        CFI (cfiCond169) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond169) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond169) CFA_SP SP+-5
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_29
        CFI (cfiCond170) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond170) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond170) CFA_SP SP+-5
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker171 Using cfiCommon1
        CFI (cfiPicker171) NoFunction
        CFI (cfiPicker171) Picker
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiPicker171

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock172 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 13)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0xb
        CFI EndBlock cfiBlock172
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine49_0:
        CFI Block cfiBlock173 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 13)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock173
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine50_0:
        CFI Block cfiBlock174 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock174
//  943 
//  944 /*********************************************************************
//  945  * @fn      bindAddrMgrLocalLoad
//  946  *
//  947  * @brief   Load local(self and parent) address information into
//  948  *          Address Manager
//  949  *
//  950  * @param   none
//  951  *
//  952  * @return  none
//  953  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  954 void bindAddrMgrLocalLoad( void )
bindAddrMgrLocalLoad:
        CFI Block cfiBlock175 Using cfiCommon0
        CFI Function bindAddrMgrLocalLoad
        CODE
//  955 {
        FUNCALL bindAddrMgrLocalLoad, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, NLME_GetCoordExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
//  956   AddrMgrEntry_t entry;
//  957   uint16         parent;
//  958 
//  959   // add "local"(self and parent) address informtion into the Address
//  960   // Manager
//  961   if ( bindAddrMgrLocalLoaded == FALSE )
        MOV     DPTR,#bindAddrMgrLocalLoaded
        MOVX    A,@DPTR
        JNZ     ??bindAddrMgrLocalLoad_0
//  962   {
//  963     // add the device's address information
//  964     entry.user    = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  965     entry.nwkAddr = _NIB.nwkDevAddress;
        MOV     DPTR,#_NIB + 20
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  966     AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
//  967     AddrMgrEntryUpdate( &entry );
??CrossCallReturnLabel_66:
        LCALL   ??AddrMgrEntryUpdate?relay
//  968 
//  969     // make sure parent address is valid
//  970     parent = NLME_GetCoordShortAddr();
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  971     if ( ( parent != entry.nwkAddr     ) &&
//  972          ( parent != INVALID_NODE_ADDR )    )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??bindAddrMgrLocalLoad_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??bindAddrMgrLocalLoad_1:
        JZ      ??bindAddrMgrLocalLoad_2
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??bindAddrMgrLocalLoad_3
        MOV     A,#-0x1
        XRL     A,R1
??bindAddrMgrLocalLoad_3:
        JZ      ??bindAddrMgrLocalLoad_2
//  973     {
//  974       // add the parent's address information
//  975       entry.nwkAddr = parent;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  976       NLME_GetCoordExtAddr( entry.extAddr );
        ; Setup parameters for call to function NLME_GetCoordExtAddr
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??NLME_GetCoordExtAddr?relay
//  977       AddrMgrEntryUpdate( &entry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryUpdate?relay
//  978     }
//  979 
//  980     bindAddrMgrLocalLoaded = TRUE;
??bindAddrMgrLocalLoad_2:
        MOV     DPTR,#bindAddrMgrLocalLoaded
        MOV     A,#0x1
        MOVX    @DPTR,A
//  981   }
//  982 }
??bindAddrMgrLocalLoad_0:
        MOV     A,#0xd
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock175

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond176 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond178) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond178) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond178) CFA_SP SP+-5
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker179 Using cfiCommon1
        CFI (cfiPicker179) NoFunction
        CFI (cfiPicker179) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiPicker179
//  983 
//  984 /*********************************************************************
//  985  * @fn      bindAddrIndexGet
//  986  *
//  987  * @brief   Get bind address index.
//  988  *
//  989  * @param   addr - <zAddrType_t>
//  990  *
//  991  * @return  (uint16) address index
//  992  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  993 uint16 bindAddrIndexGet( zAddrType_t* addr )
bindAddrIndexGet:
        CFI Block cfiBlock180 Using cfiCommon0
        CFI Function bindAddrIndexGet
        CODE
//  994 {
        FUNCALL bindAddrIndexGet, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  995   AddrMgrEntry_t entry;
//  996   uint8          update;
//  997 
//  998   update = FALSE;
//  999 
// 1000   // sync binding addresses with the address manager
// 1001   entry.user = ADDRMGR_USER_BINDING;
        LCALL   ?Subroutine23 & 0xFFFF
// 1002 
// 1003   if ( addr->addrMode == Addr16Bit )
??CrossCallReturnLabel_36:
        MOV     DPL,R2
        MOV     DPH,R3
        JNZ     ??bindAddrIndexGet_0
// 1004   {
// 1005     entry.nwkAddr = addr->addr.shortAddr;
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
// 1006 
// 1007     if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
??CrossCallReturnLabel_29:
        MOV     A,R1
        JNZ     ??bindAddrIndexGet_1
// 1008     {
// 1009       update = TRUE;
// 1010     }
// 1011   }
// 1012   else if ( addr->addrMode == Addr64Bit )
// 1013   {
// 1014     AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
// 1015 
// 1016     if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
// 1017     {
// 1018       update = TRUE;
// 1019     }
// 1020   }
// 1021   else if ( addr->addrMode == AddrGroup )
// 1022   {
// 1023     entry.index = addr->addr.shortAddr;
// 1024   }
// 1025   else
// 1026   {
// 1027     entry.index = INVALID_NODE_ADDR;
// 1028   }
// 1029 
// 1030   if ( update )
// 1031   {
// 1032     AddrMgrEntryUpdate( &entry );
??bindAddrIndexGet_2:
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryUpdate?relay
        SJMP    ??bindAddrIndexGet_1
// 1033   }
??bindAddrIndexGet_0:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??bindAddrIndexGet_3
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     A,R1
        JNZ     ??bindAddrIndexGet_1
        SJMP    ??bindAddrIndexGet_2
??bindAddrIndexGet_3:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindAddrIndexGet_4
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??bindAddrIndexGet_5
??bindAddrIndexGet_4:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
??bindAddrIndexGet_5:
        MOVX    @DPTR,A
// 1034 
// 1035   return entry.index;
??bindAddrIndexGet_1:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock180
// 1036 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond181 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond182) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond182) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond182) CFA_SP SP+-5
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker183 Using cfiCommon1
        CFI (cfiPicker183) NoFunction
        CFI (cfiPicker183) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL   ??AddrMgrEntryLookupExt?relay
        RET
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiPicker183

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond184 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_57
        CFI (cfiCond185) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond185) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond185) CFA_SP SP+-5
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_58
        CFI (cfiCond186) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond186) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond186) CFA_SP SP+-5
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker187 Using cfiCommon1
        CFI (cfiPicker187) NoFunction
        CFI (cfiPicker187) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiPicker187

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond188 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond189) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond189) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond189) CFA_SP SP+-5
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker190 Using cfiCommon1
        CFI (cfiPicker190) NoFunction
        CFI (cfiPicker190) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        RET
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiPicker190

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond191 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond192) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond192) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond192) CFA_SP SP+-5
        CFI (cfiCond192) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker193 Using cfiCommon1
        CFI (cfiPicker193) NoFunction
        CFI (cfiPicker193) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL   ??AddrMgrEntryLookupNwk?relay
        RET
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiPicker193
// 1037 
// 1038 /*********************************************************************
// 1039  * @fn      GetBindingTableEntry
// 1040  *
// 1041  * @brief   Get a pointer to the Nth valid binding table entry.
// 1042  *
// 1043  * @param   Nth valid entry being requested.
// 1044  *
// 1045  * @return  The Nth valid binding table entry.
// 1046  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1047 BindingEntry_t *GetBindingTableEntry( uint16 Nth )
GetBindingTableEntry:
        CFI Block cfiBlock194 Using cfiCommon0
        CFI Function GetBindingTableEntry
        CODE
// 1048 {
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
// 1049   BindingEntry_t *rtrn = NULL;
        MOV     R4,#0x0
        MOV     R5,#0x0
// 1050 
// 1051 #if defined ( REFLECTOR )
// 1052   uint16 idx, cnt = 0;
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R4
// 1053 
// 1054   for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_27
??GetBindingTableEntry_0:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_14:
        JNC     ??GetBindingTableEntry_1
// 1055   {
// 1056     if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_54:
        JZ      ??GetBindingTableEntry_0
// 1057     {
// 1058       if ( cnt++ == Nth )
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        MOV     A,R6
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,R2
        XRL     A,R6
        JNZ     ??GetBindingTableEntry_2
        MOV     A,R3
        XRL     A,R7
??GetBindingTableEntry_2:
        JNZ     ??GetBindingTableEntry_0
// 1059       {
// 1060         rtrn = BindingTable+idx;
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV     R4,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R5,A
// 1061         break;
// 1062       }
// 1063     }
// 1064   }
// 1065 #else
// 1066   (void)Nth;
// 1067 #endif
// 1068 
// 1069   return rtrn;
??GetBindingTableEntry_1:
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock194
// 1070 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond195 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond196 Using cfiCommon0
        CFI (cfiCond196) NoFunction
        CFI (cfiCond196) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond196) CFA_SP SP+0
        CFI (cfiCond196) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker197 Using cfiCommon1
        CFI (cfiPicker197) NoFunction
        CFI (cfiPicker197) Picker
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R6
        MOV     B,#0xe
        MUL     AB
        MOV     R6,A
        MOV     ?V0 + 2,B
        MOV     B,#0xe
        MOV     A,R7
        MUL     AB
        ADD     A,?V0 + 2
        MOV     R7,A
        MOV     A,#BindingTable & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        CPL     A
        RET
        CFI EndBlock cfiCond195
        CFI EndBlock cfiCond196
        CFI EndBlock cfiPicker197

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond198 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond199 Using cfiCommon0
        CFI (cfiCond199) NoFunction
        CFI (cfiCond199) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond199) CFA_SP SP+0
        CFI (cfiCond199) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker200 Using cfiCommon1
        CFI (cfiPicker200) NoFunction
        CFI (cfiPicker200) Picker
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R6,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R7,A
        CLR     C
        MOV     A,R0
        SUBB    A,R6
        MOV     A,R1
        SUBB    A,R7
        RET
        CFI EndBlock cfiCond198
        CFI EndBlock cfiCond199
        CFI EndBlock cfiPicker200

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??InitBindingTable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    InitBindingTable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindFindEmpty?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindFindEmpty

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindNumOfEntries?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindNumOfEntries

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindCapacity?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindCapacity

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindAddEntry?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindRemoveEntry?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindRemoveEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindIsClusterIDinList?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindIsClusterIDinList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindRemoveClusterIdFromList?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindRemoveClusterIdFromList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindAddClusterIdToList?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindAddClusterIdToList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindFindExisting?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindFindExisting

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindRemoveDev?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindRemoveDev

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindRemoveSrcDev?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindRemoveSrcDev

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindNumBoundTo?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindNumBoundTo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindNumReflections?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindNumReflections

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindFind?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindFind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BindInitNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BindInitNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BindSetDefaultNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BindSetDefaultNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BindRestoreFromNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BindRestoreFromNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BindWriteNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BindWriteNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindUpdateAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindUpdateAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindingAddrMgsHelperFind?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindingAddrMgsHelperFind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindingAddrMgsHelperConvert?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindingAddrMgsHelperConvert

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindingAddrMgsHelperConvertShort?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindingAddrMgsHelperConvertShort

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindAddrMgrLocalLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindAddrMgrLocalLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindAddrIndexGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bindAddrIndexGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetBindingTableEntry?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetBindingTableEntry

        END
// 1071 
// 1072 /*********************************************************************
// 1073 *********************************************************************/
// 
// 3 451 bytes in segment BANKED_CODE
//   156 bytes in segment BANK_RELAYS
//    15 bytes in segment XDATA_Z
// 
// 3 607 bytes of CODE  memory
//    15 bytes of XDATA memory
//
//Errors: none
//Warnings: none
