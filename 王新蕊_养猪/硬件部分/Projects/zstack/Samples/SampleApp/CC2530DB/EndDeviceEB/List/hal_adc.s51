///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        15/Dec/2019  14:13:23 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Components\hal\target\CC2530EB\hal_adc.c      /
//    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤ /
//                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wEndev.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f C:\Users\25814\Desktop\202 /
//                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wC /
//                          onfig.cfg (-DZIGBEEPRO -DSECURE=0                 /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\202 /
//                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\hal\target\ /
//                          CC2530EB\hal_adc.c -D NWK_AUTO_POLL -D ZAPP_P1    /
//                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\En /
//                          dDeviceEB\List\ -lA C:\Users\25814\Desktop\2020±œ /
//                          …Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\EndDeviceEB\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\En /
//                          dDeviceEB\Obj\ -e --no_code_motion --debug        /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\   /
//                          -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤ /
//                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\Source\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı /
//                          –¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\include\ -I           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\include\ -I           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\high_level\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\ -I   /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\singl /
//                          e_chip\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô /
//                          _—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\mt\ -I         /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\osal\include\ -I          /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\saddr\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\sdata\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\af\ -I              /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\nwk\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sapi\ -I            /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sec\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sys\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\zdo\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\ -I                  /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\f8w\ -Ohz            /
//    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\En /
//                          dDeviceEB\List\hal_adc.s51                        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_adc

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?SS_SHR
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalAdcCheckVdd?relay
        FUNCTION ??HalAdcCheckVdd?relay,0203H
        PUBLIC ??HalAdcInit?relay
        FUNCTION ??HalAdcInit?relay,0203H
        PUBLIC ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,0203H
        PUBLIC ??HalAdcSetReference?relay
        FUNCTION ??HalAdcSetReference?relay,0203H
        PUBWEAK ADCCFG
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBLIC HalAdcCheckVdd
        FUNCTION HalAdcCheckVdd,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalAdcInit
        FUNCTION HalAdcInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalAdcRead
        FUNCTION HalAdcRead,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC HalAdcSetReference
        FUNCTION HalAdcSetReference,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
HalAdcCheckVdd      SYMBOL "HalAdcCheckVdd"
??HalAdcCheckVdd?relay SYMBOL "?relay", HalAdcCheckVdd
HalAdcInit          SYMBOL "HalAdcInit"
??HalAdcInit?relay  SYMBOL "?relay", HalAdcInit
HalAdcRead          SYMBOL "HalAdcRead"
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
HalAdcSetReference  SYMBOL "HalAdcSetReference"
??HalAdcSetReference?relay SYMBOL "?relay", HalAdcSetReference

// C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\hal\target\CC2530EB\hal_adc.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_adc.c
//    3   Revised:        $Date: 2010-03-12 16:10:36 -0800 (Fri, 12 Mar 2010) $
//    4   Revision:       $Revision: 21910 $
//    5 
//    6   Description:    This file contains the interface to the HAL ADC.
//    7 
//    8 
//    9   Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /**************************************************************************************************
//   41  *                                           INCLUDES
//   42  **************************************************************************************************/
//   43 
//   44 #include  "hal_adc.h"

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DATA8
        DS 1
//   45 #include  "hal_defs.h"
//   46 #include  "hal_mcu.h"
//   47 #include  "hal_types.h"
//   48 
//   49 /**************************************************************************************************
//   50  *                                            CONSTANTS
//   51  **************************************************************************************************/
//   52 #define HAL_ADC_EOC         0x80    /* End of Conversion bit */
//   53 #define HAL_ADC_START       0x40    /* Starts Conversion */
//   54 
//   55 #define HAL_ADC_STSEL_EXT   0x00    /* External Trigger */
//   56 #define HAL_ADC_STSEL_FULL  0x10    /* Full Speed, No Trigger */
//   57 #define HAL_ADC_STSEL_T1C0  0x20    /* Timer1, Channel 0 Compare Event Trigger */
//   58 #define HAL_ADC_STSEL_ST    0x30    /* ADCCON1.ST =1 Trigger */
//   59 
//   60 #define HAL_ADC_RAND_NORM   0x00    /* Normal Operation */
//   61 #define HAL_ADC_RAND_LFSR   0x04    /* Clock LFSR */
//   62 #define HAL_ADC_RAND_SEED   0x08    /* Seed Modulator */
//   63 #define HAL_ADC_RAND_STOP   0x0c    /* Stop Random Generator */
//   64 #define HAL_ADC_RAND_BITS   0x0c    /* Bits [3:2] */
//   65 
//   66 #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
//   67 #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
//   68 #define HAL_ADC_DEC_256     0x20    /* Decimate by 256 : 12-bit resolution */
//   69 #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
//   70 #define HAL_ADC_DEC_BITS    0x30    /* Bits [5:4] */
//   71 
//   72 #define HAL_ADC_STSEL       HAL_ADC_STSEL_ST
//   73 #define HAL_ADC_RAND_GEN    HAL_ADC_RAND_STOP
//   74 #define HAL_ADC_REF_VOLT    HAL_ADC_REF_AVDD
//   75 #define HAL_ADC_DEC_RATE    HAL_ADC_DEC_064
//   76 #define HAL_ADC_SCHN        HAL_ADC_CHN_VDD3
//   77 #define HAL_ADC_ECHN        HAL_ADC_CHN_GND
//   78 
//   79 /* ------------------------------------------------------------------------------------------------
//   80  *                                       Local Variables
//   81  * ------------------------------------------------------------------------------------------------
//   82  */
//   83 
//   84 #if (HAL_ADC == TRUE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   85 static uint8 adcRef;
adcRef:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   86 #endif
//   87 
//   88 /**************************************************************************************************
//   89  * @fn      HalAdcInit
//   90  *
//   91  * @brief   Initialize ADC Service
//   92  *
//   93  * @param   None
//   94  *
//   95  * @return  None
//   96  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   97 void HalAdcInit (void)
HalAdcInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalAdcInit
        CODE
//   98 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   99 #if (HAL_ADC == TRUE)
//  100   adcRef = HAL_ADC_REF_VOLT;
        MOV     DPTR,#adcRef
        MOV     A,#-0x80
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  101 #endif
//  102 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  103 
//  104 /**************************************************************************************************
//  105  * @fn      HalAdcRead
//  106  *
//  107  * @brief   Read the ADC based on given channel and resolution
//  108  *
//  109  * @param   channel - channel where ADC will be read
//  110  * @param   resolution - the resolution of the value
//  111  *
//  112  * @return  16 bit value of the ADC in offset binary format.
//  113  *
//  114  *          Note that the ADC is "bipolar", which means the GND (0V) level is mid-scale.
//  115  *          Note2: This function assumes that ADCCON3 contains the voltage reference.
//  116  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  117 uint16 HalAdcRead (uint8 channel, uint8 resolution)
HalAdcRead:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function HalAdcRead
        CODE
//  118 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
        MOV     A,R2
        MOV     R5,A
//  119   int16  reading = 0;
//  120 
//  121 #if (HAL_ADC == TRUE)
//  122   uint8   i, resbits;
//  123   uint8  adcChannel = 1;
        MOV     R1,#0x1
//  124 
//  125   /*
//  126    * If Analog input channel is AIN0..AIN7, make sure corresponing P0 I/O pin is enabled.  The code
//  127    * does NOT disable the pin at the end of this function.  I think it is better to leave the pin
//  128    * enabled because the results will be more accurate.  Because of the inherent capacitance on the
//  129    * pin, it takes time for the voltage on the pin to charge up to its steady-state level.  If
//  130    * HalAdcRead() has to turn on the pin for every conversion, the results may show a lower voltage
//  131    * than actuality because the pin did not have time to fully charge.
//  132    */
//  133   if (channel < 8)
        MOV     A,R4
        CLR     C
        SUBB    A,#0x8
        JNC     ??HalAdcRead_0
//  134   {
//  135     for (i=0; i < channel; i++)
        MOV     R0,#0x0
        SJMP    ??HalAdcRead_1
//  136     {
//  137       adcChannel <<= 1;
??HalAdcRead_2:
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R1,A
//  138     }
        INC     R0
??HalAdcRead_1:
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        JC      ??HalAdcRead_2
//  139   }
//  140 
//  141   /* Enable channel */
//  142   ADCCFG |= adcChannel;
??HalAdcRead_0:
        MOV     A,R1
        ORL     0xf2,A
//  143 
//  144   /* Convert resolution to decimation rate */
//  145   switch (resolution)
        MOV     A,R5
        DEC     A
        JZ      ??HalAdcRead_3
        DEC     A
        JZ      ??HalAdcRead_4
        DEC     A
        JZ      ??HalAdcRead_5
        SJMP    ??HalAdcRead_6
//  146   {
//  147     case HAL_ADC_RESOLUTION_8:
//  148       resbits = HAL_ADC_DEC_064;
??HalAdcRead_3:
        MOV     R0,#0x0
//  149       break;
        SJMP    ??HalAdcRead_7
//  150     case HAL_ADC_RESOLUTION_10:
//  151       resbits = HAL_ADC_DEC_128;
??HalAdcRead_4:
        MOV     R0,#0x10
//  152       break;
        SJMP    ??HalAdcRead_7
//  153     case HAL_ADC_RESOLUTION_12:
//  154       resbits = HAL_ADC_DEC_256;
??HalAdcRead_5:
        MOV     R0,#0x20
//  155       break;
        SJMP    ??HalAdcRead_7
//  156     case HAL_ADC_RESOLUTION_14:
//  157     default:
//  158       resbits = HAL_ADC_DEC_512;
??HalAdcRead_6:
        MOV     R0,#0x30
//  159       break;
//  160   }
//  161 
//  162   /* writing to this register starts the extra conversion */
//  163   ADCCON3 = channel | resbits | adcRef;
??HalAdcRead_7:
        MOV     DPTR,#adcRef
        MOV     A,R4
        ORL     A,R0
        MOV     R0,A
        MOVX    A,@DPTR
        ORL     A,R0
        MOV     0xb6,A
//  164 
//  165   /* Wait for the conversion to be done */
//  166   while (!(ADCCON1 & HAL_ADC_EOC));
??HalAdcRead_8:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??HalAdcRead_8
//  167 
//  168   /* Disable channel after done conversion */
//  169   ADCCFG &= (adcChannel ^ 0xFF);
        MOV     A,#-0x1
        XRL     A,R1
        ANL     0xf2,A
//  170 
//  171   /* Read the result */
//  172   reading = (int16) (ADCL);
        MOV     A,0xba
        MOV     ?V0 + 0,A
//  173   reading |= (int16) (ADCH << 8);
        MOV     A,0xbb
        MOV     R2,?V0 + 0
        MOV     R3,A
//  174 
//  175   /* Treat small negative as 0 */
//  176   if (reading < 0)
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??HalAdcRead_9
//  177     reading = 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
//  178 
//  179   switch (resolution)
??HalAdcRead_9:
        MOV     A,R5
        DEC     A
        JZ      ??HalAdcRead_10
        DEC     A
        JZ      ??HalAdcRead_11
        DEC     A
        JZ      ??HalAdcRead_12
        SJMP    ??HalAdcRead_13
//  180   {
//  181     case HAL_ADC_RESOLUTION_8:
//  182       reading >>= 8;
??HalAdcRead_10:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x8
        SJMP    ??HalAdcRead_14
//  183       break;
//  184     case HAL_ADC_RESOLUTION_10:
//  185       reading >>= 6;
??HalAdcRead_11:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x6
        SJMP    ??HalAdcRead_14
//  186       break;
//  187     case HAL_ADC_RESOLUTION_12:
//  188       reading >>= 4;
??HalAdcRead_12:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x4
        SJMP    ??HalAdcRead_14
//  189       break;
//  190     case HAL_ADC_RESOLUTION_14:
//  191     default:
//  192       reading >>= 2;
??HalAdcRead_13:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x2
??HalAdcRead_14:
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  193     break;
//  194   }
//  195 #else
//  196   // unused arguments
//  197   (void) channel;
//  198   (void) resolution;
//  199 #endif
//  200 
//  201   return ((uint16)reading);
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
        REQUIRE ADCCFG
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        REQUIRE ADCL
        REQUIRE ADCH
//  202 }
//  203 
//  204 /**************************************************************************************************
//  205  * @fn      HalAdcSetReference
//  206  *
//  207  * @brief   Sets the reference voltage for the ADC and initializes the service
//  208  *
//  209  * @param   reference - the reference voltage to be used by the ADC
//  210  *
//  211  * @return  none
//  212  *
//  213  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  214 void HalAdcSetReference ( uint8 reference )
HalAdcSetReference:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function HalAdcSetReference
        CODE
//  215 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  216 #if (HAL_ADC == TRUE)
//  217   adcRef = reference;
        MOV     A,R1
        MOV     DPTR,#adcRef
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock3
//  218 #endif
//  219 }
//  220 
//  221 /*********************************************************************
//  222  * @fn      HalAdcCheckVdd
//  223  *
//  224  * @brief   Check for minimum Vdd specified.
//  225  *
//  226  * @param   vdd - The board-specific Vdd reading to check for.
//  227  *
//  228  * @return  TRUE if the Vdd measured is greater than the 'vdd' minimum parameter;
//  229  *          FALSE if not.
//  230  *
//  231  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  232 bool HalAdcCheckVdd(uint8 vdd)
HalAdcCheckVdd:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function HalAdcCheckVdd
        CODE
//  233 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  234   ADCCON3 = 0x0F;
        MOV     0xb6,#0xf
//  235   while (!(ADCCON1 & 0x80));
??HalAdcCheckVdd_0:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??HalAdcCheckVdd_0
//  236   return (ADCH > vdd);
        MOV     A,R0
        CLR     C
        SUBB    A,0xbb
        JNC     ??HalAdcCheckVdd_1
        MOV     R1,#0x1
        SJMP    ??HalAdcCheckVdd_2
??HalAdcCheckVdd_1:
        MOV     R1,#0x0
??HalAdcCheckVdd_2:
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        REQUIRE ADCH
//  237 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalAdcInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalAdcInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalAdcRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalAdcRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalAdcSetReference?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalAdcSetReference

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalAdcCheckVdd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalAdcCheckVdd

        END
//  238 
//  239 /**************************************************************************************************
//  240 **************************************************************************************************/
// 
// 214 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//   5 bytes in segment SFR_AN
//   1 byte  in segment XDATA_Z
// 
// 238 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 5 bytes shared)
//   1 byte  of XDATA memory
//
//Errors: none
//Warnings: none
