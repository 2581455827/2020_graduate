///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        15/Dec/2019  14:13:17 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Components\osal\mcu\cc2530\OSAL_Nv.c          /
//    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤ /
//                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wEndev.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f C:\Users\25814\Desktop\202 /
//                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wC /
//                          onfig.cfg (-DZIGBEEPRO -DSECURE=0                 /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\202 /
//                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\osal\mcu\cc /
//                          2530\OSAL_Nv.c -D NWK_AUTO_POLL -D ZAPP_P1 -D     /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\En /
//                          dDeviceEB\List\ -lA C:\Users\25814\Desktop\2020±œ /
//                          …Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\EndDeviceEB\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\En /
//                          dDeviceEB\Obj\ -e --no_code_motion --debug        /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\   /
//                          -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤ /
//                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\Source\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı /
//                          –¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\include\ -I           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\include\ -I           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\high_level\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\ -I   /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\singl /
//                          e_chip\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô /
//                          _—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\mt\ -I         /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\osal\include\ -I          /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\saddr\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\sdata\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\af\ -I              /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\nwk\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sapi\ -I            /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sec\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sys\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\zdo\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\ -I                  /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\f8w\ -Ohz            /
//    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\En /
//                          dDeviceEB\List\OSAL_Nv.s51                        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OSAL_Nv

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??calcChkF?relay,0203H
        FUNCTION ??compactPage?relay,0203H
        FUNCTION ??erasePage?relay,0203H
        FUNCTION ??findItem?relay,0203H
        FUNCTION ??hotItem?relay,0203H
        FUNCTION ??hotItemUpdate?relay,0203H
        FUNCTION ??initItem?relay,0203H
        FUNCTION ??initNV?relay,0203H
        FUNCTION ??initPage?relay,0203H
        PUBLIC ??osal_nv_delete?relay
        FUNCTION ??osal_nv_delete?relay,0203H
        PUBLIC ??osal_nv_init?relay
        FUNCTION ??osal_nv_init?relay,0203H
        PUBLIC ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,0203H
        PUBLIC ??osal_nv_item_len?relay
        FUNCTION ??osal_nv_item_len?relay,0203H
        PUBLIC ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,0203H
        PUBLIC ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,0203H
        FUNCTION ??setChk?relay,0203H
        FUNCTION ??setItem?relay,0203H
        FUNCTION ??setPageUse?relay,0203H
        FUNCTION ??writeBuf?relay,0203H
        FUNCTION ??writeItem?relay,0203H
        FUNCTION ??writeWord?relay,0203H
        FUNCTION ??writeWordH?relay,0203H
        FUNCTION ??xferBuf?relay,0203H
        PUBLIC _nvBuf
        FUNCTION calcChkF,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        FUNCTION compactPage,021203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        FUNCTION erasePage,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION findItem,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION hotItem,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION hotItemUpdate,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION initItem,021203H
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        FUNCTION initNV,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 22, STACK
        FUNCTION initPage,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        PUBLIC osal_nv_delete
        FUNCTION osal_nv_delete,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC osal_nv_init
        FUNCTION osal_nv_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_nv_item_init
        FUNCTION osal_nv_item_init,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_nv_item_len
        FUNCTION osal_nv_item_len,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC osal_nv_read
        FUNCTION osal_nv_read,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC osal_nv_write
        FUNCTION osal_nv_write,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 39, STACK
        FUNCTION setChk,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION setItem,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        FUNCTION setPageUse,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        FUNCTION writeBuf,021203H
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        FUNCTION writeItem,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 30, STACK
        FUNCTION writeWord,021203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        FUNCTION writeWordH,021203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        FUNCTION xferBuf,021203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalFlashRead        SYMBOL "HalFlashRead"
HalFlashErase       SYMBOL "HalFlashErase"
HalFlashWrite       SYMBOL "HalFlashWrite"
HalAdcCheckVdd      SYMBOL "HalAdcCheckVdd"
??HalAdcCheckVdd?relay SYMBOL "?relay", HalAdcCheckVdd
??HalFlashErase?relay SYMBOL "?relay", HalFlashErase
??HalFlashRead?relay SYMBOL "?relay", HalFlashRead
??HalFlashWrite?relay SYMBOL "?relay", HalFlashWrite
osal_nv_delete      SYMBOL "osal_nv_delete"
??osal_nv_delete?relay SYMBOL "?relay", osal_nv_delete
osal_nv_init        SYMBOL "osal_nv_init"
??osal_nv_init?relay SYMBOL "?relay", osal_nv_init
osal_nv_item_init   SYMBOL "osal_nv_item_init"
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
??osal_nv_item_len?relay SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write

        EXTERN HalFlashRead
        FUNCTION HalFlashRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalFlashErase
        FUNCTION HalFlashErase,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalFlashWrite
        FUNCTION HalFlashWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcCheckVdd
        FUNCTION HalAdcCheckVdd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalAdcCheckVdd?relay
        FUNCTION ??HalAdcCheckVdd?relay,00H
        EXTERN ??HalFlashErase?relay
        FUNCTION ??HalFlashErase?relay,00H
        EXTERN ??HalFlashRead?relay
        FUNCTION ??HalFlashRead?relay,00H
        EXTERN ??HalFlashWrite?relay
        FUNCTION ??HalFlashWrite?relay,00H

// C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\osal\mcu\cc2530\OSAL_Nv.c
//    1 /******************************************************************************
//    2   Filename:       OSAL_Nv.c
//    3   Revised:        $Date: 2011-06-05 18:52:21 -0700 (Sun, 05 Jun 2011) $
//    4   Revision:       $Revision: 26212 $
//    5 
//    6   Description:    This module contains the OSAL non-volatile memory functions.
//    7 
//    8 
//    9   Copyright 2006-2011 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 /******************************************************************************
//   41   Notes:
//   42     - A trick buried deep in initPage() requires that the MSB of the NV Item Id
//   43       is to be reserved for use by this module.
//   44 ******************************************************************************/
//   45 
//   46 /*********************************************************************
//   47  * INCLUDES
//   48  */
//   49 
//   50 #include "hal_adc.h"
//   51 #include "hal_flash.h"
//   52 #include "hal_types.h"
//   53 #include "OSAL_Nv.h"
//   54 #include "ZComDef.h"
//   55 
//   56 /*********************************************************************
//   57  * CONSTANTS
//   58  */
//   59 
//   60 #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
//   61 #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
//   62 #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
//   63 #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
//   64 
//   65 #define OSAL_NV_ACTIVE          0x00
//   66 #define OSAL_NV_ERASED          0xFF
//   67 #define OSAL_NV_ERASED_ID       0xFFFF
//   68 #define OSAL_NV_ZEROED_ID       0x0000
//   69 // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
//   70 #define OSAL_NV_SOURCE_ID       0x8000
//   71 
//   72 // In case pages 0-1 are ever used, define a null page value.
//   73 #define OSAL_NV_PAGE_NULL       0
//   74 
//   75 // In case item Id 0 is ever used, define a null item value.
//   76 #define OSAL_NV_ITEM_NULL       0
//   77 
//   78 #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
//   79 
//   80 #define OSAL_NV_PAGE_HDR_OFFSET 0
//   81 
//   82 #define OSAL_NV_MAX_HOT         3

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   83 static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
hotIds:
        DATA16
        DW 130
        DW 58
        DW 59
//   84   ZCD_NV_NWKKEY,
//   85   ZCD_NV_NWK_ACTIVE_KEY_INFO,
//   86   ZCD_NV_NWK_ALTERN_KEY_INFO,
//   87 };
//   88 
//   89 /*********************************************************************
//   90  * MACROS
//   91  */
//   92 
//   93 #define OSAL_NV_CHECK_BUS_VOLTAGE  HalAdcCheckVdd(VDD_MIN_NV)
//   94 
//   95 #define OSAL_NV_DATA_SIZE( LEN )                      \ 
//   96   (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \ 
//   97              ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \ 
//   98              ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
//   99 
//  100 #define OSAL_NV_ITEM_SIZE( LEN )                                         \ 
//  101   (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \ 
//  102              ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \ 
//  103   (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
//  104 
//  105 #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \ 
//  106   /* In order to recover from a page compaction that is interrupted,\ 
//  107    * the logic in osal_nv_init() depends upon the following order:\ 
//  108    * 1. State of the target of compaction is changed to ePgInUse.\ 
//  109    * 2. Compacted page is erased.\ 
//  110    */\ 
//  111   setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\ 
//  112   erasePage( (COM_PG) ); \ 
//  113   \ 
//  114   pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\ 
//  115 )
//  116 
//  117 /*********************************************************************
//  118  * TYPEDEFS
//  119  */
//  120 
//  121 typedef struct
//  122 {
//  123   uint16 id;
//  124   uint16 len;   // Enforce Flash-WORD size on len.
//  125   uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
//  126   uint16 stat;  // Item status.
//  127 } osalNvHdr_t;
//  128 // Struct member offsets.
//  129 #define OSAL_NV_HDR_ID    0
//  130 #define OSAL_NV_HDR_LEN   2
//  131 #define OSAL_NV_HDR_CHK   4
//  132 #define OSAL_NV_HDR_STAT  6
//  133 
//  134 #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
//  135 #define OSAL_NV_HDR_SIZE  8
//  136 #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
//  137 
//  138 typedef struct
//  139 {
//  140   uint16 active;
//  141   uint16 inUse;
//  142   uint16 xfer;
//  143   uint16 spare;
//  144 } osalNvPgHdr_t;
//  145 // Struct member offsets.
//  146 #define OSAL_NV_PG_ACTIVE 0
//  147 #define OSAL_NV_PG_INUSE  2
//  148 #define OSAL_NV_PG_XFER   4
//  149 #define OSAL_NV_PG_SPARE  6
//  150 
//  151 #define OSAL_NV_PAGE_HDR_SIZE  8
//  152 #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
//  153 
//  154 typedef enum
//  155 {
//  156   eNvXfer,
//  157   eNvZero
//  158 } eNvHdrEnum;
//  159 
//  160 typedef enum
//  161 {
//  162   ePgActive,
//  163   ePgInUse,
//  164   ePgXfer,
//  165   ePgSpare
//  166 } ePgHdrEnum;
//  167 
//  168 /*********************************************************************
//  169  * GLOBAL VARIABLES
//  170  */
//  171 
//  172 #ifndef OAD_KEEP_NV_PAGES
//  173 // When NV pages are to remain intact during OAD download,
//  174 // the image itself should not include NV pages.
//  175 #pragma location="ZIGNV_ADDRESS_SPACE"

        RSEG ZIGNV_ADDRESS_SPACE:XDATA:REORDER:NOROOT(0)
        DATA8
//  176 __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
_nvBuf:
        DS 12288
//  177 #pragma required=_nvBuf
//  178 #endif // OAD_KEEP_NV_PAGES
//  179 
//  180 /*********************************************************************
//  181  * LOCAL VARIABLES
//  182  */
//  183 
//  184 // Offset into the page of the first available erased space.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  185 static uint16 pgOff[OSAL_NV_PAGES_USED];
pgOff:
        DS 12
        REQUIRE __INIT_XDATA_Z
        REQUIRE _nvBuf
//  186 
//  187 // Count of the bytes lost for the zeroed-out items.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  188 static uint16 pgLost[OSAL_NV_PAGES_USED];
pgLost:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  189 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  190 static uint8 pgRes;  // Page reserved for item compacting transfer.
pgRes:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  191 
//  192 // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  193 static uint8 findPg;
findPg:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  194 
//  195 // NV page and offsets for hot items.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  196 static uint8 hotPg[OSAL_NV_MAX_HOT];
hotPg:
        DS 3
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  197 static uint16 hotOff[OSAL_NV_MAX_HOT];
hotOff:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  198 
//  199 /*********************************************************************
//  200  * LOCAL FUNCTIONS
//  201  */
//  202 
//  203 static uint8  initNV( void );
//  204 
//  205 static void   setPageUse( uint8 pg, uint8 inUse );
//  206 static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
//  207 static void   erasePage( uint8 pg );
//  208 static uint8  compactPage( uint8 srcPg, uint16 skipId );
//  209 
//  210 static uint16 findItem( uint16 id );
//  211 static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
//  212 static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
//  213 static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
//  214 
//  215 static uint16 calcChkB( uint16 len, uint8 *buf );
//  216 static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
//  217 
//  218 static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
//  219 static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
//  220 static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
//  221 static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
//  222 static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
//  223 
//  224 static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
//  225 static uint8  hotItem(uint16 id);
//  226 static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
//  227 
//  228 /*********************************************************************
//  229  * @fn      initNV
//  230  *
//  231  * @brief   Initialize the NV flash pages.
//  232  *
//  233  * @param   none
//  234  *
//  235  * @return  TRUE
//  236  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  237 static uint8 initNV( void )
initNV:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function initNV
        CODE
//  238 {
        FUNCALL initNV, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, setPageUse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, erasePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, compactPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, erasePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, erasePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, initPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, initPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, erasePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  239   osalNvPgHdr_t pgHdr;
//  240   uint8 oldPg = OSAL_NV_PAGE_NULL;
        MOV     R6,#0x0
//  241   uint8 findDups = FALSE;
        MOV     ?V0 + 0,R6
//  242   uint8 pg;
//  243 
//  244   pgRes = OSAL_NV_PAGE_NULL;
        MOV     DPTR,#pgRes
        CLR     A
        MOVX    @DPTR,A
//  245 
//  246   for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
        MOV     R7,#0x79
//  247   {
//  248     HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
??initNV_0:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 2,#0x8
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,R7
        MOV     R1,A
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_106:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  249 
//  250     if ( pgHdr.active == OSAL_NV_ERASED_ID )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initNV_1
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initNV_1:
        JNZ     ??initNV_2
//  251     {
//  252       if ( pgRes == OSAL_NV_PAGE_NULL )
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        JNZ     ??initNV_3
//  253       {
//  254         pgRes = pg;
        MOV     A,R7
        MOVX    @DPTR,A
        SJMP    ??initNV_4
//  255       }
//  256       else
//  257       {
//  258         setPageUse( pg, TRUE );
??initNV_3:
        ; Setup parameters for call to function setPageUse
        MOV     R2,#0x1
        MOV     A,R7
        MOV     R1,A
        LCALL   ??setPageUse?relay
        SJMP    ??initNV_4
//  259       }
//  260     }
//  261     // An Xfer from this page was in progress.
//  262     else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
??initNV_2:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initNV_5
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initNV_5:
        JZ      ??initNV_4
//  263     {
//  264       oldPg = pg;
        MOV     A,R7
        MOV     R6,A
//  265     }
//  266   }
??initNV_4:
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x7f
        JC      ??initNV_0
//  267 
//  268   // If a page compaction was interrupted before the old page was erased.
//  269   if ( oldPg != OSAL_NV_PAGE_NULL )
        MOV     A,R6
        MOV     DPTR,#pgRes
        JZ      ??initNV_6
//  270   {
//  271     /* Interrupted compaction before the target of compaction was put in use;
//  272      * so erase the target of compaction and start again.
//  273      */
//  274     if ( pgRes != OSAL_NV_PAGE_NULL )
        MOVX    A,@DPTR
        JZ      ??initNV_7
//  275     {
//  276       erasePage( pgRes );
        ; Setup parameters for call to function erasePage
        MOV     R1,A
        LCALL   ??erasePage?relay
//  277       (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
        ; Setup parameters for call to function compactPage
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   ??compactPage?relay
        SJMP    ??initNV_8
//  278     }
//  279     /* Interrupted compaction after the target of compaction was put in use,
//  280      * but before the old page was erased; so erase it now and create a new reserve page.
//  281      */
//  282     else
//  283     {
//  284       erasePage( oldPg );
??initNV_7:
        ; Setup parameters for call to function erasePage
        MOV     A,R6
        MOV     R1,A
        LCALL   ??erasePage?relay
//  285       pgRes = oldPg;
        MOV     A,R6
        MOV     DPTR,#pgRes
        MOVX    @DPTR,A
        SJMP    ??initNV_8
//  286     }
//  287   }
//  288   else if ( pgRes != OSAL_NV_PAGE_NULL )
??initNV_6:
        MOVX    A,@DPTR
        JZ      ??initNV_8
//  289   {
//  290     erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
        ; Setup parameters for call to function erasePage
        MOV     R1,A
        LCALL   ??erasePage?relay
//  291   }
//  292   /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
//  293    * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
//  294    * while trying to erase the page to be compacted. Such a page should only contain duplicate items
//  295    * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
//  296    * size less the page header.
//  297    */
//  298 
//  299   for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
??initNV_8:
        MOV     R7,#0x79
//  300   {
//  301     // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
//  302     if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
??initNV_9:
        ; Setup parameters for call to function initPage
        MOV     R4,?V0 + 0
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,R7
        MOV     R1,A
        LCALL   ??initPage?relay
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??initNV_10
//  303     {
//  304       findDups = TRUE;
        MOV     ?V0 + 0,#0x1
//  305       pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
        MOV     R7,#0x78
//  306       continue;
//  307     }
//  308   }
??initNV_10:
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x7f
        JC      ??initNV_9
//  309 
//  310   if (findDups)
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        JNC     ??initNV_11
//  311   {
//  312     // Final pass to calculate page lost after invalidating duplicate items.
//  313     for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
        MOV     R7,#0x79
//  314     {
//  315       (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
??initNV_12:
        ; Setup parameters for call to function initPage
        MOV     R4,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,R7
        MOV     R1,A
        LCALL   ??initPage?relay
//  316     }
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x7f
        JC      ??initNV_12
//  317   }
//  318 
//  319   if ( pgRes == OSAL_NV_PAGE_NULL )
??initNV_11:
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        JNZ     ??initNV_13
//  320   {
//  321     uint8 idx, mostLost = 0;
        MOV     R7,#0x0
//  322 
//  323     for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
        MOV     R2,#0x0
//  324     {
//  325       // Is this the page that was compacted?
//  326       if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
??initNV_14:
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_87:
        XRL     A,#0xf8
        JNZ     ??initNV_15
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x7
??initNV_15:
        JNZ     ??initNV_16
//  327       {
//  328         mostLost = idx;
        MOV     A,R2
        MOV     R7,A
//  329         break;
        SJMP    ??initNV_17
//  330       }
//  331       /* This check is not expected to be necessary because the above test should always succeed
//  332        * with an early loop exit.
//  333        */
//  334       else if (pgLost[idx] > pgLost[mostLost])
??initNV_16:
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_89:
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JNC     ??initNV_18
//  335       {
//  336         mostLost = idx;
        MOV     A,R2
        MOV     R7,A
//  337       }
//  338     }
??initNV_18:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x6
        JC      ??initNV_14
//  339 
//  340     pgRes = mostLost + OSAL_NV_PAGE_BEG;
??initNV_17:
        MOV     A,#0x79
        ADD     A,R7
        MOV     DPTR,#pgRes
        MOVX    @DPTR,A
//  341     erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
        ; Setup parameters for call to function erasePage
        MOV     R1,A
        LCALL   ??erasePage?relay
//  342   }
//  343 
//  344   return TRUE;
??initNV_13:
        MOV     R1,#0x1
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  345 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+-2
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine51_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_86
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+-2
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_90:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_89
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_87
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_88
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+-2
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_86
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     A,#pgLost & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(pgLost >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  346 
//  347 /*********************************************************************
//  348  * @fn      setPageUse
//  349  *
//  350  * @brief   Set page header active/inUse state according to 'inUse'.
//  351  *
//  352  * @param   pg - Valid NV page to verify and init.
//  353  * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
//  354  *
//  355  * @return  none
//  356  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  357 static void setPageUse( uint8 pg, uint8 inUse )
setPageUse:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function setPageUse
        CODE
//  358 {
        FUNCALL setPageUse, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R7,A
//  359   osalNvPgHdr_t pgHdr;
//  360 
//  361   pgHdr.active = OSAL_NV_ZEROED_ID;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  362 
//  363   if ( inUse )
        MOV     A,R7
        JZ      ??setPageUse_0
//  364   {
//  365     pgHdr.inUse = OSAL_NV_ZEROED_ID;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??setPageUse_1
//  366   }
//  367   else
//  368   {
//  369     pgHdr.inUse = OSAL_NV_ERASED_ID;
??setPageUse_0:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
//  370   }
??setPageUse_1:
        LCALL   ??Subroutine56_0 & 0xFFFF
//  371 
//  372   writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
??CrossCallReturnLabel_97:
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??writeWord?relay
//  373 }
        MOV     A,#0x8
        CFI EndBlock cfiBlock13
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock14
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine52_0:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15
//  374 
//  375 /*********************************************************************
//  376  * @fn      initPage
//  377  *
//  378  * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
//  379  *
//  380  * @param   pg - Valid NV page to verify and init.
//  381  * @param   id - Valid NV item Id to use function as a "findItem".
//  382  *               If set to NULL then just perform the page initialization.
//  383  * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
//  384  *                     left from a write that is interrupted by a reset/power-cycle.
//  385  *                     FALSE otherwise.
//  386  *
//  387  * @return  If 'id' is non-NULL and good checksums are found, return the offset
//  388  *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
//  389  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  390 static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
initPage:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function initPage
        CODE
//  391 {
        FUNCALL initPage, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initPage, calcChkF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initPage, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initPage, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initPage, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 5,R4
//  392   uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
        MOV     ?V0 + 2,#0x8
        MOV     ?V0 + 3,#0x0
//  393   uint16 sz, lost = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  394   osalNvHdr_t hdr;
//  395 
//  396   do
//  397   {
//  398     HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
??initPage_0:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 4
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
//  399 
//  400     if ( hdr.id == OSAL_NV_ERASED_ID )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initPage_1
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initPage_1:
        JNZ     $+5
        LJMP    ??initPage_2 & 0xFFFF
//  401     {
//  402       break;
//  403     }
//  404 
//  405     // Get the actual size in bytes which is the ceiling(hdr.len)
//  406     sz = OSAL_NV_DATA_SIZE( hdr.len );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_21:
        JC      ??initPage_3
        MOV     ?V0 + 0,#-0x4
        MOV     ?V0 + 1,#-0x1
        SJMP    ??initPage_4
??initPage_3:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     ?V0 + 0,A
        MOV     A,R1
        MOV     ?V0 + 1,A
//  407 
//  408     // A bad 'len' write has blown away the rest of the page.
//  409     if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
??initPage_4:
        MOV     A,#-0x8
        CLR     C
        SUBB    A,?V0 + 2
        MOV     R0,A
        MOV     A,#0x7
        SUBB    A,?V0 + 3
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,?V0 + 0
        MOV     A,R1
        SUBB    A,?V0 + 1
        JNC     ??initPage_5
//  410     {
//  411       lost += (OSAL_NV_PAGE_SIZE - offset);
        MOV     A,R6
        ADD     A,#0x0
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x8
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,?V0 + 2
        MOV     R6,A
        MOV     A,R1
        SUBB    A,?V0 + 3
        MOV     R7,A
//  412       offset = OSAL_NV_PAGE_SIZE;
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x8
//  413       break;
        LJMP    ??initPage_2 & 0xFFFF
//  414     }
//  415 
//  416     offset += OSAL_NV_HDR_SIZE;
??initPage_5:
        LCALL   ?Subroutine34 & 0xFFFF
//  417 
//  418     if ( hdr.id != OSAL_NV_ZEROED_ID )
??CrossCallReturnLabel_55:
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_130:
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??initPage_6 & 0xFFFF
//  419     {
//  420       /* This trick allows function to do double duty for findItem() without
//  421        * compromising its essential functionality at powerup initialization.
//  422        */
//  423       if ( id != OSAL_NV_ITEM_NULL )
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??initPage_7
//  424       {
//  425         /* This trick allows asking to find the old/transferred item in case
//  426          * of a successful new item write that gets interrupted before the
//  427          * old item can be zeroed out.
//  428          */
//  429         if ( (id & 0x7fff) == hdr.id )
        MOV     R0,?V0 + 6
        MOV     A,?V0 + 7
        ANL     A,#0x7f
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??initPage_8
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??initPage_8:
        JZ      $+5
        LJMP    ??initPage_9 & 0xFFFF
//  430         {
//  431           if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
//  432                (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
        MOV     A,?V0 + 7
        ANL     A,#0x80
        JNZ     ??initPage_10
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initPage_11
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initPage_11:
        JZ      $+5
        LJMP    ??initPage_9 & 0xFFFF
        SJMP    ??initPage_12
??initPage_10:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initPage_13
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initPage_13:
        JNZ     $+5
        LJMP    ??initPage_9 & 0xFFFF
//  433           {
//  434             return offset;
??initPage_12:
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LJMP    ??initPage_14 & 0xFFFF
//  435           }
//  436         }
//  437       }
//  438       // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
//  439       else
//  440       {
//  441         if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
??initPage_7:
        ; Setup parameters for call to function calcChkF
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     R1,?V0 + 4
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??initPage_15
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??initPage_15:
        JNZ     ??initPage_16
//  442         {
//  443           if ( findDups )
        MOV     A,?V0 + 5
        JZ      ??initPage_17
//  444           {
//  445             if ( hdr.stat == OSAL_NV_ERASED_ID )
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initPage_18
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initPage_18:
        JNZ     ??initPage_9
//  446             {
//  447               /* The trick of setting the MSB of the item Id causes the logic
//  448                * immediately above to return a valid page only if the header 'stat'
//  449                * indicates that it was the older item being transferred.
//  450                */
//  451               uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
        ; Setup parameters for call to function findItem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x80
        MOV     R3,A
        LCALL   ??findItem?relay
//  452 
//  453               if ( off != OSAL_NV_ITEM_NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??initPage_9
//  454               {
//  455                 setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
        ; Setup parameters for call to function setItem
        MOV     R4,#0x1
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??setItem?relay
        SJMP    ??initPage_9
//  456               }
//  457             }
//  458           }
//  459           // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
//  460           else if ( hdr.stat != OSAL_NV_ERASED_ID )
??initPage_17:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initPage_19
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initPage_19:
        JZ      ??initPage_9
//  461           {
//  462             return OSAL_NV_ERASED_ID;
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        SJMP    ??initPage_14
//  463           }
//  464         }
//  465         else
//  466         {
//  467           setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
??initPage_16:
        ; Setup parameters for call to function setItem
        MOV     R4,#0x1
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 4
        LCALL   ??setItem?relay
//  468           lost += (OSAL_NV_HDR_SIZE + sz);
//  469         }
//  470       }
//  471     }
//  472     else
//  473     {
//  474       lost += (OSAL_NV_HDR_SIZE + sz);
??initPage_6:
        MOV     A,?V0 + 0
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R7,A
//  475     }
//  476     offset += sz;
??initPage_9:
        MOV     A,?V0 + 2
        ADD     A,?V0 + 0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 1
        MOV     ?V0 + 3,A
//  477 
//  478   } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,#-0x8
        MOV     A,?V0 + 3
        SUBB    A,#0x7
        JNC     $+5
        LJMP    ??initPage_0 & 0xFFFF
//  479 
//  480   pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
??initPage_2:
        MOV     A,?V0 + 4
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        LCALL   ?Subroutine11 & 0xFFFF
//  481   pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
??CrossCallReturnLabel_4:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  482 
//  483   return OSAL_NV_ITEM_NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
??initPage_14:
        MOV     A,#0x8
        SJMP    ??Subroutine54_0
        CFI EndBlock cfiBlock16
//  484 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_130
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_38
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_39
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine53_0:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_129
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_124
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_125
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_123
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_130
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_38
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_39
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        CFI EndBlock cfiBlock29
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine54_0:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Valid
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock30
//  485 
//  486 /*********************************************************************
//  487  * @fn      erasePage
//  488  *
//  489  * @brief   Erases a page in Flash.
//  490  *
//  491  * @param   pg - Valid NV page to erase.
//  492  *
//  493  * @return  none
//  494  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  495 static void erasePage( uint8 pg )
erasePage:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function erasePage
        CODE
//  496 {
        FUNCALL erasePage, HalFlashErase
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  497   HalFlashErase(pg);
        ; Setup parameters for call to function HalFlashErase
        LCALL   ??HalFlashErase?relay
//  498 
//  499   pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
        MOV     A,R6
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LCALL   ?Subroutine11 & 0xFFFF
//  500   pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
??CrossCallReturnLabel_5:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  501 }
        LJMP    ??Subroutine52_0 & 0xFFFF
        CFI EndBlock cfiBlock31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOVX    @DPTR,A
        MOV     A,#(pgLost + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgLost - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34
//  502 
//  503 /*********************************************************************
//  504  * @fn      compactPage
//  505  *
//  506  * @brief   Compacts the page specified.
//  507  *
//  508  * @param   srcPg - Valid NV page to erase.
//  509  * @param   skipId - Item Id to not compact.
//  510  *
//  511  * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
//  512  *          FALSE otherwise.
//  513  *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
//  514  *          the risk of infinitely looping on HAL flash failure.
//  515  *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
//  516  *          All page compactions will fail which will cause all osal_nv_write() calls to return
//  517  *          NV_OPER_FAILED.
//  518  *          Eventually, all pages in use may also be in the state of "pending compaction" where
//  519  *          the page header member OSAL_NV_PG_XFER is zeroed out.
//  520  *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
//  521  *          causes an actual chip brown-out, of course.) Although no new NV items will be created
//  522  *          or written, the last value written with a return value of SUCCESS can continue to be
//  523  *          read successfully.
//  524  *          If eventually HAL flash starts working again, all of the pages marked as
//  525  *          "pending compaction" may or may not be eventually compacted. But, initNV() will
//  526  *          deterministically clean-up one page pending compaction per power-cycle
//  527  *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
//  528  *          through such a scenario.
//  529  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  530 static uint8 compactPage( uint8 srcPg, uint16 skipId )
compactPage:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function compactPage
        CODE
//  531 {
        FUNCALL compactPage, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, erasePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, calcChkF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, writeItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, xferBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, calcChkF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, setChk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, hotItemUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, erasePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, setPageUse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, erasePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  532   uint16 srcOff;
//  533   uint8 rtrn;
//  534 
//  535   // To minimize code size, only check for a clean page here where it's absolutely required.
//  536   for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
        MOV     R6,#0x0
        MOV     R7,#0x0
//  537   {
//  538     HalFlashRead(pgRes, srcOff, &rtrn, 1);
??compactPage_0:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_108:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  539     if (rtrn != OSAL_NV_ERASED)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CPL     A
        JZ      ??compactPage_1
//  540     {
//  541       erasePage(pgRes);
        ; Setup parameters for call to function erasePage
        LCALL   ?Subroutine26 & 0xFFFF
//  542       return FALSE;
??CrossCallReturnLabel_91:
        MOV     R1,#0x0
        LJMP    ??compactPage_2 & 0xFFFF
//  543     }
//  544   }
??compactPage_1:
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        CLR     C
        SUBB    A,#0x8
        JC      ??compactPage_0
//  545 
//  546   srcOff = OSAL_NV_PAGE_HDR_SIZE;
        MOV     R6,#0x8
        MOV     R7,#0x0
//  547   rtrn = TRUE;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  548 
//  549   while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
//  550   {
//  551     osalNvHdr_t hdr;
//  552     uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
??compactPage_3:
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_49:
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  553 
//  554     HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 6,#0x8
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_109:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  555 
//  556     if ( hdr.id == OSAL_NV_ERASED_ID )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??compactPage_4
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??compactPage_4:
        JNZ     $+5
        LJMP    ??compactPage_5 & 0xFFFF
//  557     {
//  558       break;
//  559     }
//  560 
//  561     // Get the actual size in bytes which is the ceiling(hdr.len)
//  562     sz = OSAL_NV_DATA_SIZE( hdr.len );
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_22:
        JC      ??compactPage_6
        MOV     ?V0 + 6,#-0x4
        MOV     ?V0 + 7,#-0x1
        SJMP    ??compactPage_7
??compactPage_6:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     ?V0 + 6,A
        MOV     A,R1
        MOV     ?V0 + 7,A
//  563 
//  564     if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
??compactPage_7:
        MOV     A,#-0x8
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        MOV     A,#0x7
        SUBB    A,R7
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,?V0 + 6
        MOV     A,R1
        SUBB    A,?V0 + 7
        JNC     $+5
        LJMP    ??compactPage_5 & 0xFFFF
//  565     {
//  566       break;
//  567     }
//  568 
//  569     if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
        MOV     A,#-0x8
        CLR     C
        SUBB    A,?V0 + 4
        MOV     R0,A
        MOV     A,#0x7
        SUBB    A,?V0 + 5
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,?V0 + 6
        MOV     A,R1
        SUBB    A,?V0 + 7
        JNC     ??compactPage_8
//  570     {
//  571       rtrn = FALSE;
??compactPage_9:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  572       break;
        LJMP    ??compactPage_10 & 0xFFFF
//  573     }
//  574 
//  575     srcOff += OSAL_NV_HDR_SIZE;
??compactPage_8:
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  576 
//  577     if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_129:
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??compactPage_11 & 0xFFFF
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,?V0 + 2
        JNZ     ??compactPage_12
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 3
??compactPage_12:
        JNZ     $+5
        LJMP    ??compactPage_11 & 0xFFFF
//  578     {
//  579       if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
        ; Setup parameters for call to function calcChkF
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??compactPage_13
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??compactPage_13:
        JZ      $+5
        LJMP    ??compactPage_11 & 0xFFFF
//  580       {
//  581         /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
//  582          * OSAL_Nv interruptions caused by resets.
//  583          */
//  584         if ( hdr.stat == OSAL_NV_ERASED_ID )
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??compactPage_14
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??compactPage_14:
        JNZ     ??compactPage_15
//  585         {
//  586           setItem( srcPg, srcOff, eNvXfer );
        ; Setup parameters for call to function setItem
        MOV     R4,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ??setItem?relay
//  587         }
//  588 
//  589         if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
??compactPage_15:
        ; Setup parameters for call to function writeItem
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 28)
        CLR     A
        MOV     ?V0 + 8,A
        MOV     ?V0 + 9,A
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??writeItem?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??compactPage_9 & 0xFFFF
//  590         {
//  591           dstOff += OSAL_NV_HDR_SIZE;
        MOV     A,?V0 + 4
        ADD     A,#0x8
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
//  592           xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
        ; Setup parameters for call to function xferBuf
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ??xferBuf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  593           // Calculate and write the new checksum.
//  594           if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
        ; Setup parameters for call to function calcChkF
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??compactPage_16
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??compactPage_16:
        JZ      $+5
        LJMP    ??compactPage_9 & 0xFFFF
//  595           {
//  596             if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
        ; Setup parameters for call to function setChk
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ??setChk?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R0,?V0 + 8
        MOV     R1,?V0 + 9
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??compactPage_17
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??compactPage_17:
        JZ      $+5
        LJMP    ??compactPage_9 & 0xFFFF
//  597             {
//  598               rtrn = FALSE;
//  599               break;
//  600             }
//  601             else
//  602             {
//  603               hotItemUpdate(pgRes, dstOff, hdr.id);
        ; Setup parameters for call to function hotItemUpdate
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  604             }
//  605           }
//  606           else
//  607           {
//  608             rtrn = FALSE;
//  609             break;
//  610           }
//  611         }
//  612         else
//  613         {
//  614           rtrn = FALSE;
//  615           break;
//  616         }
//  617       }
//  618     }
??CrossCallReturnLabel_13:
        LCALL   ??hotItemUpdate?relay
//  619 
//  620     srcOff += sz;
??compactPage_11:
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     R7,A
//  621   }
        CLR     C
        MOV     A,R6
        SUBB    A,#-0x8
        MOV     A,R7
        SUBB    A,#0x7
        JNC     $+5
        LJMP    ??compactPage_3 & 0xFFFF
//  622 
//  623   if (rtrn == FALSE)
??compactPage_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??compactPage_18
//  624   {
//  625     erasePage(pgRes);
??compactPage_10:
        ; Setup parameters for call to function erasePage
        LCALL   ?Subroutine26 & 0xFFFF
//  626   }
??CrossCallReturnLabel_92:
        SJMP    ??compactPage_19
//  627   else if (skipId == OSAL_NV_ITEM_NULL)
??compactPage_18:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??compactPage_19
//  628   {
//  629     COMPACT_PAGE_CLEANUP(srcPg);
        ; Setup parameters for call to function setPageUse
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_44:
        ; Setup parameters for call to function erasePage
        MOV     R1,?V0 + 0
        LCALL   ??erasePage?relay
        MOV     A,?V0 + 0
        MOV     DPTR,#pgRes
        MOVX    @DPTR,A
//  630   }
//  631   // else invoking function must cleanup.
//  632 
//  633   return rtrn;
??compactPage_19:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
??compactPage_2:
        MOV     A,#0x9
        LJMP    ??Subroutine54_0 & 0xFFFF
        CFI EndBlock cfiBlock35
//  634 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV     A,#0x5
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_57
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_58
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        LCALL   ??calcChkF?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R0,?V0 + 8
        MOV     R1,?V0 + 9
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_127:
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_48
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_49
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_50
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_124
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_125
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_123
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_40
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_41
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgOff + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgOff - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond58 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        MOV     DPTR,#pgRes
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine55_0:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_94
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??erasePage?relay
        RET
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x4
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#-0x1
        RET
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_74:
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_17
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_18
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_8
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_9
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_10
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ANL     A,#0xfc
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85
//  635 
//  636 /*********************************************************************
//  637  * @fn      findItem
//  638  *
//  639  * @brief   Find an item Id in NV and return the page and offset to its data.
//  640  *
//  641  * @param   id - Valid NV item Id.
//  642  *
//  643  * @return  Offset of data corresponding to item Id, if found;
//  644  *          otherwise OSAL_NV_ITEM_NULL.
//  645  *
//  646  *          The page containing the item, if found;
//  647  *          otherwise no valid assignment made - left equal to item Id.
//  648  *
//  649  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  650 static uint16 findItem( uint16 id )
findItem:
        CFI Block cfiBlock86 Using cfiCommon0
        CFI Function findItem
        CODE
//  651 {
        FUNCALL findItem, initPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        SJMP    ??findItem_0
//  652   uint16 off;
//  653   uint8 pg;
//  654 
//  655   for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
//  656   {
//  657     if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
//  658     {
//  659       findPg = pg;
//  660       return off;
//  661     }
//  662   }
//  663 
//  664   // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
//  665   if ( (id & OSAL_NV_SOURCE_ID) == 0 )
//  666   {
//  667     return findItem( id | OSAL_NV_SOURCE_ID );
??findItem_1:
        MOV     A,#-0x80
        ORL     A,R7
??findItem_0:
        MOV     R7,A
//  668   }
        MOV     ?V0 + 0,#0x79
??findItem_2:
        ; Setup parameters for call to function initPage
        MOV     R4,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ??initPage?relay
        MOV     ?V0 + 3,R3
        MOV     R1,?V0 + 3
        MOV     A,R2
        ORL     A,R1
        JZ      ??findItem_3
        MOV     A,?V0 + 0
        MOV     DPTR,#findPg
        MOVX    @DPTR,A
        SJMP    ??findItem_4
??findItem_3:
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x7f
        JC      ??findItem_2
        MOV     A,R7
        ANL     A,#0x80
        JZ      ??findItem_1
//  669   else
//  670   {
//  671     findPg = OSAL_NV_PAGE_NULL;
        MOV     DPTR,#findPg
        CLR     A
        MOVX    @DPTR,A
//  672     return OSAL_NV_ITEM_NULL;
        MOV     R2,A
        MOV     R3,A
//  673   }
??findItem_4:
        LJMP    ??Subroutine61_0 & 0xFFFF
        CFI EndBlock cfiBlock86
//  674 }
//  675 
//  676 /*********************************************************************
//  677  * @fn      initItem
//  678  *
//  679  * @brief   An NV item is created and initialized with the data passed to the function, if any.
//  680  *
//  681  * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
//  682  *                 (i.e. if invoked from osal_nv_item_init() ).
//  683  *                 FALSE if writeItem() should just write the header and the 'buf' parameter
//  684  *                 is ok to use as a return value of the page number to be cleaned with
//  685  *                 COMPACT_PAGE_CLEANUP().
//  686  *                 (i.e. if invoked from osal_nv_write() ).
//  687  * @param   id  - Valid NV item Id.
//  688  * @param   len - Item data length.
//  689  * @param  *buf - Pointer to item initalization data. Set to NULL if none.
//  690  *
//  691  * @return  The OSAL Nv page number if item write and read back checksums ok;
//  692  *          OSAL_NV_PAGE_NULL otherwise.
//  693  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  694 static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
initItem:
        CFI Block cfiBlock87 Using cfiCommon0
        CFI Function initItem
        CODE
//  695 {
        FUNCALL initItem, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initItem, writeWordH
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initItem, compactPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initItem, writeItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initItem, setPageUse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initItem, erasePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initItem, writeItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
//  696   uint16 sz = OSAL_NV_ITEM_SIZE( len );
??CrossCallReturnLabel_32:
        CLR     C
        MOV     A,R4
        SUBB    A,#-0xc
        MOV     A,R5
        SUBB    A,#-0x1
        JC      ??initItem_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        SJMP    ??initItem_1
??initItem_0:
        MOV     A,R4
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ANL     A,#0xfc
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??initItem_1:
        MOVX    @DPTR,A
//  697   uint8 rtrn = OSAL_NV_PAGE_NULL;
        MOV     R7,#0x0
//  698   uint8 cnt = OSAL_NV_PAGES_USED;
        MOV     R4,#0x6
//  699   uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        INC     A
        MOV     R6,A
//  700 
//  701   do {
//  702     if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
??initItem_2:
        MOV     A,R6
        CLR     C
        SUBB    A,#0x7f
        JC      ??initItem_3
//  703     {
//  704       pg = OSAL_NV_PAGE_BEG;
        MOV     R6,#0x79
//  705     }
//  706     if ( pg != pgRes )
??initItem_3:
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??initItem_4
//  707     {
//  708       uint8 idx = pg - OSAL_NV_PAGE_BEG;
        MOV     A,#-0x79
        ADD     A,R6
//  709       if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#pgOff & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(pgOff >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ?Subroutine21 & 0xFFFF
//  710       {
//  711         break;
//  712       }
//  713     }
??CrossCallReturnLabel_27:
        CLR     A
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,#0x8
        SUBB    A,R3
        MOV     R3,A
        LCALL   ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_86:
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_38:
        JNC     ??initItem_5
//  714     pg++;
??initItem_4:
        INC     R6
//  715   } while (--cnt);
        DEC     R4
        MOV     A,R4
        JNZ     ??initItem_2
        LJMP    ??initItem_6 & 0xFFFF
//  716 
//  717   if (cnt)
??initItem_5:
        MOV     A,R4
        JNZ     $+5
        LJMP    ??initItem_6 & 0xFFFF
//  718   {
//  719     // Item fits if an old page is compacted.
//  720     if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
        MOV     A,R6
        LCALL   ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_123:
        MOV     R2,A
        MOV     A,#0x8
        SUBB    A,R1
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_39:
        JC      $+5
        LJMP    ??initItem_7 & 0xFFFF
//  721     {
//  722       osalNvPgHdr_t pgHdr;
//  723 
//  724       /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
//  725        * OSAL_Nv interruptions caused by resets.
//  726        */
//  727       HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 8,#0x8
        MOV     ?V0 + 9,R7
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_110:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  728       if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initItem_8
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initItem_8:
        JNZ     ??initItem_9
//  729       {
//  730         // Mark the old page as being in process of compaction.
//  731         sz = OSAL_NV_ZEROED_ID;
        LCALL   ?Subroutine8 & 0xFFFF
//  732         writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
//  733       }
??CrossCallReturnLabel_95:
        MOV     R2,#0x4
        MOV     R3,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??writeWordH?relay
//  734 
//  735       /* First the old page is compacted, then the new item will be the last one written to what
//  736        * had been the reserved page.
//  737        */
//  738       if (compactPage( pg, id ))
??initItem_9:
        ; Setup parameters for call to function compactPage
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     A,R6
        MOV     R1,A
        LCALL   ??compactPage?relay
        MOV     A,R1
        JZ      ??initItem_6
//  739       {
//  740         if ( writeItem( pgRes, id, len, buf, flag ) )
        ; Setup parameters for call to function writeItem
        MOV     A,?V0 + 2
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??writeItem?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R1
        JZ      ??initItem_10
//  741         {
//  742           rtrn = pgRes;
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R7,A
//  743         }
//  744 
//  745         if ( flag == FALSE )
??initItem_10:
        MOV     A,?V0 + 2
        JNZ     ??initItem_11
//  746         {
//  747           /* Overload 'buf' as an OUT parameter to pass back to the calling function
//  748            * the old page to be cleaned up.
//  749            */
//  750           *(uint8 *)buf = pg;
        MOV     A,R6
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
??initItem_12:
        MOVX    @DPTR,A
        SJMP    ??initItem_6
//  751         }
//  752         else
//  753         {
//  754           /* Safe to do the compacted page cleanup even if writeItem() above failed because the
//  755            * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
//  756            */
//  757           COMPACT_PAGE_CLEANUP( pg );
??initItem_11:
        ; Setup parameters for call to function setPageUse
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_45:
        ; Setup parameters for call to function erasePage
        MOV     A,R6
        MOV     R1,A
        LCALL   ??erasePage?relay
        MOV     A,R6
        MOV     DPTR,#pgRes
        SJMP    ??initItem_12
//  758         }
//  759       }
//  760     }
//  761     else
//  762     {
//  763       if ( writeItem( pg, id, len, buf, flag ) )
??initItem_7:
        ; Setup parameters for call to function writeItem
        MOV     A,?V0 + 2
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,?V0 + 0
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     A,R6
        MOV     R1,A
        LCALL   ??writeItem?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R1
        JZ      ??initItem_6
//  764       {
//  765         rtrn = pg;
        MOV     A,R6
        MOV     R7,A
//  766       }
//  767     }
//  768   }
//  769 
//  770   return rtrn;
??initItem_6:
        MOV     A,R7
        MOV     R1,A
        MOV     A,#0xa
        LJMP    ??Subroutine54_0 & 0xFFFF
        CFI EndBlock cfiBlock87
//  771 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond88 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker91 Using cfiCommon1
        CFI (cfiPicker91) NoFunction
        CFI (cfiPicker91) Picker
        MOV     R2,#0x1
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??setPageUse?relay
        RET
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiPicker91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        MOV     R3,A
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_131:
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        RET
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_95
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker97 Using cfiCommon1
        CFI (cfiPicker97) NoFunction
        CFI (cfiPicker97) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiPicker97
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine56_0:
        CFI Block cfiCond98 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_97
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker101 Using cfiCommon1
        CFI (cfiPicker101) NoFunction
        CFI (cfiPicker101) Picker
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_98:
        RET
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiPicker101
//  772 
//  773 /*********************************************************************
//  774  * @fn      setItem
//  775  *
//  776  * @brief   Set an item Id or status to mark its state.
//  777  *
//  778  * @param   pg - Valid NV page.
//  779  * @param   offset - Valid offset into the page of the item data - the header
//  780  *                   offset is calculated from this.
//  781  * @param   stat - Valid enum value for the item status.
//  782  *
//  783  * @return  none
//  784  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  785 static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
setItem:
        CFI Block cfiBlock102 Using cfiCommon0
        CFI Function setItem
        CODE
//  786 {
        FUNCALL setItem, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setItem, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setItem, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 1,R1
        MOV     ?V0 + 0,R4
//  787   osalNvHdr_t hdr;
//  788 
//  789   offset -= OSAL_NV_HDR_SIZE;
        MOV     A,R2
        ADD     A,#-0x8
        MOV     ?V0 + 2,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     ?V0 + 3,A
//  790   HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x8
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_111:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  791 
//  792   if ( stat == eNvXfer )
        MOV     A,?V0 + 0
        JNZ     ??setItem_0
//  793   {
//  794     hdr.stat = OSAL_NV_ACTIVE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  795     writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
        ; Setup parameters for call to function writeWord
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,?V0 + 2
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R3,A
        MOV     R1,?V0 + 1
        LCALL   ??writeWord?relay
        SJMP    ??CrossCallReturnLabel_101
//  796   }
//  797   else // if ( stat == eNvZero )
//  798   {
//  799     uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
//  800                                                                           OSAL_NV_HDR_SIZE;
??setItem_0:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  801     hdr.id = 0;
??CrossCallReturnLabel_8:
        LCALL   ?Subroutine8 & 0xFFFF
//  802     writeWord( pg, offset, (uint8 *)(&hdr) );
??CrossCallReturnLabel_96:
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 1
        LCALL   ??writeWord?relay
//  803     pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
        MOV     A,?V0 + 1
        LCALL   ?Subroutine23 & 0xFFFF
//  804   }
//  805 }
??CrossCallReturnLabel_101:
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock102
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock103 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock103

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_101
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker106 Using cfiCommon1
        CFI (cfiPicker106) NoFunction
        CFI (cfiPicker106) Picker
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgLost + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgLost - 242) >> 8) & 0xff
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiPicker106
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine57_0:
        CFI Block cfiCond107 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_100
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110
//  806 
//  807 /*********************************************************************
//  808  * @fn      setChk
//  809  *
//  810  * @brief   Set the item header checksum given the data buffer offset.
//  811  *
//  812  * @param   pg - Valid NV page.
//  813  * @param   offset - Valid offset into the page of the item data - the header
//  814  *                   offset is calculated from this.
//  815  * @param   chk - The checksum to set.
//  816  *
//  817  * @return  The checksum read back.
//  818  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  819 static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
setChk:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function setChk
        CODE
//  820 {
        FUNCALL setChk, writeWordH
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setChk, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     ?V0 + 0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  821   offset -= OSAL_NV_WORD_SIZE;
        MOV     A,R6
        ADD     A,#-0x4
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
//  822   writeWordH( pg, offset, (uint8 *)&chk );
        ; Setup parameters for call to function writeWordH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??writeWordH?relay
//  823   HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 2,#0x2
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_112:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  824 
//  825   return chk;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock111
??CrossCallReturnLabel_28:
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
//  826 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        LJMP    ??Subroutine60_0 & 0xFFFF
        CFI EndBlock cfiBlock112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond113 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond118) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker119 Using cfiCommon1
        CFI (cfiPicker119) NoFunction
        CFI (cfiPicker119) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiPicker119
//  827 
//  828 /*********************************************************************
//  829  * @fn      calcChkB
//  830  *
//  831  * @brief   Calculates the data checksum over the 'buf' parameter.
//  832  *
//  833  * @param   len - Byte count of the data to be checksummed.
//  834  * @param   buf - Data buffer to be checksummed.
//  835  *
//  836  * @return  Calculated checksum of the data bytes.
//  837  */
//  838 static uint16 calcChkB( uint16 len, uint8 *buf )
//  839 {
//  840   uint8 fill = len % OSAL_NV_WORD_SIZE;
//  841   uint16 chk;
//  842 
//  843   if ( !buf )
//  844   {
//  845     chk = len * OSAL_NV_ERASED;
//  846   }
//  847   else
//  848   {
//  849     chk = 0;
//  850     while ( len-- )
//  851     {
//  852       chk += *buf++;
//  853     }
//  854   }
//  855 
//  856   // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
//  857   if ( fill )
//  858   {
//  859     chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
//  860   }
//  861 
//  862   return chk;
//  863 }
//  864 
//  865 /*********************************************************************
//  866  * @fn      calcChkF
//  867  *
//  868  * @brief   Calculates the data checksum by reading the data bytes from NV.
//  869  *
//  870  * @param   pg - A valid NV Flash page.
//  871  * @param   offset - A valid offset into the page.
//  872  * @param   len - Byte count of the data to be checksummed.
//  873  *
//  874  * @return  Calculated checksum of the data bytes.
//  875  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  876 static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
calcChkF:
        CFI Block cfiBlock120 Using cfiCommon0
        CFI Function calcChkF
        CODE
//  877 {
        FUNCALL calcChkF, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  878   uint16 chk = 0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  879 
//  880   len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
        MOV     A,R6
        ADD     A,#0x3
        MOV     ?V0 + 6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 6
        LCALL   ?US_SHR
        MOV     R6,?V0 + 6
        MOV     R7,?V0 + 7
//  881 
//  882   while ( len-- )
??calcChkF_0:
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_65:
        JZ      ??calcChkF_1
//  883   {
//  884     uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
//  885 
//  886     HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 6,#0x4
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 4
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_113:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  887     offset += OSAL_NV_WORD_SIZE;
        MOV     A,?V0 + 2
        ADD     A,#0x4
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
//  888 
//  889     for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
        MOV     R0,#0x0
//  890     {
//  891       chk += tmp[cnt];
??calcChkF_2:
        MOV     ?V0 + 6,R0
        LCALL   ?Subroutine38 & 0xFFFF
//  892     }
??CrossCallReturnLabel_63:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0 + 0
        ADD     A,R2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,#0x4
        JNC     ??calcChkF_0
        SJMP    ??calcChkF_2
//  893   }
//  894 
//  895   return chk;
??calcChkF_1:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock120
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  896 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock121 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock121

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond122 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_103
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker124 Using cfiCommon1
        CFI (cfiPicker124) NoFunction
        CFI (cfiPicker124) Picker
        MOV     A,DPL
        ADD     A,?V0 + 8
        MOV     R4,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R5,A
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiPicker124
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine58_0:
        CFI Block cfiCond125 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_105
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker128 Using cfiCommon1
        CFI (cfiPicker128) NoFunction
        CFI (cfiPicker128) Picker
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R1,?V0 + 6
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiPicker128
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine59_0:
        CFI Block cfiCond129 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_106
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_111
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond141) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond141) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_120
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker149 Using cfiCommon1
        CFI (cfiPicker149) NoFunction
        CFI (cfiPicker149) Picker
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiPicker149
//  897 
//  898 /*********************************************************************
//  899  * @fn      writeWord
//  900  *
//  901  * @brief   Writes a Flash-WORD to NV.
//  902  *
//  903  * @param   pg - A valid NV Flash page.
//  904  * @param   offset - A valid offset into the page.
//  905  * @param   buf - Pointer to source buffer.
//  906  *
//  907  * @return  none
//  908  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  909 static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
writeWord:
        CFI Block cfiBlock150 Using cfiCommon0
        CFI Function writeWord
        CODE
//  910 {
        FUNCALL writeWord, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  911   offset = (offset / HAL_FLASH_WORD_SIZE) +
//  912           ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
//  913 
//  914   HalFlashWrite(offset, buf, 1);
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,A
        MOV     A,#0x9
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,?V0 + 3
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock150
//  915 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock151 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x8
        CFI EndBlock cfiBlock151
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine60_0:
        CFI Block cfiBlock152 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock152
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine61_0:
        CFI Block cfiBlock153 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock153
//  916 
//  917 /*********************************************************************
//  918  * @fn      writeWordM
//  919  *
//  920  * @brief   Writes multiple Flash-WORDs to NV.
//  921  *
//  922  * @param   pg - A valid NV Flash page.
//  923  * @param   offset - A valid offset into the page.
//  924  * @param   buf - Pointer to source buffer.
//  925  * @param   cnt - Number of 4-byte blocks to write.
//  926  *
//  927  * @return  none
//  928  */
//  929 static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
//  930 {
//  931   offset = (offset / HAL_FLASH_WORD_SIZE) +
//  932           ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
//  933   HalFlashWrite(offset, buf, cnt);
//  934 }
//  935 
//  936 /*********************************************************************
//  937  * @fn      writeWordH
//  938  *
//  939  * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
//  940  *
//  941  * @param   pg - A valid NV Flash page.
//  942  * @param   offset - A valid offset into the page.
//  943  * @param   buf - Pointer to source buffer.
//  944  *
//  945  * @return  none
//  946  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  947 static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
writeWordH:
        CFI Block cfiBlock154 Using cfiCommon0
        CFI Function writeWordH
        CODE
//  948 {
        FUNCALL writeWordH, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  949   uint8 tmp[4];
//  950 
//  951   tmp[0] = buf[0];
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  952   tmp[1] = buf[1];
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  953   tmp[2] = OSAL_NV_ERASED;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  954   tmp[3] = OSAL_NV_ERASED;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        LCALL   ?Subroutine12 & 0xFFFF
//  955 
//  956   writeWord( pg, offset, tmp );
??CrossCallReturnLabel_6:
        LCALL   ??writeWord?relay
//  957 }
        MOV     A,#0x4
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock154
//  958 
//  959 /*********************************************************************
//  960  * @fn      writeBuf
//  961  *
//  962  * @brief   Writes a data buffer to NV.
//  963  *
//  964  * @param   dstPg - A valid NV Flash page.
//  965  * @param   offset - A valid offset into the page.
//  966  * @param   len  - Byte count of the data to write.
//  967  * @param   buf  - The data to write.
//  968  *
//  969  * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
//  970  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  971 static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
writeBuf:
        CFI Block cfiBlock155 Using cfiCommon0
        CFI Function writeBuf
        CODE
//  972 {
        FUNCALL writeBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 1,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 4,R4
        MOV     ?V0 + 5,R5
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  973   uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
??CrossCallReturnLabel_35:
        MOV     A,R6
        ANL     A,#0x3
        MOV     ?V0 + 0,A
//  974   uint8 tmp[OSAL_NV_WORD_SIZE];
//  975 
//  976   if ( rem )
        JZ      ??writeBuf_0
//  977   {
//  978     dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
        MOV     A,#-0x4
        ANL     A,R6
        MOV     R6,A
//  979     HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 6,#0x4
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_114:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
??writeBuf_1:
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??writeBuf_2
//  980 
//  981     while ( (rem < OSAL_NV_WORD_SIZE) && len )
//  982     {
//  983       tmp[rem++] = *buf++;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     ?V0 + 6,?V0 + 0
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_64:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_2:
        INC     ?V0 + 0
//  984       len--;
        MOV     A,?V0 + 4
        ADD     A,#-0x1
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#-0x1
        MOV     ?V0 + 5,A
//  985     }
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x4
        JC      ??writeBuf_1
//  986 
//  987     writeWord( dstPg, dstOff, tmp );
??writeBuf_2:
        ; Setup parameters for call to function writeWord
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 1
        LCALL   ??writeWord?relay
//  988     dstOff += OSAL_NV_WORD_SIZE;
        MOV     A,R6
        ADD     A,#0x4
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  989   }
//  990 
//  991   rem = len % OSAL_NV_WORD_SIZE;
??writeBuf_0:
        MOV     A,?V0 + 4
        ANL     A,#0x3
        MOV     ?V0 + 0,A
//  992   len /= OSAL_NV_WORD_SIZE;
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,?V0 + 5
        MOV     A,#0x2
        MOV     R0,#?V0 + 6
        LCALL   ?US_SHR
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,?V0 + 7
//  993 
//  994   if ( len )
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??writeBuf_3
//  995   {
//  996     writeWordM( dstPg, dstOff, buf, len );
        ; Setup parameters for call to function HalFlashWrite
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     ?V0 + 6,R6
        MOV     ?V0 + 7,R7
        MOV     A,#0x2
        MOV     R0,#?V0 + 6
        LCALL   ?US_SHR
        MOV     ?V0 + 8,?V0 + 1
        MOV     ?V0 + 9,A
        MOV     A,#0x9
        MOV     R0,#?V0 + 8
        LCALL   ?S_SHL
        MOV     A,?V0 + 6
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 7
        ADDC    A,?V0 + 9
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  997     dstOff += OSAL_NV_WORD_SIZE * len;
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
        MOV     A,R6
        ADD     A,R0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R7,A
//  998     buf += OSAL_NV_WORD_SIZE * len;
        MOV     A,?V0 + 2
        ADD     A,R0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,R1
        MOV     ?V0 + 3,A
//  999   }
// 1000 
// 1001   if ( rem )
??writeBuf_3:
        MOV     A,?V0 + 0
        JZ      ??writeBuf_4
// 1002   {
// 1003     uint8 idx = 0;
        MOV     ?V0 + 6,#0x0
// 1004     HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x4
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 1
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_115:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        SJMP    ??writeBuf_5
// 1005     while ( rem-- )
// 1006     {
// 1007       tmp[idx++] = *buf++;
??writeBuf_6:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     ?V0 + 4,?V0 + 6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
// 1008     }
??CrossCallReturnLabel_3:
        INC     ?V0 + 6
??writeBuf_5:
        MOV     ?V0 + 4,?V0 + 0
        MOV     A,#-0x1
        ADD     A,?V0 + 4
        MOV     ?V0 + 0,A
        INC     A
        JNZ     ??writeBuf_6
// 1009     writeWord( dstPg, dstOff, tmp );
        ; Setup parameters for call to function writeWord
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 1
        LCALL   ??writeWord?relay
// 1010   }
// 1011 }
??writeBuf_4:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock155

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond156 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+-1
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker158 Using cfiCommon1
        CFI (cfiPicker158) NoFunction
        CFI (cfiPicker158) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiPicker158

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond159 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker161 Using cfiCommon1
        CFI (cfiPicker161) NoFunction
        CFI (cfiPicker161) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        RET
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiPicker161
// 1012 
// 1013 /*********************************************************************
// 1014  * @fn      xferBuf
// 1015  *
// 1016  * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
// 1017  *
// 1018  * @return  none
// 1019  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1020 static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
xferBuf:
        CFI Block cfiBlock162 Using cfiCommon0
        CFI Function xferBuf
        CODE
// 1021 {
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 6,R1
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 3,R4
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1022   uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
        MOV     A,?V0 + 0
        ANL     A,#0x3
        MOV     ?V0 + 2,A
// 1023   uint8 tmp[OSAL_NV_WORD_SIZE];
// 1024 
// 1025   if ( rem )
        JZ      ??CrossCallReturnLabel_53
// 1026   {
// 1027     dstOff -= rem;
        MOV     ?V0 + 8,A
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,?V0 + 8
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     ?V0 + 1,A
// 1028     HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 8,#0x4
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 3
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_116:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
??xferBuf_0:
        MOV     A,R6
        ORL     A,R7
        JZ      ??xferBuf_1
// 1029 
// 1030     while ( (rem < OSAL_NV_WORD_SIZE) && len )
// 1031     {
// 1032       HalFlashRead(srcPg, srcOff, tmp+rem, 1);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 8,#0x1
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 8,?V0 + 2
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
// 1033       srcOff++;
        LCALL   ?Subroutine37 & 0xFFFF
// 1034       rem++;
??CrossCallReturnLabel_61:
        INC     ?V0 + 2
// 1035       len--;
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
// 1036     }
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x4
        JC      ??xferBuf_0
// 1037 
// 1038     writeWord( dstPg, dstOff, tmp );
??xferBuf_1:
        ; Setup parameters for call to function writeWord
        LCALL   ?Subroutine33 & 0xFFFF
// 1039     dstOff += OSAL_NV_WORD_SIZE;
// 1040   }
// 1041 
// 1042   rem = len % OSAL_NV_WORD_SIZE;
??CrossCallReturnLabel_53:
        MOV     A,R6
        ANL     A,#0x3
        MOV     ?V0 + 2,A
// 1043   len /= OSAL_NV_WORD_SIZE;
        MOV     ?V0 + 8,R6
        MOV     ?V0 + 9,R7
        MOV     A,#0x2
        MOV     R0,#?V0 + 8
        LCALL   ?US_SHR
        MOV     R6,?V0 + 8
        MOV     R7,?V0 + 9
        SJMP    ??CrossCallReturnLabel_54
// 1044 
// 1045   while ( len-- )
// 1046   {
// 1047     HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
??xferBuf_2:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 8,#0x4
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_105:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
// 1048     srcOff += OSAL_NV_WORD_SIZE;
        MOV     A,?V0 + 4
        ADD     A,#0x4
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
// 1049     writeWord( dstPg, dstOff, tmp );
        ; Setup parameters for call to function writeWord
        LCALL   ?Subroutine33 & 0xFFFF
// 1050     dstOff += OSAL_NV_WORD_SIZE;
// 1051   }
??CrossCallReturnLabel_54:
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_66:
        JNZ     ??xferBuf_2
// 1052 
// 1053   if ( rem )
        MOV     A,?V0 + 2
        JZ      ??xferBuf_3
// 1054   {
// 1055     uint8 idx = 0;
        MOV     R6,#0x0
// 1056     HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 8,#0x4
        MOV     ?V0 + 9,R6
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 3
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_117:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        SJMP    ??xferBuf_4
// 1057     while ( rem-- )
// 1058     {
// 1059       HalFlashRead(srcPg, srcOff, tmp+idx, 1);
??xferBuf_5:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 8,#0x1
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 8,R6
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
// 1060       srcOff++;
        LCALL   ?Subroutine37 & 0xFFFF
// 1061       idx++;
??CrossCallReturnLabel_62:
        INC     R6
// 1062     }
??xferBuf_4:
        MOV     R7,?V0 + 2
        MOV     A,#-0x1
        ADD     A,R7
        MOV     ?V0 + 2,A
        INC     A
        JNZ     ??xferBuf_5
// 1063     writeWord( dstPg, dstOff, tmp );
        ; Setup parameters for call to function writeWord
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 3
        LCALL   ??writeWord?relay
// 1064   }
// 1065 }
??xferBuf_3:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock162

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond163 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond165) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond165) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond165) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker166 Using cfiCommon1
        CFI (cfiPicker166) NoFunction
        CFI (cfiPicker166) Picker
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiPicker166

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond167 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker169 Using cfiCommon1
        CFI (cfiPicker169) NoFunction
        CFI (cfiPicker169) Picker
        MOV     A,?V0 + 4
        ADD     A,#0x1
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        RET
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiPicker169

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond170 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker172 Using cfiCommon1
        CFI (cfiPicker172) NoFunction
        CFI (cfiPicker172) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 3
        LCALL   ??writeWord?relay
        MOV     A,?V0 + 0
        ADD     A,#0x4
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiPicker172
// 1066 
// 1067 /*********************************************************************
// 1068  * @fn      writeItem
// 1069  *
// 1070  * @brief   Writes an item header/data combo to the specified NV page.
// 1071  *
// 1072  * @param   pg - Valid NV Flash page.
// 1073  * @param   id - Valid NV item Id.
// 1074  * @param   len  - Byte count of the data to write.
// 1075  * @param   buf  - The data to write. If NULL, no data/checksum write.
// 1076  * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
// 1077  *
// 1078  * @return  TRUE if header/data to write matches header/data read back, else FALSE.
// 1079  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1080 static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
writeItem:
        CFI Block cfiBlock173 Using cfiCommon0
        CFI Function writeItem
        CODE
// 1081 {
        FUNCALL writeItem, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, writeBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, calcChkF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, setChk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, hotItemUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
// 1082   uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
        MOV     A,R1
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL   ?Subroutine24 & 0xFFFF
// 1083   uint8 rtrn = FALSE;
??CrossCallReturnLabel_36:
        MOV     ?V0 + 1,#0x0
// 1084   osalNvHdr_t hdr;
// 1085 
// 1086   hdr.id = id;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1087   hdr.len = len;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine12 & 0xFFFF
// 1088 
// 1089   writeWord( pg, offset, (uint8 *)&hdr );
??CrossCallReturnLabel_7:
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 0
        LCALL   ??writeWord?relay
// 1090   HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 10,#0x8
        MOV     ?V0 + 11,#0x0
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 0
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_118:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
// 1091 
// 1092   if ( (hdr.id == id) && (hdr.len == len) )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,?V0 + 8
        JNZ     ??writeItem_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 9
??writeItem_0:
        JZ      $+5
        LJMP    ??writeItem_1 & 0xFFFF
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??writeItem_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??writeItem_2:
        JZ      $+5
        LJMP    ??writeItem_1 & 0xFFFF
// 1093   {
// 1094     if ( flag )
        MOV     A,?V0 + 4
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_19 & 0xFFFF
// 1095     {
// 1096       hdr.chk = calcChkB( len, buf );
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        ANL     A,#0x3
        MOV     ?V0 + 4,A
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??writeItem_3
        MOV     A,R0
        MOV     B,#-0x1
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#-0x1
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        SJMP    ??writeItem_4
??writeItem_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??writeItem_5
??writeItem_6:
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R2
        ADD     A,R4
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        INC     DPTR
??writeItem_5:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R4
        ORL     A,R5
        JNZ     ??writeItem_6
??writeItem_4:
        MOV     A,?V0 + 4
        JZ      ??writeItem_7
        MOV     A,#0x4
        CLR     C
        SUBB    A,?V0 + 4
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R0
        MOV     B,#-0x1
        MUL     AB
        MOV     R0,A
        MOV     R4,B
        MOV     B,#-0x1
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R3,A
??writeItem_7:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1097 
// 1098       offset += OSAL_NV_HDR_SIZE;
        LCALL   ?Subroutine34 & 0xFFFF
// 1099       if ( buf != NULL )
??CrossCallReturnLabel_56:
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??writeItem_8
// 1100       {
// 1101         writeBuf( pg, offset, len, buf );
        ; Setup parameters for call to function writeBuf
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 0
        LCALL   ??writeBuf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
// 1102       }
// 1103 
// 1104       if ( hdr.chk == calcChkF( pg, offset, len ) )
??writeItem_8:
        ; Setup parameters for call to function calcChkF
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??writeItem_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??writeItem_9:
        JNZ     ??writeItem_10
// 1105       {
// 1106         if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
        ; Setup parameters for call to function setChk
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??writeItem_11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??writeItem_11:
        JNZ     ??writeItem_10
// 1107         {
// 1108           hotItemUpdate(pg, offset, hdr.id);
        ; Setup parameters for call to function hotItemUpdate
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine17 & 0xFFFF
// 1109           rtrn = TRUE;
// 1110         }
// 1111       }
// 1112     }
// 1113     else
// 1114     {
// 1115       rtrn = TRUE;
??CrossCallReturnLabel_19:
        MOV     ?V0 + 1,#0x1
// 1116     }
// 1117 
// 1118     len = OSAL_NV_ITEM_SIZE( hdr.len );
??writeItem_10:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0xc
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#-0x1
        JC      ??writeItem_12
        MOV     R6,#-0x4
        MOV     R7,#-0x1
        SJMP    ??CrossCallReturnLabel_102
??writeItem_12:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
// 1119   }
??CrossCallReturnLabel_9:
        SJMP    ??CrossCallReturnLabel_102
// 1120   else
// 1121   {
// 1122     len = OSAL_NV_ITEM_SIZE( hdr.len );
??writeItem_1:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0xc
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#-0x1
        JC      ??writeItem_13
        MOV     R6,#-0x4
        MOV     R7,#-0x1
        SJMP    ??CrossCallReturnLabel_10
??writeItem_13:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
// 1123 
// 1124     if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
??CrossCallReturnLabel_10:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_124:
        MOV     R0,A
        MOV     A,#0x8
        SUBB    A,R1
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,R6
        MOV     A,R1
        SUBB    A,R7
        JNC     ??writeItem_14
// 1125     {
// 1126       len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
        LCALL   ?Subroutine18 & 0xFFFF
// 1127     }
??CrossCallReturnLabel_125:
        MOV     R6,A
        MOV     A,#0x8
        SUBB    A,R1
        MOV     R7,A
// 1128 
// 1129     pgLost[pg - OSAL_NV_PAGE_BEG] += len;
??writeItem_14:
        MOV     A,?V0 + 0
        LCALL   ?Subroutine23 & 0xFFFF
// 1130   }
// 1131   pgOff[pg - OSAL_NV_PAGE_BEG] += len;
??CrossCallReturnLabel_102:
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgOff + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgOff - 242) >> 8) & 0xff
        LCALL   ??Subroutine57_0 & 0xFFFF
// 1132 
// 1133   return rtrn;
??CrossCallReturnLabel_100:
        MOV     R1,?V0 + 1
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock173
// 1134 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond174 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker176 Using cfiCommon1
        CFI (cfiPicker176) NoFunction
        CFI (cfiPicker176) Picker
        MOV     A,?V0 + 2
        ADD     A,#0x8
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiPicker176

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond177 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond178) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond178) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond178) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond178) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond178) CFA_SP SP+0
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker180 Using cfiCommon1
        CFI (cfiPicker180) NoFunction
        CFI (cfiPicker180) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiPicker180

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond181 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond182) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond182) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond183) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond183) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker184 Using cfiCommon1
        CFI (cfiPicker184) NoFunction
        CFI (cfiPicker184) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        RET
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiPicker184

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond185 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_124
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_125
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond186) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker187 Using cfiCommon1
        CFI (cfiPicker187) NoFunction
        CFI (cfiPicker187) Picker
        MOV     A,?V0 + 0
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiPicker187
        REQUIRE ??Subroutine62_0
        ; // Fall through to label ??Subroutine62_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine62_0:
        CFI Block cfiCond188 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_123
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_124
        CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond189) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond189) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond189) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond189) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond189) CFA_SP SP+0
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_125
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond190) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond190) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker191 Using cfiCommon1
        CFI (cfiPicker191) NoFunction
        CFI (cfiPicker191) Picker
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_128:
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_132:
        CLR     A
        CLR     C
        SUBB    A,R0
        RET
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiPicker191

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond192 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond193) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond193) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond194) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond194) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+0
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker195 Using cfiCommon1
        CFI (cfiPicker195) NoFunction
        CFI (cfiPicker195) Picker
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_73:
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R7,A
        RET
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiPicker195

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond196 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond197) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker198 Using cfiCommon1
        CFI (cfiPicker198) NoFunction
        CFI (cfiPicker198) Picker
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_99:
        RET
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiPicker198

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiCond199 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_95
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond200 Using cfiCommon0
        CFI (cfiCond200) NoFunction
        CFI (cfiCond200) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_96
        CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond200) CFA_SP SP+0
        CFI (cfiCond200) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_97
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_6
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_7
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond203) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker204 Using cfiCommon1
        CFI (cfiPicker204) NoFunction
        CFI (cfiPicker204) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function writeWordH
        ; Setup parameters for call to function writeWord
        ; Setup parameters for call to function writeWord
        ; Setup parameters for call to function writeWord
        ; Setup parameters for call to function writeWord
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        RET
        CFI EndBlock cfiCond199
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiPicker204
// 1135 
// 1136 /*********************************************************************
// 1137  * @fn      hotItem
// 1138  *
// 1139  * @brief   Look for the parameter 'id' in the hot items array.
// 1140  *
// 1141  * @param   id - A valid NV item Id.
// 1142  *
// 1143  * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
// 1144  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1145 static uint8 hotItem(uint16 id)
hotItem:
        CFI Block cfiBlock205 Using cfiCommon0
        CFI Function hotItem
        CODE
// 1146 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1147   uint8 hotIdx;
// 1148 
// 1149   for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
        MOV     R1,#0x0
// 1150   {
// 1151     if (hotIds[hotIdx] == id)
??hotItem_0:
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R4,A
        CLR     A
        RLC     A
        MOV     R5,A
        MOV     A,#hotIds & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#(hotIds >> 8) & 0xff
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??hotItem_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??hotItem_1:
        JZ      ??hotItem_2
// 1152     {
// 1153       break;
// 1154     }
// 1155   }
        INC     R1
        MOV     A,R1
        CLR     C
        SUBB    A,#0x3
        JC      ??hotItem_0
        CFI EndBlock cfiBlock205
// 1156 
// 1157   return hotIdx;
??hotItem_2:
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
// 1158 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock206 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock206
// 1159 
// 1160 /*********************************************************************
// 1161  * @fn      hotItemUpdate
// 1162  *
// 1163  * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
// 1164  *
// 1165  * @param   pg - The new NV page corresponding to the hot item.
// 1166  * @param   off - The new NV page offset corresponding to the hot item.
// 1167  * @param   id - A valid NV item Id.
// 1168  *
// 1169  * @return  none
// 1170  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1171 static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
hotItemUpdate:
        CFI Block cfiBlock207 Using cfiCommon0
        CFI Function hotItemUpdate
        CODE
// 1172 {
        FUNCALL hotItemUpdate, hotItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
// 1173   uint8 hotIdx = hotItem(id);
        ; Setup parameters for call to function hotItem
        LCALL   ?Subroutine40 & 0xFFFF
// 1174 
// 1175   if (hotIdx < OSAL_NV_MAX_HOT)
??CrossCallReturnLabel_68:
        JNC     ??hotItemUpdate_0
// 1176   {
// 1177     {
// 1178       hotPg[hotIdx] = pg;
        LCALL   ?Subroutine32 & 0xFFFF
// 1179       hotOff[hotIdx] = off;
// 1180     }
// 1181   }
??CrossCallReturnLabel_51:
        MOV     A,R6
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
// 1182 }
??hotItemUpdate_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock207
// 1183 
// 1184 /*********************************************************************
// 1185  * @fn      osal_nv_init
// 1186  *
// 1187  * @brief   Initialize NV service.
// 1188  *
// 1189  * @param   p - Not used.
// 1190  *
// 1191  * @return  none
// 1192  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1193 void osal_nv_init( void *p )
osal_nv_init:
        CFI Block cfiBlock208 Using cfiCommon0
        CFI Function osal_nv_init
        CODE
// 1194 {
        FUNCALL osal_nv_init, initNV
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1195   (void)p;  // Suppress Lint warning.
// 1196   (void)initNV();  // Always returns TRUE after pages have been erased.
        ; Setup parameters for call to function initNV
        LCALL   ??initNV?relay
// 1197 }
        SJMP    ?Subroutine5
        CFI EndBlock cfiBlock208
// 1198 
// 1199 /*********************************************************************
// 1200  * @fn      osal_nv_item_init
// 1201  *
// 1202  * @brief   If the NV item does not already exist, it is created and
// 1203  *          initialized with the data passed to the function, if any.
// 1204  *          This function must be called before calling osal_nv_read() or
// 1205  *          osal_nv_write().
// 1206  *
// 1207  * @param   id  - Valid NV item Id.
// 1208  * @param   len - Item length.
// 1209  * @param  *buf - Pointer to item initalization data. Set to NULL if none.
// 1210  *
// 1211  * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
// 1212  *          SUCCESS        - Id already existed, no action taken.
// 1213  *          NV_OPER_FAILED - Failure to find or create Id.
// 1214  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1215 uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
osal_nv_item_init:
        CFI Block cfiBlock209 Using cfiCommon0
        CFI Function osal_nv_item_init
        CODE
// 1216 {
        FUNCALL osal_nv_item_init, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_item_init, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_item_init, hotItemUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_item_init, initItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
// 1217   uint16 offset;
// 1218 
// 1219   if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
??CrossCallReturnLabel_37:
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4e
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JNZ     ??osal_nv_item_init_0
// 1220   {
// 1221     return NV_OPER_FAILED;
??osal_nv_item_init_1:
        MOV     R1,#0xa
        SJMP    ??osal_nv_item_init_2
// 1222   }
// 1223   else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
??osal_nv_item_init_0:
        ; Setup parameters for call to function findItem
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??findItem?relay
        MOV     A,R2
        ORL     A,R3
        JZ      ??osal_nv_item_init_3
// 1224   {
// 1225     // Re-populate the NV hot item data if the corresponding items are already established.
// 1226     hotItemUpdate(findPg, offset, id);
        ; Setup parameters for call to function hotItemUpdate
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??hotItemUpdate?relay
// 1227 
// 1228     return SUCCESS;
        MOV     R1,#0x0
        SJMP    ??osal_nv_item_init_2
// 1229   }
// 1230   else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
??osal_nv_item_init_3:
        ; Setup parameters for call to function initItem
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x1
        LCALL   ??initItem?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JZ      ??osal_nv_item_init_1
// 1231   {
// 1232     return NV_ITEM_UNINIT;
        MOV     R1,#0x9
// 1233   }
??osal_nv_item_init_2:
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock209
// 1234   else
// 1235   {
// 1236     return NV_OPER_FAILED;
// 1237   }
// 1238 }
// 1239 
// 1240 /*********************************************************************
// 1241  * @fn      osal_nv_item_len
// 1242  *
// 1243  * @brief   Get the data length of the item stored in NV memory.
// 1244  *
// 1245  * @param   id  - Valid NV item Id.
// 1246  *
// 1247  * @return  Item length, if found; zero otherwise.
// 1248  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1249 uint16 osal_nv_item_len( uint16 id )
osal_nv_item_len:
        CFI Block cfiBlock210 Using cfiCommon0
        CFI Function osal_nv_item_len
        CODE
// 1250 {
        FUNCALL osal_nv_item_len, hotItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_item_len, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_item_len, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1251   osalNvHdr_t hdr;
// 1252   uint16 offset;
// 1253   uint8 hotIdx;
// 1254 
// 1255   if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
        ; Setup parameters for call to function hotItem
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_69:
        JNC     ??osal_nv_item_len_0
// 1256   {
// 1257     findPg = hotPg[hotIdx];
        LCALL   ?Subroutine32 & 0xFFFF
// 1258     offset = hotOff[hotIdx];
// 1259   }
??CrossCallReturnLabel_52:
        MOVX    A,@DPTR
        MOV     DPTR,#findPg
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?Subroutine21 & 0xFFFF
// 1260   else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
// 1261   {
// 1262     return 0;
// 1263   }
// 1264 
// 1265   HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
??CrossCallReturnLabel_29:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 2,#0x8
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R2
        ADD     A,#-0x8
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_119:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1266   return hdr.len;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_30:
        LJMP    ?Subroutine0 & 0xFFFF
??osal_nv_item_len_0:
        ; Setup parameters for call to function findItem
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??findItem?relay
        MOV     ?V0 + 3,R3
        MOV     R1,?V0 + 3
        MOV     A,R2
        ORL     A,R1
        JNZ     ??CrossCallReturnLabel_29
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??CrossCallReturnLabel_30
        CFI EndBlock cfiBlock210
// 1267 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond211 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond212 Using cfiCommon0
        CFI (cfiCond212) NoFunction
        CFI (cfiCond212) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond212) CFA_SP SP+0
        CFI (cfiCond212) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond213) CFA_SP SP+0
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker214 Using cfiCommon1
        CFI (cfiPicker214) NoFunction
        CFI (cfiPicker214) Picker
        LCALL   ??hotItem?relay
        MOV     A,R1
        MOV     R0,A
        CLR     C
        SUBB    A,#0x3
        RET
        CFI EndBlock cfiCond211
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiPicker214

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond215 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond216 Using cfiCommon0
        CFI (cfiCond216) NoFunction
        CFI (cfiCond216) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond216) CFA_SP SP+0
        CFI (cfiCond216) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker217 Using cfiCommon1
        CFI (cfiPicker217) NoFunction
        CFI (cfiPicker217) Picker
        MOV     A,#hotPg & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(hotPg >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond215
        CFI EndBlock cfiCond216
        CFI EndBlock cfiPicker217

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond218 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker220 Using cfiCommon1
        CFI (cfiPicker220) NoFunction
        CFI (cfiPicker220) Picker
        MOVX    @DPTR,A
        MOV     A,R0
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_83:
        RET
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiPicker220

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
        CFI Block cfiCond221 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond222 Using cfiCommon0
        CFI (cfiCond222) NoFunction
        CFI (cfiCond222) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_1
        CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond222) CFA_SP SP+0
        CFI (cfiCond222) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond223 Using cfiCommon0
        CFI (cfiCond223) NoFunction
        CFI (cfiCond223) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond223) CFA_SP SP+0
        CFI (cfiCond223) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker224 Using cfiCommon1
        CFI (cfiPicker224) NoFunction
        CFI (cfiPicker224) Picker
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#hotOff & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(hotOff >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond221
        CFI EndBlock cfiCond222
        CFI EndBlock cfiCond223
        CFI EndBlock cfiPicker224
// 1268 
// 1269 /*********************************************************************
// 1270  * @fn      osal_nv_write
// 1271  *
// 1272  * @brief   Write a data item to NV. Function can write an entire item to NV or
// 1273  *          an element of an item by indexing into the item with an offset.
// 1274  *
// 1275  * @param   id  - Valid NV item Id.
// 1276  * @param   ndx - Index offset into item
// 1277  * @param   len - Length of data to write.
// 1278  * @param  *buf - Data to write.
// 1279  *
// 1280  * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
// 1281  *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
// 1282  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1283 uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
osal_nv_write:
        CFI Block cfiBlock225 Using cfiCommon0
        CFI Function osal_nv_write
        CODE
// 1284 {
        FUNCALL osal_nv_write, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, initItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, xferBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, writeBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, xferBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, calcChkF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, setChk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, hotItemUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, erasePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, setPageUse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, erasePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 14,R2
        MOV     ?V0 + 15,R3
        MOV     ?V0 + 4,R4
        MOV     ?V0 + 5,R5
        MOV     A,#0x23
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
// 1285   uint8 rtrn = SUCCESS;
        MOV     ?V0 + 9,#0x0
// 1286 
// 1287   if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4e
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JNZ     ??osal_nv_write_0
// 1288   {
// 1289     return NV_OPER_FAILED;
??osal_nv_write_1:
        MOV     R1,#0xa
        LJMP    ??osal_nv_write_2 & 0xFFFF
// 1290   }
// 1291   else if ( len != 0 )
??osal_nv_write_0:
        MOV     A,?V0 + 10
        ORL     A,?V0 + 11
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_25 & 0xFFFF
// 1292   {
// 1293     osalNvHdr_t hdr;
// 1294     uint16 origOff, srcOff;
// 1295     uint16 cnt, chk;
// 1296     uint8 *ptr, srcPg;
// 1297 
// 1298     origOff = srcOff = findItem( id );
        ; Setup parameters for call to function findItem
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        LCALL   ??findItem?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1299     srcPg = findPg;
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
// 1300     if ( srcOff == OSAL_NV_ITEM_NULL )
        MOV     A,R0
        ORL     A,?V0 + 3
        JNZ     ??osal_nv_write_3
// 1301     {
// 1302       return NV_ITEM_UNINIT;
        MOV     R1,#0x9
        LJMP    ??osal_nv_write_2 & 0xFFFF
// 1303     }
// 1304 
// 1305     HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
??osal_nv_write_3:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R2
        ADD     A,#-0x8
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     R1,?V0 + 8
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_120:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
// 1306     if ( hdr.len < (ndx + len) )
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 4
        ADD     A,?V0 + 10
        MOV     R0,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 11
        MOV     R1,A
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JC      ??osal_nv_write_1
// 1307     {
// 1308       return NV_OPER_FAILED;
// 1309     }
// 1310 
// 1311     srcOff += ndx;
        LCALL   ?Subroutine41 & 0xFFFF
// 1312     ptr = buf;
??CrossCallReturnLabel_71:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
// 1313     cnt = len;
??CrossCallReturnLabel_34:
        MOV     R6,?V0 + 10
        MOV     R7,?V0 + 11
// 1314     chk = 0;
        MOV     ?V0 + 0,#0x0
        SJMP    ??osal_nv_write_4
// 1315     while ( cnt-- )
// 1316     {
// 1317       uint8 tmp;
// 1318       HalFlashRead(srcPg, srcOff, &tmp, 1);
??osal_nv_write_5:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 12,#0x1
        MOV     ?V0 + 13,#0x0
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 8
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_121:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
// 1319       if ( tmp != *ptr )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??osal_nv_write_6
// 1320       {
// 1321         chk = 1;  // Mark that at least one byte is different.
        MOV     ?V0 + 0,#0x1
// 1322         // Calculate expected checksum after transferring old data and writing new data.
// 1323         hdr.chk -= tmp;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        MOVX    @DPTR,A
// 1324         hdr.chk += *ptr;
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
// 1325       }
// 1326       srcOff++;
??osal_nv_write_6:
        MOV     A,?V0 + 2
        ADD     A,#0x1
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
// 1327       ptr++;
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        INC     DPTR
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
// 1328     }
??osal_nv_write_4:
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_67:
        JNZ     ??osal_nv_write_5
// 1329 
// 1330     if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??CrossCallReturnLabel_25 & 0xFFFF
// 1331     {
// 1332       uint8 comPg = OSAL_NV_PAGE_NULL;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
// 1333       uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
        ; Setup parameters for call to function initItem
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        MOV     R1,#0x0
        LCALL   ??initItem?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R1
        MOV     ?V0 + 0,A
// 1334 
// 1335       if ( dstPg != OSAL_NV_PAGE_NULL )
        JNZ     $+5
        LJMP    ??osal_nv_write_7 & 0xFFFF
// 1336       {
// 1337         uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_23:
        JC      ??osal_nv_write_8
        MOV     R6,#-0x4
        MOV     R7,#-0x1
        SJMP    ??osal_nv_write_9
??osal_nv_write_8:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
// 1338         uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
??osal_nv_write_9:
        LCALL   ?Subroutine27 & 0xFFFF
// 1339         srcOff = origOff;
// 1340 
// 1341         /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
// 1342          * OSAL_Nv interruptions caused by resets.
// 1343          */
// 1344         if ( hdr.stat == OSAL_NV_ERASED_ID )
??CrossCallReturnLabel_40:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??osal_nv_write_10
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??osal_nv_write_10:
        JNZ     ??CrossCallReturnLabel_24
// 1345         {
// 1346           setItem( srcPg, srcOff, eNvXfer );
        ; Setup parameters for call to function setItem
        MOV     R4,#0x0
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
// 1347         }
// 1348 
// 1349         xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
??CrossCallReturnLabel_24:
        ; Setup parameters for call to function xferBuf
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     R4,?V0 + 0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     R1,?V0 + 8
        LCALL   ??xferBuf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
// 1350         srcOff += ndx;
// 1351         dstOff += ndx;
        LCALL   ?Subroutine41 & 0xFFFF
// 1352 
// 1353         writeBuf( dstPg, dstOff, len, buf );
??CrossCallReturnLabel_72:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 0
        LCALL   ??writeBuf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
// 1354         srcOff += len;
// 1355         dstOff += len;
// 1356 
// 1357         xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
        ; Setup parameters for call to function xferBuf
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 4
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 5
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,?V0 + 10
        MOV     ?V0 + 6,A
        MOV     A,R1
        SUBB    A,?V0 + 11
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,?V0 + 2
        ADD     A,?V0 + 10
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 11
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     R4,?V0 + 0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,?V0 + 4
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 5
        MOV     R1,A
        MOV     A,R0
        ADD     A,?V0 + 10
        MOV     R2,A
        MOV     A,R1
        ADDC    A,?V0 + 11
        MOV     R3,A
        MOV     R1,?V0 + 8
        LCALL   ??xferBuf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
// 1358 
// 1359         // Calculate and write the new checksum.
// 1360         dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
        LCALL   ?Subroutine27 & 0xFFFF
// 1361 
// 1362         if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
??CrossCallReturnLabel_41:
        ; Setup parameters for call to function calcChkF
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??osal_nv_write_11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??osal_nv_write_11:
        JNZ     ??osal_nv_write_7
// 1363         {
// 1364           if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
        ; Setup parameters for call to function setChk
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??osal_nv_write_12
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??osal_nv_write_12:
        JZ      ??osal_nv_write_13
// 1365           {
// 1366             rtrn = NV_OPER_FAILED;
??osal_nv_write_7:
        MOV     ?V0 + 9,#0xa
        SJMP    ??CrossCallReturnLabel_20
// 1367           }
// 1368           else
// 1369           {
// 1370             hotItemUpdate(dstPg, dstOff, hdr.id);
??osal_nv_write_13:
        ; Setup parameters for call to function hotItemUpdate
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
// 1371           }
// 1372         }
// 1373         else
// 1374         {
// 1375           rtrn = NV_OPER_FAILED;
// 1376         }
// 1377       }
// 1378       else
// 1379       {
// 1380         rtrn = NV_OPER_FAILED;
// 1381       }
// 1382 
// 1383       if ( comPg != OSAL_NV_PAGE_NULL )
??CrossCallReturnLabel_20:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??osal_nv_write_14
// 1384       {
// 1385         /* Even though the page compaction succeeded, if the new item is coming from the compacted
// 1386          * page and writing the new value failed, then the compaction must be aborted.
// 1387          */
// 1388         if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
        XRL     A,?V0 + 8
        JNZ     ??osal_nv_write_15
        MOV     A,#0xa
        XRL     A,?V0 + 9
        JNZ     ??osal_nv_write_15
// 1389         {
// 1390           erasePage( pgRes );
        ; Setup parameters for call to function erasePage
        LCALL   ?Subroutine26 & 0xFFFF
// 1391         }
??CrossCallReturnLabel_93:
        SJMP    ??osal_nv_write_14
// 1392         else
// 1393         {
// 1394           COMPACT_PAGE_CLEANUP( comPg );
??osal_nv_write_15:
        ; Setup parameters for call to function setPageUse
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_46:
        ; Setup parameters for call to function erasePage
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_94:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPTR,#pgRes
        MOVX    @DPTR,A
// 1395         }
// 1396       }
// 1397 
// 1398       /* Zero of the old item must wait until after compact page cleanup has finished - if the item
// 1399        * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
// 1400        */
// 1401       if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
??osal_nv_write_14:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,?V0 + 8
        JZ      ??CrossCallReturnLabel_25
        MOV     A,#0xa
        XRL     A,?V0 + 9
        JZ      ??CrossCallReturnLabel_25
// 1402       {
// 1403         setItem( srcPg, origOff, eNvZero );
        ; Setup parameters for call to function setItem
        MOV     R4,#0x1
        MOV     A,R4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
// 1404       }
// 1405     }
// 1406   }
// 1407 
// 1408   return rtrn;
??CrossCallReturnLabel_25:
        MOV     R1,?V0 + 9
??osal_nv_write_2:
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock225
// 1409 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiCond226 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_77
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond227) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond227) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond227) CFA_SP SP+0
        CFI (cfiCond227) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_11
        CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond228) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond228) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond228) CFA_SP SP+0
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond229 Using cfiCommon0
        CFI (cfiCond229) NoFunction
        CFI (cfiCond229) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_12
        CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond229) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond229) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond229) CFA_SP SP+0
        CFI (cfiCond229) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_13
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond231 Using cfiCommon0
        CFI (cfiCond231) NoFunction
        CFI (cfiCond231) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond231) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond231) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond231) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond231) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond231) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond231) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond231) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond231) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond231) CFA_SP SP+0
        CFI (cfiCond231) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_42
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond232) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond232) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_43
        CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond233) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond233) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond233) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond233) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond233) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond233) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond233) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond233) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond233) CFA_SP SP+0
        CFI (cfiCond233) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker234 Using cfiCommon1
        CFI (cfiPicker234) NoFunction
        CFI (cfiPicker234) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiPicker234

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond235 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond236) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond236) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond236) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond236) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond236) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond236) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond236) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond236) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond236) CFA_SP SP+0
        CFI (cfiCond236) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker237 Using cfiCommon1
        CFI (cfiPicker237) NoFunction
        CFI (cfiPicker237) Picker
        MOV     A,?V0 + 2
        ADD     A,?V0 + 4
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 5
        MOV     ?V0 + 3,A
        ; Setup parameters for call to function writeBuf
        MOV     A,#0x25
        RET
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiPicker237

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond238 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond239) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond239) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond239) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond239) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond239) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond239) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond239) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+0
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker240 Using cfiCommon1
        CFI (cfiPicker240) NoFunction
        CFI (cfiPicker240) Picker
        MOV     R1,?V0 + 0
        LCALL   ??calcChkF?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
        RET
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiPicker240

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond241 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond242) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond242) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond242) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond242) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond242) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond242) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker243 Using cfiCommon1
        CFI (cfiPicker243) NoFunction
        CFI (cfiPicker243) Picker
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        RET
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiPicker243

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond244 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond245) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond245) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond245) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond245) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond245) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond245) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond245) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond245) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond245) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond245) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond245) CFA_SP SP+0
        CFI (cfiCond245) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker246 Using cfiCommon1
        CFI (cfiPicker246) NoFunction
        CFI (cfiPicker246) Picker
        MOV     A,?V0 + 0
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_126:
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R6
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R7
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiPicker246

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond247 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond248 Using cfiCommon0
        CFI (cfiCond248) NoFunction
        CFI (cfiCond248) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond248) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond248) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond248) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond248) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond248) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond248) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond248) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond248) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond248) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond248) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond248) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond248) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond248) CFA_SP SP+0
        CFI (cfiCond248) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker249 Using cfiCommon1
        CFI (cfiPicker249) NoFunction
        CFI (cfiPicker249) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,?V0 + 8
        LCALL   ??setItem?relay
        RET
        CFI EndBlock cfiCond247
        CFI EndBlock cfiCond248
        CFI EndBlock cfiPicker249

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond250 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond251 Using cfiCommon0
        CFI (cfiCond251) NoFunction
        CFI (cfiCond251) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond251) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond251) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond251) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond251) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond251) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond251) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond251) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond251) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond251) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond251) CFA_SP SP+0
        CFI (cfiCond251) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker252 Using cfiCommon1
        CFI (cfiPicker252) NoFunction
        CFI (cfiPicker252) Picker
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL   ??hotItemUpdate?relay
        RET
        CFI EndBlock cfiCond250
        CFI EndBlock cfiCond251
        CFI EndBlock cfiPicker252

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond253 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond254 Using cfiCommon0
        CFI (cfiCond254) NoFunction
        CFI (cfiCond254) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond254) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond254) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond254) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond254) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond254) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond254) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond254) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond254) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond254) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond254) CFA_SP SP+0
        CFI (cfiCond254) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker255 Using cfiCommon1
        CFI (cfiPicker255) NoFunction
        CFI (cfiPicker255) Picker
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL   ??setChk?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
        RET
        CFI EndBlock cfiCond253
        CFI EndBlock cfiCond254
        CFI EndBlock cfiPicker255

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiCond256 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond257 Using cfiCommon0
        CFI (cfiCond257) NoFunction
        CFI (cfiCond257) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_20
        CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond257) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond257) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond257) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond257) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond257) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond257) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond257) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond257) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond257) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond257) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond257) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond257) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond257) CFA_SP SP+0
        CFI (cfiCond257) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond258 Using cfiCommon0
        CFI (cfiCond258) NoFunction
        CFI (cfiCond258) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_14
        CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond258) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond258) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond258) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond258) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond258) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond258) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond258) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond258) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond258) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond258) CFA_SP SP+0
        CFI (cfiCond258) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond259 Using cfiCommon0
        CFI (cfiCond259) NoFunction
        CFI (cfiCond259) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_15
        CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond259) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond259) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond259) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond259) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond259) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond259) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond259) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond259) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond259) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond259) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond259) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond259) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond259) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond259) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond259) CFA_SP SP+0
        CFI (cfiCond259) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker260 Using cfiCommon1
        CFI (cfiPicker260) NoFunction
        CFI (cfiPicker260) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 0
        RET
        CFI EndBlock cfiCond256
        CFI EndBlock cfiCond257
        CFI EndBlock cfiCond258
        CFI EndBlock cfiCond259
        CFI EndBlock cfiPicker260
// 1410 
// 1411 /*********************************************************************
// 1412  * @fn      osal_nv_read
// 1413  *
// 1414  * @brief   Read data from NV. This function can be used to read an entire item from NV or
// 1415  *          an element of an item by indexing into the item with an offset.
// 1416  *          Read data is copied into *buf.
// 1417  *
// 1418  * @param   id  - Valid NV item Id.
// 1419  * @param   ndx - Index offset into item
// 1420  * @param   len - Length of data to read.
// 1421  * @param  *buf - Data is read into this buffer.
// 1422  *
// 1423  * @return  SUCCESS if NV data was copied to the parameter 'buf'.
// 1424  *          Otherwise, NV_OPER_FAILED for failure.
// 1425  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1426 uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
osal_nv_read:
        CFI Block cfiBlock261 Using cfiCommon0
        CFI Function osal_nv_read
        CODE
// 1427 {
        FUNCALL osal_nv_read, hotItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_read, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_read, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_read, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
// 1428   uint16 offset;
// 1429   uint8 hotIdx;
// 1430 
// 1431   if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
        ; Setup parameters for call to function hotItem
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_70:
        JNC     ??osal_nv_read_0
// 1432   {
// 1433     HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
        MOV     DPL,R0
        MOV     R6,DPL
        ; Setup parameters for call to function HalFlashRead
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        LCALL   ?Subroutine49 & 0xFFFF
// 1434     return SUCCESS;
// 1435   }
??CrossCallReturnLabel_82:
        MOVX    A,@DPTR
        ADD     A,?V0 + 2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 3
        MOV     R3,A
        MOV     A,#hotPg & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#(hotPg >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        SJMP    ??osal_nv_read_1
        CFI CFA_XSP16 add(XSP16, 16)
// 1436 
// 1437   if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
??osal_nv_read_0:
        ; Setup parameters for call to function findItem
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??findItem?relay
        MOV     A,R2
        ORL     A,R3
        JNZ     ??osal_nv_read_2
// 1438   {
// 1439     return NV_OPER_FAILED;
        MOV     R1,#0xa
        SJMP    ??osal_nv_read_3
// 1440   }
// 1441   else
// 1442   {
// 1443     HalFlashRead(findPg, offset+ndx, buf, len);
??osal_nv_read_2:
        ; Setup parameters for call to function HalFlashRead
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R2
        ADD     A,?V0 + 2
        MOV     R2,A
        MOV     A,R3
        ADDC    A,?V0 + 3
        MOV     R3,A
        MOV     DPTR,#findPg
??osal_nv_read_1:
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_122:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 1444     return SUCCESS;
        MOV     R1,#0x0
// 1445   }
??osal_nv_read_3:
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock261
// 1446 }
// 1447 
// 1448 /*********************************************************************
// 1449  * @fn      osal_nv_delete
// 1450  *
// 1451  * @brief   Delete item from NV. This function will fail if the length
// 1452  *          parameter does not match the length of the item in NV.
// 1453  *
// 1454  * @param   id  - Valid NV item Id.
// 1455  * @param   len - Length of item to delete.
// 1456  *
// 1457  * @return  SUCCESS if item was deleted,
// 1458  *          NV_ITEM_UNINIT if item did not exist in NV,
// 1459  *          NV_BAD_ITEM_LEN if length parameter not correct,
// 1460  *          NV_OPER_FAILED if attempted deletion failed.
// 1461  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1462 uint8 osal_nv_delete( uint16 id, uint16 len )
osal_nv_delete:
        CFI Block cfiBlock262 Using cfiCommon0
        CFI Function osal_nv_delete
        CODE
// 1463 {
        FUNCALL osal_nv_delete, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_delete, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_delete, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_delete, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
// 1464   uint16 length;
// 1465   uint16 offset;
// 1466 
// 1467   offset = findItem( id );
        ; Setup parameters for call to function findItem
        LCALL   ??findItem?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 1468   if ( offset == OSAL_NV_ITEM_NULL )
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??osal_nv_delete_0
// 1469   {
// 1470     // NV item does not exist
// 1471     return NV_ITEM_UNINIT;
        MOV     R1,#0x9
        SJMP    ??osal_nv_delete_1
// 1472   }
// 1473 
// 1474   length = osal_nv_item_len( id );
// 1475   if ( length != len )
??osal_nv_delete_0:
        ; Setup parameters for call to function osal_nv_item_len
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_nv_item_len?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 2
        XRL     A,?V0 + 4
        JNZ     ??osal_nv_delete_2
        MOV     A,?V0 + 3
        XRL     A,?V0 + 5
??osal_nv_delete_2:
        JZ      ??osal_nv_delete_3
// 1476   {
// 1477     // NV item has different length
// 1478     return NV_BAD_ITEM_LEN;
        MOV     R1,#0xc
        SJMP    ??osal_nv_delete_1
// 1479   }
// 1480 
// 1481   // Set item header ID to zero to 'delete' the item
// 1482   setItem( findPg, offset, eNvZero );
??osal_nv_delete_3:
        ; Setup parameters for call to function setItem
        MOV     R4,#0x1
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??setItem?relay
// 1483 
// 1484   // Verify that item has been removed
// 1485   offset = findItem( id );
// 1486   if ( offset != OSAL_NV_ITEM_NULL )
        ; Setup parameters for call to function findItem
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??findItem?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??osal_nv_delete_4
// 1487   {
// 1488     // Still there
// 1489     return NV_OPER_FAILED;
        MOV     R1,#0xa
        SJMP    ??osal_nv_delete_1
// 1490   }
// 1491   else
// 1492   {
// 1493     // Yes, it's gone
// 1494     return SUCCESS;
??osal_nv_delete_4:
        MOV     R1,#0x0
// 1495   }
??osal_nv_delete_1:
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock262
// 1496 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    initNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??setPageUse?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    setPageUse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initPage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    initPage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??erasePage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    erasePage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??compactPage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    compactPage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??findItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    findItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    initItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??setItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    setItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??setChk?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    setChk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??calcChkF?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    calcChkF

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??writeWord?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    writeWord

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??writeWordH?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    writeWordH

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??writeBuf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    writeBuf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??xferBuf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    xferBuf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??writeItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    writeItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??hotItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    hotItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??hotItemUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    hotItemUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_item_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_item_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_item_len?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_item_len

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_read

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_delete?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_delete

        END
// 1497 
// 1498 /*********************************************************************
// 1499  */
// 
//  5 198 bytes in segment BANKED_CODE
//    138 bytes in segment BANK_RELAYS
//      6 bytes in segment XDATA_ROM_C
//     35 bytes in segment XDATA_Z
// 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
// 
//  5 336 bytes of CODE  memory
//      6 bytes of CONST memory
// 12 323 bytes of XDATA memory
//
//Errors: none
//Warnings: none
