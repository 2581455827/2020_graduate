###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         15/Dec/2019  14:13:23 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Components\hal\common\hal_assert.c              #
#    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO     #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\hal\common\ha #
#                          l_assert.c -D NWK_AUTO_POLL -D ZAPP_P1 -D MT_TASK  #
#                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D                   #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\EndDeviceEB\List\ -lA          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          eviceEB\List\ --diag_suppress Pe001,Pa010 -o       #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          eviceEB\Obj\ -e --no_code_motion --debug           #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\ -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\Source\ -I                  #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\ZMain\TI2530DB\ -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\hal\ #
#                          include\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô #
#                          _—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\hal\target\CC253 #
#                          0EB\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷ #
#                          Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\include\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\high_level\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\single_c #
#                          hip\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷ #
#                          Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mt\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\osal\include\ -I             #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\saddr\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\sdata\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\af\ -I                 #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\nwk\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sapi\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sec\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sys\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\zdo\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\ -I                     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\f8w\ -Ohz               #
#    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          eviceEB\List\hal_assert.lst                        #
#    Object file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          eviceEB\Obj\hal_assert.r51                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\hal\common\hal_assert.c
      1          /**************************************************************************************************
      2            Filename:       hal_assert.c
      3            Revised:        $Date: 2010-11-22 08:13:43 -0800 (Mon, 22 Nov 2010) $
      4            Revision:       $Revision: 24480 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /* ------------------------------------------------------------------------------------------------
     42           *                                          Includes
     43           * ------------------------------------------------------------------------------------------------
     44           */
     45          #include "hal_assert.h"
     46          #include "hal_types.h"
     47          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     48          #include "hal_defs.h"
     49          #include "hal_mcu.h"
     50          
     51          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || \
     52              (defined HAL_MCU_CC2533) || (defined HAL_MCU_MSP430)
     53            /* for access to debug data */
     54          #include "mac_rx.h"
     55          #include "mac_tx.h"
     56          #endif
     57          
     58          /* ------------------------------------------------------------------------------------------------
     59           *                                       Local Prototypes
     60           * ------------------------------------------------------------------------------------------------
     61           */
     62          void halAssertHazardLights(void);
     63          
     64          
     65          /**************************************************************************************************
     66           * @fn          halAssertHandler
     67           *
     68           * @brief       Logic to handle an assert.
     69           *
     70           * @param       none
     71           *
     72           * @return      none
     73           **************************************************************************************************
     74           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     75          void halAssertHandler(void)
   \                     halAssertHandler:
     76          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     77            /* execute code that handles asserts */
     78          #ifdef ASSERT_RESET
     79            HAL_SYSTEM_RESET();
     80          #elif !defined ASSERT_WHILE
     81            halAssertHazardLights();
   \   000004                ; Setup parameters for call to function halAssertHazardLights
   \   000004   12....       LCALL   ??halAssertHazardLights?relay
     82          #else
     83            while(1);
     84          #endif
     85          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
     86          
     87          #if !defined ASSERT_WHILE
     88          /**************************************************************************************************
     89           * @fn          halAssertHazardLights
     90           *
     91           * @brief       Blink LEDs to indicate an error.
     92           *
     93           * @param       none
     94           *
     95           * @return      none
     96           **************************************************************************************************
     97           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     98          void halAssertHazardLights(void)
   \                     halAssertHazardLights:
     99          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    100            enum
    101            {
    102              DEBUG_DATA_RSTACK_HIGH_OFS,
    103              DEBUG_DATA_RSTACK_LOW_OFS,
    104              DEBUG_DATA_TX_ACTIVE_OFS,
    105              DEBUG_DATA_RX_ACTIVE_OFS,
    106          
    107          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430)
    108              DEBUG_DATA_INT_MASK_OFS,
    109          #elif (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
    110              DEBUG_DATA_INT_MASK0_OFS,
    111              DEBUG_DATA_INT_MASK1_OFS,
    112          #endif
    113          
    114              DEBUG_DATA_SIZE
    115            };
    116          
    117            uint8 buttonHeld;
    118            uint8 debugData[DEBUG_DATA_SIZE];
    119          
    120            /* disable all interrupts before anything else */
    121            HAL_DISABLE_INTERRUPTS();
   \   00000A   C2AF         CLR     0xa8.7
    122          
    123            /*-------------------------------------------------------------------------------
    124             *  Initialize LEDs and turn them off.
    125             */
    126            HAL_BOARD_INIT();
   \   00000C   53BEFB       ANL     0xbe,#0xfb
   \                     ??halAssertHazardLights_0:
   \   00000F   E59D         MOV     A,0x9d
   \   000011   A2E6         MOV     C,0xE0 /* A   */.6
   \   000013   50FA         JNC     ??halAssertHazardLights_0
   \   000015   00           NOP
   \   000016   78F8         MOV     R0,#-0x8
   \   000018   7901         MOV     R1,#0x1
   \                     ??halAssertHazardLights_1:
   \   00001A   00           NOP
   \   00001B   E8           MOV     A,R0
   \   00001C   24FF         ADD     A,#-0x1
   \   00001E   18           DEC     R0
   \   00001F   E9           MOV     A,R1
   \   000020   34FF         ADDC    A,#-0x1
   \   000022   F9           MOV     R1,A
   \   000023   E8           MOV     A,R0
   \   000024   49           ORL     A,R1
   \   000025   70F3         JNZ     ??halAssertHazardLights_1
   \   000027   75C600       MOV     0xc6,#0x0
   \                     ??halAssertHazardLights_2:
   \   00002A   E59E         MOV     A,0x9e
   \   00002C   70FC         JNZ     ??halAssertHazardLights_2
   \   00002E   43BE04       ORL     0xbe,#0x4
   \   000031   906270       MOV     DPTR,#0x6270
   \   000034   7408         MOV     A,#0x8
   \   000036   F0           MOVX    @DPTR,A
   \   000037   C290         CLR     0x90.0
   \   000039   43FE01       ORL     0xfe,#0x1
   \   00003C   C291         CLR     0x90.1
   \   00003E   43FE02       ORL     0xfe,#0x2
   \   000041   C294         CLR     0x90.4
   \   000043   43FE10       ORL     0xfe,#0x10
   \   000046   438F01       ORL     0x8f,#0x1
    127          
    128            HAL_TURN_OFF_LED1();
   \   000049   C290         CLR     0x90.0
    129            HAL_TURN_OFF_LED2();
   \   00004B   C291         CLR     0x90.1
    130            HAL_TURN_OFF_LED3();
   \   00004D   C294         CLR     0x90.4
    131            HAL_TURN_OFF_LED4();
   \   00004F   8017         SJMP    ??halAssertHazardLights_3
    132          
    133            /*-------------------------------------------------------------------------------
    134             *  Master infinite loop.
    135             */
    136            for (;;)
    137            {
    138              buttonHeld = 0;
    139          
    140              /*-------------------------------------------------------------------------------
    141               *  "Hazard lights" loop.  A held keypress will exit this loop.
    142               */
    143              do
    144              {
    145                HAL_LED_BLINK_DELAY();
    146          
    147                /* toggle LEDS, the #ifdefs are in case HAL has logically remapped non-existent LEDs */
    148          #if (HAL_NUM_LEDS >= 1)
    149                HAL_TOGGLE_LED1();
    150          #if (HAL_NUM_LEDS >= 2)
    151                HAL_TOGGLE_LED2();
    152          #if (HAL_NUM_LEDS >= 3)
    153                HAL_TOGGLE_LED3();
    154          #if (HAL_NUM_LEDS >= 4)
    155                HAL_TOGGLE_LED4();
    156          #endif
    157          #endif
    158          #endif
    159          #endif
    160          
    161                /* escape hatch to continue execution, set escape to '1' to continue execution */
    162                {
    163                  static uint8 escape = 0;
    164                  if (escape)
    165                  {
    166                    escape = 0;
    167                    return;
    168                  }
    169                }
    170          
    171                /* break out of loop if button is held long enough */
    172                if (HAL_PUSH_BUTTON1())
    173                {
    174                  buttonHeld++;
    175                }
    176                else
    177                {
    178                  buttonHeld = 0;
    179                }
    180              }
    181              while (buttonHeld != 10);  /* loop until button is held specified number of loops */
    182          
    183              /*-------------------------------------------------------------------------------
    184               *  Just exited from "hazard lights" loop.
    185               */
    186          
    187              /* turn off all LEDs */
    188              HAL_TURN_OFF_LED1();
    189              HAL_TURN_OFF_LED2();
    190              HAL_TURN_OFF_LED3();
    191              HAL_TURN_OFF_LED4();
    192          
    193              /* wait for button release */
    194              HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
    195          
    196              /*-------------------------------------------------------------------------------
    197               *  Load debug data into memory.
    198               */
    199          #ifdef HAL_MCU_AVR
    200              {
    201                uint8 * pStack;
    202                pStack = (uint8 *) SP;
    203                pStack++; /* point to return address on stack */
    204                debugData[DEBUG_DATA_RSTACK_HIGH_OFS] = *pStack;
    205                pStack++;
    206                debugData[DEBUG_DATA_RSTACK_LOW_OFS] = *pStack;
    207              }
    208              debugData[DEBUG_DATA_INT_MASK_OFS] = EIMSK;
    209          #endif
    210          
    211          #if (defined HAL_MCU_CC2430)
    212              debugData[DEBUG_DATA_INT_MASK_OFS] = RFIM;
    213          #elif (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
    214              debugData[DEBUG_DATA_INT_MASK0_OFS] = RFIRQM0;
    215              debugData[DEBUG_DATA_INT_MASK1_OFS] = RFIRQM1;
    216          #endif
    217          
    218          
    219          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || \
    220              (defined HAL_MCU_CC2533) || (defined HAL_MCU_MSP430)
    221              debugData[DEBUG_DATA_TX_ACTIVE_OFS] = macTxActive;
    222              debugData[DEBUG_DATA_RX_ACTIVE_OFS] = macRxActive;
    223          #endif
    224          
    225             /* initialize for data dump loop */
    226              {
    227                uint8 iBit;
    228                uint8 iByte;
    229          
    230                iBit  = 0;
    231                iByte = 0;
    232          
    233                /*-------------------------------------------------------------------------------
    234                 *  Data dump loop.  A button press cycles data bits to an LED.
    235                 */
    236                while (iByte < DEBUG_DATA_SIZE)
    237                {
    238                  /* wait for key press */
    239                  while(!HAL_PUSH_BUTTON1());
    240          
    241                  /* turn on all LEDs for first bit of byte, turn on three LEDs if not first bit */
    242                  HAL_TURN_ON_LED1();
    243                  HAL_TURN_ON_LED2();
    244                  HAL_TURN_ON_LED3();
    245                  if (iBit == 0)
    246                  {
    247                    HAL_TURN_ON_LED4();
    248                  }
    249                  else
    250                  {
    251                    HAL_TURN_OFF_LED4();
    252                  }
    253          
    254                  /* wait for debounced key release */
    255                  HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
    256          
    257                  /* turn off all LEDs */
    258                  HAL_TURN_OFF_LED1();
    259                  HAL_TURN_OFF_LED2();
    260                  HAL_TURN_OFF_LED3();
    261                  HAL_TURN_OFF_LED4();
    262          
    263                  /* output value of data bit to LED1 */
    264                  if (debugData[iByte] & (1 << (7 - iBit)))
    265                  {
    266                    HAL_TURN_ON_LED1();
    267                  }
    268                  else
    269                  {
    270                    HAL_TURN_OFF_LED1();
   \                     ??halAssertHazardLights_4:
   \   000051   C290         CLR     0x90.0
    271                  }
    272          
    273                  /* advance to next bit */
    274                  iBit++;
   \                     ??halAssertHazardLights_5:
   \   000053   0B           INC     R3
    275                  if (iBit == 8)
   \   000054   7408         MOV     A,#0x8
   \   000056   6B           XRL     A,R3
   \   000057   6003         JZ      $+5
   \   000059   02....       LJMP    ??halAssertHazardLights_6 & 0xFFFF
    276                  {
    277                    iBit = 0;
   \   00005C   7B00         MOV     R3,#0x0
    278                    iByte++;
   \   00005E   0A           INC     R2
    279                  }
   \   00005F   EA           MOV     A,R2
   \   000060   C3           CLR     C
   \   000061   9406         SUBB    A,#0x6
   \   000063   5003         JNC     $+5
   \   000065   02....       LJMP    ??halAssertHazardLights_6 & 0xFFFF
    280                }
    281              }
    282          
    283              /*
    284               *  About to enter "hazard lights" loop again.  Turn off LED1 in case the last bit
    285               *  displayed happened to be one.  This guarantees all LEDs are off at the start of
    286               *  the flashing loop which uses a toggle operation to change LED states.
    287               */
    288              HAL_TURN_OFF_LED1();
   \                     ??halAssertHazardLights_3:
   \   000068   C290         CLR     0x90.0
   \                     ??halAssertHazardLights_7:
   \   00006A   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_8:
   \   00006C   90....       MOV     DPTR,#__Constant_0
   \   00006F   12....       LCALL   ?XLOAD_R2345
   \   000072   7406         MOV     A,#0x6
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   12....       LCALL   ?XSTORE_R2345
   \   00007A   8012         SJMP    ??halAssertHazardLights_9
   \                     ??halAssertHazardLights_10:
   \   00007C   90....       MOV     DPTR,#__Constant_1
   \   00007F   78..         MOV     R0,#?V0 + 0
   \   000081   12....       LCALL   ?L_MOV_X
   \   000084   7406         MOV     A,#0x6
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?L_ADD_TO_X
   \                     ??halAssertHazardLights_9:
   \   00008E   7406         MOV     A,#0x6
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   C082         PUSH    DPL
   \   000095   C083         PUSH    DPH
   \   000097   90....       MOV     DPTR,#__Constant_5800
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?L_MOV_X
   \   00009F   D083         POP     DPH
   \   0000A1   D082         POP     DPL
   \   0000A3   78..         MOV     R0,#?V0 + 0
   \   0000A5   12....       LCALL   ?UL_GT_X
   \   0000A8   40D2         JC      ??halAssertHazardLights_10
   \   0000AA   A290         MOV     C,0x90.0
   \   0000AC   5004         JNC     ??halAssertHazardLights_11
   \   0000AE   C290         CLR     0x90.0
   \   0000B0   8002         SJMP    ??halAssertHazardLights_12
   \                     ??halAssertHazardLights_11:
   \   0000B2   D290         SETB    0x90.0
   \                     ??halAssertHazardLights_12:
   \   0000B4   A291         MOV     C,0x90.1
   \   0000B6   5004         JNC     ??halAssertHazardLights_13
   \   0000B8   C291         CLR     0x90.1
   \   0000BA   8002         SJMP    ??halAssertHazardLights_14
   \                     ??halAssertHazardLights_13:
   \   0000BC   D291         SETB    0x90.1
   \                     ??halAssertHazardLights_14:
   \   0000BE   A294         MOV     C,0x90.4
   \   0000C0   5004         JNC     ??halAssertHazardLights_15
   \   0000C2   C294         CLR     0x90.4
   \   0000C4   8002         SJMP    ??halAssertHazardLights_16
   \                     ??halAssertHazardLights_15:
   \   0000C6   D294         SETB    0x90.4
   \                     ??halAssertHazardLights_16:
   \   0000C8   90....       MOV     DPTR,#??escape
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   600C         JZ      ??halAssertHazardLights_17
   \   0000CE   E4           CLR     A
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   740A         MOV     A,#0xa
   \   0000D2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D5   7F04         MOV     R7,#0x4
   \   0000D7   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??halAssertHazardLights_17:
   \   0000DA   A281         MOV     C,0x80.1
   \   0000DC   508C         JNC     ??halAssertHazardLights_7
   \   0000DE   09           INC     R1
   \   0000DF   740A         MOV     A,#0xa
   \   0000E1   69           XRL     A,R1
   \   0000E2   7088         JNZ     ??halAssertHazardLights_8
   \   0000E4   C290         CLR     0x90.0
   \   0000E6   C291         CLR     0x90.1
   \   0000E8   C294         CLR     0x90.4
   \   0000EA   C290         CLR     0x90.0
   \   0000EC   7800         MOV     R0,#0x0
   \   0000EE   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_18:
   \   0000F0   A281         MOV     C,0x80.1
   \   0000F2   5004         JNC     ??halAssertHazardLights_19
   \   0000F4   7800         MOV     R0,#0x0
   \   0000F6   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_19:
   \   0000F8   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000FB   40F3         JC      ??halAssertHazardLights_18
   \   0000FD   9061A3       MOV     DPTR,#0x61a3
   \   000100   E0           MOVX    A,@DPTR
   \   000101   C0E0         PUSH    A
   \   000103   7404         MOV     A,#0x4
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   D0E0         POP     A
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   9061A4       MOV     DPTR,#0x61a4
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   C0E0         PUSH    A
   \   000111   7405         MOV     A,#0x5
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   D0E0         POP     A
   \   000118   F0           MOVX    @DPTR,A
   \   000119   90....       MOV     DPTR,#macTxActive
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   C0E0         PUSH    A
   \   00011F   7402         MOV     A,#0x2
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   D0E0         POP     A
   \   000126   F0           MOVX    @DPTR,A
   \   000127   90....       MOV     DPTR,#macRxActive
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   C0E0         PUSH    A
   \   00012D   7403         MOV     A,#0x3
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   D0E0         POP     A
   \   000134   F0           MOVX    @DPTR,A
   \   000135   7B00         MOV     R3,#0x0
   \   000137   7A00         MOV     R2,#0x0
   \                     ??halAssertHazardLights_6:
   \   000139   A281         MOV     C,0x80.1
   \   00013B   50FC         JNC     ??halAssertHazardLights_6
   \   00013D   D290         SETB    0x90.0
   \   00013F   D291         SETB    0x90.1
   \   000141   D294         SETB    0x90.4
   \   000143   EB           MOV     A,R3
   \   000144   7004         JNZ     ??halAssertHazardLights_20
   \   000146   D290         SETB    0x90.0
   \   000148   8002         SJMP    ??halAssertHazardLights_21
   \                     ??halAssertHazardLights_20:
   \   00014A   C290         CLR     0x90.0
   \                     ??halAssertHazardLights_21:
   \   00014C   7800         MOV     R0,#0x0
   \   00014E   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_22:
   \   000150   A281         MOV     C,0x80.1
   \   000152   5004         JNC     ??halAssertHazardLights_23
   \   000154   7800         MOV     R0,#0x0
   \   000156   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_23:
   \   000158   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00015B   40F3         JC      ??halAssertHazardLights_22
   \   00015D   C290         CLR     0x90.0
   \   00015F   C291         CLR     0x90.1
   \   000161   C294         CLR     0x90.4
   \   000163   C290         CLR     0x90.0
   \   000165   75..01       MOV     ?V0 + 0,#0x1
   \   000168   75..00       MOV     ?V0 + 1,#0x0
   \   00016B   7407         MOV     A,#0x7
   \   00016D   C3           CLR     C
   \   00016E   9B           SUBB    A,R3
   \   00016F   78..         MOV     R0,#?V0 + 0
   \   000171   12....       LCALL   ?S_SHL
   \   000174   8A..         MOV     ?V0 + 2,R2
   \   000176   85..82       MOV     DPL,?XSP + 0
   \   000179   85..83       MOV     DPH,?XSP + 1
   \   00017C   E582         MOV     A,DPL
   \   00017E   25..         ADD     A,?V0 + 2
   \   000180   F582         MOV     DPL,A
   \   000182   E583         MOV     A,DPH
   \   000184   3400         ADDC    A,#0x0
   \   000186   F583         MOV     DPH,A
   \   000188   E0           MOVX    A,@DPTR
   \   000189   55..         ANL     A,?V0 + 0
   \   00018B   7003         JNZ     $+5
   \   00018D   02....       LJMP    ??halAssertHazardLights_4 & 0xFFFF
   \   000190   D290         SETB    0x90.0
   \   000192   02....       LJMP    ??halAssertHazardLights_5 & 0xFFFF
   \   000195                REQUIRE _A_IEN0
   \   000195                REQUIRE SLEEPCMD
   \   000195                REQUIRE SLEEPSTA
   \   000195                REQUIRE CLKCONCMD
   \   000195                REQUIRE CLKCONSTA
   \   000195                REQUIRE _A_P1
   \   000195                REQUIRE P1DIR
   \   000195                REQUIRE P0INP
   \   000195                REQUIRE _A_P0
    289            }
    290          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E8           MOV     A,R0
   \   000001   2401         ADD     A,#0x1
   \   000003   08           INC     R0
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   C3           CLR     C
   \   000009   E8           MOV     A,R0
   \   00000A   94F4         SUBB    A,#-0xc
   \   00000C   E9           MOV     A,R1
   \   00000D   9401         SUBB    A,#0x1
   \   00000F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000011   65D0         XRL     A,PSW
   \   000013   33           RLC     A
   \   000014   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??escape:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5800:
   \   000000   00580000     DD 22528

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halAssertHandler?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halAssertHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halAssertHazardLights?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halAssertHazardLights
    291          #endif
    292          
    293          /* ------------------------------------------------------------------------------------------------
    294           *                                    Compile Time Assertions
    295           * ------------------------------------------------------------------------------------------------
    296           */
    297          
    298          /* integrity check of type sizes */
    299          HAL_ASSERT_SIZE(  int8, 1);
    300          HAL_ASSERT_SIZE( uint8, 1);
    301          HAL_ASSERT_SIZE( int16, 2);
    302          HAL_ASSERT_SIZE(uint16, 2);
    303          HAL_ASSERT_SIZE( int32, 4);
    304          HAL_ASSERT_SIZE(uint32, 4);
    305          
    306          
    307          /**************************************************************************************************
    308          */

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     halAssertHandler               2      0      0
       -> halAssertHazardLights     4      0      0
     halAssertHazardLights          2      0     22


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     _A_P0                            1
     P0INP                            1
     _A_P1                            1
     SLEEPSTA                         1
     CLKCONSTA                        1
     _A_IEN0                          1
     SLEEPCMD                         1
     CLKCONCMD                        1
     P1DIR                            1
     halAssertHandler                14
     halAssertHazardLights          405
     ?Subroutine0                    21
     escape                           1
     __Constant_0                     4
     __Constant_1                     4
     __Constant_5800                  4
     ??halAssertHandler?relay         6
     ??halAssertHazardLights?relay    6

 
 440 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
  12 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
 452 bytes of CODE  memory
   0 bytes of CONST memory (+ 12 bytes shared)
   0 bytes of DATA  memory (+  9 bytes shared)
   1 byte  of XDATA memory

Errors: none
Warnings: none
