###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         15/Dec/2019  14:14:41 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\Source\Sample #
#                          App.c                                              #
#    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO     #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\ #
#                          SampleApp\Source\SampleApp.c -D NWK_AUTO_POLL -D   #
#                          ZAPP_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC   #
#                          -D LCD_SUPPORTED=DEBUG -lC                         #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          eviceEB\List\ -lA C:\Users\25814\Desktop\2020±œ…Ë\ #
#                          Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB\List\ --diag_suppress    #
#                          Pe001,Pa010 -o C:\Users\25814\Desktop\2020±œ…Ë\Õı– #
#                          ¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\EndDeviceEB\Obj\ -e --no_code_motion    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\  #
#                          -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\Source\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬» #
#                          Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\ZMain\TI2530DB\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\hal\include\ -I              #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\hal\target\CC2530EB\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\include\ -I              #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\high_level\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\single_c #
#                          hip\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷ #
#                          Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mt\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\osal\include\ -I             #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\saddr\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\sdata\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\af\ -I                 #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\nwk\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sapi\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sec\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sys\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\zdo\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\ -I                     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\f8w\ -Ohz               #
#    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          eviceEB\List\SampleApp.lst                         #
#    Object file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          eviceEB\Obj\SampleApp.r51                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          #include <stdio.h>
     79          #include <string.h>
     80          
     81          //MY DEVICE
     82          #include "DHT11.h"
     83          #include "gy30.h"
     84          
     85          /*********************************************************************
     86           * MACROS
     87           */
     88          #define LED P1_2
     89          #define FAN P1_1
     90          #define GAS P0_6
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          uint8 AppTitle[] = "ALD2530 Example"; //”¶”√≥Ã–Ú√˚≥∆ 
   \                     AppTitle:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for AppTitle>`
   \   000010                REQUIRE __INIT_XDATA_I
    103          uint16 ReadGasData( void );
    104          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    105          byte fan_state = 1;//∑Á…»ƒ¨»œŒ™◊‘∂Øøÿ÷∆
   \                     fan_state:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for fan_state>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    106          byte led_state = 1;//ledƒ¨»œŒ™◊‘∂Øøÿ÷∆
   \                     led_state:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for led_state>`
   \   000001                REQUIRE __INIT_XDATA_I
    107          
    108          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    109          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    110          {
    111            SAMPLEAPP_PERIODIC_CLUSTERID,
    112            SAMPLEAPP_FLASH_CLUSTERID
    113          };
    114          

   \                                 In  segment XDATA_ROM_C, align 1
    115          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    116          {
    117            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    118            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    119            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    120            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    121            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    122            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    123            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    124            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    125            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    126          };
    127          
    128          // This is the Endpoint/Interface description.  It is defined here, but
    129          // filled-in in SampleApp_Init().  Another way to go would be to fill
    130          // in the structure here and make it a "const" (in code space).  The
    131          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    133          
    134          /*********************************************************************
    135           * EXTERNAL VARIABLES
    136           */
    137          
    138          /*********************************************************************
    139           * EXTERNAL FUNCTIONS
    140           */
    141          
    142          /*********************************************************************
    143           * LOCAL VARIABLES
    144           */
    145          
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148                                    // This variable will be received when
    149                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    161          
    162          /*********************************************************************
    163           * LOCAL FUNCTIONS
    164           */
    165          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    166          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    167          void SampleApp_SendPeriodicMessage( void );
    168          void SampleApp_SendFlashMessage( uint16 flashTime );
    169          void SampleApp_Send_P2P_Message(void);
    170          /*********************************************************************
    171           * NETWORK LAYER CALLBACKS
    172           */
    173          
    174          /*********************************************************************
    175           * PUBLIC FUNCTIONS
    176           */
    177           
    178          /*********************************************************************
    179           * @fn      SampleApp_Init
    180           *
    181           * @brief   Initialization function for the Generic App Task.
    182           *          This is called during initialization and should contain
    183           *          any application specific initialization (ie. hardware
    184           *          initialization/setup, table initialization, power up
    185           *          notificaiton ... ).
    186           *
    187           * @param   task_id - the ID assigned by OSAL.  This ID should be
    188           *                    used to send messages and set timers.
    189           *
    190           * @return  none
    191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    193          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    194            
    195            LIGHT_INIT();//≥ı ºªØπ‚’’ 
   \   000007   53F3CF       ANL     0xf3,#0xcf
   \   00000A   43FD30       ORL     0xfd,#0x30
   \   00000D   D285         SETB    0x80.5
   \   00000F   D284         SETB    0x80.4
    196            P0SEL&=~0x40;
   \   000011   53F3BF       ANL     0xf3,#0xbf
    197            P0DIR&=~0x40;//≥ı ºªØ∆¯ÃÂ
   \   000014   53FDBF       ANL     0xfd,#0xbf
    198            P1DIR|=0x04;//led
   \   000017   43FE04       ORL     0xfe,#0x4
    199            SampleApp_TaskID = task_id;   //osal∑÷≈‰µƒ»ŒŒÒIDÀÊ◊≈”√ªßÃÌº”»ŒŒÒµƒ‘ˆ∂‡∂¯∏ƒ±‰
   \   00001A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00001D   F0           MOVX    @DPTR,A
    200            SampleApp_NwkState = DEV_INIT;//…Ë±∏◊¥Ã¨…Ë∂®Œ™ZDO≤„÷–∂®“Âµƒ≥ı ºªØ◊¥Ã¨
   \   00001E   90....       MOV     DPTR,#SampleApp_NwkState
   \   000021   7401         MOV     A,#0x1
   \   000023   F0           MOVX    @DPTR,A
    201            SampleApp_TransID = 0;        //œ˚œ¢∑¢ÀÕID£®∂‡œ˚œ¢ ±”–À≥–Ú÷Æ∑÷£©
   \   000024   90....       MOV     DPTR,#SampleApp_TransID
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
    202            
    203            LED = 0;//πÿµ∆
   \   000029   C292         CLR     0x90.2
    204            FAN = 0;//πÿ∑Á…»
   \   00002B   C291         CLR     0x90.1
    205            //¥Æø⁄≈‰÷√
    206            MT_UartInit();
   \   00002D                ; Setup parameters for call to function MT_UartInit
   \   00002D   12....       LCALL   ??MT_UartInit?relay
    207            MT_UartRegisterTaskID(task_id); 
   \   000030                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000030   EE           MOV     A,R6
   \   000031   F9           MOV     R1,A
   \   000032   12....       LCALL   ??MT_UartRegisterTaskID?relay
    208             
    209            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n")); 
   \   000035                ; Setup parameters for call to function HalUARTWrite
   \   000035   7C0D         MOV     R4,#0xd
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   00003B   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   12....       LCALL   ??HalUARTWrite?relay
    210            
    211          
    212            // Device hardware initialization can be added here or in main() (Zmain.c).
    213            // If the hardware is application specific - add it here.
    214            // If the hardware is other parts of the device add it in main().
    215          
    216          #if defined ( BUILD_ALL_DEVICES )
    217            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    218            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    219            // together - if they are - we will start up a coordinator. Otherwise,
    220            // the device will start as a router.
    221            if ( readCoordinatorJumper() )
    222              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    223            else
    224              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    225          #endif // BUILD_ALL_DEVICES
    226          
    227          //∏√∂Œµƒ“‚Àº «£¨»Áπ˚…Ë÷√¡ÀHOLD_AUTO_START∫Í∂®“Â£¨Ω´ª·‘⁄∆Ù∂Ø–æ∆¨µƒ ±∫Úª·‘›Õ£∆Ù∂Ø
    228          //¡˜≥Ã£¨÷ª”–Õ‚≤ø¥•∑¢“‘∫Û≤≈ª·∆Ù∂Ø–æ∆¨°£∆‰ µæÕ «–Ë“™“ª∏ˆ∞¥≈•¥•∑¢À¸µƒ∆Ù∂Ø¡˜≥Ã°£  
    229          #if defined ( HOLD_AUTO_START )
    230            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    231            //  from starting the device and wait for the application to
    232            //  start the device.
    233            ZDOInitDevice(0);
    234          #endif
    235          
    236            // Setup for the periodic message's destination address …Ë÷√∑¢ÀÕ ˝æ›µƒ∑Ω Ω∫Õƒøµƒµÿ÷∑—∞÷∑ƒ£ Ω
    237            // Broadcast to everyone ∑¢ÀÕƒ£ Ω:π„≤•∑¢ÀÕ
    238            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//π„≤•
   \   000042   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000045   740F         MOV     A,#0xf
   \   000047   F0           MOVX    @DPTR,A
    239            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000048   A3           INC     DPTR
   \   000049   7414         MOV     A,#0x14
   \   00004B   F0           MOVX    @DPTR,A
    240            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//÷∏∂®ƒøµƒÕ¯¬Áµÿ÷∑Œ™π„≤•µÿ÷∑
   \   00004C   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00004F   74FF         MOV     A,#-0x1
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   F0           MOVX    @DPTR,A
    241          
    242            // Setup for the flash command's destination address - Group 1 ◊È≤•∑¢ÀÕ
    243            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //◊È—∞÷∑
   \   000054   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000057   7401         MOV     A,#0x1
   \   000059   F0           MOVX    @DPTR,A
    244            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   00005A   A3           INC     DPTR
   \   00005B   7414         MOV     A,#0x14
   \   00005D   F0           MOVX    @DPTR,A
    245            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//◊È∫≈0x0001
   \   00005E   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000061   7401         MOV     A,#0x1
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   E4           CLR     A
   \   000066   F0           MOVX    @DPTR,A
    246          
    247            // Fill out the endpoint description. ∂®“Â±æ…Ë±∏”√¿¥Õ®–≈µƒAPS≤„∂Àµ„√Ë ˆ∑˚
    248            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000067   90....       MOV     DPTR,#SampleApp_epDesc
   \   00006A   7414         MOV     A,#0x14
   \   00006C   F0           MOVX    @DPTR,A
    249            SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp √Ë ˆ∑˚µƒ»ŒŒÒID
   \   00006D   A3           INC     DPTR
   \   00006E   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000074   F0           MOVX    @DPTR,A
    250            SampleApp_epDesc.simpleDesc
    251                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleAppºÚµ•√Ë ˆ∑˚
   \   000075   A3           INC     DPTR
   \   000076   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00007C   F0           MOVX    @DPTR,A
    252            SampleApp_epDesc.latencyReq = noLatencyReqs;    //—” ±≤ﬂ¬‘
   \   00007D   A3           INC     DPTR
   \   00007E   E4           CLR     A
   \   00007F   F0           MOVX    @DPTR,A
    253          
    254            // Register the endpoint description with the AF
    255            afRegister( &SampleApp_epDesc );    //œÚAF≤„µ«º«√Ë ˆ∑˚
   \   000080                ; Setup parameters for call to function afRegister
   \   000080   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000082   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000084   12....       LCALL   ??afRegister?relay
    256          
    257            // Register for all key events - This app will handle all key events
    258            RegisterForKeys( SampleApp_TaskID ); // µ«º«À˘”–µƒ∞¥º¸ ¬º˛
   \   000087                ; Setup parameters for call to function RegisterForKeys
   \   000087   90....       MOV     DPTR,#SampleApp_TaskID
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??RegisterForKeys?relay
    259          
    260            // By default, all devices start out in Group 1
    261            SampleApp_Group.ID = 0x0001;//◊È∫≈
   \   00008F   90....       MOV     DPTR,#SampleApp_Group
   \   000092   7401         MOV     A,#0x1
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   E4           CLR     A
   \   000097   F0           MOVX    @DPTR,A
    262            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//…Ë∂®◊È√˚
   \   000098                ; Setup parameters for call to function osal_memcpy
   \   000098   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00009B   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00009E   F5..         MOV     ?V0 + 2,A
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A5   7C07         MOV     R4,#0x7
   \   0000A7   7D00         MOV     R5,#0x0
   \   0000A9   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000AB   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000AD   12....       LCALL   ??osal_memcpy?relay
   \   0000B0   7403         MOV     A,#0x3
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
    263            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//∞—∏√◊Èµ«º«ÃÌº”µΩAPS÷–
   \   0000B5                ; Setup parameters for call to function aps_AddGroup
   \   0000B5   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B7   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B9   7914         MOV     R1,#0x14
   \   0000BB   12....       LCALL   ??aps_AddGroup?relay
    264          
    265          #if defined ( LCD_SUPPORTED )
    266            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //»Áπ˚÷ß≥÷LCD£¨œ‘ æÃ· æ–≈œ¢
   \   0000BE                ; Setup parameters for call to function HalLcdWriteString
   \   0000BE   7900         MOV     R1,#0x0
   \   0000C0   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000C2   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000C4   12....       LCALL   ??HalLcdWriteString?relay
    267          #endif
    268          }
   \   0000C7                REQUIRE ?Subroutine0
   \   0000C7                REQUIRE P0SEL
   \   0000C7                REQUIRE P0DIR
   \   0000C7                REQUIRE _A_P0
   \   0000C7                REQUIRE P1DIR
   \   0000C7                REQUIRE _A_P1
   \   0000C7                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    269          
    270          /*********************************************************************
    271           * @fn      SampleApp_ProcessEvent
    272           *
    273           * @brief   Generic Application Task event processor.  This function
    274           *          is called to process all events for the task.  Events
    275           *          include timers, messages and any other user defined events.
    276           *
    277           * @param   task_id  - The OSAL assigned task ID.
    278           * @param   events - events to process.  This is a bit map and can
    279           *                   contain more than one event.
    280           *
    281           * @return  none
    282           */
    283          //”√ªß”¶”√»ŒŒÒµƒ ¬º˛¥¶¿Ì∫Ø ˝

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    284          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    285          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    286            afIncomingMSGPacket_t *MSGpkt;
    287            (void)task_id;  // Intentionally unreferenced parameter
    288          
    289            if ( events & SYS_EVENT_MSG ) //Ω” ’œµÕ≥œ˚œ¢‘ŸΩ¯––≈–∂œ
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    290            {
    291              //Ω” ’ Ù”⁄±æ”¶”√»ŒŒÒSampleAppµƒœ˚œ¢£¨“‘SampleApp_TaskID±Íº«
    292              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    293              while ( MSGpkt )
    294              {
    295                switch ( MSGpkt->hdr.event )
    296                {
    297                  // Received when a key is pressed
    298                  case KEY_CHANGE://∞¥º¸ ¬º˛
    299                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    300                    break;
    301          
    302                  // Received when a messages is received (OTA) for this endpoint
    303                  case AF_INCOMING_MSG_CMD://Ω” ’ ˝æ› ¬º˛,µ˜”√∫Ø ˝AF_DataRequest()Ω” ’ ˝æ›
    304                    SampleApp_MessageMSGCB( MSGpkt );//µ˜”√ªÿµ˜∫Ø ˝∂‘ ’µΩµƒ ˝æ›Ω¯––¥¶¿Ì
    305                    break;
    306          
    307                  // Received whenever the device changes state in the network
    308                  case ZDO_STATE_CHANGE:
    309                    //÷ª“™Õ¯¬Á◊¥Ã¨∑¢…˙∏ƒ±‰£¨æÕÕ®π˝ZDO_STATE_CHANGE ¬º˛Õ®÷™À˘”–µƒ»ŒŒÒ°£
    310                    //Õ¨ ±ÕÍ≥…∂‘–≠µ˜∆˜£¨¬∑”…∆˜£¨÷’∂Àµƒ…Ë÷√
    311                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    312                    //if ( (SampleApp_NwkState == DEV_ZB_COORD)// µ—È÷––≠µ˜∆˜÷ªΩ” ’ ˝æ›À˘“‘»°œ˚∑¢ÀÕ ¬º˛
    313                    if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    314                    {
    315                      // Start sending the periodic message in a regular interval.
    316                      //’‚∏ˆ∂® ±∆˜÷ª «Œ™∑¢ÀÕ÷‹∆⁄–≈œ¢ø™∆Ùµƒ£¨…Ë±∏∆Ù∂Ø≥ı ºªØ∫Û¥”’‚¿Ôø™ º
    317                      //¥•∑¢µ⁄“ª∏ˆ÷‹∆⁄–≈œ¢µƒ∑¢ÀÕ£¨»ª∫Û÷‹∂¯∏¥ ºœ¬»•
    318                      osal_start_timerEx( SampleApp_TaskID,
    319                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    320                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    321                     
    322                    }
    323                    else
    324                    {
    325                        
    326                    }
    327                    break;
    328          
    329                  default:
    330                    break;
    331                }
    332          
    333                // Release the memory  ¬º˛¥¶¿ÌÕÍ¡À£¨ Õ∑≈œ˚œ¢’º”√µƒƒ⁄¥Ê
    334                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    335             
    336                // Next - if one is available ÷∏’Î÷∏œÚœ¬“ª∏ˆ∑≈‘⁄ª∫≥Â«¯µƒ¥˝¥¶¿Ìµƒ ¬º˛£¨
    337                //∑µªÿwhile ( MSGpkt )÷ÿ–¬¥¶¿Ì ¬º˛£¨÷±µΩª∫≥Â«¯√ª”–µ»¥˝¥¶¿Ì ¬º˛Œ™÷π
    338                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    339              }
    340          
    341              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    342              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    343            }
    344          
    345            // Send a message out - This event is generated by a timer
    346            //  (setup in SampleApp_Init()).
    347            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    348            {
    349              // Send the periodic message ¥¶¿Ì÷‹∆⁄–‘ ¬º˛£¨
    350              //¿˚”√SampleApp_SendPeriodicMessage()¥¶¿ÌÕÍµ±«∞µƒ÷‹∆⁄–‘ ¬º˛£¨»ª∫Û∆Ù∂Ø∂® ±∆˜
    351              //ø™∆Ùœ¬“ª∏ˆ÷‹∆⁄–‘ ¬«È£¨’‚—˘“ª÷÷—≠ª∑œ¬»•£¨“≤º¥ «…œ√ÊÀµµƒ÷‹∆⁄–‘ ¬º˛¡À£¨
    352              //ø…“‘◊ˆŒ™¥´∏–∆˜∂® ±≤…ºØ°¢…œ¥´»ŒŒÒ
    353              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    354              
    355              // Setup to send message again in normal period (+ a little jitter)
    356              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    357                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24E8         ADD     A,#-0x18
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3403         ADDC    A,#0x3
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    358          
    359              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    360              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    361            }
    362          
    363            // Discard unknown events
    364            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    365          }
    366          
    367          /*********************************************************************
    368           * Event Generation Functions
    369           */
    370          /*********************************************************************
    371           * @fn      SampleApp_HandleKeys
    372           *
    373           * @brief   Handles all key events for this device.
    374           *
    375           * @param   shift - true if in shift/alt.
    376           * @param   keys - bit field for key events. Valid entries:
    377           *                 HAL_KEY_SW_2
    378           *                 HAL_KEY_SW_1
    379           *
    380           * @return  none
    381           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    382          void SampleApp_HandleKeys( uint8 shift, uint8 keys )  
   \                     SampleApp_HandleKeys:
    383          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    384            (void)shift;  // Intentionally unreferenced parameter
    385            
    386            if ( keys & HAL_KEY_SW_1 )
   \   000006   A2E0         MOV     C,0xE0 /* A   */.0
   \   000008   5007         JNC     ??SampleApp_HandleKeys_0
    387            {
    388              /* This key sends the Flash Command is sent to Group 1.
    389               * This device will not receive the Flash Command from this
    390               * device (even if it belongs to group 1).
    391               */
    392             SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000A                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000A   7AE8         MOV     R2,#-0x18
   \   00000C   7B03         MOV     R3,#0x3
   \   00000E   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    393             //∞¥œ¬s2º¸£¨∑¢ÀÕ#1£¨»√Ω⁄µ„µ„¡¡led
    394          #if defined(ZDO_COORDINATOR) 
    395             unsigned char buf[] = "#1";
    396             if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    397                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    398                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    399                                 3,       // ∑¢ÀÕ ˝æ›≥§∂»
    400                                 buf,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    401                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    402                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    403                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
    404            {
    405            }
    406          #endif
    407              
    408            
    409            }
    410          
    411            if ( keys & HAL_KEY_SW_6 )
    412            {
    413              /* The Flashr Command is sent to Group 1.
    414               * This key toggles this device in and out of group 1.
    415               * If this device doesn't belong to group 1, this application
    416               * will not receive the Flash command sent to group 1.
    417               */
    418             
    419          #if defined(ZDO_COORDINATOR) 
    420             
    421             unsigned char buf[] = "#2";
    422             if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    423                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    424                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    425                                 3,       // ∑¢ÀÕ ˝æ›≥§∂»
    426                                 buf,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    427                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    428                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    429                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
    430            {
    431            }
    432            
    433          #endif
    434             /*
    435              aps_Group_t *grp;
    436              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    437              if ( grp )
    438              {
    439                // Remove from the group
    440                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    441              }
    442              else
    443              {
    444                // Add to the flash group
    445                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    446              }
    447             */
    448            }
    449          }
   \                     ??SampleApp_HandleKeys_0:
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
    450          
    451          /*********************************************************************
    452           * LOCAL FUNCTIONS
    453           */
    454          
    455          /*********************************************************************
    456           * @fn      SampleApp_MessageMSGCB
    457           *
    458           * @brief   Data message processor callback.  This function processes
    459           *          any incoming data - probably from other devices.  So, based
    460           *          on cluster ID, perform the intended action.
    461           *
    462           * @param   none
    463           *
    464           * @return  none
    465           */
    466          //Ω” ’ ˝æ›£¨≤Œ ˝Œ™Ω” ’µΩµƒ ˝æ›

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    467          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    468          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    469            uint16 flashTime;
    470            unsigned short len = 6+5+3+1;
    471            byte buf[6+5+3+1]; 
    472            
    473            switch ( pkt->clusterId ) //≈–∂œ¥ÿID
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 1,A
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000022   0100         DW        1
   \   000024   01           DB        1
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000027   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000029   ....         DW        ??SampleApp_MessageMSGCB_2
    474            {
    475              case SAMPLEAPP_PERIODIC_CLUSTERID: // ’µΩπ„≤• ˝æ›
    476                osal_memset(buf, 0 , len);
   \                     ??SampleApp_MessageMSGCB_1:
   \   00002B                ; Setup parameters for call to function osal_memset
   \   00002B   7C0F         MOV     R4,#0xf
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7900         MOV     R1,#0x0
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   12....       LCALL   ??osal_memset?relay
    477                osal_memcpy(buf, pkt->cmd.Data, len); //∏¥÷∆ ˝æ›µΩª∫≥Â«¯÷–
   \   00003E                ; Setup parameters for call to function osal_memcpy
   \   00003E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000041   F5..         MOV     ?V0 + 0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0 + 1,A
   \   000047   75..00       MOV     ?V0 + 2,#0x0
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004F   7C0F         MOV     R4,#0xf
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   AA82         MOV     R2,DPL
   \   00005A   AB83         MOV     R3,DPH
   \   00005C   12....       LCALL   ??osal_memcpy?relay
   \   00005F   7403         MOV     A,#0x3
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
    478                HalUARTWrite(0,buf, len);
   \   000064                ; Setup parameters for call to function HalUARTWrite
   \   000064   7C0F         MOV     R4,#0xf
   \   000066   7D00         MOV     R5,#0x0
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   AA82         MOV     R2,DPL
   \   000070   AB83         MOV     R3,DPH
   \   000072   7900         MOV     R1,#0x0
   \   000074   12....       LCALL   ??HalUARTWrite?relay
    479                /*
    480                unsigned char ledBuf[16]={0};
    481                sprintf(ledBuf,"led=%d\n",isRecvLed);
    482                HalUARTWrite(0,ledBuf,sizeof(ledBuf));
    483                */
    484          #ifndef ZDO_COORDINATOR
    485                //»Áπ˚Ω⁄µ„ ’µΩ#1,led¡¡/√
    486                if((buf[0]=='#'&&buf[1]=='1')){
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   6423         XRL     A,#0x23
   \   000080   707E         JNZ     ??SampleApp_MessageMSGCB_0
   \   000082   7401         MOV     A,#0x1
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   E0           MOVX    A,@DPTR
   \   000088   6431         XRL     A,#0x31
   \   00008A   7020         JNZ     ??SampleApp_MessageMSGCB_3
    487                  // ’µΩ#1
    488                  LED^=1;
   \   00008C   639004       XRL     0x90,#0x4
    489                  led_state = (LED==0)?0:1;//»Áπ˚led√£¨‘ÚΩ˚÷π◊‘∂Øøÿ÷∆
   \   00008F   A292         MOV     C,0x90.2
   \   000091   E4           CLR     A
   \   000092   33           RLC     A
   \   000093   90....       MOV     DPTR,#led_state
   \   000096   F0           MOVX    @DPTR,A
    490                  if(isRecvLed)
   \   000097   90....       MOV     DPTR,#isRecvLed
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F8           MOV     R0,A
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F9           MOV     R1,A
   \   00009F   E8           MOV     A,R0
   \   0000A0   49           ORL     A,R1
   \   0000A1   605D         JZ      ??SampleApp_MessageMSGCB_0
    491                    isRecvLed = 0;
   \   0000A3   90....       MOV     DPTR,#isRecvLed
   \                     ??SampleApp_MessageMSGCB_4:
   \   0000A6   E4           CLR     A
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   A3           INC     DPTR
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   8054         SJMP    ??SampleApp_MessageMSGCB_0
    492                }
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   6432         XRL     A,#0x32
   \   0000AF   704F         JNZ     ??SampleApp_MessageMSGCB_0
    493                // ’µΩ#2,∑Á…»ø™/πÿ
    494                else if((buf[0]=='#'&&buf[1]=='2')){
    495                  FAN^=1;
   \   0000B1   639002       XRL     0x90,#0x2
    496                  fan_state = (FAN==0)?0:1;//»Áπ˚∑Á…»πÿ£¨‘ÚΩ˚÷π◊‘∂Øøÿ÷∆
   \   0000B4   A291         MOV     C,0x90.1
   \   0000B6   E4           CLR     A
   \   0000B7   33           RLC     A
   \   0000B8   90....       MOV     DPTR,#fan_state
   \   0000BB   F0           MOVX    @DPTR,A
    497                  if(isRecvFan)
   \   0000BC   90....       MOV     DPTR,#isRecvFan
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F8           MOV     R0,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F9           MOV     R1,A
   \   0000C4   E8           MOV     A,R0
   \   0000C5   49           ORL     A,R1
   \   0000C6   6038         JZ      ??SampleApp_MessageMSGCB_0
    498                    isRecvFan = 0;
   \   0000C8   90....       MOV     DPTR,#isRecvFan
   \   0000CB   80D9         SJMP    ??SampleApp_MessageMSGCB_4
    499                }
   \                     ??SampleApp_MessageMSGCB_2:
   \   0000CD   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000D0   F8           MOV     R0,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F9           MOV     R1,A
   \   0000D4                ; Setup parameters for call to function HalLedBlink
   \   0000D4   8882         MOV     DPL,R0
   \   0000D6   8983         MOV     DPH,R1
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   FA           MOV     R2,A
   \   0000DB   8882         MOV     DPL,R0
   \   0000DD   8983         MOV     DPH,R1
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   EA           MOV     A,R2
   \   0000E4   2400         ADD     A,#0x0
   \   0000E6   F5..         MOV     ?V0 + 0,A
   \   0000E8   E4           CLR     A
   \   0000E9   39           ADDC    A,R1
   \   0000EA   F5..         MOV     ?V0 + 1,A
   \   0000EC   7402         MOV     A,#0x2
   \   0000EE   78..         MOV     R0,#?V0 + 0
   \   0000F0   12....       LCALL   ?US_SHR
   \   0000F3   AC..         MOV     R4,?V0 + 0
   \   0000F5   AD..         MOV     R5,?V0 + 1
   \   0000F7   7B32         MOV     R3,#0x32
   \   0000F9   7A04         MOV     R2,#0x4
   \   0000FB   7908         MOV     R1,#0x8
    500          #endif
    501                
    502          #if defined(ZDO_COORDINATOR) 
    503                if(isRecvLed == 1|| isRecvFan==1){
    504                  SampleApp_SendPeriodicMessage();
    505                  if(isRecvLed)
    506                    isRecvLed = 0;
    507                  else
    508                    isRecvFan = 0;
    509                }
    510          #endif      
    511                
    512                /*
    513                if(buf[0]=='D' && buf[1]=='1')      //≈–∂œ ’µΩµƒ ˝æ› «∑ÒŒ™"D1"         
    514                {
    515                    HalLedBlink(HAL_LED_1, 0, 50, 500);//»Áπ˚ «‘ÚLed1º‰∏Ù500ms…¡À∏
    516          #if defined(ZDO_COORDINATOR) //–≠µ˜∆˜ ’µΩ"D1"∫Û,∑µªÿ"D1"∏¯÷’∂À£¨»√÷’∂ÀLed1“≤…¡À∏
    517                    SampleApp_SendPeriodicMessage();
    518          #endif
    519                }
    520                else
    521                {
    522                    HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);                   
    523                }
    524                */
    525                break;
    526          
    527              case SAMPLEAPP_FLASH_CLUSTERID: // ’µΩ◊È≤• ˝æ›  
    528                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    529                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   0000FD   12....       LCALL   ??HalLedBlink?relay
    530                break;
    531            case SAMPLEAPP_P2P_CLUSTERID:
    532           
    533              break;
    534            }
    535          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000100   740F         MOV     A,#0xf
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000108                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    536          
    537          /*********************************************************************
    538           * @fn      SampleApp_SendPeriodicMessage
    539           *
    540           * @brief   Send the periodic message.
    541           *
    542           * @param   none
    543           *
    544           * @return  none
    545           */
    546          //∑÷Œˆ∑¢ÀÕ÷‹∆⁄–≈œ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    547          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    548          { 
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    549          #ifndef ZDO_COORDINATOR
    550            //ªÒµ√µƒ ˝æ›Õ®π˝¥Æø⁄ ‰≥ˆµΩµÁƒ‘œ‘ æ  
    551            char str[6+5+3+1]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   C082         PUSH    DPL
   \   00000F   7406         MOV     A,#0x6
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   D082         POP     DPL
   \   00001D   740F         MOV     A,#0xf
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    552            //ªÒ»°Œ¬ ™∂»
    553            unsigned char temp_humi[6]={0};
   \   000022   90....       MOV     DPTR,#`?<Constant {0}>_1`
   \   000025   C082         PUSH    DPL
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AC82         MOV     R4,DPL
   \   00002F   AD83         MOV     R5,DPH
   \   000031   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   000034   D082         POP     DPL
   \   000036   7406         MOV     A,#0x6
   \   000038   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    554            strcpy(temp_humi,DHT11());
                          ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

    strcpy(temp_humi,DHT11());
                     ^
"C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",554  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   00003B                ; Setup parameters for call to function strcpy
   \   00003B                ; Setup parameters for call to function DHT11
   \   00003B   12....       LCALL   ??DHT11?relay
   \   00003E   EA           MOV     A,R2
   \   00003F   FC           MOV     R4,A
   \   000040   EB           MOV     A,R3
   \   000041   FD           MOV     R5,A
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   12....       LCALL   ??strcpy?relay
    555            unsigned int lt = Light();//ªÒ»°π‚«ø
   \   00004F                ; Setup parameters for call to function Light
   \   00004F   12....       LCALL   ??Light?relay
   \   000052   8A..         MOV     ?V0 + 4,R2
   \   000054   8B..         MOV     ?V0 + 5,R3
    556            uint16 gas = ReadGasData();
   \   000056                ; Setup parameters for call to function ReadGasData
   \   000056   12....       LCALL   ??ReadGasData?relay
   \   000059   8A..         MOV     ?V0 + 2,R2
   \   00005B   8B..         MOV     ?V0 + 3,R3
    557             sprintf(str,"%s%5d%3d\n",temp_humi,lt,gas);
   \   00005D                ; Setup parameters for call to function sprintf
   \   00005D   78..         MOV     R0,#?V0 + 2
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   78..         MOV     R0,#?V0 + 4
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   7404         MOV     A,#0x4
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   8582..       MOV     ?V0 + 0,DPL
   \   00006F   8583..       MOV     ?V0 + 1,DPH
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   7C..         MOV     R4,#`?<Constant "%s%5d%3d\\n">` & 0xff
   \   000079   7D..         MOV     R5,#(`?<Constant "%s%5d%3d\\n">` >> 8) & 0xff
   \   00007B   740C         MOV     A,#0xc
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   AA82         MOV     R2,DPL
   \   000082   AB83         MOV     R3,DPH
   \   000084   12....       LCALL   ??sprintf?relay
   \   000087   7406         MOV     A,#0x6
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
    558            HalUARTWrite(0,str,sizeof(str)); 
                                  ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00008C                ; Setup parameters for call to function HalUARTWrite
   \   00008C   7C0F         MOV     R4,#0xf
   \   00008E   7D00         MOV     R5,#0x0
   \   000090   7406         MOV     A,#0x6
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   AA82         MOV     R2,DPL
   \   000097   AB83         MOV     R3,DPH
   \   000099   7900         MOV     R1,#0x0
   \   00009B   12....       LCALL   ??HalUARTWrite?relay
    559             // µ˜”√AF_DataRequestΩ´ ˝æ›Œﬁœﬂπ„≤•≥ˆ»•
    560            if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    561                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    562                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    563                                 sizeof(str),       //∑¢ÀÕ ˝æ›≥§∂»
    564                                 (uchar*)str,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    565                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    566                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    567                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
   \   00009E                ; Setup parameters for call to function AF_DataRequest
   \   00009E   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000A1   78..         MOV     R0,#?V0 + 0
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A6   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0000A9   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0000AC   78..         MOV     R0,#?V0 + 0
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   7409         MOV     A,#0x9
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   8582..       MOV     ?V0 + 0,DPL
   \   0000B9   8583..       MOV     ?V0 + 1,DPH
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   75..0F       MOV     ?V0 + 0,#0xf
   \   0000C4   75..00       MOV     ?V0 + 1,#0x0
   \   0000C7   78..         MOV     R0,#?V0 + 0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   75..01       MOV     ?V0 + 0,#0x1
   \   0000CF   78..         MOV     R0,#?V0 + 0
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D4   7920         MOV     R1,#0x20
   \   0000D6   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000D8   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000DA   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   0000DC   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   0000DE   12....       LCALL   ??AF_DataRequest?relay
   \   0000E1   7409         MOV     A,#0x9
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   E9           MOV     A,R1
   \   0000E7   6007         JZ      ??SampleApp_SendPeriodicMessage_0
    568            {
    569            }
    570            else
    571            {
    572              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   0000E9                ; Setup parameters for call to function HalLedSet
   \   0000E9   7A01         MOV     R2,#0x1
   \   0000EB   7901         MOV     R1,#0x1
   \   0000ED   12....       LCALL   ??HalLedSet?relay
    573              // Error occurred in request to send.
    574            }
    575            //◊‘∂Øøÿ÷∆
    576            if(led_state)
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   0000F0   90....       MOV     DPTR,#led_state
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   601C         JZ      ??SampleApp_SendPeriodicMessage_1
    577              LED = (lt<200)?1:0;
   \   0000F6   C3           CLR     C
   \   0000F7   E5..         MOV     A,?V0 + 4
   \   0000F9   94C8         SUBB    A,#-0x38
   \   0000FB   E5..         MOV     A,?V0 + 5
   \   0000FD   9400         SUBB    A,#0x0
   \   0000FF   5004         JNC     ??SampleApp_SendPeriodicMessage_2
   \   000101   7401         MOV     A,#0x1
   \   000103   8001         SJMP    ??SampleApp_SendPeriodicMessage_3
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   000105   E4           CLR     A
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   000106   33           RLC     A
   \   000107   33           RLC     A
   \   000108   54FC         ANL     A,#0xfc
   \   00010A   F8           MOV     R0,A
   \   00010B   E590         MOV     A,0x90
   \   00010D   54FB         ANL     A,#0xfb
   \   00010F   48           ORL     A,R0
   \   000110   F590         MOV     0x90,A
    578            if(fan_state)
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   000112   90....       MOV     DPTR,#fan_state
   \   000115   E0           MOVX    A,@DPTR
   \   000116   601A         JZ      ??SampleApp_SendPeriodicMessage_4
    579              FAN =(gas<75)?0:1;
   \   000118   C3           CLR     C
   \   000119   E5..         MOV     A,?V0 + 2
   \   00011B   944B         SUBB    A,#0x4b
   \   00011D   E5..         MOV     A,?V0 + 3
   \   00011F   9400         SUBB    A,#0x0
   \   000121   5003         JNC     ??SampleApp_SendPeriodicMessage_5
   \   000123   E4           CLR     A
   \   000124   8002         SJMP    ??SampleApp_SendPeriodicMessage_6
   \                     ??SampleApp_SendPeriodicMessage_5:
   \   000126   7401         MOV     A,#0x1
   \                     ??SampleApp_SendPeriodicMessage_6:
   \   000128   C3           CLR     C
   \   000129   33           RLC     A
   \   00012A   F8           MOV     R0,A
   \   00012B   E590         MOV     A,0x90
   \   00012D   54FD         ANL     A,#0xfd
   \   00012F   48           ORL     A,R0
   \   000130   F590         MOV     0x90,A
    580          #endif
    581           
    582          #if defined(ZDO_COORDINATOR) 
    583            //»Áπ˚–≠µ˜∆˜ ’µΩ#1ªÚ#2
    584            HalLedBlink(HAL_LED_1, 0, 50, 500);//»Áπ˚ «‘ÚLed1º‰∏Ù500ms…¡À∏
    585            if(isRecvLed==1){
    586            unsigned char buf[] = "#1";
    587             if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    588                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    589                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    590                                 2,       // ∑¢ÀÕ ˝æ›≥§∂»
    591                                 buf,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    592                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    593                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    594                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
    595              {
    596              }
    597            }
    598            else if(isRecvFan == 1){
    599              unsigned char buf[] = "#2";
    600              if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    601                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    602                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    603                                 2,       //∑¢ÀÕ ˝æ›≥§∂»
    604                                 buf,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    605                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    606                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    607                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
    608              {
    609              }
    610            }
    611          #endif
    612           
    613          }
   \                     ??SampleApp_SendPeriodicMessage_4:
   \   000132   7415         MOV     A,#0x15
   \   000134   12....       LCALL   ?DEALLOC_XSTACK8
   \   000137   7F06         MOV     R7,#0x6
   \   000139   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00013C                REQUIRE _A_P1
    614          
    615          /*********************************************************************
    616           * @fn      SampleApp_SendFlashMessage
    617           *
    618           * @brief   Send the flash message to group 1.
    619           *
    620           * @param   flashTime - in milliseconds
    621           *
    622           * @return  none
    623           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    624          void SampleApp_SendFlashMessage( uint16 flashTime )  
   \                     SampleApp_SendFlashMessage:
    625          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    626            uint8 buffer[3];
    627            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    628            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    629            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    630          
    631            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    632                                 SAMPLEAPP_FLASH_CLUSTERID,
    633                                 3,
    634                                 buffer,
    635                                 &SampleApp_TransID,
    636                                 AF_DISCV_ROUTE,
    637                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029                REQUIRE ?Subroutine1
   \   000029                ; // Fall through to label ?Subroutine1
    638            {
    639            }
    640            else
    641            {
    642              // Error occurred in request to send.
    643            }
    644          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..1E       MOV     ?V0 + 0,#0x1e
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000008   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00000B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000013   7403         MOV     A,#0x3
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   8582..       MOV     ?V0 + 0,DPL
   \   00001B   8583..       MOV     ?V0 + 1,DPH
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..03       MOV     ?V0 + 0,#0x3
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..02       MOV     ?V0 + 0,#0x2
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7920         MOV     R1,#0x20
   \   000038   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00003A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003C   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   00003E   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000040   12....       LCALL   ??AF_DataRequest?relay
   \   000043   7409         MOV     A,#0x9
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004D   7F02         MOV     R7,#0x2
   \   00004F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    645          void SampleApp_Send_P2P_Message(void){
   \                     SampleApp_Send_P2P_Message:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    646            uchar cmd[3] ="LED";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "LED">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "LED">` & 0xff
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    647            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    648                                 SAMPLEAPP_FLASH_CLUSTERID,
    649                                 3,
    650                                 cmd,
    651                                 &SampleApp_TransID,
    652                                 AF_DISCV_ROUTE,
    653                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   80..         SJMP    ?Subroutine1
    654            {
    655            }
    656          }
    657          /*********************************************************************
    658          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    659          uint16 ReadGasData( void )
   \                     ReadGasData:
    660          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    661            uint16 reading = 0;
    662            
    663            /* Enable channel */
    664            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    665            
    666            /* writing to this register starts the extra conversion */
    667            ADCCON3 = 0x86;// AVDD5 “˝Ω≈  00£∫ 64 ≥È»°¬ (7 ŒªENOB)  0110£∫ AIN6
   \   000003   75B686       MOV     0xb6,#-0x7a
    668            
    669            /* Wait for the conversion to be done */
    670            while (!(ADCCON1 & 0x80));
   \                     ??ReadGasData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadGasData_0
    671            
    672            /* Disable channel after done conversion */
    673            ADCCFG &= (0x40 ^ 0xFF); //∞¥Œª“ÏªÚ°£»Á1010^1111=0101£®∂˛Ω¯÷∆£©
   \   00000C   53F2BF       ANL     0xf2,#0xbf
    674            
    675            /* Read the result */
    676            reading = ADCL;
   \   00000F   E5BA         MOV     A,0xba
    677            reading |= (int16) (ADCH << 8); 
    678            
    679            reading >>= 8;
    680            
    681            return (reading);
   \   000011   E5BB         MOV     A,0xbb
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   FB           MOV     R3,A
   \   000016   02....       LJMP    ?BRET
   \   000019                REQUIRE ADCCFG
   \   000019                REQUIRE ADCCON3
   \   000019                REQUIRE ADCCON1
   \   000019                REQUIRE ADCL
   \   000019                REQUIRE ADCH
    682          } 

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 Example"
   \            35333020
   \            4578616D
   \            706C6500

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for fan_state>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for led_state>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s%5d%3d\\n">`:
   \   000000   25732535     DB "%s%5d%3d\012"
   \            64253364
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED">`:
   \   000000   4C4544       DB 4CH, 45H, 44H

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadGasData                        0      0     35
     SampleApp_HandleKeys               0      0     21
       -> SampleApp_SendFlashMessage
                                        0      0     18
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     41
       -> osal_memset                   0      0     52
       -> osal_memcpy                   0      0     58
       -> HalUARTWrite                  0      0     52
       -> HalLedBlink                   0      0     52
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     31
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     56
       -> DHT11                         0      0     70
       -> strcpy                        0      0     70
       -> Light                         0      0     70
       -> ReadGasData                   0      0     70
       -> sprintf                       0      0     82
       -> HalUARTWrite                  0      0     70
       -> AF_DataRequest                0      0     88
       -> HalLedSet                     0      0     70
     SampleApp_Send_P2P_Message         2      0     22
       -> AF_DataRequest                0      0     44


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_P1                                    1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     P0DIR                                    1
     P1DIR                                    1
     AppTitle                                16
     fan_state                                1
     led_state                                1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         199
     ?Subroutine0                             5
     SampleApp_ProcessEvent                 176
     SampleApp_HandleKeys                    22
     SampleApp_MessageMSGCB                 264
     ?Subroutine2                            12
     SampleApp_SendPeriodicMessage          316
     SampleApp_SendFlashMessage              41
     ?Subroutine1                            82
     SampleApp_Send_P2P_Message              33
     ReadGasData                             25
     ?<Initializer for AppTitle>             16
     ?<Initializer for fan_state>             1
     ?<Initializer for led_state>             1
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??ReadGasData?relay                      6
     ?<Constant "UartInit OK\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant {0}>                         15
     ?<Constant {0}>_1                        6
     ?<Constant "%s%5d%3d\n">                10
     ?<Constant "LED">                        3

 
 1 175 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
    10 bytes in segment SFR_AN
    18 bytes in segment XDATA_I
    18 bytes in segment XDATA_ID
    81 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
 1 241 bytes of CODE  memory
    81 bytes of CONST memory
     0 bytes of DATA  memory (+ 10 bytes shared)
    71 bytes of XDATA memory

Errors: none
Warnings: 3
