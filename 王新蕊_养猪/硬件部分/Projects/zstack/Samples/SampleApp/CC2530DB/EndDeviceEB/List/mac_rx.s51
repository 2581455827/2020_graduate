///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        15/Dec/2019  14:13:27 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Components\mac\low_level\srf04\mac_rx.c       /
//    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤ /
//                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wEndev.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f C:\Users\25814\Desktop\202 /
//                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wC /
//                          onfig.cfg (-DZIGBEEPRO -DSECURE=0                 /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\202 /
//                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\mac\low_lev /
//                          el\srf04\mac_rx.c -D NWK_AUTO_POLL -D ZAPP_P1 -D  /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\En /
//                          dDeviceEB\List\ -lA C:\Users\25814\Desktop\2020±œ /
//                          …Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\EndDeviceEB\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\En /
//                          dDeviceEB\Obj\ -e --no_code_motion --debug        /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\   /
//                          -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤ /
//                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\Source\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı /
//                          –¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\include\ -I           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\include\ -I           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\high_level\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\ -I   /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\singl /
//                          e_chip\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô /
//                          _—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\mt\ -I         /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\osal\include\ -I          /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\saddr\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\sdata\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\af\ -I              /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\nwk\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sapi\ -I            /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sec\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sys\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\zdo\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\ -I                  /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\f8w\ -Ohz            /
//    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\En /
//                          dDeviceEB\List\mac_rx.s51                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME mac_rx

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??macRxAckTxDoneCallback?relay
        FUNCTION ??macRxAckTxDoneCallback?relay,0203H
        PUBLIC ??macRxFifoOverflowIsr?relay
        FUNCTION ??macRxFifoOverflowIsr?relay,0203H
        PUBLIC ??macRxHaltCleanup?relay
        FUNCTION ??macRxHaltCleanup?relay,0203H
        PUBLIC ??macRxInit?relay
        FUNCTION ??macRxInit?relay,0203H
        PUBLIC ??macRxPromiscuousMode?relay
        FUNCTION ??macRxPromiscuousMode?relay,0203H
        PUBLIC ??macRxRadioPowerUpInit?relay
        FUNCTION ??macRxRadioPowerUpInit?relay,0203H
        PUBLIC ??macRxThresholdIsr?relay
        FUNCTION ??macRxThresholdIsr?relay,0203H
        PUBLIC ??macRxTxReset?relay
        FUNCTION ??macRxTxReset?relay,0203H
        FUNCTION ??rxAddrIsr?relay,0203H
        FUNCTION ??rxDiscardFrame?relay,0203H
        FUNCTION ??rxDiscardIsr?relay,0203H
        FUNCTION ??rxDone?relay,0203H
        FUNCTION ??rxFcsIsr?relay,0203H
        FUNCTION ??rxHaltCleanupFinalStep?relay,0203H
        FUNCTION ??rxPayloadIsr?relay,0203H
        FUNCTION ??rxPostRxUpdates?relay,0203H
        FUNCTION ??rxPrepPayload?relay,0203H
        FUNCTION ??rxStartIsr?relay,0203H
        PUBWEAK RFIRQF0
        PUBWEAK RFIRQF1
        PUBWEAK RFST
        PUBWEAK S1CON
        PUBWEAK _A_IEN0
        PUBLIC macRxAckTxDoneCallback
        FUNCTION macRxAckTxDoneCallback,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxActive
        PUBLIC macRxFifoOverflowIsr
        FUNCTION macRxFifoOverflowIsr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxFilter
        PUBLIC macRxHaltCleanup
        FUNCTION macRxHaltCleanup,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxInit
        FUNCTION macRxInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxOutgoingAckFlag
        PUBLIC macRxPromiscuousMode
        FUNCTION macRxPromiscuousMode,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC macRxRadioPowerUpInit
        FUNCTION macRxRadioPowerUpInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxThresholdIsr
        FUNCTION macRxThresholdIsr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxTxReset
        FUNCTION macRxTxReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxAddrIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        FUNCTION rxDiscardFrame,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxDiscardIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION rxDone,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxFcsIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION rxHaltCleanupFinalStep,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxPayloadIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxPostRxUpdates,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxPrepPayload,0203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxStartIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
macRxHardDisable    SYMBOL "macRxHardDisable"
macDataRxMemFree    SYMBOL "macDataRxMemFree"
halAssertHandler    SYMBOL "halAssertHandler"
macCspForceTxDoneIfPending SYMBOL "macCspForceTxDoneIfPending"
macMemReadRxFifo    SYMBOL "macMemReadRxFifo"
macRadioComputeLQI  SYMBOL "macRadioComputeLQI"
macTxAckReceivedCallback SYMBOL "macTxAckReceivedCallback"
macTxAckNotReceivedCallback SYMBOL "macTxAckNotReceivedCallback"
macDataRxMemAlloc   SYMBOL "macDataRxMemAlloc"
macRxCheckMACPendingCallback SYMBOL "macRxCheckMACPendingCallback"
MAC_SrcMatchCheckAllPending SYMBOL "MAC_SrcMatchCheckAllPending"
macRxCheckPendingCallback SYMBOL "macRxCheckPendingCallback"
osal_memcpy         SYMBOL "osal_memcpy"
macMcuOverflowCapture SYMBOL "macMcuOverflowCapture"
macMcuTimerCapture  SYMBOL "macMcuTimerCapture"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
macRxOffRequest     SYMBOL "macRxOffRequest"
MAC_SrcMatchCheckResult SYMBOL "MAC_SrcMatchCheckResult"
macRxCompleteCallback SYMBOL "macRxCompleteCallback"
macRadioUpdateTxPower SYMBOL "macRadioUpdateTxPower"
macTxStartQueuedFrame SYMBOL "macTxStartQueuedFrame"
??MAC_SrcMatchCheckAllPending?relay SYMBOL "?relay", MAC_SrcMatchCheckAllPending
??MAC_SrcMatchCheckResult?relay SYMBOL "?relay", MAC_SrcMatchCheckResult
??halAssertHandler?relay SYMBOL "?relay", halAssertHandler
??macCspForceTxDoneIfPending?relay SYMBOL "?relay", macCspForceTxDoneIfPending
??macDataRxMemAlloc?relay SYMBOL "?relay", macDataRxMemAlloc
??macDataRxMemFree?relay SYMBOL "?relay", macDataRxMemFree
??macMcuOverflowCapture?relay SYMBOL "?relay", macMcuOverflowCapture
??macMcuTimerCapture?relay SYMBOL "?relay", macMcuTimerCapture
??macMemReadRxFifo?relay SYMBOL "?relay", macMemReadRxFifo
??macRadioComputeLQI?relay SYMBOL "?relay", macRadioComputeLQI
??macRadioUpdateTxPower?relay SYMBOL "?relay", macRadioUpdateTxPower
??macRxCheckMACPendingCallback?relay SYMBOL "?relay", macRxCheckMACPendingCallback
??macRxCheckPendingCallback?relay SYMBOL "?relay", macRxCheckPendingCallback
??macRxCompleteCallback?relay SYMBOL "?relay", macRxCompleteCallback
??macRxHardDisable?relay SYMBOL "?relay", macRxHardDisable
??macRxOffRequest?relay SYMBOL "?relay", macRxOffRequest
??macTxAckNotReceivedCallback?relay SYMBOL "?relay", macTxAckNotReceivedCallback
??macTxAckReceivedCallback?relay SYMBOL "?relay", macTxAckReceivedCallback
??macTxStartQueuedFrame?relay SYMBOL "?relay", macTxStartQueuedFrame
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
macRxAckTxDoneCallback SYMBOL "macRxAckTxDoneCallback"
??macRxAckTxDoneCallback?relay SYMBOL "?relay", macRxAckTxDoneCallback
macRxFifoOverflowIsr SYMBOL "macRxFifoOverflowIsr"
??macRxFifoOverflowIsr?relay SYMBOL "?relay", macRxFifoOverflowIsr
macRxHaltCleanup    SYMBOL "macRxHaltCleanup"
??macRxHaltCleanup?relay SYMBOL "?relay", macRxHaltCleanup
macRxInit           SYMBOL "macRxInit"
??macRxInit?relay   SYMBOL "?relay", macRxInit
macRxPromiscuousMode SYMBOL "macRxPromiscuousMode"
??macRxPromiscuousMode?relay SYMBOL "?relay", macRxPromiscuousMode
macRxRadioPowerUpInit SYMBOL "macRxRadioPowerUpInit"
??macRxRadioPowerUpInit?relay SYMBOL "?relay", macRxRadioPowerUpInit
macRxThresholdIsr   SYMBOL "macRxThresholdIsr"
??macRxThresholdIsr?relay SYMBOL "?relay", macRxThresholdIsr
macRxTxReset        SYMBOL "macRxTxReset"
??macRxTxReset?relay SYMBOL "?relay", macRxTxReset

        EXTERN macRxHardDisable
        FUNCTION macRxHardDisable,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macDataRxMemFree
        FUNCTION macDataRxMemFree,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halAssertHandler
        FUNCTION halAssertHandler,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macCspForceTxDoneIfPending
        FUNCTION macCspForceTxDoneIfPending,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMemReadRxFifo
        FUNCTION macMemReadRxFifo,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRadioComputeLQI
        FUNCTION macRadioComputeLQI,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macTxAckReceivedCallback
        FUNCTION macTxAckReceivedCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macTxAckNotReceivedCallback
        FUNCTION macTxAckNotReceivedCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macDataRxMemAlloc
        FUNCTION macDataRxMemAlloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxCheckMACPendingCallback
        FUNCTION macRxCheckMACPendingCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchCheckAllPending
        FUNCTION MAC_SrcMatchCheckAllPending,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxCheckPendingCallback
        FUNCTION macRxCheckPendingCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMcuOverflowCapture
        FUNCTION macMcuOverflowCapture,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMcuTimerCapture
        FUNCTION macMcuTimerCapture,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxOffRequest
        FUNCTION macRxOffRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchCheckResult
        FUNCTION MAC_SrcMatchCheckResult,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxCompleteCallback
        FUNCTION macRxCompleteCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRadioUpdateTxPower
        FUNCTION macRadioUpdateTxPower,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macTxStartQueuedFrame
        FUNCTION macTxStartQueuedFrame,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??MAC_SrcMatchCheckAllPending?relay
        FUNCTION ??MAC_SrcMatchCheckAllPending?relay,00H
        EXTERN ??MAC_SrcMatchCheckResult?relay
        FUNCTION ??MAC_SrcMatchCheckResult?relay,00H
        EXTERN ??halAssertHandler?relay
        FUNCTION ??halAssertHandler?relay,00H
        EXTERN ??macCspForceTxDoneIfPending?relay
        FUNCTION ??macCspForceTxDoneIfPending?relay,00H
        EXTERN ??macDataRxMemAlloc?relay
        FUNCTION ??macDataRxMemAlloc?relay,00H
        EXTERN ??macDataRxMemFree?relay
        FUNCTION ??macDataRxMemFree?relay,00H
        EXTERN ??macMcuOverflowCapture?relay
        FUNCTION ??macMcuOverflowCapture?relay,00H
        EXTERN ??macMcuTimerCapture?relay
        FUNCTION ??macMcuTimerCapture?relay,00H
        EXTERN ??macMemReadRxFifo?relay
        FUNCTION ??macMemReadRxFifo?relay,00H
        EXTERN ??macRadioComputeLQI?relay
        FUNCTION ??macRadioComputeLQI?relay,00H
        EXTERN ??macRadioUpdateTxPower?relay
        FUNCTION ??macRadioUpdateTxPower?relay,00H
        EXTERN ??macRxCheckMACPendingCallback?relay
        FUNCTION ??macRxCheckMACPendingCallback?relay,00H
        EXTERN ??macRxCheckPendingCallback?relay
        FUNCTION ??macRxCheckPendingCallback?relay,00H
        EXTERN ??macRxCompleteCallback?relay
        FUNCTION ??macRxCompleteCallback?relay,00H
        EXTERN ??macRxHardDisable?relay
        FUNCTION ??macRxHardDisable?relay,00H
        EXTERN ??macRxOffRequest?relay
        FUNCTION ??macRxOffRequest?relay,00H
        EXTERN ??macTxAckNotReceivedCallback?relay
        FUNCTION ??macTxAckNotReceivedCallback?relay,00H
        EXTERN ??macTxAckReceivedCallback?relay
        FUNCTION ??macTxAckReceivedCallback?relay,00H
        EXTERN ??macTxStartQueuedFrame?relay
        FUNCTION ??macTxStartQueuedFrame?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN macChipVersion
        EXTERN macRxOnFlag
        EXTERN macSrcMatchIsEnabled
        EXTERN macTxActive
        EXTERN pMacDataTx

// C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\mac\low_level\srf04\mac_rx.c
//    1 /**************************************************************************************************
//    2   Filename:       mac_rx.c
//    3   Revised:        $Date: 2007-10-08 14:05:36 -0700 (Mon, 08 Oct 2007) $
//    4   Revision:       $Revision: 15624 $
//    5 
//    6   Description:    Describe the purpose and contents of the file.
//    7 
//    8 
//    9   Copyright 2006-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /* ------------------------------------------------------------------------------------------------
//   41  *                                          Includes
//   42  * ------------------------------------------------------------------------------------------------
//   43  */
//   44 
//   45 /* hal */
//   46 #include "hal_defs.h"
//   47 #include "hal_types.h"
//   48 
//   49 /* OSAL */
//   50 #include "OSAL.h"
//   51 
//   52 /* high-level */
//   53 #include "mac_high_level.h"
//   54 #include "mac_spec.h"
//   55 
//   56 /* MAC security */
//   57 #include "mac_security.h"
//   58 
//   59 /* exported low-level */
//   60 #include "mac_low_level.h"
//   61 
//   62 /* low-level specific */
//   63 #include "mac_rx.h"
//   64 #include "mac_tx.h"
//   65 #include "mac_rx_onoff.h"
//   66 #include "mac_radio.h"
//   67 
//   68 /* target specific */
//   69 #include "mac_radio_defs.h"

        ASEGN SFR_AN:DATA:NOROOT,091H
// unsigned char volatile __sfr RFIRQF1
RFIRQF1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09bH
// unsigned char volatile __sfr S1CON
S1CON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e1H
// unsigned char volatile __sfr RFST
RFST:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e9H
// unsigned char volatile __sfr RFIRQF0
RFIRQF0:
        DATA8
        DS 1
//   70 #include "mac_autopend.h"
//   71 
//   72 /* debug */
//   73 #include "mac_assert.h"
//   74 
//   75 
//   76 /* ------------------------------------------------------------------------------------------------
//   77  *                                            Defines
//   78  * ------------------------------------------------------------------------------------------------
//   79  */
//   80 #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
//   81 
//   82 /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
//   83 #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \ 
//   84                                    MAC_FCF_FIELD_LEN      +  \ 
//   85                                    MAC_SEQ_NUM_FIELD_LEN  +  \ 
//   86                                    MAC_FCS_FIELD_LEN)
//   87 
//   88 /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
//   89 #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
//   90 
//   91 /* addressing mode reserved value */
//   92 #define ADDR_MODE_RESERVERED  1
//   93 
//   94 /* length of command frame identifier */
//   95 #define CMD_FRAME_ID_LEN      1
//   96 
//   97 /* packet size mask is equal to the maximum value */
//   98 #define PHY_PACKET_SIZE_MASK  0x7F
//   99 
//  100 /* value for promiscuous off, must not conflict with other mode variants from separate include files */
//  101 #define PROMISCUOUS_MODE_OFF  0x00
//  102 
//  103 /* bit of proprietary FCS format that indicates if the CRC is OK */
//  104 #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
//  105 
//  106 /* dummy length value for unused entry in lookup table */
//  107 #define DUMMY_LEN   0xBE
//  108 
//  109 /* value for rxThresholdIntState */
//  110 #define RX_THRESHOLD_INT_STATE_INACTIVE   0
//  111 #define RX_THRESHOLD_INT_STATE_ACTIVE     1
//  112 #define RX_THRESHOLD_INT_STATE_RESET      2
//  113 
//  114 
//  115 /* ------------------------------------------------------------------------------------------------
//  116  *                                             Macros
//  117  * ------------------------------------------------------------------------------------------------
//  118  */
//  119 #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
//  120 #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
//  121 
//  122 /*
//  123  *  Macro for encoding frame control information into internal flags format.
//  124  *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
//  125  *  format *or* the specification changes, this macro will need to be modified.
//  126  */
//  127 #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
//  128 
//  129 /*
//  130  *  The radio replaces the actual FCS with different information.  This proprietary FCS is
//  131  *  the same length as the original and includes:
//  132  *    1) the RSSI value
//  133  *    2) the average correlation value (used for LQI)
//  134  *    3) a CRC passed bit
//  135  *
//  136  *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
//  137  */
//  138 #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
//  139 #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
//  140 #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
//  141 
//  142 /*
//  143  *  Macros for security control field.
//  144  */
//  145 #define SECURITY_LEVEL(s)                       (s & 0x07)
//  146 #define KEY_IDENTIFIER_MODE(s)                  ((s & 0x18) >> 3)
//  147 #define SECURITY_CONTROL_RESERVED(s)            ((s & 0xE0) >> 5)
//  148 
//  149 /* ------------------------------------------------------------------------------------------------
//  150  *                                       Global Variables
//  151  * ------------------------------------------------------------------------------------------------
//  152  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  153 uint8 macRxActive;
macRxActive:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  154 uint8 macRxFilter;
macRxFilter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  155 uint8 macRxOutgoingAckFlag;
macRxOutgoingAckFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  156 
//  157 
//  158 /* ------------------------------------------------------------------------------------------------
//  159  *                                       Local Constants
//  160  * ------------------------------------------------------------------------------------------------
//  161  */

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA32
//  162 static const uint8 CODE macRxAddrLen[] =
macRxAddrLen:
        DATA8
        DB 0
        DB 190
        DB 4
        DB 10
//  163 {
//  164   0,                                                /* no address */
//  165   DUMMY_LEN,                                        /* reserved */
//  166   MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
//  167   MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
//  168 };
//  169 
//  170 
//  171 /* ------------------------------------------------------------------------------------------------
//  172  *                                       Local Prototypes
//  173  * ------------------------------------------------------------------------------------------------
//  174  */
//  175 static void rxHaltCleanupFinalStep(void);
//  176 
//  177 static void rxStartIsr(void);
//  178 static void rxAddrIsr(void);
//  179 
//  180 #ifdef MAC_SECURITY
//  181   static void rxSecurityHdrIsr(void);
//  182 #endif
//  183   
//  184 static void rxPayloadIsr(void);
//  185 static void rxDiscardIsr(void);
//  186 static void rxFcsIsr(void);
//  187 
//  188 static void rxPrepPayload(void);
//  189 static void rxDiscardFrame(void);
//  190 static void rxDone(void);
//  191 static void rxPostRxUpdates(void);
//  192 
//  193 
//  194 /* ------------------------------------------------------------------------------------------------
//  195  *                                         Local Variables
//  196  * ------------------------------------------------------------------------------------------------
//  197  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  198 static void    (* pFuncRxState)(void);
pFuncRxState:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  199 static macRx_t  * pRxBuf;
pRxBuf:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  200 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  201 static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
rxBuf:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  202 static uint8  rxUnreadLen;
rxUnreadLen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  203 static uint8  rxNextLen;
rxNextLen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  204 static uint8  rxPayloadLen;
rxPayloadLen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  205 static uint8  rxFilter;
rxFilter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  206 static uint8  rxPromiscuousMode;
rxPromiscuousMode:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  207 static uint8  rxIsrActiveFlag;
rxIsrActiveFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  208 static uint8  rxResetFlag;
rxResetFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  209 static uint8  rxFifoOverflowCount;
rxFifoOverflowCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  210 
//  211 #ifdef PACKET_FILTER_STATS
//  212   uint32      rxCrcFailure = 0;
//  213   uint32      rxCrcSuccess = 0;
//  214 #endif /* PACKET_FILTER_STATS */
//  215 
//  216 #ifdef CC2591_COMPRESSION_WORKAROUND
//  217   void macRxResetRssi(void);
//  218 #endif
//  219 
//  220 /**************************************************************************************************
//  221  * @fn          macRxInit
//  222  *
//  223  * @brief       Initialize receive variable states.
//  224  *
//  225  * @param       none
//  226  *
//  227  * @return      none
//  228  **************************************************************************************************
//  229  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  230 MAC_INTERNAL_API void macRxInit(void)
macRxInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function macRxInit
        CODE
//  231 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  232   macRxFilter          = RX_FILTER_OFF;
        MOV     DPTR,#macRxFilter
        CLR     A
        MOVX    @DPTR,A
//  233   rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
        MOV     DPTR,#rxPromiscuousMode
        MOVX    @DPTR,A
//  234   pRxBuf               = NULL; /* required for macRxReset() to function correctly */
        MOV     DPTR,#pRxBuf
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  235   macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
        MOV     DPTR,#macRxActive
        LCALL   ?Subroutine24 & 0xFFFF
//  236   pFuncRxState         = &rxStartIsr;
??CrossCallReturnLabel_38:
        LCALL   ??Subroutine33_0 & 0xFFFF
//  237   macRxOutgoingAckFlag = 0;
//  238   rxIsrActiveFlag      = 0;
??CrossCallReturnLabel_54:
        MOV     DPTR,#rxIsrActiveFlag
        MOVX    @DPTR,A
//  239   rxResetFlag          = 0;
        MOV     DPTR,#rxResetFlag
        MOVX    @DPTR,A
//  240   rxFifoOverflowCount  = 0;
        MOV     DPTR,#rxFifoOverflowCount
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  241 }
//  242 
//  243 
//  244 /**************************************************************************************************
//  245  * @fn          macRxRadioPowerUpInit
//  246  *
//  247  * @brief       Initialization for after radio first powers up.
//  248  *
//  249  * @param       none
//  250  *
//  251  * @return      none
//  252  **************************************************************************************************
//  253  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  254 MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
macRxRadioPowerUpInit:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function macRxRadioPowerUpInit
        CODE
//  255 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  256   /* set threshold at initial value */
//  257   MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
        MOV     DPTR,#0x6194
        MOV     A,#0x5
        LCALL   ?Subroutine9 & 0xFFFF
//  258 
//  259   /* clear any accidental threshold interrupt that happened as part of power up sequence */
//  260   MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
??CrossCallReturnLabel_9:
        MOV     0xe9,#-0x5
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  261 
//  262   /* enable threshold interrupts */
//  263   MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
        MOV     DPTR,#0x61a3
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.2
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock1
        REQUIRE _A_IEN0
        REQUIRE S1CON
        REQUIRE RFIRQF0
//  264 }
//  265 
//  266 
//  267 /**************************************************************************************************
//  268  * @fn          macRxTxReset
//  269  *
//  270  * @brief       Reset the receive state.
//  271  *
//  272  * @param       none
//  273  *
//  274  * @return      none
//  275  **************************************************************************************************
//  276  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  277 MAC_INTERNAL_API void macRxTxReset(void)
macRxTxReset:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function macRxTxReset
        CODE
//  278 {
        FUNCALL macRxTxReset, macRxHardDisable
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macRxTxReset, macRxPromiscuousMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  279   /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
//  280   macRxHardDisable();
        ; Setup parameters for call to function macRxHardDisable
        LCALL   ??macRxHardDisable?relay
//  281 
//  282   /*
//  283    *   Note : transmit does not require any reset logic
//  284    *          beyond what macRxHardDisable() provides.
//  285    */
//  286 
//  287   /* restore deault filter mode to off */
//  288   macRxFilter = RX_FILTER_OFF;
        MOV     DPTR,#macRxFilter
        CLR     A
        MOVX    @DPTR,A
//  289 
//  290   /* return promiscuous mode to default off state */
//  291   macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
        ; Setup parameters for call to function macRxPromiscuousMode
        MOV     R1,A
        LCALL   ??macRxPromiscuousMode?relay
//  292 }
        LJMP    ??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  293 
//  294 
//  295 /**************************************************************************************************
//  296  * @fn          macRxHaltCleanup
//  297  *
//  298  * @brief       Cleanup up the receive logic after receiver is forced off.
//  299  *
//  300  * @param       none
//  301  *
//  302  * @return      none
//  303  **************************************************************************************************
//  304  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  305 MAC_INTERNAL_API void macRxHaltCleanup(void)
macRxHaltCleanup:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function macRxHaltCleanup
        CODE
//  306 {
        FUNCALL macRxHaltCleanup, rxHaltCleanupFinalStep
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  307   rxResetFlag = 1;
        MOV     DPTR,#rxResetFlag
        MOV     A,#0x1
        MOVX    @DPTR,A
//  308   if (!rxIsrActiveFlag)
        MOV     DPTR,#rxIsrActiveFlag
        MOVX    A,@DPTR
        JNZ     ??CrossCallReturnLabel_36
//  309   {
//  310     rxHaltCleanupFinalStep();
        ; Setup parameters for call to function rxHaltCleanupFinalStep
        LCALL   ?Subroutine23 & 0xFFFF
//  311     rxResetFlag = 0;
//  312   }
//  313 }
??CrossCallReturnLabel_36:
        LJMP    ??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock3
//  314 
//  315 
//  316 /*=================================================================================================
//  317  * @fn          rxHaltCleanupFinalStep
//  318  *
//  319  * @brief       Required cleanup if receiver is halted in the middle of a receive.
//  320  *
//  321  * @param       none
//  322  *
//  323  * @return      none
//  324  *=================================================================================================
//  325  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  326 static void rxHaltCleanupFinalStep(void)
rxHaltCleanupFinalStep:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function rxHaltCleanupFinalStep
        CODE
//  327 {
        FUNCALL rxHaltCleanupFinalStep, macDataRxMemFree
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxHaltCleanupFinalStep, rxPostRxUpdates
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  328   /* cancel any upcoming ACK transmit complete callback */
//  329   MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
        MOV     DPTR,#0x61a4
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        MOVX    @DPTR,A
//  330 
//  331   /* set start of frame threshold */
//  332   MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
        MOV     DPTR,#0x6194
        MOV     A,#0x5
        MOVX    @DPTR,A
//  333 
//  334   /* flush the receive FIFO */
//  335   MAC_RADIO_FLUSH_RX_FIFO();
        MOV     0xe1,#-0x13
        MOV     0xe1,#-0x13
//  336 
//  337   /* clear any receive interrupt that happened to squeak through */
//  338   MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
        MOV     A,0xa8
        CLR     0xa8.7
        MOV     0x9b,#0x0
        MOV     0xe9,#-0x5
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  339 
//  340   /* if data buffer has been allocated, free it */
//  341   if (pRxBuf != NULL)
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rxHaltCleanupFinalStep_0
//  342   {
//  343     MEM_FREE((uint8 **)&pRxBuf);
        ; Setup parameters for call to function macDataRxMemFree
        MOV     R2,#pRxBuf & 0xff
        MOV     R3,#(pRxBuf >> 8) & 0xff
        LCALL   ??macDataRxMemFree?relay
//  344   }
//  345   /* MEM_FREE() sets parameter to NULL. */
//  346 
//  347   pFuncRxState = &rxStartIsr;
??rxHaltCleanupFinalStep_0:
        MOV     DPTR,#pFuncRxState
        MOV     A,#??rxStartIsr?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxStartIsr?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  348 
//  349   /* if receive was active, perform the post receive updates */
//  350   if (macRxActive || macRxOutgoingAckFlag)
        MOV     DPTR,#macRxActive
        MOVX    A,@DPTR
        JNZ     ??rxHaltCleanupFinalStep_1
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    A,@DPTR
        JZ      ??rxHaltCleanupFinalStep_2
//  351   {
//  352     macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
??rxHaltCleanupFinalStep_1:
        MOV     DPTR,#macRxActive
        CLR     A
        MOVX    @DPTR,A
//  353     macRxOutgoingAckFlag = 0;
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    @DPTR,A
//  354 
//  355     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        LCALL   ??rxPostRxUpdates?relay
//  356   }
//  357 }
??rxHaltCleanupFinalStep_2:
        LJMP    ??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock4
        REQUIRE RFST
        REQUIRE _A_IEN0
        REQUIRE S1CON
        REQUIRE RFIRQF0
//  358 
//  359 
//  360 /**************************************************************************************************
//  361  * @fn          macRxThresholdIsr
//  362  *
//  363  * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
//  364  *              It implements a state machine for receiving a packet.
//  365  *
//  366  * @param       none
//  367  *
//  368  * @return      none
//  369  **************************************************************************************************
//  370  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  371 MAC_INTERNAL_API void macRxThresholdIsr(void)
macRxThresholdIsr:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function macRxThresholdIsr
        CODE
//  372 {
        FUNCALL macRxThresholdIsr, rxHaltCleanupFinalStep
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  373   /* if currently reseting, do not execute receive ISR logic */
//  374   if (rxResetFlag)
        MOV     DPTR,#rxResetFlag
        MOVX    A,@DPTR
        JNZ     ??CrossCallReturnLabel_37
//  375   {
//  376     return;
//  377   }
//  378 
//  379   /*
//  380    *  Call the function that handles the current receive state.
//  381    *  A flag is set for the duration of the call to indicate
//  382    *  the ISR is executing.  This is necessary for the reset
//  383    *  logic so it does not perform a reset in the middle of
//  384    *  executing the ISR.
//  385    */
//  386   rxIsrActiveFlag = 1;
        MOV     DPTR,#rxIsrActiveFlag
        MOV     A,#0x1
        MOVX    @DPTR,A
//  387   (*pFuncRxState)();
        ; Setup parameters for indirect call
        MOV     DPTR,#pFuncRxState
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL   ?CALL_IND
//  388   rxIsrActiveFlag = 0;
        MOV     DPTR,#rxIsrActiveFlag
        CLR     A
        MOVX    @DPTR,A
//  389 
//  390   /* if a reset occurred during the ISR, peform cleanup here */
//  391   if (rxResetFlag)
        MOV     DPTR,#rxResetFlag
        MOVX    A,@DPTR
        JZ      ??CrossCallReturnLabel_37
//  392   {
//  393     rxHaltCleanupFinalStep();
        ; Setup parameters for call to function rxHaltCleanupFinalStep
        LCALL   ?Subroutine23 & 0xFFFF
//  394     rxResetFlag = 0;
//  395   }
??CrossCallReturnLabel_37:
        LJMP    ??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock5
//  396 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond7) CFA_SP SP+-5
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        LCALL   ??rxHaltCleanupFinalStep?relay
        MOV     DPTR,#rxResetFlag
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
//  397 
//  398 
//  399 /*=================================================================================================
//  400  * @fn          rxStartIsr
//  401  *
//  402  * @brief       First ISR state for receiving a packet - compute packet length, allocate
//  403  *              buffer, initialize buffer.  Acknowledgements are handled immediately without
//  404  *              allocating a buffer.
//  405  *
//  406  * @param       none
//  407  *
//  408  * @return      none
//  409  *=================================================================================================
//  410  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  411 static void rxStartIsr(void)
rxStartIsr:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function rxStartIsr
        CODE
//  412 {
        FUNCALL rxStartIsr, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxPostRxUpdates
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macCspForceTxDoneIfPending
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macRadioComputeLQI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macTxAckReceivedCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macTxAckNotReceivedCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macTxAckNotReceivedCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macDataRxMemAlloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxDiscardFrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macRxCheckMACPendingCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, MAC_SrcMatchCheckAllPending
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macRxCheckPendingCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macMcuOverflowCapture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macMcuTimerCapture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxPrepPayload
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  413   uint8  addrLen;
//  414   uint8  ackWithPending;
//  415   uint8  dstAddrMode;
//  416   uint8  srcAddrMode;
//  417   uint8  mhrLen = 0;
        MOV     R7,#0x0
//  418 
//  419   MAC_ASSERT(!macRxActive); /* receive on top of receive */
        MOV     DPTR,#macRxActive
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_0
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  420 
//  421   /* indicate rx is active */
//  422   macRxActive = MAC_RX_ACTIVE_STARTED;
??rxStartIsr_0:
        MOV     DPTR,#macRxActive
        MOV     A,#-0x7f
        MOVX    @DPTR,A
//  423 
//  424   /*
//  425    *  For bullet proof functionality, need to see if the receiver was just turned off.
//  426    *  The logic to request turning off the receiver, disables interrupts and then checks
//  427    *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
//  428    *
//  429    *  There is a small hole though.  It's possible to attempt turning off the receiver
//  430    *  in the window from when the receive interrupt fires and the point where macRxActive
//  431    *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
//  432    *  macRxActive has been set.  If the receiver is off at this point, there is nothing
//  433    *  in the RX fifo and the receive is simply aborted.
//  434    *
//  435    *  Also, there are some considerations in case a hard disable just happened.  Usually,
//  436    *  the receiver will just be off at this point after a hard disable.  The check described
//  437    *  above will account for this case too.  However, if a hard disable were immediately
//  438    *  followed by an enable, the receiver would be on.  To catch this case, the receive
//  439    *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
//  440    */
//  441   if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
        MOV     DPTR,#macRxOnFlag
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_1
        MOV     DPTR,#0x6193
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JC      ??rxStartIsr_2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??rxStartIsr_2
//  442   {
//  443     /* reset active flag */
//  444     macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
??rxStartIsr_1:
        MOV     DPTR,#macRxActive
        CLR     A
        MOVX    @DPTR,A
//  445 
//  446     /*
//  447      *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
//  448      *  the tiny, tiny window when macRxActive was not zero.
//  449      */
//  450     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        LCALL   ??rxPostRxUpdates?relay
//  451 
//  452     /* return immediately from here */
//  453     return;
        LJMP    ??rxStartIsr_3 & 0xFFFF
//  454   }
//  455 
//  456   /*
//  457    *  If interrupts are held off for too long it's possible the previous "transmit done"
//  458    *  callback is pending.  If this is the case, it needs to be completed before
//  459    *  continuing with the receive logic.
//  460    */
//  461   MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
??rxStartIsr_2:
        ; Setup parameters for call to function macCspForceTxDoneIfPending
        LCALL   ??macCspForceTxDoneIfPending?relay
//  462 
//  463   /*
//  464    *  It's possible receive logic is still waiting for confirmation of an ACK that went out
//  465    *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
//  466    *  That callback execute receive cleanup logic that will run at the completion
//  467    *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
//  468    */
//  469   MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
        LCALL   ?Subroutine8 & 0xFFFF
//  470   macRxOutgoingAckFlag = 0;
//  471 
//  472   /*
//  473    *  Make a module-local copy of macRxFilter.  This prevents the selected
//  474    *  filter from changing in the middle of a receive.
//  475    */
//  476   rxFilter = macRxFilter;
??CrossCallReturnLabel_52:
        MOV     DPTR,#macRxFilter
        MOVX    A,@DPTR
        MOV     DPTR,#rxFilter
        MOVX    @DPTR,A
//  477 
//  478   /*-------------------------------------------------------------------------------
//  479    *  Read initial frame information from FIFO.
//  480    *
//  481    *   This code is not triggered until the following are in the RX FIFO:
//  482    *     frame length          - one byte containing length of MAC frame (excludes this field)
//  483    *     frame control field   - two bytes defining frame type, addressing fields, control flags
//  484    *     sequence number       - one byte unique sequence identifier
//  485    *     additional two bytes  - these bytes are available in case the received frame is an ACK,
//  486    *                             if so, the frame can be verified and responded to immediately,
//  487    *                             if not an ACK, these bytes will be processed normally
//  488    */
//  489 
//  490   /* read frame length, frame control field, and sequence number from FIFO */
//  491   MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV     R1,#0x4
        MOV     R2,#rxBuf & 0xff
        MOV     R3,#(rxBuf >> 8) & 0xff
        LCALL   ??macMemReadRxFifo?relay
//  492 
//  493   /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
//  494   rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
        MOV     DPTR,#rxBuf
        MOVX    A,@DPTR
        ANL     A,#0x7f
        ADD     A,#-0x3
        MOV     DPTR,#rxUnreadLen
        MOVX    @DPTR,A
//  495 
//  496   /*
//  497    *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
//  498    *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
//  499    *  the entire receive buffer is flushed.
//  500    *
//  501    *  In the case that this workaround is not needed, an assert is used to make sure the
//  502    *  receive length field is not corrupted.  This is important because a corrupted receive
//  503    *  length field is utterly fatal and, if not caught here, extremely hard to track down.
//  504    */
//  505   if (macChipVersion == REV_A)
        MOV     DPTR,#macChipVersion
        MOVX    A,@DPTR
        MOV     DPTR,#rxUnreadLen
        JNZ     ??rxStartIsr_4
//  506   {
//  507     if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
//  508         (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x7d
        JNC     ??rxStartIsr_5
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x7
        CLR     C
        SUBB    A,#0x4
        JC      ??rxStartIsr_6
//  509     {
//  510       MAC_RADIO_FLUSH_RX_FIFO();
??rxStartIsr_5:
        MOV     0xe1,#-0x13
        MOV     0xe1,#-0x13
//  511       rxDone();
        ; Setup parameters for call to function rxDone
??rxStartIsr_7:
        LCALL   ??rxDone?relay
//  512       return;
        LJMP    ??rxStartIsr_3 & 0xFFFF
//  513     }
//  514   }
//  515   else
//  516   {
//  517     /* radio supplied a corrupted receive buffer length */
//  518     MAC_ASSERT(rxUnreadLen <= (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN));
??rxStartIsr_4:
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x7d
        JC      ??rxStartIsr_6
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  519   }
//  520 
//  521 
//  522 
//  523   /*-------------------------------------------------------------------------------
//  524    *  Process ACKs.
//  525    *
//  526    *  If this frame is an ACK, process it immediately and exit from here.
//  527    *  If this frame is not an ACK and transmit is listening for an ACK, let
//  528    *  the transmit logic know an non-ACK was received so transmit can complete.
//  529    *
//  530    *  In promiscuous mode ACKs are treated like any other frame.
//  531    */
//  532   if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
??rxStartIsr_6:
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??rxStartIsr_8 & 0xFFFF
        MOV     DPTR,#rxPromiscuousMode
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??rxStartIsr_8 & 0xFFFF
//  533   {
//  534     halIntState_t  s;
//  535     uint8 fcsBuf[MAC_FCF_FIELD_LEN];
//  536     /*
//  537      *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
//  538      *  these two bytes will be the FCS.
//  539      */
//  540 
//  541     /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
//  542     MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??macMemReadRxFifo?relay
//  543 
//  544     /*
//  545      *  This critical section ensures that the ACK timeout won't be triggered in the
//  546      *  middle of receiving the ACK frame.
//  547      */
//  548     HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 0,A
        CLR     0xa8.7
//  549 
//  550     /* see if transmit is listening for an ACK */
//  551     if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
        MOV     DPTR,#macTxActive
        MOVX    A,@DPTR
        XRL     A,#0x86
        JNZ     ??rxStartIsr_9
//  552     {
//  553       MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
        MOV     DPTR,#pMacDataTx
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??rxStartIsr_10
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  554 
//  555       /* record link quality metrics for the receive ACK */
//  556       {
//  557         int8 rssiDbm;
//  558         uint8 corr;
//  559 
//  560         rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
??rxStartIsr_10:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#-0x49
        MOV     R6,A
//  561         MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
//  562         corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x7f
        MOV     R7,A
//  563 
//  564         pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
        ; Setup parameters for call to function macRadioComputeLQI
        MOV     R2,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??macRadioComputeLQI?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#pMacDataTx
        MOVX    A,@DPTR
        ADD     A,#0x14
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_65:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  565         pMacDataTx->internal.correlation = corr;
        MOV     DPTR,#pMacDataTx
        MOVX    A,@DPTR
        ADD     A,#0x15
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_24:
        MOVX    @DPTR,A
//  566         pMacDataTx->internal.rssi= rssiDbm;
        MOV     DPTR,#pMacDataTx
        MOVX    A,@DPTR
        ADD     A,#0x16
        LCALL   ?Subroutine17 & 0xFFFF
//  567       }
??CrossCallReturnLabel_26:
        MOVX    @DPTR,A
//  568 
//  569       /*
//  570        *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
//  571        *  or ACK not received will check "macTxActive" flag before taking any actions.
//  572        */
//  573       HAL_EXIT_CRITICAL_SECTION(s);
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  574 
//  575       /*
//  576        *  An ACK was received so transmit logic needs to know.  If the FCS failed,
//  577        *  the transmit logic still needs to know.  In that case, treat the frame
//  578        *  as a non-ACK to complete the active transmit.
//  579        */
//  580       if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??rxStartIsr_11
//  581       {
//  582         /* call transmit logic to indicate ACK was received */
//  583         macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
        ; Setup parameters for call to function macTxAckReceivedCallback
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x10
        MOV     R2,A
        MOV     DPTR,#rxBuf + 3
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??macTxAckReceivedCallback?relay
        SJMP    ??rxStartIsr_12
//  584       }
//  585       else
//  586       {
//  587         macTxAckNotReceivedCallback();
??rxStartIsr_11:
        ; Setup parameters for call to function macTxAckNotReceivedCallback
        LCALL   ??macTxAckNotReceivedCallback?relay
        SJMP    ??rxStartIsr_12
//  588       }
//  589     }
//  590     else
//  591     {
//  592       HAL_EXIT_CRITICAL_SECTION(s);
??rxStartIsr_9:
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  593     }
//  594 
//  595     /* receive is done, exit from here */
//  596     rxDone();
??rxStartIsr_12:
        ; Setup parameters for call to function rxDone
        LJMP    ??rxStartIsr_7 & 0xFFFF
//  597     return;
//  598   }
//  599   else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
??rxStartIsr_8:
        MOV     DPTR,#macTxActive
        MOVX    A,@DPTR
        XRL     A,#0x86
        JNZ     ??rxStartIsr_13
//  600   {
//  601     macTxAckNotReceivedCallback();
        ; Setup parameters for call to function macTxAckNotReceivedCallback
        LCALL   ??macTxAckNotReceivedCallback?relay
//  602   }
//  603 
//  604   /*-------------------------------------------------------------------------------
//  605    *  Apply filtering.
//  606    *
//  607    *  For efficiency, see if filtering is even 'on' before processing.  Also test
//  608    *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
//  609    *  do not apply filtering.
//  610    */
//  611   if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
??rxStartIsr_13:
        MOV     DPTR,#rxFilter
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_14
        MOV     DPTR,#rxPromiscuousMode
        MOVX    A,@DPTR
        JNZ     ??rxStartIsr_14
//  612   {
//  613     if (/* filter all frames */
//  614          (rxFilter == RX_FILTER_ALL) ||
//  615 
//  616          /* filter non-beacon frames */
//  617          ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
//  618           (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
//  619 
//  620          /* filter non-command frames */
//  621          ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
//  622           ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
        MOV     DPTR,#rxFilter
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     $+5
        LJMP    ??rxStartIsr_15 & 0xFFFF
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??rxStartIsr_16 & 0xFFFF
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x7
        JZ      $+5
        LJMP    ??rxStartIsr_15 & 0xFFFF
//  623     {
//  624       /* discard rest of frame */
//  625       rxDiscardFrame();
//  626       return;
//  627     }
//  628   }
//  629 
//  630   /*-------------------------------------------------------------------------------
//  631    *  Compute length of addressing fields.  Compute payload length.
//  632    */
//  633 
//  634   /* decode addressing modes */
//  635   dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
??rxStartIsr_14:
        MOV     DPTR,#rxBuf + 2
        MOVX    A,@DPTR
        MOV     R0,A
        RRC     A
        RRC     A
        ANL     A,#0x3f
        ANL     A,#0x3
        MOV     ?V0 + 3,A
//  636   srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
        MOV     A,R0
        SWAP    A
        RRC     A
        RRC     A
        ANL     A,#0x3
        MOV     ?V0 + 4,A
//  637 
//  638   /*
//  639   *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
//  640    *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
//  641    *  the entire receive buffer is flushed.
//  642    */
//  643   if (macChipVersion == REV_A)
        MOV     DPTR,#macChipVersion
        MOVX    A,@DPTR
        JNZ     ??rxStartIsr_17
//  644   {
//  645     if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
        MOV     A,#0x1
        XRL     A,?V0 + 4
        JNZ     $+5
        LJMP    ??rxStartIsr_5 & 0xFFFF
        MOV     A,#0x1
        XRL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??rxStartIsr_5 & 0xFFFF
//  646     {
//  647       MAC_RADIO_FLUSH_RX_FIFO();
//  648       rxDone();
//  649       return;
//  650     }
//  651   }
//  652 
//  653   /*
//  654    *  Compute the addressing field length.  A lookup table based on addressing
//  655    *  mode is used for efficiency.  If the source address is present and the
//  656    *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
//  657    *  length is adjusted to match the smaller length.
//  658    */
//  659   addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
??rxStartIsr_17:
        MOV     ?V0 + 0,?V0 + 4
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV     R0,A
        MOV     ?V0 + 0,?V0 + 3
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_35:
        ADD     A,R0
        MOV     R6,A
//  660   if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
        MOV     A,?V0 + 4
        JZ      ??rxStartIsr_18
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rxStartIsr_18
//  661   {
//  662     addrLen -= MAC_PAN_ID_FIELD_LEN;
        DEC     R6
        DEC     R6
//  663   }
//  664 
//  665   /*
//  666    *  If there are not enough unread bytes to include the computed address
//  667    *  plus FCS field, the frame is corrupted and must be discarded.
//  668    */
//  669   if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
??rxStartIsr_18:
        MOV     DPTR,#rxUnreadLen
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     ?V0 + 0,R6
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R2
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      ??rxStartIsr_15
//  670   {
//  671     /* discard frame and exit */
//  672     rxDiscardFrame();
//  673     return;
//  674   }
//  675 
//  676   /* aux security header plus payload length is equal to unread bytes minus
//  677    * address length, minus the FCS
//  678    */
//  679   rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R6
        ADD     A,#-0x2
        MOV     DPTR,#rxPayloadLen
        LCALL   ?Subroutine6 & 0xFFFF
//  680 
//  681   /*-------------------------------------------------------------------------------
//  682    *  Allocate memory for the incoming frame.
//  683    */
//  684   if (MAC_SEC_ENABLED(&rxBuf[1]))
??CrossCallReturnLabel_4:
        JNC     ??rxStartIsr_19
//  685   {
//  686     /* increase the allocation size of MAC header for security */
//  687     mhrLen = MAC_MHR_LEN;
        MOV     R7,#0x25
//  688   }
//  689 
//  690   pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + mhrLen + rxPayloadLen);
??rxStartIsr_19:
        ; Setup parameters for call to function macDataRxMemAlloc
        MOV     ?V0 + 0,R7
        MOV     DPTR,#rxPayloadLen
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x35
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??macDataRxMemAlloc?relay
        MOV     DPTR,#pRxBuf
        LCALL   ??Subroutine39_0 & 0xFFFF
//  691   if (pRxBuf == NULL)
??CrossCallReturnLabel_78:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??rxStartIsr_20
//  692   {
//  693     /* Cancel the outgoing TX ACK */
//  694     MAC_RADIO_CANCEL_TX_ACK();
        MOV     0xe1,#-0x18
        SJMP    ??rxStartIsr_15
//  695 
//  696     /* buffer allocation failed, discard the frame and exit*/
//  697     rxDiscardFrame();
//  698     return;
//  699   }
??rxStartIsr_16:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      $+5
        LJMP    ??rxStartIsr_14 & 0xFFFF
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x3
        JNZ     $+5
        LJMP    ??rxStartIsr_14 & 0xFFFF
??rxStartIsr_15:
        ; Setup parameters for call to function rxDiscardFrame
        LCALL   ??rxDiscardFrame?relay
        LJMP    ??rxStartIsr_3 & 0xFFFF
//  700 
//  701   /*-------------------------------------------------------------------------------
//  702    *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
//  703    */
//  704   ackWithPending = 0;
??rxStartIsr_20:
        MOV     R7,#0x0
//  705   if (!rxPromiscuousMode)
        MOV     DPTR,#rxPromiscuousMode
        MOVX    A,@DPTR
        JNZ     ??rxStartIsr_21
//  706   {
//  707     macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x20
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    @DPTR,A
//  708   }
//  709 
//  710   /*-------------------------------------------------------------------------------
//  711    *  Process any ACK request.
//  712    */
//  713   if (macRxOutgoingAckFlag)
??rxStartIsr_21:
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_22
//  714   {
//  715     halIntState_t  s;
//  716 
//  717     /*
//  718      *  This critical section ensures that the callback ISR is initiated within time
//  719      *  to guarantee correlation with the strobe.
//  720      */
//  721     HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 0,A
        CLR     0xa8.7
//  722 
//  723     /* Do not ack data packet with pending more data */
//  724     if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x3
        JNZ     ??rxStartIsr_23
//  725     {
//  726       if( macRxCheckMACPendingCallback())
        ; Setup parameters for call to function macRxCheckMACPendingCallback
        LCALL   ??macRxCheckMACPendingCallback?relay
        MOV     A,R1
        JZ      ??rxStartIsr_24
//  727       {
//  728         /* Check is any mac data pending for end devices */
//  729         ackWithPending = MAC_RX_FLAG_ACK_PENDING;
??rxStartIsr_25:
        MOV     R7,#0x4
//  730       }
//  731       else
//  732       {
//  733         if( macSrcMatchIsEnabled )
//  734         {
//  735           /* When autopend is enabled, check if allpending is set to true */
//  736           if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
//  737           {
//  738             ackWithPending = MAC_RX_FLAG_ACK_PENDING;
//  739           }
//  740         }
//  741         else
//  742         {
//  743           /* When autopend is disabled, check the application pending callback */
//  744           if( macRxCheckPendingCallback() )
//  745           {
//  746             ackWithPending = MAC_RX_FLAG_ACK_PENDING;
//  747           }
//  748         }
//  749       }
//  750     }
//  751 
//  752     if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
//  753     {
//  754       MAC_RADIO_TX_ACK_PEND();
        MOV     DPTR,#0x618a
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.2
        SJMP    ??rxStartIsr_26
//  755     }
??rxStartIsr_24:
        MOV     DPTR,#macSrcMatchIsEnabled
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_27
        ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
        LCALL   ??MAC_SrcMatchCheckAllPending?relay
        MOV     A,R1
        XRL     A,#0xfe
        JNZ     ??rxStartIsr_23
        SJMP    ??rxStartIsr_25
??rxStartIsr_27:
        ; Setup parameters for call to function macRxCheckPendingCallback
        LCALL   ??macRxCheckPendingCallback?relay
        MOV     A,R1
        JNZ     ??rxStartIsr_25
//  756     else
//  757     {
//  758       MAC_RADIO_TX_ACK();
??rxStartIsr_23:
        MOV     DPTR,#0x618a
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
//  759     }
??rxStartIsr_26:
        LCALL   ?Subroutine9 & 0xFFFF
//  760 
//  761 
//  762     /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
//  763     MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
??CrossCallReturnLabel_10:
        MOV     0x91,#-0x2
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
        MOV     DPTR,#0x61a4
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//  764     HAL_EXIT_CRITICAL_SECTION(s);
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  765   }
//  766 
//  767  /*-------------------------------------------------------------------------------
//  768   *  Populate the receive buffer going up to high-level.
//  769   */
//  770 
//  771   /* configure the payload buffer
//  772    * save MAC header pointer regardless of security status.
//  773    */
//  774   pRxBuf->mhr.p   = pRxBuf->msdu.p   = (uint8 *) (pRxBuf + 1);
??rxStartIsr_22:
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x35
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x32
        LCALL   ??Subroutine34_0 & 0xFFFF
//  775   pRxBuf->mhr.len = pRxBuf->msdu.len =  rxPayloadLen;
??CrossCallReturnLabel_58:
        MOV     DPTR,#rxPayloadLen
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_20:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine6 & 0xFFFF
//  776 
//  777   if (MAC_SEC_ENABLED(&rxBuf[1]))
??CrossCallReturnLabel_5:
        JNC     ??CrossCallReturnLabel_56
//  778   {
//  779     /* Copy FCF and sequence number to RX buffer */
//  780     pRxBuf->mhr.len = MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN;
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     A,#0x3
        MOVX    @DPTR,A
//  781     osal_memcpy(pRxBuf->mhr.p, &rxBuf[1], pRxBuf->mhr.len);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(rxBuf + 1) & 0xff
        MOV     ?V0 + 1,#((rxBuf + 1) >> 8) & 0xff
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_13:
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x32
        DEC     R0
        DEC     R0
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_64:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  782     pRxBuf->mhr.p += pRxBuf->mhr.len;
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x32
        LCALL   ?Subroutine11 & 0xFFFF
//  783   }
??CrossCallReturnLabel_14:
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   ??Subroutine35_0 & 0xFFFF
//  784 
//  785   /* set internal values */
//  786   pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
??CrossCallReturnLabel_56:
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x1a
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     A,?V0 + 4
        LCALL   ??Subroutine40_0 & 0xFFFF
//  787   pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
??CrossCallReturnLabel_79:
        ADD     A,#0x23
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  788   pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
        ; Setup parameters for call to function macMcuOverflowCapture
        LCALL   ??macMcuOverflowCapture?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x24
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  789   pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
        ; Setup parameters for call to function macMcuTimerCapture
        LCALL   ??macMcuTimerCapture?relay
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x28
        LCALL   ??Subroutine34_0 & 0xFFFF
//  790   pRxBuf->internal.frameType    = MAC_FRAME_TYPE(&rxBuf[1]);
??CrossCallReturnLabel_59:
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x7
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_21:
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  791   pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
        MOV     DPTR,#rxBuf + 3
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x31
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_69:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  792   pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x78
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        ANL     A,#0x3
        ORL     A,R0
        ORL     A,R7
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_18:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  793 
//  794   /*-------------------------------------------------------------------------------
//  795    *  If the processing the addressing fields does not require more bytes from
//  796    *  the FIFO go directly address processing function.  Otherwise, configure
//  797    *  interrupt to jump there once bytes are received.
//  798    */
//  799   if (addrLen == 0)
        MOV     A,R6
        JNZ     ??rxStartIsr_28
//  800   {
//  801     /* no addressing fields to read, prepare for payload interrupts */
//  802     pFuncRxState = &rxPayloadIsr;
        LCALL   ?Subroutine7 & 0xFFFF
//  803     rxPrepPayload();
//  804   }
??CrossCallReturnLabel_7:
        SJMP    ??rxStartIsr_3
//  805   else
//  806   {
//  807     /* need to read and process addressing fields, prepare for address interrupt */
//  808     rxNextLen = addrLen;
??rxStartIsr_28:
        MOV     DPTR,#rxNextLen
        LCALL   ?Subroutine6 & 0xFFFF
//  809     if (MAC_SEC_ENABLED(&rxBuf[1]))
??CrossCallReturnLabel_6:
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        JC      ??rxStartIsr_29
//  810     {
//  811       /* When security is enabled, read off security control field as well */
//  812       MAC_RADIO_SET_RX_THRESHOLD(rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
//  813     }
//  814     else
//  815     {
//  816       MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        DEC     A
??rxStartIsr_29:
        MOV     DPTR,#0x6194
        MOVX    @DPTR,A
//  817     }
//  818     pFuncRxState = &rxAddrIsr;
        MOV     DPTR,#pFuncRxState
        MOV     A,#??rxAddrIsr?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxAddrIsr?relay >> 8) & 0xff
        MOVX    @DPTR,A
??rxStartIsr_3:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9
        REQUIRE RFST
        REQUIRE _A_IEN0
        REQUIRE S1CON
        REQUIRE RFIRQF1
//  819   }
//  820 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     A,#macRxAddrLen & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(macRxAddrLen >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+-1
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_41:
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_21
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+-1
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_18
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+-1
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_19
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     DPTR,#pRxBuf
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_50:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x34
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_72:
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_12
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_13
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_26
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_27
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_24
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_25
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        MOV     R0,A
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_66
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_67
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_68
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_69
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+-1
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_70
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_71
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+-1
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_64
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_11
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+-1
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_12
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_13
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_26
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_27
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_24
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_25
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        MOVX    @DPTR,A
        MOV     A,0xa8
        CLR     0xa8.7
        MOV     0x9b,#0x0
        RET
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        MOV     DPTR,#0x61a4
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker58 Using cfiCommon1
        CFI (cfiPicker58) NoFunction
        CFI (cfiPicker58) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#macRxOutgoingAckFlag
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62
//  821 
//  822 
//  823 /*=================================================================================================
//  824  * @fn          rxAddrIsr
//  825  *
//  826  * @brief       Receive ISR state for decoding address.  Reads and stores the address information
//  827  *              from the incoming packet.
//  828  *
//  829  * @param       none
//  830  *
//  831  * @return      none
//  832  *=================================================================================================
//  833  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond63 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x2a
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
        CFI Block cfiCond73 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond74) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond74) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond74) CFA_SP SP+-5
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond84) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond84) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond84) CFA_SP SP+-5
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker91 Using cfiCommon1
        CFI (cfiPicker91) NoFunction
        CFI (cfiPicker91) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiPicker91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#pRxBuf
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_45:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_2
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_3
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker98 Using cfiCommon1
        CFI (cfiPicker98) NoFunction
        CFI (cfiPicker98) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_51:
        RET
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiPicker98

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond99 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_21
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+-1
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_18
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+-1
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_19
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_44
        CFI (cfiCond103) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond103) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond103) CFA_SP SP+-5
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_2
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_3
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker106 Using cfiCommon1
        CFI (cfiPicker106) NoFunction
        CFI (cfiPicker106) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  834 static void rxAddrIsr(void)
rxAddrIsr:
        CFI Block cfiBlock107 Using cfiCommon0
        CFI Function rxAddrIsr
        CODE
//  835 {
        FUNCALL rxAddrIsr, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxAddrIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxAddrIsr, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxAddrIsr, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxAddrIsr, rxPrepPayload
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  836   uint8 buf[MAX_ADDR_FIELDS_LEN];
//  837   uint8 dstAddrMode;
//  838   uint8 srcAddrMode;
//  839 #ifdef MAC_SECURITY  
//  840   uint8 securityControl;
//  841 #endif /* MAC_SECURITY */  
//  842   uint8  * p;
//  843 
//  844   MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        JNZ     ??rxAddrIsr_0
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  845 
//  846   /*  read out address fields into local buffer in one shot */
//  847   MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
??rxAddrIsr_0:
        ; Setup parameters for call to function macMemReadRxFifo
        LCALL   ?Subroutine12 & 0xFFFF
//  848 
//  849   /* set pointer to buffer with addressing fields */
//  850   p = buf;
??CrossCallReturnLabel_16:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
//  851 
//  852   /* destination address */
//  853   dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
        MOV     DPTR,#rxBuf + 2
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        ANL     A,#0x3f
        ANL     A,#0x3
        MOV     R6,A
//  854   if (dstAddrMode != SADDR_MODE_NONE)
        JZ      ??rxAddrIsr_1
//  855   {
//  856     pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x2c
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?Subroutine5 & 0xFFFF
//  857     p += MAC_PAN_ID_FIELD_LEN;
//  858     if (dstAddrMode == SADDR_MODE_EXT)
??CrossCallReturnLabel_62:
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??rxAddrIsr_2
//  859     {
//  860       sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x1b
        LCALL   ?Subroutine20 & 0xFFFF
//  861       p += MAC_EXT_ADDR_FIELD_LEN;
??CrossCallReturnLabel_30:
        MOV     A,#0xa
        SJMP    ??rxAddrIsr_3
//  862     }
//  863     else
//  864     {
//  865       pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
??rxAddrIsr_2:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_22:
        ADD     A,#0x1b
        LCALL   ??Subroutine34_0 & 0xFFFF
//  866       p += MAC_SHORT_ADDR_FIELD_LEN;
??CrossCallReturnLabel_60:
        MOV     A,#0x4
??rxAddrIsr_3:
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
//  867     }
//  868   }
//  869 
//  870   /* sources address */
//  871   srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
??rxAddrIsr_1:
        MOV     DPTR,#rxBuf + 2
        MOVX    A,@DPTR
        SWAP    A
        RRC     A
        RRC     A
        ANL     A,#0x3
        MOV     R6,A
//  872   if (srcAddrMode != SADDR_MODE_NONE)
        JZ      ??CrossCallReturnLabel_61
//  873   {
//  874     if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_19:
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??rxAddrIsr_4
//  875     {
//  876       pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL   ?Subroutine5 & 0xFFFF
//  877       p += MAC_PAN_ID_FIELD_LEN;
??CrossCallReturnLabel_63:
        MOV     A,R4
        ADD     A,#0x2
        INC     R4
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  878     }
//  879     if (srcAddrMode == SADDR_MODE_EXT)
??rxAddrIsr_4:
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??rxAddrIsr_5
//  880     {
//  881       sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
        ; Setup parameters for call to function sAddrExtCpy
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x12
        LCALL   ?Subroutine20 & 0xFFFF
//  882     }
??CrossCallReturnLabel_31:
        SJMP    ??CrossCallReturnLabel_61
//  883     else
//  884     {
//  885       pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
??rxAddrIsr_5:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        LCALL   ?Subroutine15 & 0xFFFF
//  886     }
//  887   }
??CrossCallReturnLabel_23:
        ADD     A,#0x12
        LCALL   ??Subroutine34_0 & 0xFFFF
//  888 
//  889 #ifdef MAC_SECURITY
//  890   if (MAC_SEC_ENABLED(&rxBuf[1]))
//  891   {
//  892     uint8 keyIdMode;
//  893 
//  894     if (MAC_FRAME_VERSION(&rxBuf[1]) == 0)
//  895     {
//  896       /* MAC_UNSUPPORTED_LEGACY - Cancel the outgoing TX ACK.
//  897        * It may be too late but we have to try.
//  898        */
//  899       MAC_RADIO_CANCEL_TX_ACK();
//  900 
//  901       /* clean up after unsupported security legacy */
//  902       macRxHaltCleanup();
//  903       return;
//  904     }
//  905 
//  906     /* Copy addressing fields to RX buffer */
//  907     osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
//  908     pRxBuf->mhr.p   += rxNextLen;
//  909     pRxBuf->mhr.len += rxNextLen;
//  910 
//  911     /*-------------------------------------------------------------------------------
//  912      *  Prepare for auxiliary security header interrupts.
//  913      */
//  914 
//  915     /* read out security control field from FIFO (threshold set so bytes are guaranteed to be there) */
//  916     MAC_RADIO_READ_RX_FIFO(&securityControl, MAC_SEC_CONTROL_FIELD_LEN);
//  917 
//  918     /* Copy security fields to MHR buffer */
//  919     *pRxBuf->mhr.p   = securityControl;
//  920     pRxBuf->mhr.p   += MAC_SEC_CONTROL_FIELD_LEN;
//  921     pRxBuf->mhr.len += MAC_SEC_CONTROL_FIELD_LEN;
//  922 
//  923     /* store security level and key ID mode */
//  924     pRxBuf->sec.securityLevel = SECURITY_LEVEL(securityControl);
//  925     pRxBuf->sec.keyIdMode = keyIdMode = KEY_IDENTIFIER_MODE(securityControl);
//  926 
//  927     /* Corrupted RX frame, should never occur. */
//  928     if ((keyIdMode > MAC_KEY_ID_MODE_8)
//  929     /* Get the next RX length according to AuxLen table minus security control field.
//  930      * The security control length is counted already.
//  931      */
//  932     || ((macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN) >= rxPayloadLen)
//  933     /* Security Enabled subfield is one, but the Security Level in the header is zero:
//  934      * MAC_UNSUPPORTED_SECURITY - Cancel the outgoing TX ACK.
//  935      */
//  936     || (pRxBuf->sec.securityLevel == MAC_SEC_LEVEL_NONE))
//  937     {
//  938       /* It may be too late but we have to try. */
//  939       MAC_RADIO_CANCEL_TX_ACK();
//  940 
//  941       /* clean up after unsupported security or corrupted RX frame. */
//  942       macRxHaltCleanup();
//  943       return;
//  944     }
//  945 
//  946     /* get the next RX length according to AuxLen table minus security control field.
//  947      * The sceurity control length is counted already.
//  948      */
//  949     rxNextLen = macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN;
//  950     MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
//  951     pFuncRxState = &rxSecurityHdrIsr;
//  952   }
//  953   else
//  954 #endif /* MAC_SECURITY */
//  955   {
//  956     /* clear security level */
//  957     pRxBuf->sec.securityLevel = MAC_SEC_LEVEL_NONE;
??CrossCallReturnLabel_61:
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0xf
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_70:
        CLR     A
        MOVX    @DPTR,A
//  958 
//  959     /*-------------------------------------------------------------------------------
//  960      *  Prepare for payload interrupts.
//  961      */
//  962     pFuncRxState = &rxPayloadIsr;
        LCALL   ?Subroutine7 & 0xFFFF
//  963     rxPrepPayload();
//  964   }
//  965 }
??CrossCallReturnLabel_8:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock107
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock108 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock108

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond109 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker111 Using cfiCommon1
        CFI (cfiPicker111) NoFunction
        CFI (cfiPicker111) Picker
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??sAddrExtCpy?relay
        RET
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiPicker111

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond112 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+-1
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+-1
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker119 Using cfiCommon1
        CFI (cfiPicker119) NoFunction
        CFI (cfiPicker119) Picker
        MOV     R0,A
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiPicker119
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
        CFI Block cfiCond120 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+-1
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+-1
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+-1
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker128 Using cfiCommon1
        CFI (cfiPicker128) NoFunction
        CFI (cfiPicker128) Picker
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_75:
        RET
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiPicker128

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond129 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker131 Using cfiCommon1
        CFI (cfiPicker131) NoFunction
        CFI (cfiPicker131) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiPicker131

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond132 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_22
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_23
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker135 Using cfiCommon1
        CFI (cfiPicker135) NoFunction
        CFI (cfiPicker135) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        RET
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond136 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker138 Using cfiCommon1
        CFI (cfiPicker138) NoFunction
        CFI (cfiPicker138) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_40:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiPicker138

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond139 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker141 Using cfiCommon1
        CFI (cfiPicker141) NoFunction
        CFI (cfiPicker141) Picker
        MOV     DPTR,#pFuncRxState
        MOV     A,#??rxPayloadIsr?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxPayloadIsr?relay >> 8) & 0xff
        MOVX    @DPTR,A
        ; Setup parameters for call to function rxPrepPayload
        ; Setup parameters for call to function rxPrepPayload
        LCALL   ??rxPrepPayload?relay
        RET
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiPicker141
//  966 
//  967 
//  968 #ifdef MAC_SECURITY
//  969 /*=================================================================================================
//  970  * @fn          rxSecurityHdrIsr
//  971  *
//  972  * @brief       Receive ISR state for reading out and storing the auxiliary security header.
//  973  *
//  974  * @param       none
//  975  *
//  976  * @return      none
//  977  *=================================================================================================
//  978  */
//  979 static void rxSecurityHdrIsr(void)
//  980 {
//  981   uint8 buf[MAC_FRAME_COUNTER_LEN + MAC_KEY_ID_8_LEN];
//  982 
//  983   /* read out frame counter and key ID */
//  984   MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
//  985 
//  986   /* Incoming frame counter */
//  987   macFrameCounter = BUILD_UINT32(buf[0], buf[1], buf[2], buf[3]);
//  988   if (rxNextLen - MAC_FRAME_COUNTER_LEN > 0)
//  989   {
//  990     /* Explicit mode */
//  991     osal_memcpy(pRxBuf->sec.keySource, &buf[MAC_FRAME_COUNTER_LEN], rxNextLen - MAC_FRAME_COUNTER_LEN - 1);
//  992     pRxBuf->sec.keyIndex = buf[rxNextLen - MAC_KEY_INDEX_LEN];
//  993   }
//  994 
//  995   /* Copy security fields to RX buffer */
//  996   osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
//  997   pRxBuf->mhr.p   += rxNextLen;
//  998   pRxBuf->mhr.len += rxNextLen;
//  999 
// 1000   /* Update payload pointer and payload length. The rxPayloadLen includes security header length
// 1001    * and SCF byte. The security header and SCF length must be deducted from the rxPayloadLen.
// 1002    */
// 1003   rxPayloadLen    -= (rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
// 1004   pRxBuf->msdu.len = rxPayloadLen;
// 1005   pRxBuf->mhr.len += rxPayloadLen;
// 1006 
// 1007   /*-------------------------------------------------------------------------------
// 1008    *  Prepare for payload interrupts.
// 1009    */
// 1010   pFuncRxState = &rxPayloadIsr;
// 1011   rxPrepPayload();
// 1012 }
// 1013 #endif /* MAC_SECURITY */
// 1014 
// 1015 
// 1016 /*=================================================================================================
// 1017  * @fn          rxPrepPayload
// 1018  *
// 1019  * @brief       Common code to prepare for the payload ISR.
// 1020  *
// 1021  * @param       none
// 1022  *
// 1023  * @return      none
// 1024  *=================================================================================================
// 1025  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1026 static void rxPrepPayload(void)
rxPrepPayload:
        CFI Block cfiBlock142 Using cfiCommon0
        CFI Function rxPrepPayload
        CODE
// 1027 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1028   if (rxPayloadLen == 0)
        MOV     DPTR,#rxPayloadLen
        MOVX    A,@DPTR
        JNZ     ??rxPrepPayload_0
// 1029   {
// 1030     MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
        MOV     DPTR,#0x6194
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1031     pFuncRxState = &rxFcsIsr;
        MOV     DPTR,#pFuncRxState
        MOV     A,#??rxFcsIsr?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxFcsIsr?relay >> 8) & 0xff
        SJMP    ??rxPrepPayload_1
// 1032   }
// 1033   else
// 1034   {
// 1035     rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
??rxPrepPayload_0:
        CLR     C
        SUBB    A,#0x10
        JNC     ??rxPrepPayload_2
        MOVX    A,@DPTR
        MOV     DPTR,#rxNextLen
        SJMP    ??rxPrepPayload_3
??rxPrepPayload_2:
        MOV     DPTR,#rxNextLen
        MOV     A,#0x10
??rxPrepPayload_3:
        MOVX    @DPTR,A
// 1036     MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        MOVX    A,@DPTR
        DEC     A
        MOV     DPTR,#0x6194
// 1037   }
??rxPrepPayload_1:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock142
// 1038 }
// 1039 
// 1040 
// 1041 /*=================================================================================================
// 1042  * @fn          rxPayloadIsr
// 1043  *
// 1044  * @brief       Receive ISR state for reading out and storing the packet payload.
// 1045  *
// 1046  * @param       none
// 1047  *
// 1048  * @return      none
// 1049  *=================================================================================================
// 1050  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1051 static void rxPayloadIsr(void)
rxPayloadIsr:
        CFI Block cfiBlock143 Using cfiCommon0
        CFI Function rxPayloadIsr
        CODE
// 1052 {
        FUNCALL rxPayloadIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxPayloadIsr, rxPrepPayload
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1053   MAC_RADIO_READ_RX_FIFO(pRxBuf->mhr.p, rxNextLen);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x32
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_42:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??macMemReadRxFifo?relay
// 1054   pRxBuf->mhr.p += rxNextLen;
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   ??Subroutine35_0 & 0xFFFF
// 1055 
// 1056   rxPayloadLen -= rxNextLen;
??CrossCallReturnLabel_57:
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#rxPayloadLen
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOVX    @DPTR,A
// 1057 
// 1058   rxPrepPayload();
        ; Setup parameters for call to function rxPrepPayload
        LCALL   ??rxPrepPayload?relay
// 1059 }
        SJMP    ??Subroutine38_0
        CFI EndBlock cfiBlock143

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond144 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond145) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond145) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond145) CFA_SP SP+-5
        CFI Block cfiPicker146 Using cfiCommon1
        CFI (cfiPicker146) NoFunction
        CFI (cfiPicker146) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiPicker146

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock147 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock147
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
        CFI Block cfiBlock148 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock148
// 1060 
// 1061 
// 1062 /*=================================================================================================
// 1063  * @fn          rxFcsIsr
// 1064  *
// 1065  * @brief       Receive ISR state for handling the FCS.
// 1066  *
// 1067  * @param       none
// 1068  *
// 1069  * @return      none
// 1070  *=================================================================================================
// 1071  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1072 static void rxFcsIsr(void)
rxFcsIsr:
        CFI Block cfiBlock149 Using cfiCommon0
        CFI Function rxFcsIsr
        CODE
// 1073 {
        FUNCALL rxFcsIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, macRxOffRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, MAC_SrcMatchCheckResult
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, macRadioComputeLQI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, macRxCompleteCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, macDataRxMemFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, rxDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1074   uint8 crcOK;
// 1075   uint8 ackWithPending = 0;
        MOV     ?V0 + 0,#0x0
// 1076 
// 1077   /* read FCS, rxBuf is now available storage */
// 1078   MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV     R1,#0x2
        MOV     R2,#rxBuf & 0xff
        MOV     R3,#(rxBuf >> 8) & 0xff
        LCALL   ??macMemReadRxFifo?relay
// 1079 
// 1080   /*
// 1081    *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
// 1082    *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
// 1083    *    1) the RSSI value
// 1084    *    2) the average correlation value (used for LQI)
// 1085    *    3) a CRC passed bit
// 1086    */
// 1087 
// 1088   /* save the "CRC-is-OK" status */
// 1089   crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x80
        MOV     ?V0 + 1,A
// 1090 
// 1091   /*
// 1092    *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
// 1093    *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
// 1094    *  a special variant of promiscuous mode is active.
// 1095    */
// 1096   if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
        JNZ     ??rxFcsIsr_0
        MOV     DPTR,#rxPromiscuousMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??rxFcsIsr_1 & 0xFFFF
// 1097   {
// 1098     int8 rssiDbm;
// 1099     uint8 corr;
// 1100 
// 1101 #ifdef PACKET_FILTER_STATS
// 1102     rxCrcSuccess++;
// 1103 #endif /* PACKET_FILTER_STATS */
// 1104 
// 1105     /*
// 1106      *  As power saving optimization, set state variable to indicate physical receive
// 1107      *  has completed and then request turning of the receiver.  This means the receiver
// 1108      *  can be off (if other conditions permit) during execution of the callback function.
// 1109      *
// 1110      *  The receiver will be requested to turn off once again at the end of the receive
// 1111      *  logic.  There is no harm in doing this.
// 1112      */
// 1113     macRxActive = MAC_RX_ACTIVE_DONE;
??rxFcsIsr_0:
        MOV     DPTR,#macRxActive
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1114     macRxOffRequest();
        ; Setup parameters for call to function macRxOffRequest
        LCALL   ??macRxOffRequest?relay
// 1115 
// 1116     /* decode RSSI and correlation values */
// 1117     rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
        MOV     DPTR,#rxBuf
        MOVX    A,@DPTR
        ADD     A,#-0x49
        MOV     R7,A
// 1118     MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
// 1119     corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x7f
        MOV     R6,A
// 1120 
// 1121     /* Read the source matching result back */
// 1122     if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
        MOV     DPTR,#macSrcMatchIsEnabled
        MOVX    A,@DPTR
        JZ      ??rxFcsIsr_2
        ; Setup parameters for call to function MAC_SrcMatchCheckResult
        LCALL   ??MAC_SrcMatchCheckResult?relay
        MOV     A,R1
        JZ      ??rxFcsIsr_2
// 1123     {
// 1124       /* This result will not overwrite the previously determined pRxBuf->internal.flags */
// 1125       ackWithPending = MAC_RX_FLAG_ACK_PENDING;
        MOV     ?V0 + 0,#0x4
// 1126     }
// 1127 
// 1128     /* record parameters that get passed up to high-level */
// 1129     pRxBuf->internal.flags |= ( crcOK | ackWithPending );
??rxFcsIsr_2:
        MOV     A,?V0 + 1
        ORL     A,?V0 + 0
        MOV     R0,A
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
// 1130     pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
        ; Setup parameters for call to function macRadioComputeLQI
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R1,A
        LCALL   ??macRadioComputeLQI?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x2e
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_71:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine40_0 & 0xFFFF
// 1131     pRxBuf->mac.rssi = rssiDbm;
??CrossCallReturnLabel_80:
        ADD     A,#0x30
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ??Subroutine40_0 & 0xFFFF
// 1132     pRxBuf->mac.correlation = corr;
??CrossCallReturnLabel_81:
        ADD     A,#0x2f
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ??Subroutine40_0 & 0xFFFF
// 1133 
// 1134     /* set the MSDU pointer to point at start of data */
// 1135     pRxBuf->mhr.p   = (uint8 *) (pRxBuf + 1);
??CrossCallReturnLabel_82:
        ADD     A,#0x35
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ?Subroutine4 & 0xFFFF
// 1136     pRxBuf->msdu.p += (pRxBuf->mhr.len - pRxBuf->msdu.len);
??CrossCallReturnLabel_76:
        ADD     A,#0x2
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R4
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R2
        CLR     C
        SUBB    A,R4
        MOV     R2,A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        LCALL   ?Subroutine4 & 0xFFFF
// 1137 
// 1138     /* finally... execute callback function */
// 1139     macRxCompleteCallback(pRxBuf);
??CrossCallReturnLabel_77:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??macRxCompleteCallback?relay
// 1140     pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
        SJMP    ??rxFcsIsr_3
// 1141   }
// 1142   else
// 1143   {
// 1144 #ifdef PACKET_FILTER_STATS
// 1145     rxCrcFailure++;
// 1146 #endif /* PACKET_FILTER_STATS */
// 1147 
// 1148     /*
// 1149      *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
// 1150      *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
// 1151      *  slightly more efficient to do so.)
// 1152      */
// 1153     MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
??rxFcsIsr_1:
        LCALL   ?Subroutine8 & 0xFFFF
// 1154     macRxOutgoingAckFlag = 0;
// 1155 
// 1156     /* the CRC failed so the packet must be discarded */
// 1157     MEM_FREE((uint8 **)&pRxBuf);
??CrossCallReturnLabel_53:
        ; Setup parameters for call to function macDataRxMemFree
        MOV     R2,#pRxBuf & 0xff
        MOV     R3,#(pRxBuf >> 8) & 0xff
        LCALL   ??macDataRxMemFree?relay
// 1158     pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
??rxFcsIsr_3:
        MOV     DPTR,#pRxBuf
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1159   }
// 1160 
// 1161   /* reset threshold level, reset receive state, and complete receive logic */
// 1162   MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
        LCALL   ?Subroutine2 & 0xFFFF
// 1163   pFuncRxState = &rxStartIsr;
// 1164   rxDone();
// 1165 }
??CrossCallReturnLabel_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock149

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond150 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker152 Using cfiCommon1
        CFI (cfiPicker152) NoFunction
        CFI (cfiPicker152) Picker
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x32
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiPicker152

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond153 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker155 Using cfiCommon1
        CFI (cfiPicker155) NoFunction
        CFI (cfiPicker155) Picker
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV     A,R6
        RET
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiPicker155

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond156 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker158 Using cfiCommon1
        CFI (cfiPicker158) NoFunction
        CFI (cfiPicker158) Picker
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV     A,R7
        RET
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiPicker158

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond159 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker161 Using cfiCommon1
        CFI (cfiPicker161) NoFunction
        CFI (cfiPicker161) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_49:
        ADD     A,#0x34
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_43:
        RET
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiPicker161

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond162 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_14
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_15
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker165 Using cfiCommon1
        CFI (cfiPicker165) NoFunction
        CFI (cfiPicker165) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiPicker165

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond166 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_14
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_15
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker169 Using cfiCommon1
        CFI (cfiPicker169) NoFunction
        CFI (cfiPicker169) Picker
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        RET
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiPicker169

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond170 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker172 Using cfiCommon1
        CFI (cfiPicker172) NoFunction
        CFI (cfiPicker172) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiPicker172
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
        CFI Block cfiCond173 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_78
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker176 Using cfiCommon1
        CFI (cfiPicker176) NoFunction
        CFI (cfiPicker176) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiPicker176
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
        CFI Block cfiCond177 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_79
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond178) CFA_SP SP+0
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker184 Using cfiCommon1
        CFI (cfiPicker184) NoFunction
        CFI (cfiPicker184) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function macRxCompleteCallback
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiPicker184
// 1166 
// 1167 
// 1168 /*=================================================================================================
// 1169  * @fn          rxDone
// 1170  *
// 1171  * @brief       Common exit point for receive.
// 1172  *
// 1173  * @param       none
// 1174  *
// 1175  * @return      none
// 1176  *=================================================================================================
// 1177  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1178 static void rxDone(void)
rxDone:
        CFI Block cfiBlock185 Using cfiCommon0
        CFI Function rxDone
        CODE
// 1179 {
        FUNCALL rxDone, rxPostRxUpdates
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1180   /* Make sure the peak RSSI is reset */
// 1181   COMPRESSION_WORKAROUND_RESET_RSSI();
// 1182   
// 1183   /* if the receive FIFO has overflowed, flush it here */
// 1184   if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
        MOV     DPTR,#0x6193
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rxDone_0
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JC      ??rxDone_0
// 1185   {
// 1186     MAC_RADIO_FLUSH_RX_FIFO();
        MOV     0xe1,#-0x13
        MOV     0xe1,#-0x13
// 1187   }
// 1188 
// 1189   /* mark receive as inactive */
// 1190   macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
??rxDone_0:
        MOV     DPTR,#macRxActive
        CLR     A
        MOVX    @DPTR,A
// 1191 
// 1192   /* if there is no outgoing ACK, run the post receive updates */
// 1193   if (!macRxOutgoingAckFlag)
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    A,@DPTR
        JNZ     ??rxDone_1
// 1194   {
// 1195     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        LCALL   ??rxPostRxUpdates?relay
// 1196   }
// 1197 }
??rxDone_1:
        LJMP    ??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock185
        REQUIRE RFST
// 1198 
// 1199 
// 1200 /**************************************************************************************************
// 1201  * @fn          macRxAckTxDoneCallback
// 1202  *
// 1203  * @brief       Function called when the outoing ACK has completed transmitting.
// 1204  *
// 1205  * @param       none
// 1206  *
// 1207  * @return      none
// 1208  **************************************************************************************************
// 1209  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1210 void macRxAckTxDoneCallback(void)
macRxAckTxDoneCallback:
        CFI Block cfiBlock186 Using cfiCommon0
        CFI Function macRxAckTxDoneCallback
        CODE
// 1211 {
        FUNCALL macRxAckTxDoneCallback, rxPostRxUpdates
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1212   macRxOutgoingAckFlag = 0;
        MOV     DPTR,#macRxOutgoingAckFlag
        CLR     A
        MOVX    @DPTR,A
// 1213 
// 1214   /*
// 1215    *  With certain interrupt priorities and timing conditions, it is possible this callback
// 1216    *  could be executed before the primary receive logic completes.  To prevent this, the
// 1217    *  post updates are only executed if receive logic is no longer active.  In the case the
// 1218    *  post updates are not executed here, they will execute when the main receive logic
// 1219    *  completes.
// 1220    */
// 1221   if (!macRxActive)
        MOV     DPTR,#macRxActive
        MOVX    A,@DPTR
        JNZ     ??macRxAckTxDoneCallback_0
// 1222   {
// 1223     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        LCALL   ??rxPostRxUpdates?relay
// 1224   }
// 1225 }
??macRxAckTxDoneCallback_0:
        LJMP    ??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock186
// 1226 
// 1227 
// 1228 /*=================================================================================================
// 1229  * @fn          rxPostRxUpdates
// 1230  *
// 1231  * @brief       Updates that need to be performed once receive is complete.
// 1232  *
// 1233  *              It is not fatal to execute this function if somehow receive is active.  Under
// 1234  *              certain timing/interrupt conditions a new receive may have started before this
// 1235  *              function executes.  This should happen very rarely (if it happens at all) and
// 1236  *              would cause no problems.
// 1237  *
// 1238  * @param       none
// 1239  *
// 1240  * @return      none
// 1241  *=================================================================================================
// 1242  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1243 static void rxPostRxUpdates(void)
rxPostRxUpdates:
        CFI Block cfiBlock187 Using cfiCommon0
        CFI Function rxPostRxUpdates
        CODE
// 1244 {
        FUNCALL rxPostRxUpdates, macRxOffRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxPostRxUpdates, macRadioUpdateTxPower
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxPostRxUpdates, macTxStartQueuedFrame
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1245   /* turn off receiver if permitted */
// 1246   macRxOffRequest();
        ; Setup parameters for call to function macRxOffRequest
        LCALL   ??macRxOffRequest?relay
// 1247 
// 1248   /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
// 1249   macRadioUpdateTxPower();
        ; Setup parameters for call to function macRadioUpdateTxPower
        LCALL   ??macRadioUpdateTxPower?relay
// 1250 
// 1251   /* initiate and transmit that was queued during receive */
// 1252   macTxStartQueuedFrame();
        ; Setup parameters for call to function macTxStartQueuedFrame
        LCALL   ??macTxStartQueuedFrame?relay
// 1253 }
        LJMP    ??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock187
// 1254 
// 1255 
// 1256 /*=================================================================================================
// 1257  * @fn          rxDiscardFrame
// 1258  *
// 1259  * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
// 1260  *
// 1261  * @param       none
// 1262  *
// 1263  * @return      none
// 1264  *=================================================================================================
// 1265  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1266 static void rxDiscardFrame(void)
rxDiscardFrame:
        CFI Block cfiBlock188 Using cfiCommon0
        CFI Function rxDiscardFrame
        CODE
// 1267 {
        FUNCALL rxDiscardFrame, halAssertHandler
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxDiscardFrame, rxDone
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1268   MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
        MOV     DPTR,#pFuncRxState
        MOVX    A,@DPTR
        XRL     A,#??rxStartIsr?relay & 0xff
        JNZ     ??rxDiscardFrame_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#(??rxStartIsr?relay >> 8) & 0xff
??rxDiscardFrame_0:
        JZ      ??rxDiscardFrame_1
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
// 1269 
// 1270   if (rxUnreadLen == 0)
??rxDiscardFrame_1:
        MOV     DPTR,#rxUnreadLen
        MOVX    A,@DPTR
        JNZ     ??rxDiscardFrame_2
// 1271   {
// 1272     rxDone();
        ; Setup parameters for call to function rxDone
        LCALL   ??rxDone?relay
        SJMP    ??rxDiscardFrame_3
// 1273   }
// 1274   else
// 1275   {
// 1276     rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
??rxDiscardFrame_2:
        CLR     C
        SUBB    A,#0x10
        JNC     ??rxDiscardFrame_4
        MOVX    A,@DPTR
        MOV     DPTR,#rxNextLen
        SJMP    ??rxDiscardFrame_5
??rxDiscardFrame_4:
        MOV     DPTR,#rxNextLen
        MOV     A,#0x10
??rxDiscardFrame_5:
        MOVX    @DPTR,A
// 1277     MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        MOVX    A,@DPTR
        DEC     A
        MOV     DPTR,#0x6194
        MOVX    @DPTR,A
// 1278     pFuncRxState = &rxDiscardIsr;
        MOV     DPTR,#pFuncRxState
        MOV     A,#??rxDiscardIsr?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxDiscardIsr?relay >> 8) & 0xff
        MOVX    @DPTR,A
// 1279   }
// 1280 }
??rxDiscardFrame_3:
        LJMP    ??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock188
// 1281 
// 1282 
// 1283 /*=================================================================================================
// 1284  * @fn          rxDiscardIsr
// 1285  *
// 1286  * @brief       Receive ISR state for discarding a packet.
// 1287  *
// 1288  * @param       none
// 1289  *
// 1290  * @return      none
// 1291  *=================================================================================================
// 1292  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1293 static void rxDiscardIsr(void)
rxDiscardIsr:
        CFI Block cfiBlock189 Using cfiCommon0
        CFI Function rxDiscardIsr
        CODE
// 1294 {
        FUNCALL rxDiscardIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxDiscardIsr, rxDone
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 1295   uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
// 1296 
// 1297   MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
        ; Setup parameters for call to function macMemReadRxFifo
        LCALL   ?Subroutine12 & 0xFFFF
// 1298   rxUnreadLen -= rxNextLen;
??CrossCallReturnLabel_17:
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#rxUnreadLen
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOVX    @DPTR,A
// 1299 
// 1300   /* read out and discard bytes until all bytes of packet are disposed of */
// 1301   if (rxUnreadLen != 0)
        JZ      ??rxDiscardIsr_0
// 1302   {
// 1303     if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
        CLR     C
        SUBB    A,#0x10
        JNC     ??CrossCallReturnLabel_1
// 1304     {
// 1305       rxNextLen = rxUnreadLen;
        MOVX    A,@DPTR
        MOV     DPTR,#rxNextLen
        MOVX    @DPTR,A
// 1306       MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        DEC     A
        MOV     DPTR,#0x6194
        MOVX    @DPTR,A
        SJMP    ??CrossCallReturnLabel_1
// 1307     }
// 1308   }
// 1309   else
// 1310   {
// 1311     /* reset threshold level, reset receive state, and complete receive logic */
// 1312     MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
??rxDiscardIsr_0:
        LCALL   ?Subroutine2 & 0xFFFF
// 1313     pFuncRxState = &rxStartIsr;
// 1314     rxDone();
// 1315   }
// 1316 }
??CrossCallReturnLabel_1:
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        LJMP    ??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock189

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond190 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond191) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond191) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond191) CFA_SP SP+-5
        CFI (cfiCond191) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker192 Using cfiCommon1
        CFI (cfiPicker192) NoFunction
        CFI (cfiPicker192) Picker
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??macMemReadRxFifo?relay
        RET
        CFI EndBlock cfiCond190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiPicker192

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond193 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond194) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond194) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond194) CFA_SP SP+-5
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker195 Using cfiCommon1
        CFI (cfiPicker195) NoFunction
        CFI (cfiPicker195) Picker
        MOV     DPTR,#0x6194
        MOV     A,#0x5
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_39:
        MOVX    @DPTR,A
        ; Setup parameters for call to function rxDone
        ; Setup parameters for call to function rxDone
        LCALL   ??rxDone?relay
        RET
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiPicker195

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond196 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_0
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_1
        CFI (cfiCond198) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond198) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond198) CFA_SP SP+-5
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker199 Using cfiCommon1
        CFI (cfiPicker199) NoFunction
        CFI (cfiPicker199) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#pFuncRxState
        MOV     A,#??rxStartIsr?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxStartIsr?relay >> 8) & 0xff
        RET
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiPicker199
// 1317 
// 1318 
// 1319 /**************************************************************************************************
// 1320  * @fn          macRxFifoOverflowIsr
// 1321  *
// 1322  * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
// 1323  *              exception does not retrieve the good frames that are trapped in the RX FIFO.
// 1324  *              It simply halts and cleanup the RX.
// 1325  *
// 1326  * @param       none
// 1327  *
// 1328  * @return      none
// 1329  **************************************************************************************************
// 1330  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1331 MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
macRxFifoOverflowIsr:
        CFI Block cfiBlock200 Using cfiCommon0
        CFI Function macRxFifoOverflowIsr
        CODE
// 1332 {
        FUNCALL macRxFifoOverflowIsr, macRxHaltCleanup
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1333   rxFifoOverflowCount++; /* This flag is used for debug purpose only */
        MOV     DPTR,#rxFifoOverflowCount
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1334   macRxHaltCleanup();
        ; Setup parameters for call to function macRxHaltCleanup
        LCALL   ??macRxHaltCleanup?relay
// 1335 }
        LJMP    ??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock200
// 1336 
// 1337 
// 1338 /**************************************************************************************************
// 1339  * @fn          macRxPromiscuousMode
// 1340  *
// 1341  * @brief       Sets promiscuous mode - enabling or disabling it.
// 1342  *
// 1343  * @param       none
// 1344  *
// 1345  * @return      none
// 1346  **************************************************************************************************
// 1347  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1348 MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
macRxPromiscuousMode:
        CFI Block cfiBlock201 Using cfiCommon0
        CFI Function macRxPromiscuousMode
        CODE
// 1349 {
        FUNCALL macRxPromiscuousMode, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1350   rxPromiscuousMode = mode;
        MOV     DPTR,#rxPromiscuousMode
        MOVX    @DPTR,A
// 1351 
// 1352   if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
        JNZ     ??macRxPromiscuousMode_0
// 1353   {
// 1354     MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
        MOV     DPTR,#0x6180
        CLR     A
        MOVX    @DPTR,A
        MOVX    A,@DPTR
        ORL     A,#0x5
        SJMP    ??macRxPromiscuousMode_1
// 1355   }
// 1356   else
// 1357   {
// 1358     MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
// 1359                (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
??macRxPromiscuousMode_0:
        MOV     A,#0x2
        XRL     A,R6
        JZ      ??macRxPromiscuousMode_2
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??macRxPromiscuousMode_2
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
// 1360 
// 1361     MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
??macRxPromiscuousMode_2:
        MOV     DPTR,#0x6180
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
??macRxPromiscuousMode_1:
        MOVX    @DPTR,A
// 1362   }
// 1363 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock201

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxRadioPowerUpInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxRadioPowerUpInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxTxReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxTxReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxHaltCleanup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxHaltCleanup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxHaltCleanupFinalStep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxHaltCleanupFinalStep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxThresholdIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxThresholdIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxStartIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxStartIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxAddrIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxAddrIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxPrepPayload?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxPrepPayload

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxPayloadIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxPayloadIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxFcsIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxFcsIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxDone?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxDone

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxAckTxDoneCallback?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxAckTxDoneCallback

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxPostRxUpdates?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxPostRxUpdates

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxDiscardFrame?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxDiscardFrame

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxDiscardIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxDiscardIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxFifoOverflowIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxFifoOverflowIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxPromiscuousMode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxPromiscuousMode

        END
// 1364 
// 1365 #ifdef CC2591_COMPRESSION_WORKAROUND
// 1366 /**************************************************************************************************
// 1367  * @fn          macRxResetRssi
// 1368  *
// 1369  * @brief       This function reset RSSI peak if the device is not actively in TX or RX.
// 1370  *
// 1371  * @param       none
// 1372  *
// 1373  * @return      none
// 1374  **************************************************************************************************
// 1375  */
// 1376 void macRxResetRssi(void)
// 1377 {
// 1378   if ( !(macRxActive || macRxOutgoingAckFlag || macTxActive) )
// 1379   {
// 1380     COMPRESSION_WORKAROUND_RESET_RSSI();
// 1381   }
// 1382 }
// 1383 #endif /* CC2591_COMPRESSION_WORKAROUND */
// 1384 
// 1385 /**************************************************************************************************
// 1386  *                                  Compile Time Integrity Checks
// 1387  **************************************************************************************************
// 1388  */
// 1389 
// 1390 /* check for changes to the spec that would affect the source code */
// 1391 #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \ 
// 1392      (MAC_FCF_FIELD_LEN           !=  2    )   ||  \ 
// 1393      (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \ 
// 1394      (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \ 
// 1395      (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \ 
// 1396      (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \ 
// 1397      (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \ 
// 1398      (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \ 
// 1399      (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
// 1400 #error "ERROR!  Change to the spec that requires modification of source code."
// 1401 #endif
// 1402 
// 1403 /* check for changes to the internal flags format */
// 1404 #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \ 
// 1405      (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \ 
// 1406      (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \ 
// 1407      (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \ 
// 1408      (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \ 
// 1409      (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
// 1410 #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
// 1411 #endif
// 1412 
// 1413 /* validate CRC OK bit optimization */
// 1414 #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
// 1415 #error "ERROR!  Optimization relies on these bits having the same position."
// 1416 #endif
// 1417 
// 1418 #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
// 1419 #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
// 1420 #endif
// 1421 
// 1422 #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
// 1423 #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
// 1424 #endif
// 1425 
// 1426 
// 1427 /**************************************************************************************************
// 1428 */
// 
// 2 364 bytes in segment BANKED_CODE
//   108 bytes in segment BANK_RELAYS
//     4 bytes in segment CODE_C
//     5 bytes in segment SFR_AN
//    19 bytes in segment XDATA_Z
// 
// 2 476 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 5 bytes shared)
//    19 bytes of XDATA memory
//
//Errors: none
//Warnings: none
