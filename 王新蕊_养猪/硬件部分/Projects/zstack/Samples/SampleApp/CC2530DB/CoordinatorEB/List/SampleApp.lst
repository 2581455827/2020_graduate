###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         04/Dec/2019  15:20:24 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\Source\Sample #
#                          App.c                                              #
#    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO  #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\ #
#                          SampleApp\Source\SampleApp.c -D ZAPP_P1 -D         #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\CoordinatorEB\List\ -lA        #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\List\ --diag_suppress Pe001,Pa010 -o     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\Obj\ -e --no_code_motion --debug         #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\ -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\Source\ -I                  #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\ZMain\TI2530DB\ -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\hal\ #
#                          include\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô #
#                          _—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\hal\target\CC253 #
#                          0EB\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷ #
#                          Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\include\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\high_level\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\single_c #
#                          hip\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷ #
#                          Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mt\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\osal\include\ -I             #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\saddr\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\sdata\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\af\ -I                 #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\nwk\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sapi\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sec\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sys\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\zdo\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\ -I                     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\f8w\ -Ohz               #
#    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\List\SampleApp.lst                       #
#    Object file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\Obj\SampleApp.r51                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          #include <stdio.h>
     79          #include <string.h>
     80          
     81          //MY DEVICE
     82          #include "DHT11.h"
     83          #include "gy30.h"
     84          
     85          /*********************************************************************
     86           * MACROS
     87           */
     88          #define FAN P1_1
     89          #define LED P1_0
     90          #define GAS P0_6
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          uint8 AppTitle[] = "ALD2530 Example"; //”¶”√≥Ã–Ú√˚≥∆ 
   \                     AppTitle:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for AppTitle>`
   \   000010                REQUIRE __INIT_XDATA_I
    103          uint16 ReadGasData( void );
    104          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    105          byte fan_state = 1;//∑Á…»ƒ¨»œŒ™◊‘∂Øøÿ÷∆
   \                     fan_state:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for fan_state>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    106          byte led_state = 1;//ledƒ¨»œŒ™◊‘∂Øøÿ÷∆
   \                     led_state:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for led_state>`
   \   000001                REQUIRE __INIT_XDATA_I
    107          
    108          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    109          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    110          {
    111            SAMPLEAPP_PERIODIC_CLUSTERID,
    112            SAMPLEAPP_FLASH_CLUSTERID
    113          };
    114          

   \                                 In  segment XDATA_ROM_C, align 1
    115          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    116          {
    117            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    118            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    119            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    120            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    121            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    122            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    123            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    124            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    125            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    126          };
    127          
    128          // This is the Endpoint/Interface description.  It is defined here, but
    129          // filled-in in SampleApp_Init().  Another way to go would be to fill
    130          // in the structure here and make it a "const" (in code space).  The
    131          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    133          
    134          /*********************************************************************
    135           * EXTERNAL VARIABLES
    136           */
    137          
    138          /*********************************************************************
    139           * EXTERNAL FUNCTIONS
    140           */
    141          
    142          /*********************************************************************
    143           * LOCAL VARIABLES
    144           */
    145          
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148                                    // This variable will be received when
    149                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    161          
    162          /*********************************************************************
    163           * LOCAL FUNCTIONS
    164           */
    165          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    166          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    167          void SampleApp_SendPeriodicMessage( void );
    168          void SampleApp_SendFlashMessage( uint16 flashTime );
    169          void SampleApp_Send_P2P_Message(void);
    170          /*********************************************************************
    171           * NETWORK LAYER CALLBACKS
    172           */
    173          
    174          /*********************************************************************
    175           * PUBLIC FUNCTIONS
    176           */
    177           
    178          /*********************************************************************
    179           * @fn      SampleApp_Init
    180           *
    181           * @brief   Initialization function for the Generic App Task.
    182           *          This is called during initialization and should contain
    183           *          any application specific initialization (ie. hardware
    184           *          initialization/setup, table initialization, power up
    185           *          notificaiton ... ).
    186           *
    187           * @param   task_id - the ID assigned by OSAL.  This ID should be
    188           *                    used to send messages and set timers.
    189           *
    190           * @return  none
    191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    193          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    194            
    195            LIGHT_INIT();//≥ı ºªØπ‚’’ 
   \   000007   53F3CF       ANL     0xf3,#0xcf
   \   00000A   43FD30       ORL     0xfd,#0x30
   \   00000D   D285         SETB    0x80.5
   \   00000F   D284         SETB    0x80.4
    196            P0SEL&=~0x40;
   \   000011   53F3BF       ANL     0xf3,#0xbf
    197            P0DIR&=~0x40;//≥ı ºªØ∆¯ÃÂ
   \   000014   53FDBF       ANL     0xfd,#0xbf
    198            SampleApp_TaskID = task_id;   //osal∑÷≈‰µƒ»ŒŒÒIDÀÊ◊≈”√ªßÃÌº”»ŒŒÒµƒ‘ˆ∂‡∂¯∏ƒ±‰
   \   000017   90....       MOV     DPTR,#SampleApp_TaskID
   \   00001A   F0           MOVX    @DPTR,A
    199            SampleApp_NwkState = DEV_INIT;//…Ë±∏◊¥Ã¨…Ë∂®Œ™ZDO≤„÷–∂®“Âµƒ≥ı ºªØ◊¥Ã¨
   \   00001B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00001E   7401         MOV     A,#0x1
   \   000020   F0           MOVX    @DPTR,A
    200            SampleApp_TransID = 0;        //œ˚œ¢∑¢ÀÕID£®∂‡œ˚œ¢ ±”–À≥–Ú÷Æ∑÷£©
   \   000021   90....       MOV     DPTR,#SampleApp_TransID
   \   000024   E4           CLR     A
   \   000025   F0           MOVX    @DPTR,A
    201            
    202            LED = 0;//πÿµ∆
   \   000026   C290         CLR     0x90.0
    203            FAN = 0;//πÿ∑Á…»
   \   000028   C291         CLR     0x90.1
    204            //¥Æø⁄≈‰÷√
    205            MT_UartInit();
   \   00002A                ; Setup parameters for call to function MT_UartInit
   \   00002A   12....       LCALL   ??MT_UartInit?relay
    206            MT_UartRegisterTaskID(task_id); 
   \   00002D                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00002D   EE           MOV     A,R6
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??MT_UartRegisterTaskID?relay
    207             
    208            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n")); 
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032   7C0D         MOV     R4,#0xd
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   000038   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??HalUARTWrite?relay
    209            
    210          
    211            // Device hardware initialization can be added here or in main() (Zmain.c).
    212            // If the hardware is application specific - add it here.
    213            // If the hardware is other parts of the device add it in main().
    214          
    215          #if defined ( BUILD_ALL_DEVICES )
    216            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    217            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    218            // together - if they are - we will start up a coordinator. Otherwise,
    219            // the device will start as a router.
    220            if ( readCoordinatorJumper() )
    221              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    222            else
    223              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    224          #endif // BUILD_ALL_DEVICES
    225          
    226          //∏√∂Œµƒ“‚Àº «£¨»Áπ˚…Ë÷√¡ÀHOLD_AUTO_START∫Í∂®“Â£¨Ω´ª·‘⁄∆Ù∂Ø–æ∆¨µƒ ±∫Úª·‘›Õ£∆Ù∂Ø
    227          //¡˜≥Ã£¨÷ª”–Õ‚≤ø¥•∑¢“‘∫Û≤≈ª·∆Ù∂Ø–æ∆¨°£∆‰ µæÕ «–Ë“™“ª∏ˆ∞¥≈•¥•∑¢À¸µƒ∆Ù∂Ø¡˜≥Ã°£  
    228          #if defined ( HOLD_AUTO_START )
    229            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    230            //  from starting the device and wait for the application to
    231            //  start the device.
    232            ZDOInitDevice(0);
    233          #endif
    234          
    235            // Setup for the periodic message's destination address …Ë÷√∑¢ÀÕ ˝æ›µƒ∑Ω Ω∫Õƒøµƒµÿ÷∑—∞÷∑ƒ£ Ω
    236            // Broadcast to everyone ∑¢ÀÕƒ£ Ω:π„≤•∑¢ÀÕ
    237            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//π„≤•
   \   00003F   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000042   740F         MOV     A,#0xf
   \   000044   F0           MOVX    @DPTR,A
    238            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000045   A3           INC     DPTR
   \   000046   7414         MOV     A,#0x14
   \   000048   F0           MOVX    @DPTR,A
    239            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//÷∏∂®ƒøµƒÕ¯¬Áµÿ÷∑Œ™π„≤•µÿ÷∑
   \   000049   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00004C   74FF         MOV     A,#-0x1
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   F0           MOVX    @DPTR,A
    240          
    241            // Setup for the flash command's destination address - Group 1 ◊È≤•∑¢ÀÕ
    242            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //◊È—∞÷∑
   \   000051   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
    243            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000057   A3           INC     DPTR
   \   000058   7414         MOV     A,#0x14
   \   00005A   F0           MOVX    @DPTR,A
    244            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//◊È∫≈0x0001
   \   00005B   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00005E   7401         MOV     A,#0x1
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E4           CLR     A
   \   000063   F0           MOVX    @DPTR,A
    245          
    246            // Fill out the endpoint description. ∂®“Â±æ…Ë±∏”√¿¥Õ®–≈µƒAPS≤„∂Àµ„√Ë ˆ∑˚
    247            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000064   90....       MOV     DPTR,#SampleApp_epDesc
   \   000067   7414         MOV     A,#0x14
   \   000069   F0           MOVX    @DPTR,A
    248            SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp √Ë ˆ∑˚µƒ»ŒŒÒID
   \   00006A   A3           INC     DPTR
   \   00006B   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000071   F0           MOVX    @DPTR,A
    249            SampleApp_epDesc.simpleDesc
    250                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleAppºÚµ•√Ë ˆ∑˚
   \   000072   A3           INC     DPTR
   \   000073   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000079   F0           MOVX    @DPTR,A
    251            SampleApp_epDesc.latencyReq = noLatencyReqs;    //—” ±≤ﬂ¬‘
   \   00007A   A3           INC     DPTR
   \   00007B   E4           CLR     A
   \   00007C   F0           MOVX    @DPTR,A
    252          
    253            // Register the endpoint description with the AF
    254            afRegister( &SampleApp_epDesc );    //œÚAF≤„µ«º«√Ë ˆ∑˚
   \   00007D                ; Setup parameters for call to function afRegister
   \   00007D   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007F   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000081   12....       LCALL   ??afRegister?relay
    255          
    256            // Register for all key events - This app will handle all key events
    257            RegisterForKeys( SampleApp_TaskID ); // µ«º«À˘”–µƒ∞¥º¸ ¬º˛
   \   000084                ; Setup parameters for call to function RegisterForKeys
   \   000084   90....       MOV     DPTR,#SampleApp_TaskID
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F9           MOV     R1,A
   \   000089   12....       LCALL   ??RegisterForKeys?relay
    258          
    259            // By default, all devices start out in Group 1
    260            SampleApp_Group.ID = 0x0001;//◊È∫≈
   \   00008C   90....       MOV     DPTR,#SampleApp_Group
   \   00008F   7401         MOV     A,#0x1
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   \   000093   E4           CLR     A
   \   000094   F0           MOVX    @DPTR,A
    261            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//…Ë∂®◊È√˚
   \   000095                ; Setup parameters for call to function osal_memcpy
   \   000095   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000098   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00009B   F5..         MOV     ?V0 + 2,A
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A2   7C07         MOV     R4,#0x7
   \   0000A4   7D00         MOV     R5,#0x0
   \   0000A6   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A8   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000AA   12....       LCALL   ??osal_memcpy?relay
   \   0000AD   7403         MOV     A,#0x3
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
    262            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//∞—∏√◊Èµ«º«ÃÌº”µΩAPS÷–
   \   0000B2                ; Setup parameters for call to function aps_AddGroup
   \   0000B2   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B4   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B6   7914         MOV     R1,#0x14
   \   0000B8   12....       LCALL   ??aps_AddGroup?relay
    263          
    264          #if defined ( LCD_SUPPORTED )
    265            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //»Áπ˚÷ß≥÷LCD£¨œ‘ æÃ· æ–≈œ¢
   \   0000BB                ; Setup parameters for call to function HalLcdWriteString
   \   0000BB   7900         MOV     R1,#0x0
   \   0000BD   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000BF   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000C1   12....       LCALL   ??HalLcdWriteString?relay
    266          #endif
    267          }
   \   0000C4                REQUIRE ?Subroutine0
   \   0000C4                REQUIRE P0SEL
   \   0000C4                REQUIRE P0DIR
   \   0000C4                REQUIRE _A_P0
   \   0000C4                REQUIRE _A_P1
   \   0000C4                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    268          
    269          /*********************************************************************
    270           * @fn      SampleApp_ProcessEvent
    271           *
    272           * @brief   Generic Application Task event processor.  This function
    273           *          is called to process all events for the task.  Events
    274           *          include timers, messages and any other user defined events.
    275           *
    276           * @param   task_id  - The OSAL assigned task ID.
    277           * @param   events - events to process.  This is a bit map and can
    278           *                   contain more than one event.
    279           *
    280           * @return  none
    281           */
    282          //”√ªß”¶”√»ŒŒÒµƒ ¬º˛¥¶¿Ì∫Ø ˝

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    284          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    285            afIncomingMSGPacket_t *MSGpkt;
    286            (void)task_id;  // Intentionally unreferenced parameter
    287          
    288            if ( events & SYS_EVENT_MSG ) //Ω” ’œµÕ≥œ˚œ¢‘ŸΩ¯––≈–∂œ
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    289            {
    290              //Ω” ’ Ù”⁄±æ”¶”√»ŒŒÒSampleAppµƒœ˚œ¢£¨“‘SampleApp_TaskID±Íº«
    291              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    292              while ( MSGpkt )
    293              {
    294                switch ( MSGpkt->hdr.event )
    295                {
    296                  // Received when a key is pressed
    297                  case KEY_CHANGE://∞¥º¸ ¬º˛
    298                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    299                    break;
    300          
    301                  // Received when a messages is received (OTA) for this endpoint
    302                  case AF_INCOMING_MSG_CMD://Ω” ’ ˝æ› ¬º˛,µ˜”√∫Ø ˝AF_DataRequest()Ω” ’ ˝æ›
    303                    SampleApp_MessageMSGCB( MSGpkt );//µ˜”√ªÿµ˜∫Ø ˝∂‘ ’µΩµƒ ˝æ›Ω¯––¥¶¿Ì
    304                    break;
    305          
    306                  // Received whenever the device changes state in the network
    307                  case ZDO_STATE_CHANGE:
    308                    //÷ª“™Õ¯¬Á◊¥Ã¨∑¢…˙∏ƒ±‰£¨æÕÕ®π˝ZDO_STATE_CHANGE ¬º˛Õ®÷™À˘”–µƒ»ŒŒÒ°£
    309                    //Õ¨ ±ÕÍ≥…∂‘–≠µ˜∆˜£¨¬∑”…∆˜£¨÷’∂Àµƒ…Ë÷√
    310                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    311                    //if ( (SampleApp_NwkState == DEV_ZB_COORD)// µ—È÷––≠µ˜∆˜÷ªΩ” ’ ˝æ›À˘“‘»°œ˚∑¢ÀÕ ¬º˛
    312                    if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    313                    {
    314                      // Start sending the periodic message in a regular interval.
    315                      //’‚∏ˆ∂® ±∆˜÷ª «Œ™∑¢ÀÕ÷‹∆⁄–≈œ¢ø™∆Ùµƒ£¨…Ë±∏∆Ù∂Ø≥ı ºªØ∫Û¥”’‚¿Ôø™ º
    316                      //¥•∑¢µ⁄“ª∏ˆ÷‹∆⁄–≈œ¢µƒ∑¢ÀÕ£¨»ª∫Û÷‹∂¯∏¥ ºœ¬»•
    317                      osal_start_timerEx( SampleApp_TaskID,
    318                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    319                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    320                     
    321                    }
    322                    else
    323                    {
    324                        
    325                    }
    326                    break;
    327          
    328                  default:
    329                    break;
    330                }
    331          
    332                // Release the memory  ¬º˛¥¶¿ÌÕÍ¡À£¨ Õ∑≈œ˚œ¢’º”√µƒƒ⁄¥Ê
    333                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    334             
    335                // Next - if one is available ÷∏’Î÷∏œÚœ¬“ª∏ˆ∑≈‘⁄ª∫≥Â«¯µƒ¥˝¥¶¿Ìµƒ ¬º˛£¨
    336                //∑µªÿwhile ( MSGpkt )÷ÿ–¬¥¶¿Ì ¬º˛£¨÷±µΩª∫≥Â«¯√ª”–µ»¥˝¥¶¿Ì ¬º˛Œ™÷π
    337                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    338              }
    339          
    340              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    341              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    342            }
    343          
    344            // Send a message out - This event is generated by a timer
    345            //  (setup in SampleApp_Init()).
    346            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    347            {
    348              // Send the periodic message ¥¶¿Ì÷‹∆⁄–‘ ¬º˛£¨
    349              //¿˚”√SampleApp_SendPeriodicMessage()¥¶¿ÌÕÍµ±«∞µƒ÷‹∆⁄–‘ ¬º˛£¨»ª∫Û∆Ù∂Ø∂® ±∆˜
    350              //ø™∆Ùœ¬“ª∏ˆ÷‹∆⁄–‘ ¬«È£¨’‚—˘“ª÷÷—≠ª∑œ¬»•£¨“≤º¥ «…œ√ÊÀµµƒ÷‹∆⁄–‘ ¬º˛¡À£¨
    351              //ø…“‘◊ˆŒ™¥´∏–∆˜∂® ±≤…ºØ°¢…œ¥´»ŒŒÒ
    352              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    353              
    354              // Setup to send message again in normal period (+ a little jitter)
    355              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    356                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24E8         ADD     A,#-0x18
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3403         ADDC    A,#0x3
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    357          
    358              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    359              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    360            }
    361          
    362            // Discard unknown events
    363            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    364          }
    365          
    366          /*********************************************************************
    367           * Event Generation Functions
    368           */
    369          /*********************************************************************
    370           * @fn      SampleApp_HandleKeys
    371           *
    372           * @brief   Handles all key events for this device.
    373           *
    374           * @param   shift - true if in shift/alt.
    375           * @param   keys - bit field for key events. Valid entries:
    376           *                 HAL_KEY_SW_2
    377           *                 HAL_KEY_SW_1
    378           *
    379           * @return  none
    380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    381          void SampleApp_HandleKeys( uint8 shift, uint8 keys )  
   \                     SampleApp_HandleKeys:
    382          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    383            (void)shift;  // Intentionally unreferenced parameter
    384            
    385            if ( keys & HAL_KEY_SW_1 )
   \   00000C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000E   5058         JNC     ??SampleApp_HandleKeys_0
    386            {
    387              /* This key sends the Flash Command is sent to Group 1.
    388               * This device will not receive the Flash Command from this
    389               * device (even if it belongs to group 1).
    390               */
    391             SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   000010                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   000010   7AE8         MOV     R2,#-0x18
   \   000012   7B03         MOV     R3,#0x3
   \   000014   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    392             //∞¥œ¬s2º¸£¨∑¢ÀÕ#1£¨»√Ω⁄µ„µ„¡¡led
    393          #if defined(ZDO_COORDINATOR) 
    394             unsigned char buf[] = "#1";
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   AC82         MOV     R4,DPL
   \   00001F   AD83         MOV     R5,DPH
   \   000021   7583..       MOV     DPH,#(`?<Constant "#1">` >> 8) & 0xff
   \   000024   7582..       MOV     DPL,#`?<Constant "#1">` & 0xff
   \   000027   7403         MOV     A,#0x3
   \   000029   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    395             if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    396                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    397                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    398                                 3,       // ∑¢ÀÕ ˝æ›≥§∂»
    399                                 buf,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    400                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    401                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    402                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
   \   00002C                ; Setup parameters for call to function AF_DataRequest
   \   00002C   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000034   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000037   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   8582..       MOV     ?V0 + 0,DPL
   \   000047   8583..       MOV     ?V0 + 1,DPH
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   75..03       MOV     ?V0 + 0,#0x3
   \   000052   75..00       MOV     ?V0 + 1,#0x0
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   75..01       MOV     ?V0 + 0,#0x1
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   12....       LCALL   ?Subroutine3 & 0xFFFF
    403            {
    404            }
    405          #endif
    406              
    407            
    408            }
   \                     ??CrossCallReturnLabel_2:
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
    409          
    410            if ( keys & HAL_KEY_SW_6 )
   \                     ??SampleApp_HandleKeys_0:
   \   000068   EE           MOV     A,R6
   \   000069   A2E5         MOV     C,0xE0 /* A   */.5
   \   00006B   5051         JNC     ??SampleApp_HandleKeys_1
    411            {
    412              /* The Flashr Command is sent to Group 1.
    413               * This key toggles this device in and out of group 1.
    414               * If this device doesn't belong to group 1, this application
    415               * will not receive the Flash command sent to group 1.
    416               */
    417             
    418          #if defined(ZDO_COORDINATOR) 
    419             
    420             unsigned char buf[] = "#2";
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   AC82         MOV     R4,DPL
   \   000075   AD83         MOV     R5,DPH
   \   000077   7583..       MOV     DPH,#(`?<Constant "#2">` >> 8) & 0xff
   \   00007A   7582..       MOV     DPL,#`?<Constant "#2">` & 0xff
   \   00007D   7403         MOV     A,#0x3
   \   00007F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    421             if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    422                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    423                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    424                                 3,       // ∑¢ÀÕ ˝æ›≥§∂»
    425                                 buf,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    426                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    427                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    428                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
   \   000082                ; Setup parameters for call to function AF_DataRequest
   \   000082   75..1E       MOV     ?V0 + 0,#0x1e
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008A   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00008D   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   7403         MOV     A,#0x3
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   8582..       MOV     ?V0 + 0,DPL
   \   00009D   8583..       MOV     ?V0 + 1,DPH
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   75..03       MOV     ?V0 + 0,#0x3
   \   0000A8   75..00       MOV     ?V0 + 1,#0x0
   \   0000AB   78..         MOV     R0,#?V0 + 0
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B0   75..01       MOV     ?V0 + 0,#0x1
   \   0000B3   78..         MOV     R0,#?V0 + 0
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   12....       LCALL   ?Subroutine3 & 0xFFFF
    429            {
    430            }
    431            
    432          #endif
    433             /*
    434              aps_Group_t *grp;
    435              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    436              if ( grp )
    437              {
    438                // Remove from the group
    439                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    440              }
    441              else
    442              {
    443                // Add to the flash group
    444                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    445              }
    446             */
    447            }
   \                     ??CrossCallReturnLabel_3:
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
    448          }
   \                     ??SampleApp_HandleKeys_1:
   \   0000BE   80..         SJMP    ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7920         MOV     R1,#0x20
   \   000002   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000004   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000006   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000008   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00000A                REQUIRE ??Subroutine4_0
   \   00000A                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   7403         MOV     A,#0x3
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F02         MOV     R7,#0x2
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA
    449          
    450          /*********************************************************************
    451           * LOCAL FUNCTIONS
    452           */
    453          
    454          /*********************************************************************
    455           * @fn      SampleApp_MessageMSGCB
    456           *
    457           * @brief   Data message processor callback.  This function processes
    458           *          any incoming data - probably from other devices.  So, based
    459           *          on cluster ID, perform the intended action.
    460           *
    461           * @param   none
    462           *
    463           * @return  none
    464           */
    465          //Ω” ’ ˝æ›£¨≤Œ ˝Œ™Ω” ’µΩµƒ ˝æ›

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    466          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    467          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    468            uint16 flashTime;
    469            unsigned short len = 6+5+3+1;
    470            byte buf[6+5+3+1]; 
    471            
    472            switch ( pkt->clusterId ) //≈–∂œ¥ÿID
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 1,A
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000022   0100         DW        1
   \   000024   01           DB        1
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000027   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000029   ....         DW        ??SampleApp_MessageMSGCB_2
    473            {
    474              case SAMPLEAPP_PERIODIC_CLUSTERID: // ’µΩπ„≤• ˝æ›
    475                osal_memset(buf, 0 , len);
   \                     ??SampleApp_MessageMSGCB_1:
   \   00002B                ; Setup parameters for call to function osal_memset
   \   00002B   7C0F         MOV     R4,#0xf
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7900         MOV     R1,#0x0
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   12....       LCALL   ??osal_memset?relay
    476                osal_memcpy(buf, pkt->cmd.Data, len); //∏¥÷∆ ˝æ›µΩª∫≥Â«¯÷–
   \   00003E                ; Setup parameters for call to function osal_memcpy
   \   00003E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000041   F5..         MOV     ?V0 + 0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0 + 1,A
   \   000047   75..00       MOV     ?V0 + 2,#0x0
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004F   7C0F         MOV     R4,#0xf
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   AA82         MOV     R2,DPL
   \   00005A   AB83         MOV     R3,DPH
   \   00005C   12....       LCALL   ??osal_memcpy?relay
   \   00005F   7403         MOV     A,#0x3
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
    477                HalUARTWrite(0,buf, len);
   \   000064                ; Setup parameters for call to function HalUARTWrite
   \   000064   7C0F         MOV     R4,#0xf
   \   000066   7D00         MOV     R5,#0x0
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   AA82         MOV     R2,DPL
   \   000070   AB83         MOV     R3,DPH
   \   000072   7900         MOV     R1,#0x0
   \   000074   12....       LCALL   ??HalUARTWrite?relay
    478                /*
    479                unsigned char ledBuf[16]={0};
    480                sprintf(ledBuf,"led=%d\n",isRecvLed);
    481                HalUARTWrite(0,ledBuf,sizeof(ledBuf));
    482                */
    483          #ifndef ZDO_COORDINATOR
    484                //»Áπ˚Ω⁄µ„ ’µΩ#1,led¡¡/√
    485                if((buf[0]=='#'&&buf[1]=='1')){
    486                  // ’µΩ#1
    487                  LED^=1;
    488                  led_state = (LED==0)?0:1;//»Áπ˚led√£¨‘ÚΩ˚÷π◊‘∂Øøÿ÷∆
    489                  if(isRecvLed)
    490                    isRecvLed = 0;
    491                }
    492                // ’µΩ#2,∑Á…»ø™/πÿ
    493                else if((buf[0]=='#'&&buf[1]=='2')){
    494                  FAN^=1;
    495                  fan_state = (FAN==0)?0:1;//»Áπ˚∑Á…»πÿ£¨‘ÚΩ˚÷π◊‘∂Øøÿ÷∆
    496                  if(isRecvFan)
    497                    isRecvFan = 0;
    498                }
    499          #endif
    500                
    501          #if defined(ZDO_COORDINATOR) 
    502                if(isRecvLed == 1|| isRecvFan==1){
   \   000077   90....       MOV     DPTR,#isRecvLed
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   6401         XRL     A,#0x1
   \   00007D   7002         JNZ     ??SampleApp_MessageMSGCB_3
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_3:
   \   000081   600C         JZ      ??SampleApp_MessageMSGCB_4
   \   000083   90....       MOV     DPTR,#isRecvFan
   \   000086   E0           MOVX    A,@DPTR
   \   000087   6401         XRL     A,#0x1
   \   000089   7002         JNZ     ??SampleApp_MessageMSGCB_5
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_5:
   \   00008D   7050         JNZ     ??SampleApp_MessageMSGCB_0
    503                  SampleApp_SendPeriodicMessage();
   \                     ??SampleApp_MessageMSGCB_4:
   \   00008F                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00008F   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    504                  if(isRecvLed)
   \   000092   90....       MOV     DPTR,#isRecvLed
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F8           MOV     R0,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   E8           MOV     A,R0
   \   00009B   49           ORL     A,R1
   \   00009C   6009         JZ      ??SampleApp_MessageMSGCB_6
    505                    isRecvLed = 0;
   \   00009E   90....       MOV     DPTR,#isRecvLed
   \                     ??SampleApp_MessageMSGCB_7:
   \   0000A1   E4           CLR     A
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   8038         SJMP    ??SampleApp_MessageMSGCB_0
    506                  else
    507                    isRecvFan = 0;
   \                     ??SampleApp_MessageMSGCB_6:
   \   0000A7   90....       MOV     DPTR,#isRecvFan
   \   0000AA   80F5         SJMP    ??SampleApp_MessageMSGCB_7
    508                }
   \                     ??SampleApp_MessageMSGCB_2:
   \   0000AC   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000AF   F8           MOV     R0,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3                ; Setup parameters for call to function HalLedBlink
   \   0000B3   8882         MOV     DPL,R0
   \   0000B5   8983         MOV     DPH,R1
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FA           MOV     R2,A
   \   0000BA   8882         MOV     DPL,R0
   \   0000BC   8983         MOV     DPH,R1
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   EA           MOV     A,R2
   \   0000C3   2400         ADD     A,#0x0
   \   0000C5   F5..         MOV     ?V0 + 0,A
   \   0000C7   E4           CLR     A
   \   0000C8   39           ADDC    A,R1
   \   0000C9   F5..         MOV     ?V0 + 1,A
   \   0000CB   7402         MOV     A,#0x2
   \   0000CD   78..         MOV     R0,#?V0 + 0
   \   0000CF   12....       LCALL   ?US_SHR
   \   0000D2   AC..         MOV     R4,?V0 + 0
   \   0000D4   AD..         MOV     R5,?V0 + 1
   \   0000D6   7B32         MOV     R3,#0x32
   \   0000D8   7A04         MOV     R2,#0x4
   \   0000DA   7908         MOV     R1,#0x8
    509          #endif      
    510                
    511                /*
    512                if(buf[0]=='D' && buf[1]=='1')      //≈–∂œ ’µΩµƒ ˝æ› «∑ÒŒ™"D1"         
    513                {
    514                    HalLedBlink(HAL_LED_1, 0, 50, 500);//»Áπ˚ «‘ÚLed1º‰∏Ù500ms…¡À∏
    515          #if defined(ZDO_COORDINATOR) //–≠µ˜∆˜ ’µΩ"D1"∫Û,∑µªÿ"D1"∏¯÷’∂À£¨»√÷’∂ÀLed1“≤…¡À∏
    516                    SampleApp_SendPeriodicMessage();
    517          #endif
    518                }
    519                else
    520                {
    521                    HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);                   
    522                }
    523                */
    524                break;
    525          
    526              case SAMPLEAPP_FLASH_CLUSTERID: // ’µΩ◊È≤• ˝æ›  
    527                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    528                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   0000DC   12....       LCALL   ??HalLedBlink?relay
    529                break;
    530            case SAMPLEAPP_P2P_CLUSTERID:
    531           
    532              break;
    533            }
    534          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000DF   740F         MOV     A,#0xf
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E4   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    535          
    536          /*********************************************************************
    537           * @fn      SampleApp_SendPeriodicMessage
    538           *
    539           * @brief   Send the periodic message.
    540           *
    541           * @param   none
    542           *
    543           * @return  none
    544           */
    545          //∑÷Œˆ∑¢ÀÕ÷‹∆⁄–≈œ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    546          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    547          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    548          #ifndef ZDO_COORDINATOR
    549            //ªÒµ√µƒ ˝æ›Õ®π˝¥Æø⁄ ‰≥ˆµΩµÁƒ‘œ‘ æ  
    550            char str[6+5+3+1]={0};
    551            //ªÒ»°Œ¬ ™∂»
    552            unsigned char temp_humi[6]={0};
    553            strcpy(temp_humi,DHT11());
    554            unsigned int lt = Light();//ªÒ»°π‚«ø
    555            uint16 gas = ReadGasData();
    556             sprintf(str,"%s%5d%3d\n",temp_humi,lt,gas);
    557            HalUARTWrite(0,str,sizeof(str)); 
    558             // µ˜”√AF_DataRequestΩ´ ˝æ›Œﬁœﬂπ„≤•≥ˆ»•
    559            if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    560                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    561                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    562                                 sizeof(str),       //∑¢ÀÕ ˝æ›≥§∂»
    563                                 (uchar*)str,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    564                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    565                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    566                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
    567            {
    568            }
    569            else
    570            {
    571              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
    572              // Error occurred in request to send.
    573            }
    574            //◊‘∂Øøÿ÷∆
    575            if(led_state)
    576              LED = (lt<100)?1:0;
    577            if(fan_state)
    578              FAN =(gas<75)?0:1;
    579          #endif
    580           
    581          #if defined(ZDO_COORDINATOR) 
    582            //»Áπ˚–≠µ˜∆˜ ’µΩ#1ªÚ#2
    583            HalLedBlink(HAL_LED_1, 0, 50, 500);//»Áπ˚ «‘ÚLed1º‰∏Ù500ms…¡À∏
   \   00000A                ; Setup parameters for call to function HalLedBlink
   \   00000A   7CF4         MOV     R4,#-0xc
   \   00000C   7D01         MOV     R5,#0x1
   \   00000E   7B32         MOV     R3,#0x32
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7901         MOV     R1,#0x1
   \   000014   12....       LCALL   ??HalLedBlink?relay
    584            if(isRecvLed==1){
   \   000017   90....       MOV     DPTR,#isRecvLed
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6401         XRL     A,#0x1
   \   00001D   7002         JNZ     ??SampleApp_SendPeriodicMessage_0
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   000021   7012         JNZ     ??SampleApp_SendPeriodicMessage_1
    585            unsigned char buf[] = "#1";
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   AC82         MOV     R4,DPL
   \   00002B   AD83         MOV     R5,DPH
   \   00002D   7583..       MOV     DPH,#(`?<Constant "#1">_1` >> 8) & 0xff
   \   000030   7582..       MOV     DPL,#`?<Constant "#1">_1` & 0xff
   \   000033   801C         SJMP    ??SampleApp_SendPeriodicMessage_2
    586             if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    587                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    588                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    589                                 2,       // ∑¢ÀÕ ˝æ›≥§∂»
    590                                 buf,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    591                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    592                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    593                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
    594              {
    595              }
    596            }
    597            else if(isRecvFan == 1){
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   000035   90....       MOV     DPTR,#isRecvFan
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6401         XRL     A,#0x1
   \   00003B   7002         JNZ     ??SampleApp_SendPeriodicMessage_3
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   00003F   7051         JNZ     ??SampleApp_SendPeriodicMessage_4
    598              unsigned char buf[] = "#2";
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   AC82         MOV     R4,DPL
   \   000049   AD83         MOV     R5,DPH
   \   00004B   7583..       MOV     DPH,#(`?<Constant "#2">_1` >> 8) & 0xff
   \   00004E   7582..       MOV     DPL,#`?<Constant "#2">_1` & 0xff
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   000051   7403         MOV     A,#0x3
   \   000053   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    599              if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    600                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    601                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    602                                 2,       //∑¢ÀÕ ˝æ›≥§∂»
    603                                 buf,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    604                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    605                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    606                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
   \   000056                ; Setup parameters for call to function AF_DataRequest
   \   000056   75..1E       MOV     ?V0 + 0,#0x1e
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005E   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000061   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000064   78..         MOV     R0,#?V0 + 0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   7403         MOV     A,#0x3
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   8582..       MOV     ?V0 + 0,DPL
   \   000071   8583..       MOV     ?V0 + 1,DPH
   \   000074   78..         MOV     R0,#?V0 + 0
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   75..02       MOV     ?V0 + 0,#0x2
   \   00007C   75..00       MOV     ?V0 + 1,#0x0
   \   00007F   78..         MOV     R0,#?V0 + 0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000084   75..01       MOV     ?V0 + 0,#0x1
   \   000087   78..         MOV     R0,#?V0 + 0
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008C   12....       LCALL   ?Subroutine3 & 0xFFFF
    607              {
    608              }
    609            }
   \                     ??CrossCallReturnLabel_4:
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
    610          #endif
    611           
    612          }
   \                     ??SampleApp_SendPeriodicMessage_4:
   \   000092   02....       LJMP    ??Subroutine5_0 & 0xFFFF
    613          
    614          /*********************************************************************
    615           * @fn      SampleApp_SendFlashMessage
    616           *
    617           * @brief   Send the flash message to group 1.
    618           *
    619           * @param   flashTime - in milliseconds
    620           *
    621           * @return  none
    622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..1E       MOV     ?V0 + 0,#0x1e
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000008   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00000B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000013   7403         MOV     A,#0x3
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   8582..       MOV     ?V0 + 0,DPL
   \   00001B   8583..       MOV     ?V0 + 1,DPH
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..03       MOV     ?V0 + 0,#0x3
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..02       MOV     ?V0 + 0,#0x2
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7920         MOV     R1,#0x20
   \   000038   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00003A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003C   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   00003E   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000040   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   \   000046                REQUIRE ??Subroutine5_0
   \   000046                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          void SampleApp_SendFlashMessage( uint16 flashTime )  
   \                     SampleApp_SendFlashMessage:
    624          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    625            uint8 buffer[3];
    626            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    627            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    628            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    629          
    630            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    631                                 SAMPLEAPP_FLASH_CLUSTERID,
    632                                 3,
    633                                 buffer,
    634                                 &SampleApp_TransID,
    635                                 AF_DISCV_ROUTE,
    636                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   02....       LJMP    ?Subroutine1 & 0xFFFF
    637            {
    638            }
    639            else
    640            {
    641              // Error occurred in request to send.
    642            }
    643          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    644          void SampleApp_Send_P2P_Message(void){
   \                     SampleApp_Send_P2P_Message:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    645            uchar cmd[3] ="LED";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "LED">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "LED">` & 0xff
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    646            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    647                                 SAMPLEAPP_FLASH_CLUSTERID,
    648                                 3,
    649                                 cmd,
    650                                 &SampleApp_TransID,
    651                                 AF_DISCV_ROUTE,
    652                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   02....       LJMP    ?Subroutine1 & 0xFFFF
    653            {
    654            }
    655          }
    656          /*********************************************************************
    657          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    658          uint16 ReadGasData( void )
   \                     ReadGasData:
    659          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    660            uint16 reading = 0;
    661            
    662            /* Enable channel */
    663            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    664            
    665            /* writing to this register starts the extra conversion */
    666            ADCCON3 = 0x86;// AVDD5 “˝Ω≈  00£∫ 64 ≥È»°¬ (7 ŒªENOB)  0110£∫ AIN6
   \   000003   75B686       MOV     0xb6,#-0x7a
    667            
    668            /* Wait for the conversion to be done */
    669            while (!(ADCCON1 & 0x80));
   \                     ??ReadGasData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadGasData_0
    670            
    671            /* Disable channel after done conversion */
    672            ADCCFG &= (0x40 ^ 0xFF); //∞¥Œª“ÏªÚ°£»Á1010^1111=0101£®∂˛Ω¯÷∆£©
   \   00000C   53F2BF       ANL     0xf2,#0xbf
    673            
    674            /* Read the result */
    675            reading = ADCL;
   \   00000F   E5BA         MOV     A,0xba
    676            reading |= (int16) (ADCH << 8); 
    677            
    678            reading >>= 8;
    679            
    680            return (reading);
   \   000011   E5BB         MOV     A,0xbb
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   FB           MOV     R3,A
   \   000016   02....       LJMP    ?BRET
   \   000019                REQUIRE ADCCFG
   \   000019                REQUIRE ADCCON3
   \   000019                REQUIRE ADCCON1
   \   000019                REQUIRE ADCL
   \   000019                REQUIRE ADCH
    681          } 

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 Example"
   \            35333020
   \            4578616D
   \            706C6500

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for fan_state>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for led_state>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#1">`:
   \   000000   233100       DB "#1"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#2">`:
   \   000000   233200       DB "#2"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#1">_1`:
   \   000000   233100       DB "#1"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#2">_1`:
   \   000000   233200       DB "#2"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED">`:
   \   000000   4C4544       DB 4CH, 45H, 44H

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadGasData                        0      0      0
     SampleApp_HandleKeys               2      0     34
       -> SampleApp_SendFlashMessage
                                        0      0     26
       -> AF_DataRequest                0      0     44
       -> AF_DataRequest                0      0     44
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     41
       -> osal_memset                   0      0     52
       -> osal_memcpy                   0      0     58
       -> HalUARTWrite                  0      0     52
       -> SampleApp_SendPeriodicMessage
                                        0      0     52
       -> HalLedBlink                   0      0     52
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     35
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     48
       -> HalLedBlink                   0      0     26
       -> AF_DataRequest                0      0     44
       -> AF_DataRequest                0      0     44
     SampleApp_Send_P2P_Message         2      0     22
       -> AF_DataRequest                0      0     44


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_P1                                    1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     P0DIR                                    1
     AppTitle                                16
     fan_state                                1
     led_state                                1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         196
     ?Subroutine0                             5
     SampleApp_ProcessEvent                 176
     SampleApp_HandleKeys                   192
     ?Subroutine3                            10
     ??Subroutine4_0                          6
     ??Subroutine5_0                         10
     SampleApp_MessageMSGCB                 231
     ?Subroutine2                            12
     SampleApp_SendPeriodicMessage          149
     ?Subroutine1                            70
     SampleApp_SendFlashMessage              44
     SampleApp_Send_P2P_Message              34
     ReadGasData                             25
     ?<Initializer for AppTitle>             16
     ?<Initializer for fan_state>             1
     ?<Initializer for led_state>             1
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??ReadGasData?relay                      6
     ?<Constant "UartInit OK\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "#1">                         3
     ?<Constant "#2">                         3
     ?<Constant "#1">_1                       3
     ?<Constant "#2">_1                       3
     ?<Constant "LED">                        3

 
 1 160 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     9 bytes in segment SFR_AN
    18 bytes in segment XDATA_I
    18 bytes in segment XDATA_ID
    62 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
 1 226 bytes of CODE  memory
    62 bytes of CONST memory
     0 bytes of DATA  memory (+ 9 bytes shared)
    71 bytes of XDATA memory

Errors: none
Warnings: none
