///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        30/Dec/2019  20:14:44 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\Sourc /
//                          e\IC_w_r.c                                        /
//    Command line       =  -f C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼ /
//                          à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg       /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼ /
//                          à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg      /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\202 /
//                          0±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\ /
//                          Samples\SampleApp\Source\IC_w_r.c -D ZAPP_P1 -D   /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\CoordinatorEB\List\ -lA                       /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\CoordinatorEB\List\ --diag_suppress           /
//                          Pe001,Pa010 -o C:\Users\25814\Desktop\2020±ÏÉè\ÕÅ /
//                          ãÆ»Û×Ó_Ä¾²Ä¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\CoordinatorEB\Obj\ -e          /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\ -I C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_ /
//                          Ä¾²Ä¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\Source\ -I                         /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\ZMain\TI2530DB\ -I                   /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\hal\include\ -I     /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\hal\target\CC2530EB /
//                          \ -I C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾² /
//                          Ä¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\mac\include\   /
//                          -I C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼ /
//                          à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\mac\high_level\  /
//                          -I C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼ /
//                          à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\mac\low_level\sr /
//                          f04\ -I C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_ /
//                          Ä¾²Ä¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\..\..\..\..\Components\mac\low_lev /
//                          el\srf04\single_chip\ -I                          /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\mt\ -I              /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\osal\include\ -I    /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\services\saddr\ -I  /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\services\sdata\ -I  /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\af\ -I        /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\nwk\ -I       /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\sapi\ -I      /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\sec\ -I       /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\sys\ -I       /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\zdo\ -I       /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\zmac\ -I            /
//                          C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz      /
//    List file          =  C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â /
//                          \Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\CoordinatorEB\List\IC_w_r.s51                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME IC_w_r

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?POP_BIT_ISP
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??CalulateCRC?relay
        FUNCTION ??CalulateCRC?relay,0203H
        PUBLIC ??ClearBitMask?relay
        FUNCTION ??ClearBitMask?relay,0203H
        PUBLIC ??Delay_I_1us?relay
        FUNCTION ??Delay_I_1us?relay,0203H
        PUBLIC ??IC_CMT?relay
        FUNCTION ??IC_CMT?relay,0203H
        PUBLIC ??M500PcdConfigISOType?relay
        FUNCTION ??M500PcdConfigISOType?relay,0203H
        PUBLIC ??PcdAntennaOff?relay
        FUNCTION ??PcdAntennaOff?relay,0203H
        PUBLIC ??PcdAntennaOn?relay
        FUNCTION ??PcdAntennaOn?relay,0203H
        PUBLIC ??PcdAnticoll?relay
        FUNCTION ??PcdAnticoll?relay,0203H
        PUBLIC ??PcdAuthState?relay
        FUNCTION ??PcdAuthState?relay,0203H
        PUBLIC ??PcdComMF522?relay
        FUNCTION ??PcdComMF522?relay,0203H
        PUBLIC ??PcdHalt?relay
        FUNCTION ??PcdHalt?relay,0203H
        PUBLIC ??PcdRead?relay
        FUNCTION ??PcdRead?relay,0203H
        PUBLIC ??PcdRequest?relay
        FUNCTION ??PcdRequest?relay,0203H
        PUBLIC ??PcdReset?relay
        FUNCTION ??PcdReset?relay,0203H
        PUBLIC ??PcdSelect?relay
        FUNCTION ??PcdSelect?relay,0203H
        PUBLIC ??PcdWrite?relay
        FUNCTION ??PcdWrite?relay,0203H
        PUBLIC ??ReadRawRC?relay
        FUNCTION ??ReadRawRC?relay,0203H
        PUBLIC ??SPIReadByte?relay
        FUNCTION ??SPIReadByte?relay,0203H
        PUBLIC ??SPIWriteByte?relay
        FUNCTION ??SPIWriteByte?relay,0203H
        PUBLIC ??SetBitMask?relay
        FUNCTION ??SetBitMask?relay,0203H
        PUBLIC ??WriteRawRC?relay
        FUNCTION ??WriteRawRC?relay,0203H
        PUBLIC CalulateCRC
        FUNCTION CalulateCRC,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ClearBitMask
        FUNCTION ClearBitMask,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Delay_I_1us
        FUNCTION Delay_I_1us,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC IC_CMT
        FUNCTION IC_CMT,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 47, STACK
        PUBLIC M500PcdConfigISOType
        FUNCTION M500PcdConfigISOType,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC PcdAntennaOff
        FUNCTION PcdAntennaOff,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC PcdAntennaOn
        FUNCTION PcdAntennaOn,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC PcdAnticoll
        FUNCTION PcdAnticoll,021203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC PcdAuthState
        FUNCTION PcdAuthState,021203H
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC PcdComMF522
        FUNCTION PcdComMF522,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC PcdHalt
        FUNCTION PcdHalt,021203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 34, STACK
        PUBLIC PcdRead
        FUNCTION PcdRead,021203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC PcdRequest
        FUNCTION PcdRequest,021203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC PcdReset
        FUNCTION PcdReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC PcdSelect
        FUNCTION PcdSelect,021203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC PcdWrite
        FUNCTION PcdWrite,021203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC ReadRawRC
        FUNCTION ReadRawRC,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SPIReadByte
        FUNCTION SPIReadByte,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SPIWriteByte
        FUNCTION SPIWriteByte,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SetBitMask
        FUNCTION SetBitMask,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC WriteRawRC
        FUNCTION WriteRawRC,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK _A_P0
        PUBWEAK _A_P2
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
UartSend            SYMBOL "UartSend"
??UartSend?relay    SYMBOL "?relay", UartSend
CalulateCRC         SYMBOL "CalulateCRC"
??CalulateCRC?relay SYMBOL "?relay", CalulateCRC
ClearBitMask        SYMBOL "ClearBitMask"
??ClearBitMask?relay SYMBOL "?relay", ClearBitMask
Delay_I_1us         SYMBOL "Delay_I_1us"
??Delay_I_1us?relay SYMBOL "?relay", Delay_I_1us
IC_CMT              SYMBOL "IC_CMT"
??IC_CMT?relay      SYMBOL "?relay", IC_CMT
M500PcdConfigISOType SYMBOL "M500PcdConfigISOType"
??M500PcdConfigISOType?relay SYMBOL "?relay", M500PcdConfigISOType
PcdAntennaOff       SYMBOL "PcdAntennaOff"
??PcdAntennaOff?relay SYMBOL "?relay", PcdAntennaOff
PcdAntennaOn        SYMBOL "PcdAntennaOn"
??PcdAntennaOn?relay SYMBOL "?relay", PcdAntennaOn
PcdAnticoll         SYMBOL "PcdAnticoll"
??PcdAnticoll?relay SYMBOL "?relay", PcdAnticoll
PcdAuthState        SYMBOL "PcdAuthState"
??PcdAuthState?relay SYMBOL "?relay", PcdAuthState
PcdComMF522         SYMBOL "PcdComMF522"
??PcdComMF522?relay SYMBOL "?relay", PcdComMF522
PcdHalt             SYMBOL "PcdHalt"
??PcdHalt?relay     SYMBOL "?relay", PcdHalt
PcdRead             SYMBOL "PcdRead"
??PcdRead?relay     SYMBOL "?relay", PcdRead
PcdRequest          SYMBOL "PcdRequest"
??PcdRequest?relay  SYMBOL "?relay", PcdRequest
PcdReset            SYMBOL "PcdReset"
??PcdReset?relay    SYMBOL "?relay", PcdReset
PcdSelect           SYMBOL "PcdSelect"
??PcdSelect?relay   SYMBOL "?relay", PcdSelect
PcdWrite            SYMBOL "PcdWrite"
??PcdWrite?relay    SYMBOL "?relay", PcdWrite
ReadRawRC           SYMBOL "ReadRawRC"
??ReadRawRC?relay   SYMBOL "?relay", ReadRawRC
SPIReadByte         SYMBOL "SPIReadByte"
??SPIReadByte?relay SYMBOL "?relay", SPIReadByte
SPIWriteByte        SYMBOL "SPIWriteByte"
??SPIWriteByte?relay SYMBOL "?relay", SPIWriteByte
SetBitMask          SYMBOL "SetBitMask"
??SetBitMask?relay  SYMBOL "?relay", SetBitMask
WriteRawRC          SYMBOL "WriteRawRC"
??WriteRawRC?relay  SYMBOL "?relay", WriteRawRC

        EXTERN UartSend
        FUNCTION UartSend,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??UartSend?relay
        FUNCTION ??UartSend?relay,00H

// C:\Users\25814\Desktop\2020±ÏÉè\ÕÅãÆ»Û×Ó_Ä¾²Ä¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\Source\IC_w_r.c
//    1 #include"variable.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1
//    2 #include"rc522.h"
//    3 #include"UART.h"
//    4 
//    5 void Delay_I_1us(unsigned int k);
//    6 void SPIWriteByte(uchar infor);
//    7 unsigned char SPIReadByte(void);
//    8 unsigned char ReadRawRC(unsigned char Address);
//    9 void WriteRawRC(unsigned char Address, unsigned char value);
//   10 void SetBitMask(unsigned char reg,unsigned char mask) ;
//   11 void ClearBitMask(unsigned char reg,unsigned char mask)  ;
//   12 void PcdAntennaOn(void);
//   13 void PcdAntennaOff(void);
//   14 void PcdReset(void);
//   15 void IC_CMT(uchar *UID,uchar *KEY,uchar RW,char *Dat);
//   16 void M500PcdConfigISOType(unsigned char type);
//   17 char PcdComMF522(unsigned char Command, 		//RC522ÃüÁî×Ö
//   18                  unsigned char *pInData, 		//Í¨¹ýRC522·¢ËÍµ½¿¨Æ¬µÄÊý¾Ý
//   19                  unsigned char InLenByte,		//·¢ËÍÊý¾ÝµÄ×Ö½Ú³¤¶È
//   20                  unsigned char *pOutData, 		//½ÓÊÕµ½µÄ¿¨Æ¬·µ»ØÊý¾Ý
//   21                  unsigned int  *pOutLenBit)	;
//   22 char PcdRequest(unsigned char req_code,unsigned char *pTagType);
//   23 char PcdAnticoll(unsigned char *pSnr);
//   24 void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData);
//   25 char PcdRead(unsigned char addr,unsigned char *pData);
//   26 char PcdSelect(unsigned char *pSnr);
//   27 char PcdHalt(void);
//   28 char PcdHalt(void);
//   29 char PcdWrite(unsigned char addr,unsigned char *pData);
//   30 char PcdAuthState(unsigned char auth_mode,unsigned char addr,unsigned char *pKey,unsigned char *pSnr);
//   31 
//   32 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   33 void Delay_I_1us(unsigned int k)
Delay_I_1us:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Delay_I_1us
        CODE
//   34 {
        ; Saved register size: 0
        ; Auto size: 0
//   35   uint i,j;
//   36   for(i=0;i<k;i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??Delay_I_1us_0
//   37     for(j=0;j<32;j++);
??Delay_I_1us_1:
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??Delay_I_1us_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??Delay_I_1us_1
//   38 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   39 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   40 void SPIWriteByte(uchar infor)
SPIWriteByte:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SPIWriteByte
        CODE
//   41 {
        FUNCALL SPIWriteByte, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SPIWriteByte, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SPIWriteByte, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//   42   unsigned int counter;
//   43   for(counter=0;counter<8;counter++)
        MOV     R6,#0x8
//   44   {
//   45     
//   46     if(infor&0x80)
??SPIWriteByte_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        JNC     ??SPIWriteByte_1
//   47       IC_MOSI = 1;
        SETB    0x80.6
        SJMP    ??SPIWriteByte_2
//   48     else 
//   49       IC_MOSI = 0;
??SPIWriteByte_1:
        CLR     0x80.6
//   50     Delay_I_1us(3);
??SPIWriteByte_2:
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//   51     
//   52     IC_SCK = 0;
        CLR     0x80.7
//   53     Delay_I_1us(1);
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x1
        LCALL   ?Subroutine9 & 0xFFFF
//   54     
//   55     
//   56     IC_SCK = 1; 
//   57     Delay_I_1us(3);
//   58     
//   59     
//   60     infor <<= 1; 
??CrossCallReturnLabel_4:
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R7,A
//   61   } 
        DEC     R6
        MOV     A,R6
        JNZ     ??SPIWriteByte_0
//   62 }
        SJMP    ??Subroutine21_0
        CFI EndBlock cfiBlock1
        REQUIRE _A_P0
//   63 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   64 unsigned char SPIReadByte(void)
SPIReadByte:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SPIReadByte
        CODE
//   65 {
        FUNCALL SPIReadByte, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SPIReadByte, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SPIReadByte, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   66   unsigned int counter;
//   67   unsigned char SPI_Data;
//   68   for(counter=0;counter<8;counter++)
        MOV     R7,#0x8
//   69   {
//   70     SPI_Data<<=1;
??SPIReadByte_0:
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R6,A
//   71     
//   72     IC_SCK = 0;
        CLR     0x80.7
//   73     Delay_I_1us(3);  
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//   74     
//   75     
//   76     if(IC_MISO == 1)
        MOV     C,0x80.5
        JNC     ??SPIReadByte_1
//   77       SPI_Data |= 0x01;
        MOV     A,R6
        SETB    0xE0 /* A   */.0
        MOV     R6,A
//   78     Delay_I_1us(2);
??SPIReadByte_1:
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x2
        LCALL   ?Subroutine9 & 0xFFFF
//   79     
//   80     IC_SCK = 1;
//   81     Delay_I_1us(3);  
//   82     
//   83   }
??CrossCallReturnLabel_5:
        DEC     R7
        MOV     A,R7
        JNZ     ??SPIReadByte_0
//   84   return SPI_Data;
        MOV     A,R6
        MOV     R1,A
        SJMP    ??Subroutine21_0
        CFI EndBlock cfiBlock2
        REQUIRE _A_P0
//   85 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
        SETB    0x80.7
        ; Setup parameters for call to function Delay_I_1us
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R2,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??WriteRawRC?relay
        CFI EndBlock cfiBlock6
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
//   86 
//   87 /////////////////////////////////////////////////////////////////////
//   88 //¹¦    ÄÜ£º¶ÁRC632¼Ä´æÆ÷
//   89 //²ÎÊýËµÃ÷£ºAddress[IN]:¼Ä´æÆ÷µØÖ·
//   90 //·µ    »Ø£º¶Á³öµÄÖµ
//   91 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   92 unsigned char ReadRawRC(unsigned char Address)
ReadRawRC:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ReadRawRC
        CODE
//   93 {
        FUNCALL ReadRawRC, SPIWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadRawRC, SPIReadByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   94   unsigned char ucAddr;
//   95   unsigned char ucResult=0;
//   96   IC_CS = 0;
        CLR     0xa0.0
//   97   ucAddr = ((Address<<1)&0x7E)|0x80;//µØÖ·±ä»»£¬SPIµÄ¶ÁÐ´µØÖ·ÓÐÒªÇó
//   98   SPIWriteByte(ucAddr);
        ; Setup parameters for call to function SPIWriteByte
        CLR     C
        RLC     A
        ORL     A,#0x80
        MOV     R1,A
        LCALL   ??SPIWriteByte?relay
//   99   ucResult=SPIReadByte();
        ; Setup parameters for call to function SPIReadByte
        LCALL   ??SPIReadByte?relay
        CFI EndBlock cfiBlock8
//  100   IC_CS = 1;
        REQUIRE ?Subroutine5
        REQUIRE _A_P2
        ; // Fall through to label ?Subroutine5
//  101   return ucResult;
//  102 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        SETB    0xa0.0
        SJMP    ??Subroutine21_0
        CFI EndBlock cfiBlock9
//  103 /////////////////////////////////////////////////////////////////////
//  104 //¹¦    ÄÜ£ºÐ´RC632¼Ä´æÆ÷
//  105 //²ÎÊýËµÃ÷£ºAddress[IN]:¼Ä´æÆ÷µØÖ·
//  106 //          value[IN]:Ð´ÈëµÄÖµ
//  107 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  108 void WriteRawRC(unsigned char Address, unsigned char value)
WriteRawRC:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function WriteRawRC
        CODE
//  109 {  
        FUNCALL WriteRawRC, SPIWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WriteRawRC, SPIWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  110   unsigned char ucAddr;
//  111   Address <<= 1;
//  112   ucAddr = (Address&0x7e);
//  113   IC_CS = 0;
        CLR     0xa0.0
//  114   
//  115   SPIWriteByte(ucAddr);
        ; Setup parameters for call to function SPIWriteByte
        MOV     A,R7
        CLR     C
        RLC     A
        ANL     A,#0x7e
        MOV     R1,A
        LCALL   ??SPIWriteByte?relay
//  116   SPIWriteByte(value);
        ; Setup parameters for call to function SPIWriteByte
        MOV     A,R6
        MOV     R1,A
        LCALL   ??SPIWriteByte?relay
//  117   IC_CS = 1;
        SJMP    ?Subroutine5
        CFI EndBlock cfiBlock10
        REQUIRE _A_P2
//  118 }
//  119 
//  120 /////////////////////////////////////////////////////////////////////
//  121 //¹¦    ÄÜ£ºÖÃRC522¼Ä´æÆ÷Î»
//  122 //²ÎÊýËµÃ÷£ºreg[IN]:¼Ä´æÆ÷µØÖ·
//  123 //          mask[IN]:ÖÃÎ»Öµ
//  124 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 void SetBitMask(unsigned char reg,unsigned char mask)  
SetBitMask:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function SetBitMask
        CODE
//  126 {
        FUNCALL SetBitMask, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetBitMask, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        LCALL   ?Subroutine11 & 0xFFFF
//  127   char tmp = 0x0;
//  128   tmp = ReadRawRC(reg);
//  129   WriteRawRC(reg,tmp | mask);  // set bit mask
??CrossCallReturnLabel_33:
        ORL     A,R7
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock11
//  130 }
//  131 
//  132 /////////////////////////////////////////////////////////////////////
//  133 //¹¦    ÄÜ£ºÇåRC522¼Ä´æÆ÷Î»
//  134 //²ÎÊýËµÃ÷£ºreg[IN]:¼Ä´æÆ÷µØÖ·
//  135 //          mask[IN]:ÇåÎ»Öµ
//  136 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  137 void ClearBitMask(unsigned char reg,unsigned char mask)  
ClearBitMask:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ClearBitMask
        CODE
//  138 {
        FUNCALL ClearBitMask, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ClearBitMask, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  139   char tmp = 0x0;
//  140   tmp = ReadRawRC(reg);
//  141   WriteRawRC(reg, tmp & ~mask);  // clear bit mask
        ; Setup parameters for call to function WriteRawRC
        MOV     A,R2
        CPL     A
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_34:
        ANL     A,R7
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock12
//  142 } 
//  143 
//  144 
//  145 
//  146 
//  147 /////////////////////////////////////////////////////////////////////
//  148 //¿ªÆôÌìÏß  
//  149 //Ã¿´ÎÆô¶¯»ò¹Ø±ÕÌìÏÕ·¢ÉäÖ®¼äÓ¦ÖÁÉÙÓÐ1msµÄ¼ä¸ô
//  150 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  151 void PcdAntennaOn(void)
PcdAntennaOn:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function PcdAntennaOn
        CODE
//  152 {
        FUNCALL PcdAntennaOn, ReadRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdAntennaOn, SetBitMask
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  153   unsigned char i;
//  154   i = ReadRawRC(TxControlReg);
//  155   if (!(i & 0x03))
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x14
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_35:
        ANL     A,#0x3
        JNZ     ??PcdAntennaOn_0
//  156   {
//  157     SetBitMask(TxControlReg, 0x03);
        ; Setup parameters for call to function SetBitMask
        MOV     R2,#0x3
        MOV     R1,#0x14
        LCALL   ??SetBitMask?relay
        CFI EndBlock cfiBlock13
//  158   }
//  159 }
??PcdAntennaOn_0:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock14
//  160 
//  161 /////////////////////////////////////////////////////////////////////
//  162 //¹Ø±ÕÌìÏß
//  163 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  164 void PcdAntennaOff(void)
PcdAntennaOff:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function PcdAntennaOff
        CODE
//  165 {
        FUNCALL PcdAntennaOff, ClearBitMask
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  166   ClearBitMask(TxControlReg, 0x03);
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#0x3
        MOV     R1,#0x14
        LCALL   ??ClearBitMask?relay
//  167 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock15
//  168 
//  169 
//  170 /////////////////////////////////////////////////////////////////////
//  171 //¹¦    ÄÜ£º¸´Î»RC522
//  172 //·µ    »Ø: ³É¹¦·µ»ØMI_OK
//  173 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  174 void PcdReset(void)
PcdReset:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function PcdReset
        CODE
//  175 {
        FUNCALL PcdReset, Delay_I_1us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, Delay_I_1us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, Delay_I_1us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, Delay_I_1us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdReset, WriteRawRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  176   //PORTD|=(1<<RC522RST);
//  177   IC_REST = 1;
        SETB    0x80.4
//  178   Delay_I_1us(1);
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//  179   //PORTD&=~(1<<RC522RST);
//  180   IC_REST = 0;
        CLR     0x80.4
//  181   Delay_I_1us(1);
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//  182   //PORTD|=(1<<RC522RST);
//  183   IC_REST = 1;
        SETB    0x80.4
//  184   Delay_I_1us(1);
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//  185   WriteRawRC(0x01,0x0f);
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0xf
        MOV     R1,#0x1
        LCALL   ??WriteRawRC?relay
//  186   //while(ReadRawRC(0x01)&0x10);   //¼ì²é¿¨Æ¬
//  187   Delay_I_1us(1);
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//  188   
//  189   WriteRawRC(ModeReg,0x3D);             //¶¨Òå·¢ËÍºÍ½ÓÊÕ³£ÓÃÄ£Ê½ ºÍMifare¿¨Í¨Ñ¶£¬CRC³õÊ¼Öµ0x6363
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x3d
        MOV     R1,#0x11
        LCALL   ?Subroutine6 & 0xFFFF
//  190   WriteRawRC(TReloadRegL,30);           //16Î»¶¨Ê±Æ÷µÍÎ»
//  191   WriteRawRC(TReloadRegH,0);		//16Î»¶¨Ê±Æ÷¸ßÎ»
//  192   WriteRawRC(TModeReg,0x8D);		//¶¨ÒåÄÚ²¿¶¨Ê±Æ÷µÄÉèÖÃ
//  193   WriteRawRC(TPrescalerReg,0x3E);	//ÉèÖÃ¶¨Ê±Æ÷·ÖÆµÏµÊý
//  194   WriteRawRC(TxAutoReg,0x40);		//	µ÷ÖÆ·¢ËÍÐÅºÅÎª100%ASK
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x40
        MOV     R1,#0x15
        LCALL   ??WriteRawRC?relay
//  195 
//  196   //return MI_OK;
//  197 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock16
        REQUIRE _A_P0
//  198 
//  199 
//  200 //////////////////////////////////////////////////////////////////////
//  201 //ÉèÖÃRC632µÄ¹¤×÷·½Ê½ 
//  202 //////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  203 void M500PcdConfigISOType(unsigned char type)
M500PcdConfigISOType:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function M500PcdConfigISOType
        CODE
//  204 {
        FUNCALL M500PcdConfigISOType, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, Delay_I_1us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M500PcdConfigISOType, PcdAntennaOn
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  205   if (type == 'A')                     //ISO14443_A
        MOV     A,#0x41
        XRL     A,R6
        JNZ     ??M500PcdConfigISOType_0
//  206   { 
//  207     ClearBitMask(Status2Reg,0x08);
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#0x8
        MOV     R1,#0x8
        LCALL   ??ClearBitMask?relay
//  208     WriteRawRC(ModeReg,0x3D);//3F
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x3d
        MOV     R1,#0x11
        LCALL   ??WriteRawRC?relay
//  209     WriteRawRC(RxSelReg,0x86);//84
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#-0x7a
        MOV     R1,#0x17
        LCALL   ??WriteRawRC?relay
//  210     WriteRawRC(RFCfgReg,0x7F);   //4F
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x7f
        MOV     R1,#0x26
        LCALL   ?Subroutine6 & 0xFFFF
//  211     WriteRawRC(TReloadRegL,30);//tmoLength);// TReloadVal = 'h6a =tmoLength(dec) 
//  212     WriteRawRC(TReloadRegH,0);
//  213     WriteRawRC(TModeReg,0x8D);
//  214     WriteRawRC(TPrescalerReg,0x3E);
//  215     Delay_I_1us(2);
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function Delay_I_1us
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??Delay_I_1us?relay
//  216     PcdAntennaOn();//¿ªÌìÏß
        ; Setup parameters for call to function PcdAntennaOn
        LCALL   ??PcdAntennaOn?relay
//  217   }
//  218   //  else return (-1); 
//  219   
//  220   //return MI_OK;
//  221 }
??M500PcdConfigISOType_0:
        LJMP    ??Subroutine21_0 & 0xFFFF
        CFI EndBlock cfiBlock17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ??WriteRawRC?relay
        ; Setup parameters for call to function WriteRawRC
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x1e
        MOV     R1,#0x2d
        LCALL   ??WriteRawRC?relay
        ; Setup parameters for call to function WriteRawRC
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x0
        MOV     R1,#0x2c
        LCALL   ??WriteRawRC?relay
        ; Setup parameters for call to function WriteRawRC
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#-0x73
        MOV     R1,#0x2a
        LCALL   ??WriteRawRC?relay
        ; Setup parameters for call to function WriteRawRC
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x3e
        MOV     R1,#0x2b
        LCALL   ??WriteRawRC?relay
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
//  222 
//  223 /////////////////////////////////////////////////////////////////////
//  224 //¹¦    ÄÜ£ºÍ¨¹ýRC522ºÍISO14443¿¨Í¨Ñ¶
//  225 //²ÎÊýËµÃ÷£ºCommand[IN]:RC522ÃüÁî×Ö
//  226 //          pInData[IN]:Í¨¹ýRC522·¢ËÍµ½¿¨Æ¬µÄÊý¾Ý
//  227 //          InLenByte[IN]:·¢ËÍÊý¾ÝµÄ×Ö½Ú³¤¶È
//  228 //          pOutData[OUT]:½ÓÊÕµ½µÄ¿¨Æ¬·µ»ØÊý¾Ý
//  229 //          *pOutLenBit[OUT]:·µ»ØÊý¾ÝµÄÎ»³¤¶È
//  230 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  231 char PcdComMF522(unsigned char Command, 		//RC522ÃüÁî×Ö
PcdComMF522:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function PcdComMF522
        CODE
//  232                  unsigned char *pInData, 		//Í¨¹ýRC522·¢ËÍµ½¿¨Æ¬µÄÊý¾Ý
//  233                  unsigned char InLenByte,		//·¢ËÍÊý¾ÝµÄ×Ö½Ú³¤¶È
//  234                  unsigned char *pOutData, 		//½ÓÊÕµ½µÄ¿¨Æ¬·µ»ØÊý¾Ý
//  235                  unsigned int  *pOutLenBit)		//·µ»ØÊý¾ÝµÄÎ»³¤¶È
//  236 {
        FUNCALL PcdComMF522, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, SetBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, SetBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, SetBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdComMF522, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     ?V0 + 4,R4
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  237   char status = MI_ERR;
        MOV     ?V0 + 3,#-0x45
//  238   unsigned char irqEn   = 0x00;
        MOV     ?V0 + 5,#0x0
//  239   unsigned char waitFor = 0x00;
        MOV     ?V0 + 6,#0x0
//  240   unsigned char lastBits;
//  241   unsigned char n;
//  242   unsigned int i;
//  243   switch (Command)
        MOV     A,R1
        ADD     A,#-0xc
        JZ      ??PcdComMF522_0
        ADD     A,#-0x2
        JNZ     ??PcdComMF522_1
//  244   {
//  245   case PCD_AUTHENT:		//MifareÈÏÖ¤
//  246     irqEn   = 0x12;		//ÔÊÐí´íÎóÖÐ¶ÏÇëÇóErrIEn  ÔÊÐí¿ÕÏÐÖÐ¶ÏIdleIEn
        MOV     ?V0 + 5,#0x12
//  247     waitFor = 0x10;		//ÈÏÖ¤Ñ°¿¨µÈ´ýÊ±ºò ²éÑ¯¿ÕÏÐÖÐ¶Ï±êÖ¾Î»
        MOV     ?V0 + 6,#0x10
//  248     break;
        SJMP    ??PcdComMF522_1
//  249   case PCD_TRANSCEIVE:		//½ÓÊÕ·¢ËÍ ·¢ËÍ½ÓÊÕ
//  250     irqEn   = 0x77;		//ÔÊÐíTxIEn RxIEn IdleIEn LoAlertIEn ErrIEn TimerIEn
??PcdComMF522_0:
        MOV     ?V0 + 5,#0x77
//  251     waitFor = 0x30;		//Ñ°¿¨µÈ´ýÊ±ºò ²éÑ¯½ÓÊÕÖÐ¶Ï±êÖ¾Î»Óë ¿ÕÏÐÖÐ¶Ï±êÖ¾Î»
        MOV     ?V0 + 6,#0x30
//  252     break;
//  253   default:
//  254     break;
//  255   }
//  256   
//  257   WriteRawRC(ComIEnReg,irqEn|0x80);		//IRqInvÖÃÎ»¹Ü½ÅIRQÓëStatus1RegµÄIRqÎ»µÄÖµÏà·´ 
??PcdComMF522_1:
        ; Setup parameters for call to function WriteRawRC
        MOV     A,#-0x80
        ORL     A,?V0 + 5
        MOV     R2,A
        MOV     R1,#0x2
        LCALL   ??WriteRawRC?relay
//  258   ClearBitMask(ComIrqReg,0x80);			//Set1¸ÃÎ»ÇåÁãÊ±£¬CommIRqRegµÄÆÁ±ÎÎ»ÇåÁã
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#-0x80
        MOV     R1,#0x4
        LCALL   ?Subroutine7 & 0xFFFF
//  259   WriteRawRC(CommandReg,PCD_IDLE);		//Ð´¿ÕÏÐÃüÁî
//  260   SetBitMask(FIFOLevelReg,0x80);			//ÖÃÎ»FlushBufferÇå³ýÄÚ²¿FIFOµÄ¶ÁºÍÐ´Ö¸ÕëÒÔ¼°ErrRegµÄBufferOvfl±êÖ¾Î»±»Çå³ý
//  261   
//  262   for (i=0; i<InLenByte; i++)
??CrossCallReturnLabel_2:
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??PcdComMF522_2
//  263   {   WriteRawRC(FIFODataReg, pInData[i]);    }		//Ð´Êý¾Ý½øFIFOdata
??PcdComMF522_3:
        ; Setup parameters for call to function WriteRawRC
        MOV     A,?V0 + 10
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 11
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x9
        LCALL   ??WriteRawRC?relay
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??PcdComMF522_2:
        MOV     ?V0 + 8,?V0 + 4
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 8
        MOV     A,R7
        SUBB    A,#0x0
        JC      ??PcdComMF522_3
//  264   WriteRawRC(CommandReg, Command);					//Ð´ÃüÁî
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,?V0 + 2
        MOV     R1,#0x1
        LCALL   ??WriteRawRC?relay
//  265   
//  266   
//  267   if (Command == PCD_TRANSCEIVE)
        MOV     A,#0xc
        XRL     A,?V0 + 2
        JNZ     ??PcdComMF522_4
//  268   {    SetBitMask(BitFramingReg,0x80);  }				//StartSendÖÃÎ»Æô¶¯Êý¾Ý·¢ËÍ ¸ÃÎ»ÓëÊÕ·¢ÃüÁîÊ¹ÓÃÊ±²ÅÓÐÐ§
        ; Setup parameters for call to function SetBitMask
        MOV     R2,#-0x80
        MOV     R1,#0xd
        LCALL   ??SetBitMask?relay
//  269   
//  270   i = 1000;//¸ù¾ÝÊ±ÖÓÆµÂÊµ÷Õû£¬²Ù×÷M1¿¨×î´óµÈ´ýÊ±¼ä25ms
??PcdComMF522_4:
        MOV     R6,#-0x18
        MOV     R7,#0x3
//  271   do 														//ÈÏÖ¤ ÓëÑ°¿¨µÈ´ýÊ±¼ä	
//  272   {
//  273     n = ReadRawRC(ComIrqReg);							//²éÑ¯ÊÂ¼þÖÐ¶Ï
??PcdComMF522_5:
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x4
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV     ?V0 + 8,A
//  274     i--;
//  275   }
//  276   while ((i!=0) && !(n&0x01) && !(n&waitFor));		//ÍË³öÌõ¼þi=0,¶¨Ê±Æ÷ÖÐ¶Ï£¬ÓëÐ´¿ÕÏÐÃüÁî
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      ??PcdComMF522_6
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        JC      ??PcdComMF522_6
        ANL     A,?V0 + 6
        JZ      ??PcdComMF522_5
//  277   ClearBitMask(BitFramingReg,0x80);					//ÇåÀíÔÊÐíStartSendÎ»
??PcdComMF522_6:
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#-0x80
        MOV     R1,#0xd
        LCALL   ??ClearBitMask?relay
//  278   if (i!=0)
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??PcdComMF522_7 & 0xFFFF
//  279   {    
//  280     if(!(ReadRawRC(ErrorReg)&0x1B))			//¶Á´íÎó±êÖ¾¼Ä´æÆ÷BufferOfI CollErr ParityErr ProtocolErr
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x6
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_37:
        ANL     A,#0x1b
        JZ      $+5
        LJMP    ??PcdComMF522_7 & 0xFFFF
//  281     {
//  282       status = MI_OK;
        MOV     ?V0 + 3,#0x26
//  283       if (n & irqEn & 0x01)					//ÊÇ·ñ·¢Éú¶¨Ê±Æ÷ÖÐ¶Ï
        MOV     A,?V0 + 5
        MOV     C,0xE0 /* A   */.0
        PUSH    PSW
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 8
        MOV     C,0xE0 /* A   */.0
        MOV     B.0,C
        LCALL   ?POP_BIT_ISP
        DEC     SP
        CFI CFA_SP SP+0
        ANL     C,B.0
        JNC     ??PcdComMF522_8
//  284       {   status = MI_NOTAGERR;   }
        MOV     ?V0 + 3,#-0x34
//  285       if (Command == PCD_TRANSCEIVE)
??PcdComMF522_8:
        MOV     A,#0xc
        XRL     A,?V0 + 2
        JZ      $+5
        LJMP    ??PcdComMF522_7 & 0xFFFF
//  286       {
//  287         n = ReadRawRC(FIFOLevelReg);			//¶ÁFIFOÖÐ±£´æµÄ×Ö½ÚÊý
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0xa
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV     ?V0 + 8,A
//  288         lastBits = ReadRawRC(ControlReg) & 0x07;	//×îºó½ÓÊÕµ½µÃ×Ö½ÚµÄÓÐÐ§Î»Êý
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0xc
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_39:
        ANL     A,#0x7
        MOV     ?V0 + 10,A
//  289         if (lastBits)
        MOV     ?V0 + 6,?V0 + 8
        JZ      ??PcdComMF522_9
//  290         {   *pOutLenBit = (n-1)*8 + lastBits;   }	//N¸ö×Ö½ÚÊý¼õÈ¥1£¨×îºóÒ»¸ö×Ö½Ú£©+×îºóÒ»Î»µÄÎ»Êý ¶ÁÈ¡µ½µÄÊý¾Ý×ÜÎ»Êý
        MOV     A,?V0 + 6
        ADD     A,#-0x1
        MOV     ?V0 + 6,A
        CLR     A
        ADDC    A,#-0x1
        MOV     ?V0 + 7,A
        MOV     A,#0x3
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     A,?V0 + 6
        ADD     A,?V0 + 10
        MOV     R0,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??PcdComMF522_10
//  291         else
//  292         {   *pOutLenBit = n*8;   }					//×îºó½ÓÊÕµ½µÄ×Ö½ÚÕû¸ö×Ö½ÚÓÐÐ§
??PcdComMF522_9:
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
??PcdComMF522_10:
        MOVX    @DPTR,A
//  293         if (n == 0)									
        MOV     A,?V0 + 8
        JNZ     ??PcdComMF522_11
//  294         {   n = 1;    }
        MOV     ?V0 + 8,#0x1
        SJMP    ??PcdComMF522_12
//  295         if (n > MAXRLEN)
??PcdComMF522_11:
        CLR     C
        SUBB    A,#0x13
        JC      ??PcdComMF522_12
//  296         {   n = MAXRLEN;   }
        MOV     ?V0 + 8,#0x12
//  297         for (i=0; i<n; i++)
??PcdComMF522_12:
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??PcdComMF522_13
//  298         {   pOutData[i] = ReadRawRC(FIFODataReg);    }
??PcdComMF522_14:
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x9
        LCALL   ??ReadRawRC?relay
        MOV     A,?V0 + 12
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 13
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??PcdComMF522_13:
        MOV     ?V0 + 0,?V0 + 8
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 0
        MOV     A,R7
        SUBB    A,#0x0
        JC      ??PcdComMF522_14
//  299       }
//  300     }
//  301     else
//  302     {   status = MI_ERR;   }
//  303   }
//  304   
//  305   SetBitMask(ControlReg,0x80);           // stop timer now
??PcdComMF522_7:
        ; Setup parameters for call to function SetBitMask
        MOV     R2,#-0x80
        MOV     R1,#0xc
        LCALL   ??SetBitMask?relay
//  306   WriteRawRC(CommandReg,PCD_IDLE); 
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??WriteRawRC?relay
//  307   return status;
        MOV     R1,?V0 + 3
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock21
//  308 }
//  309 
//  310 /////////////////////////////////////////////////////////////////////
//  311 //¹¦    ÄÜ£ºÑ°¿¨
//  312 //²ÎÊýËµÃ÷: req_code[IN]:Ñ°¿¨·½Ê½
//  313 //                0x52 = Ñ°¸ÐÓ¦ÇøÄÚËùÓÐ·ûºÏ14443A±ê×¼µÄ¿¨
//  314 //                0x26 = Ñ°Î´½øÈëÐÝÃß×´Ì¬µÄ¿¨
//  315 //          pTagType[OUT]£º¿¨Æ¬ÀàÐÍ´úÂë
//  316 //                0x4400 = Mifare_UltraLight
//  317 //                0x0400 = Mifare_One(S50)
//  318 //                0x0200 = Mifare_One(S70)
//  319 //                0x0800 = Mifare_Pro(X)
//  320 //                0x4403 = Mifare_DESFire
//  321 //·µ    »Ø: ³É¹¦·µ»ØMI_OK
//  322 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  323 char PcdRequest(unsigned char req_code,unsigned char *pTagType)
PcdRequest:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function PcdRequest
        CODE
//  324 {
        FUNCALL PcdRequest, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdRequest, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdRequest, SetBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdRequest, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  325   char status;  
//  326   uint i;
//  327   unsigned int  unLen;
//  328   unsigned char ucComMF522Buf[MAXRLEN]; 
//  329   
//  330   ClearBitMask(Status2Reg,0x08);	//ÇåÀíÖ¸Ê¾MIFARECyptolµ¥Ôª½ÓÍ¨ÒÔ¼°ËùÓÐ¿¨µÄÊý¾ÝÍ¨ÐÅ±»¼ÓÃÜµÄÇé¿ö
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#0x8
        MOV     R1,#0x8
        LCALL   ??ClearBitMask?relay
//  331   WriteRawRC(BitFramingReg,0x07);	//	·¢ËÍµÄ×îºóÒ»¸ö×Ö½ÚµÄ ÆßÎ»
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x7
        MOV     R1,#0xd
        LCALL   ??WriteRawRC?relay
//  332   SetBitMask(TxControlReg,0x03);	//TX1,TX2¹Ü½ÅµÄÊä³öÐÅºÅ´«µÝ¾­·¢ËÍµ÷ÖÆµÄ13.56µÄÄÜÁ¿ÔØ²¨ÐÅºÅ
        ; Setup parameters for call to function SetBitMask
        MOV     R2,#0x3
        MOV     R1,#0x14
        LCALL   ??SetBitMask?relay
//  333   
//  334   ucComMF522Buf[0] = req_code;		//´æÈë ¿¨Æ¬ÃüÁî×Ö
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        LCALL   ?Subroutine15 & 0xFFFF
//  335   
//  336   status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);	//Ñ°¿¨    
??CrossCallReturnLabel_10:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
//  337   if ((status == MI_OK) && (unLen == 0x10))	//Ñ°¿¨³É¹¦·µ»Ø¿¨ÀàÐÍ 
        MOV     A,#0x26
        XRL     A,R1
        JNZ     ??PcdRequest_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x10
        JNZ     ??PcdRequest_1
        INC     DPTR
        MOVX    A,@DPTR
??PcdRequest_1:
        JNZ     ??PcdRequest_0
//  338   {    
//  339     *pTagType     = ucComMF522Buf[0];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  340     *(pTagType+1) = ucComMF522Buf[1];
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    @DPTR,A
        SJMP    ??PcdRequest_2
//  341   }
//  342   else
//  343   {   
//  344     status = MI_ERR;
??PcdRequest_0:
        MOV     R1,#-0x45
        CFI EndBlock cfiBlock22
//  345   }
//  346   
//  347   return status;
??PcdRequest_2:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  348 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock23
//  349 
//  350 /////////////////////////////////////////////////////////////////////
//  351 //¹¦    ÄÜ£º·À³å×²
//  352 //²ÎÊýËµÃ÷: pSnr[OUT]:¿¨Æ¬ÐòÁÐºÅ£¬4×Ö½Ú
//  353 //·µ    »Ø: ³É¹¦·µ»ØMI_OK
//  354 /////////////////////////////////////////////////////////////////////  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  355 char PcdAnticoll(unsigned char *pSnr)
PcdAnticoll:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function PcdAnticoll
        CODE
//  356 {
        FUNCALL PcdAnticoll, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdAnticoll, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdAnticoll, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdAnticoll, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdAnticoll, SetBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  357   char status;
//  358   unsigned char i,snr_check=0;
        MOV     ?V0 + 2,#0x0
//  359   unsigned int  unLen;
//  360   unsigned char ucComMF522Buf[MAXRLEN]; 
//  361   
//  362   
//  363   ClearBitMask(Status2Reg,0x08);		//ÇåMFCryptol OnÎ» Ö»ÓÐ³É¹¦Ö´ÐÐMFAuthentÃüÁîºó£¬¸ÃÎ»²ÅÄÜÖÃÎ»
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#0x8
        MOV     R1,#0x8
        LCALL   ??ClearBitMask?relay
//  364   WriteRawRC(BitFramingReg,0x00);		//ÇåÀí¼Ä´æÆ÷ Í£Ö¹ÊÕ·¢
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x0
        MOV     R1,#0xd
        LCALL   ??WriteRawRC?relay
//  365   ClearBitMask(CollReg,0x80);			//ÇåValuesAfterCollËùÓÐ½ÓÊÕµÄÎ»ÔÚ³åÍ»ºó±»Çå³ý
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#-0x80
        MOV     R1,#0xe
        LCALL   ??ClearBitMask?relay
//  366   
//  367   // WriteRawRC(BitFramingReg,0x07);	//	·¢ËÍµÄ×îºóÒ»¸ö×Ö½ÚµÄ ÆßÎ»
//  368   // SetBitMask(TxControlReg,0x03);	//TX1,TX2¹Ü½ÅµÄÊä³öÐÅºÅ´«µÝ¾­·¢ËÍµ÷ÖÆµÄ13.56µÄÄÜÁ¿ÔØ²¨ÐÅºÅ
//  369   
//  370   ucComMF522Buf[0] = 0x93;	//¿¨Æ¬·À³åÍ»ÃüÁî
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x6d
        MOVX    @DPTR,A
//  371   ucComMF522Buf[1] = 0x20;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x20
        LCALL   ?Subroutine15 & 0xFFFF
//  372   
//  373   status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);//Óë¿¨Æ¬Í¨ÐÅ
??CrossCallReturnLabel_11:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x2
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R1
        MOV     ?V0 + 0,A
//  374   if (status == MI_OK)		//Í¨ÐÅ³É¹¦
        MOV     A,#0x26
        XRL     A,?V0 + 0
        JNZ     ??PcdAnticoll_0
//  375   {
//  376     for (i=0; i<4; i++)
        MOV     ?V0 + 4,#0x0
//  377     {   
//  378       *(pSnr+i)  = ucComMF522Buf[i];			//¶Á³öUID
??PcdAnticoll_1:
        MOV     DPL,?V0 + 4
        MOV     R2,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R2
        MOV     R0,A
        MOV     A,DPH
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_8:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_14:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  379       snr_check ^= ucComMF522Buf[i];
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     ?V0 + 2,A
//  380       
//  381     }
        INC     ?V0 + 4
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,#0x4
        JC      ??PcdAnticoll_1
//  382     if (snr_check != ucComMF522Buf[i])
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,?V0 + 4
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_46:
        XRL     A,?V0 + 2
        JZ      ??PcdAnticoll_0
//  383     {   status = MI_ERR;    }
        MOV     ?V0 + 0,#-0x45
//  384   }
//  385   
//  386   SetBitMask(CollReg,0x80);
??PcdAnticoll_0:
        ; Setup parameters for call to function SetBitMask
        MOV     R2,#-0x80
        MOV     R1,#0xe
        LCALL   ??SetBitMask?relay
//  387   return status;
        MOV     R1,?V0 + 0
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock24
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  388 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function PcdComMF522
        ; Setup parameters for call to function PcdComMF522
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
//  389 /////////////////////////////////////////////////////////////////////
//  390 //ÓÃMF522¼ÆËãCRC16º¯Êý
//  391 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  392 void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
CalulateCRC:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function CalulateCRC
        CODE
//  393 {
        FUNCALL CalulateCRC, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, SetBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, WriteRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CalulateCRC, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 5,R1
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  394   unsigned char i,n;
//  395   ClearBitMask(DivIrqReg,0x04);
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#0x4
        MOV     R1,#0x5
        LCALL   ?Subroutine7 & 0xFFFF
//  396   WriteRawRC(CommandReg,PCD_IDLE);
//  397   SetBitMask(FIFOLevelReg,0x80);
//  398   for (i=0; i<len; i++)
??CrossCallReturnLabel_3:
        MOV     ?V0 + 4,#0x0
        SJMP    ??CalulateCRC_0
//  399   {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
??CalulateCRC_1:
        ; Setup parameters for call to function WriteRawRC
        MOV     ?V0 + 2,?V0 + 4
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     R2,A
        MOV     R1,#0x9
        LCALL   ??WriteRawRC?relay
        INC     ?V0 + 4
??CalulateCRC_0:
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,?V0 + 5
        JC      ??CalulateCRC_1
//  400   WriteRawRC(CommandReg, PCD_CALCCRC);
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x3
        MOV     R1,#0x1
        LCALL   ??WriteRawRC?relay
//  401   i = 0xFF;
        MOV     ?V0 + 4,#-0x1
//  402   do 
//  403   {
//  404     n = ReadRawRC(DivIrqReg);
??CalulateCRC_2:
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x5
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     R0,A
//  405     i--;
//  406   }
//  407   while ((i!=0) && !(n&0x04));
        DEC     ?V0 + 4
        MOV     A,?V0 + 4
        JZ      ??CalulateCRC_3
        MOV     A,R0
        MOV     C,0xE0 /* A   */.2
        JNC     ??CalulateCRC_2
//  408   pOutData[0] = ReadRawRC(CRCResultRegL);
??CalulateCRC_3:
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x22
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_6:
        MOVX    @DPTR,A
//  409   pOutData[1] = ReadRawRC(CRCResultRegM);
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x21
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_7:
        INC     DPTR
        MOVX    @DPTR,A
//  410 }
        SJMP    ?Subroutine3
        CFI EndBlock cfiBlock29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        LCALL   ??ReadRawRC?relay
        MOV     A,R1
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        LCALL   ??ClearBitMask?relay
        ; Setup parameters for call to function WriteRawRC
        ; Setup parameters for call to function WriteRawRC
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??WriteRawRC?relay
        ; Setup parameters for call to function SetBitMask
        ; Setup parameters for call to function SetBitMask
        MOV     R2,#-0x80
        MOV     R1,#0xa
        LCALL   ??SetBitMask?relay
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35
//  411 /////////////////////////////////////////////////////////////////////
//  412 //¹¦    ÄÜ£ºÑ¡¶¨¿¨Æ¬
//  413 //²ÎÊýËµÃ÷: pSnr[IN]:¿¨Æ¬ÐòÁÐºÅ£¬4×Ö½Ú
//  414 //·µ    »Ø: ³É¹¦·µ»ØMI_OK
//  415 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  416 char PcdSelect(unsigned char *pSnr)
PcdSelect:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function PcdSelect
        CODE
//  417 {
        FUNCALL PcdSelect, CalulateCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdSelect, ClearBitMask
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdSelect, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  418   char status;
//  419   unsigned char i;
//  420   unsigned int  unLen;
//  421   unsigned char ucComMF522Buf[MAXRLEN]; 
//  422   
//  423   ucComMF522Buf[0] = PICC_ANTICOLL1;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x6d
        MOVX    @DPTR,A
//  424   ucComMF522Buf[1] = 0x70;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x70
        MOVX    @DPTR,A
//  425   ucComMF522Buf[6] = 0;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  426   for (i=0; i<4; i++)
        MOV     R6,A
//  427   {
//  428     ucComMF522Buf[i+2] = *(pSnr+i);
??PcdSelect_0:
        MOV     DPL,R6
        MOV     R4,DPL
        MOV     A,R2
        ADD     A,R4
        MOV     R0,A
        MOV     A,R3
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_9:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R4
        LCALL   ??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_30:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  429     ucComMF522Buf[6]  ^= *(pSnr+i);
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        MOVX    @DPTR,A
//  430   }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        JC      ??PcdSelect_0
//  431   CalulateCRC(ucComMF522Buf,7,&ucComMF522Buf[7]);
        ; Setup parameters for call to function CalulateCRC
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R1,#0x7
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??CalulateCRC?relay
//  432   
//  433   ClearBitMask(Status2Reg,0x08);
        ; Setup parameters for call to function ClearBitMask
        MOV     R2,#0x8
        MOV     R1,#0x8
        LCALL   ??ClearBitMask?relay
//  434   
//  435   status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,9,ucComMF522Buf,&unLen);
        ; Setup parameters for call to function PcdComMF522
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x9
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  436   
//  437   if ((status == MI_OK) && (unLen == 0x18))
        MOV     A,#0x26
        XRL     A,R1
        JNZ     ??PcdSelect_1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x18
        JNZ     ??PcdSelect_2
        INC     DPTR
        MOVX    A,@DPTR
??PcdSelect_2:
        JZ      ??PcdSelect_3
//  438   {   status = MI_OK;  }
//  439   else
//  440   {   status = MI_ERR;    }
??PcdSelect_1:
        MOV     R1,#-0x45
        CFI EndBlock cfiBlock36
//  441   
//  442   return status;
??PcdSelect_3:
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  443 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0xc
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        LCALL   ??PcdComMF522?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57
//  444 
//  445 /////////////////////////////////////////////////////////////////////
//  446 //¹¦    ÄÜ£ºÑéÖ¤¿¨Æ¬ÃÜÂë
//  447 //²ÎÊýËµÃ÷: auth_mode[IN]: ÃÜÂëÑéÖ¤Ä£Ê½
//  448 //                 0x60 = ÑéÖ¤AÃÜÔ¿
//  449 //                 0x61 = ÑéÖ¤BÃÜÔ¿ 
//  450 //          addr[IN]£º¿éµØÖ·
//  451 //          pKey[IN]£ºÃÜÂë
//  452 //          pSnr[IN]£º¿¨Æ¬ÐòÁÐºÅ£¬4×Ö½Ú
//  453 //·µ    »Ø: ³É¹¦·µ»ØMI_OK
//  454 /////////////////////////////////////////////////////////////////////               

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  455 char PcdAuthState(unsigned char auth_mode,unsigned char addr,unsigned char *pKey,unsigned char *pSnr)
PcdAuthState:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function PcdAuthState
        CODE
//  456 {
        FUNCALL PcdAuthState, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdAuthState, ReadRawRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        MOV     R6,A
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//  457   char status;
//  458   unsigned int  unLen;
//  459   unsigned char i,ucComMF522Buf[MAXRLEN]; 
//  460   
//  461   ucComMF522Buf[0] = auth_mode;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  462   ucComMF522Buf[1] = addr;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  463   for (i=0; i<6; i++)
        MOV     ?V0 + 0,#0x0
//  464   {    ucComMF522Buf[i+2] = *(pKey+i);   }
??PcdAuthState_0:
        MOV     DPL,?V0 + 0
        MOV     R2,DPL
        MOV     A,R4
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R5
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_43:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_31:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_12:
        JC      ??PcdAuthState_0
//  465   for (i=0; i<6; i++)
        MOV     ?V0 + 0,#0x0
//  466   {    ucComMF522Buf[i+8] = *(pSnr+i);   }
??PcdAuthState_1:
        MOV     DPL,?V0 + 0
        MOV     R2,DPL
        MOV     A,R0
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R1
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_44:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_32:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_13:
        JC      ??PcdAuthState_1
//  467   //   memcpy(&ucComMF522Buf[2], pKey, 6); 
//  468   //   memcpy(&ucComMF522Buf[8], pSnr, 4); 
//  469   
//  470   status = PcdComMF522(PCD_AUTHENT,ucComMF522Buf,12,ucComMF522Buf,&unLen);
        ; Setup parameters for call to function PcdComMF522
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0xc
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0xe
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        MOV     ?V0 + 0,A
//  471   if ((status != MI_OK) || (!(ReadRawRC(Status2Reg) & 0x08)))
        MOV     A,#0x26
        XRL     A,?V0 + 0
        JNZ     ??PcdAuthState_2
        ; Setup parameters for call to function ReadRawRC
        MOV     R1,#0x8
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     C,0xE0 /* A   */.3
        JC      ??PcdAuthState_3
//  472   {   status = MI_ERR;   }
??PcdAuthState_2:
        MOV     ?V0 + 0,#-0x45
//  473   
//  474   return status;
??PcdAuthState_3:
        MOV     R1,?V0 + 0
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock58
//  475 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        MOVX    @DPTR,A
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x6
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+-1
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        MOV     A,DPL
        ADD     A,R2
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
        CFI Block cfiCond65 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+-1
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+-1
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker71 Using cfiCommon1
        CFI (cfiPicker71) NoFunction
        CFI (cfiPicker71) Picker
        MOV     R7,A
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiPicker71
        ; Setup parameters for call to function WriteRawRC
        ; Setup parameters for call to function ReadRawRC
        ; Setup parameters for call to function ReadRawRC
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        LCALL   ??ReadRawRC?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81
//  476 
//  477 /////////////////////////////////////////////////////////////////////
//  478 //¹¦    ÄÜ£ºÐ´Êý¾Ýµ½M1¿¨Ò»¿é
//  479 //²ÎÊýËµÃ÷: addr[IN]£º¿éµØÖ·
//  480 //          pData[IN]£ºÐ´ÈëµÄÊý¾Ý£¬16×Ö½Ú
//  481 //·µ    »Ø: ³É¹¦·µ»ØMI_OK
//  482 /////////////////////////////////////////////////////////////////////                  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  483 char PcdWrite(unsigned char addr,unsigned char *pData)
PcdWrite:
        CFI Block cfiBlock82 Using cfiCommon0
        CFI Function PcdWrite
        CODE
//  484 {
        FUNCALL PcdWrite, CalulateCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdWrite, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdWrite, CalulateCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdWrite, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  485   char status;
//  486   unsigned int  unLen;
//  487   unsigned char i,ucComMF522Buf[MAXRLEN]; 
//  488   
//  489   ucComMF522Buf[0] = PICC_WRITE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x60
        MOVX    @DPTR,A
//  490   ucComMF522Buf[1] = addr;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  491   CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
        ; Setup parameters for call to function CalulateCRC
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R1,#0x2
        MOV     A,R1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
//  492   
//  493   status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
//  494   
//  495   if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
??CrossCallReturnLabel_16:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x4
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        XRL     A,#0x26
        JNZ     ??PcdWrite_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??PcdWrite_1
        INC     DPTR
        MOVX    A,@DPTR
??PcdWrite_1:
        JNZ     ??PcdWrite_0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0xf
        XRL     A,#0xa
        JZ      ??PcdWrite_2
//  496   {   status = MI_ERR;   }
??PcdWrite_0:
        MOV     R1,#-0x45
        LJMP    ??PcdWrite_3 & 0xFFFF
//  497   
//  498   if (status == MI_OK)
//  499   {
//  500     //memcpy(ucComMF522Buf, pData, 16);
//  501     for (i=0; i<16; i++)
??PcdWrite_2:
        MOV     R2,#0x0
//  502     {    ucComMF522Buf[i] = *(pData+i);   }
??PcdWrite_4:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_45:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x10
        JC      ??PcdWrite_4
//  503     CalulateCRC(ucComMF522Buf,16,&ucComMF522Buf[16]);
        ; Setup parameters for call to function CalulateCRC
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R1,#0x10
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
//  504     
//  505     status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,18,ucComMF522Buf,&unLen);
??CrossCallReturnLabel_17:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x12
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  506     if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
        MOV     A,#0x26
        XRL     A,R1
        JNZ     ??PcdWrite_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??PcdWrite_5
        INC     DPTR
        MOVX    A,@DPTR
??PcdWrite_5:
        JNZ     ??PcdWrite_0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0xf
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??PcdWrite_0 & 0xFFFF
//  507     {   status = MI_ERR;   }
//  508   } 
//  509   return status;
??PcdWrite_3:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock82
//  510 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond83 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        RET
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        MOV     DPL,A
        MOV     A,DPH
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiCond89 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker95 Using cfiCommon1
        CFI (cfiPicker95) NoFunction
        CFI (cfiPicker95) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiPicker95
//  511 /////////////////////////////////////////////////////////////////////
//  512 //¹¦    ÄÜ£º¶ÁÈ¡M1¿¨Ò»¿éÊý¾Ý
//  513 //²ÎÊýËµÃ÷: addr[IN]£º¿éµØÖ·
//  514 //          pData[OUT]£º¶Á³öµÄÊý¾Ý£¬16×Ö½Ú
//  515 //·µ    »Ø: ³É¹¦·µ»ØMI_OK
//  516 ///////////////////////////////////////////////////////////////////// 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  517 char PcdRead(unsigned char addr,unsigned char *pData)
PcdRead:
        CFI Block cfiBlock96 Using cfiCommon0
        CFI Function PcdRead
        CODE
//  518 {
        FUNCALL PcdRead, CalulateCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdRead, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  519   char status;
//  520   unsigned int  unLen;
//  521   unsigned char i,ucComMF522Buf[MAXRLEN]; 
//  522   
//  523   ucComMF522Buf[0] = PICC_READ;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x30
        MOVX    @DPTR,A
//  524   ucComMF522Buf[1] = addr;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  525   CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
        ; Setup parameters for call to function CalulateCRC
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R1,#0x2
        MOV     A,R1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
//  526   
//  527   status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
??CrossCallReturnLabel_18:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x4
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
//  528   if ((status == MI_OK) && (unLen == 0x90))
        MOV     A,#0x26
        XRL     A,R1
        JNZ     ??PcdRead_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x90
        JNZ     ??PcdRead_1
        INC     DPTR
        MOVX    A,@DPTR
??PcdRead_1:
        JNZ     ??PcdRead_0
//  529     //   {   memcpy(pData, ucComMF522Buf, 16);   }
//  530   {
//  531     for (i=0; i<16; i++)
        MOV     R0,#0x0
//  532     {    *(pData+i) = ucComMF522Buf[i];   }
??PcdRead_2:
        MOV     DPL,R0
        MOV     R2,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R2
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_47:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_15:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,#0x10
        JNC     ??PcdRead_3
        SJMP    ??PcdRead_2
//  533   }
//  534   else
//  535   {   status = MI_ERR;   }
??PcdRead_0:
        MOV     R1,#-0x45
//  536   
//  537   return status;
??PcdRead_3:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock96
//  538 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond97 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+-1
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker99 Using cfiCommon1
        CFI (cfiPicker99) NoFunction
        CFI (cfiPicker99) Picker
        MOV     A,R6
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiPicker99
//  539 
//  540 /////////////////////////////////////////////////////////////////////
//  541 //¹¦    ÄÜ£ºÃüÁî¿¨Æ¬½øÈëÐÝÃß×´Ì¬
//  542 //·µ    »Ø: ³É¹¦·µ»ØMI_OK
//  543 /////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  544 char PcdHalt(void)
PcdHalt:
        CFI Block cfiBlock100 Using cfiCommon0
        CFI Function PcdHalt
        CODE
//  545 {
        FUNCALL PcdHalt, CalulateCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PcdHalt, PcdComMF522
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  546   //    char status;
//  547   unsigned int  unLen;
//  548   unsigned char ucComMF522Buf[MAXRLEN]; 
//  549   
//  550   ucComMF522Buf[0] = PICC_HALT;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x50
        MOVX    @DPTR,A
//  551   ucComMF522Buf[1] = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  552   CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
        ; Setup parameters for call to function CalulateCRC
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R1,#0x2
        MOV     A,R1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
//  553   PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
??CrossCallReturnLabel_19:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x4
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  554   // status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
//  555   
//  556   return MI_OK;
        MOV     R1,#0x26
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock100
//  557 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond101 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker103 Using cfiCommon1
        CFI (cfiPicker103) NoFunction
        CFI (cfiPicker103) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiPicker103

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_17
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_18
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_19
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker108 Using cfiCommon1
        CFI (cfiPicker108) NoFunction
        CFI (cfiPicker108) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??CalulateCRC?relay
        ; Setup parameters for call to function PcdComMF522
        ; Setup parameters for call to function PcdComMF522
        ; Setup parameters for call to function PcdComMF522
        ; Setup parameters for call to function PcdComMF522
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiPicker108
//  558 
//  559 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  560 void IC_CMT(uchar *UID,uchar *KEY,uchar RW,char *Dat)
IC_CMT:
        CFI Block cfiBlock109 Using cfiCommon0
        CFI Function IC_CMT
        CODE
//  561 {
        FUNCALL IC_CMT, PcdRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, PcdAnticoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, PcdSelect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, PcdAuthState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, PcdRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, PcdWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, PcdHalt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IC_CMT, UartSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     ?V0 + 4,R1
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  562   uchar status = 0xab;
//  563   uchar TagType[16]={0};//IC¿¨µÄÀàÐÍ
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  564   uchar IC_uid[16]={0};//IC¿¨µÄUID
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_1` & 0xff
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  565   
//  566   UartSend(PcdRequest(0x52,TagType));//Ñ°¿¨
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdRequest
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x52
        LCALL   ??PcdRequest?relay
        LCALL   ??UartSend?relay
//  567   UartSend(PcdAnticoll(IC_uid));//·À³å×²
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdAnticoll
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??PcdAnticoll?relay
        LCALL   ??UartSend?relay
//  568   
//  569   UartSend(PcdSelect(UID));//Ñ¡¶¨¿¨
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdSelect
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??PcdSelect?relay
        LCALL   ??UartSend?relay
//  570   
//  571   UartSend(PcdAuthState(0x60,0x10,KEY,UID));//Ð£Ñé
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdAuthState
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,#0x10
        MOV     R1,#0x60
        LCALL   ??PcdAuthState?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 45)
        LCALL   ??UartSend?relay
//  572   if(RW)//¶ÁÐ´Ñ¡Ôñ£¬1ÊÇ¶Á£¬0ÊÇÐ´
        MOV     A,?V0 + 4
        JZ      ??IC_CMT_0
//  573   {
//  574     UartSend (PcdRead(0x10,Dat));
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdRead
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x10
        LCALL   ??PcdRead?relay
        SJMP    ??IC_CMT_1
//  575   }
//  576   else 
//  577   {
//  578     UartSend(PcdWrite(0x10,Dat));
??IC_CMT_0:
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdWrite
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x10
        LCALL   ??PcdWrite?relay
??IC_CMT_1:
        LCALL   ??UartSend?relay
//  579   } 
//  580   UartSend(PcdHalt());
        ; Setup parameters for call to function UartSend
        ; Setup parameters for call to function PcdHalt
        LCALL   ??PcdHalt?relay
        LCALL   ??UartSend?relay
//  581 }
        MOV     A,#0x20
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock109

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_I_1us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_I_1us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SPIWriteByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SPIWriteByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SPIReadByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SPIReadByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReadRawRC?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReadRawRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WriteRawRC?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WriteRawRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SetBitMask?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SetBitMask

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ClearBitMask?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ClearBitMask

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdAntennaOn?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdAntennaOn

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdAntennaOff?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdAntennaOff

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M500PcdConfigISOType?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M500PcdConfigISOType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdComMF522?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdComMF522

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdAnticoll?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdAnticoll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CalulateCRC?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    CalulateCRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdSelect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdSelect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdAuthState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdAuthState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdWrite?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PcdHalt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PcdHalt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IC_CMT?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IC_CMT

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0

        END
// 
// 2 403 bytes in segment BANKED_CODE
//   126 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//    32 bytes in segment XDATA_ROM_C
// 
// 2 529 bytes of CODE  memory
//    32 bytes of CONST memory
//     0 bytes of DATA  memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: 4
