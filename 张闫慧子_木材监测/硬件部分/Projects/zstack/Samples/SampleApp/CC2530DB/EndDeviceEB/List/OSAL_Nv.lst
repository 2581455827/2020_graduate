###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         03/Dec/2019  16:47:18 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Compon #
#                          ents\osal\mcu\cc2530\OSAL_Nv.c                     #
#    Command line       =  -f C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\T #
#                          ools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ             #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0   #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Components\osal\mcu\cc2530\OSAL_N #
#                          v.c -D NWK_AUTO_POLL -D ZAPP_P1 -D MT_TASK -D      #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\EndDevice #
#                          EB\List\ -lA C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ì #
#                          Ú_Á¸²Ö\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\List\ --diag_suppress Pe001,Pa010 -o   #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\O #
#                          bj\ -e --no_code_motion --debug --core=plain       #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\202 #
#                          0±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\ -I C:\Users\25814\Desktop\2020±ÏÉè\¿µè #
#                          ÷ìÚ_Á¸²Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\Source\ -I C:\Users\25814\Desktop\2020±ÏÉè\¿µ #
#                          è÷ìÚ_Á¸²Ö\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\ZMain\TI2530DB\ -I                     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\hal\include\ -I                       #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\hal\target\CC2530EB\ -I               #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\include\ -I                       #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\high_level\ -I                    #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\low_level\srf04\ -I               #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\low_level\srf04\single_chip\ -I   #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mt\ -I C:\Users\25814\Desktop\2020±ÏÉ #
#                          è\¿µè÷ìÚ_Á¸²Ö\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\Components\osal\include\ -I  #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\services\saddr\ -I                    #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\services\sdata\ -I                    #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\af\ -I                          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sapi\ -I                        #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sec\ -I                         #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sys\ -I                         #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\zdo\ -I                         #
#                          C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\zmac\ -I C:\Users\25814\Desktop\2020± #
#                          ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz  #
#    List file          =  C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\L #
#                          ist\OSAL_Nv.lst                                    #
#    Object file        =  C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\O #
#                          bj\OSAL_Nv.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±ÏÉè\¿µè÷ìÚ_Á¸²Ö\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /******************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2011-06-05 18:52:21 -0700 (Sun, 05 Jun 2011) $
      4            Revision:       $Revision: 26212 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /******************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id
     43                is to be reserved for use by this module.
     44          ******************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          // In case pages 0-1 are ever used, define a null page value.
     73          #define OSAL_NV_PAGE_NULL       0
     74          
     75          // In case item Id 0 is ever used, define a null item value.
     76          #define OSAL_NV_ITEM_NULL       0
     77          
     78          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     79          
     80          #define OSAL_NV_PAGE_HDR_OFFSET 0
     81          
     82          #define OSAL_NV_MAX_HOT         3

   \                                 In  segment XDATA_ROM_C, align 1
     83          static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
   \                     hotIds:
   \   000000   8200         DW 130
   \   000002   3A00         DW 58
   \   000004   3B00         DW 59
     84            ZCD_NV_NWKKEY,
     85            ZCD_NV_NWK_ACTIVE_KEY_INFO,
     86            ZCD_NV_NWK_ALTERN_KEY_INFO,
     87          };
     88          
     89          /*********************************************************************
     90           * MACROS
     91           */
     92          
     93          #define OSAL_NV_CHECK_BUS_VOLTAGE  HalAdcCheckVdd(VDD_MIN_NV)
     94          
     95          #define OSAL_NV_DATA_SIZE( LEN )                      \
     96            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \
     97                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \
     98                       ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
     99          
    100          #define OSAL_NV_ITEM_SIZE( LEN )                                         \
    101            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \
    102                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \
    103            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
    104          
    105          #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \
    106            /* In order to recover from a page compaction that is interrupted,\
    107             * the logic in osal_nv_init() depends upon the following order:\
    108             * 1. State of the target of compaction is changed to ePgInUse.\
    109             * 2. Compacted page is erased.\
    110             */\
    111            setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\
    112            erasePage( (COM_PG) ); \
    113            \
    114            pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\
    115          )
    116          
    117          /*********************************************************************
    118           * TYPEDEFS
    119           */
    120          
    121          typedef struct
    122          {
    123            uint16 id;
    124            uint16 len;   // Enforce Flash-WORD size on len.
    125            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    126            uint16 stat;  // Item status.
    127          } osalNvHdr_t;
    128          // Struct member offsets.
    129          #define OSAL_NV_HDR_ID    0
    130          #define OSAL_NV_HDR_LEN   2
    131          #define OSAL_NV_HDR_CHK   4
    132          #define OSAL_NV_HDR_STAT  6
    133          
    134          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    135          #define OSAL_NV_HDR_SIZE  8
    136          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    137          
    138          typedef struct
    139          {
    140            uint16 active;
    141            uint16 inUse;
    142            uint16 xfer;
    143            uint16 spare;
    144          } osalNvPgHdr_t;
    145          // Struct member offsets.
    146          #define OSAL_NV_PG_ACTIVE 0
    147          #define OSAL_NV_PG_INUSE  2
    148          #define OSAL_NV_PG_XFER   4
    149          #define OSAL_NV_PG_SPARE  6
    150          
    151          #define OSAL_NV_PAGE_HDR_SIZE  8
    152          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    153          
    154          typedef enum
    155          {
    156            eNvXfer,
    157            eNvZero
    158          } eNvHdrEnum;
    159          
    160          typedef enum
    161          {
    162            ePgActive,
    163            ePgInUse,
    164            ePgXfer,
    165            ePgSpare
    166          } ePgHdrEnum;
    167          
    168          /*********************************************************************
    169           * GLOBAL VARIABLES
    170           */
    171          
    172          #ifndef OAD_KEEP_NV_PAGES
    173          // When NV pages are to remain intact during OAD download,
    174          // the image itself should not include NV pages.
    175          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    176          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    177          #pragma required=_nvBuf
    178          #endif // OAD_KEEP_NV_PAGES
    179          
    180          /*********************************************************************
    181           * LOCAL VARIABLES
    182           */
    183          
    184          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvBuf
    186          
    187          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    191          
    192          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          
    195          // NV page and offsets for hot items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          static uint8 hotPg[OSAL_NV_MAX_HOT];
   \                     hotPg:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          static uint16 hotOff[OSAL_NV_MAX_HOT];
   \                     hotOff:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    198          
    199          /*********************************************************************
    200           * LOCAL FUNCTIONS
    201           */
    202          
    203          static uint8  initNV( void );
    204          
    205          static void   setPageUse( uint8 pg, uint8 inUse );
    206          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    207          static void   erasePage( uint8 pg );
    208          static uint8  compactPage( uint8 srcPg, uint16 skipId );
    209          
    210          static uint16 findItem( uint16 id );
    211          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    212          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    213          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
    214          
    215          static uint16 calcChkB( uint16 len, uint8 *buf );
    216          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
    217          
    218          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    219          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    220          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    221          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    222          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    223          
    224          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    225          static uint8  hotItem(uint16 id);
    226          static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
    227          
    228          /*********************************************************************
    229           * @fn      initNV
    230           *
    231           * @brief   Initialize the NV flash pages.
    232           *
    233           * @param   none
    234           *
    235           * @return  TRUE
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          static uint8 initNV( void )
   \                     initNV:
    238          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    239            osalNvPgHdr_t pgHdr;
    240            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   7E00         MOV     R6,#0x0
    241            uint8 findDups = FALSE;
   \   00000C   8E..         MOV     ?V0 + 0,R6
    242            uint8 pg;
    243          
    244            pgRes = OSAL_NV_PAGE_NULL;
   \   00000E   90....       MOV     DPTR,#pgRes
   \   000011   E4           CLR     A
   \   000012   F0           MOVX    @DPTR,A
    245          
    246            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000013   7F79         MOV     R7,#0x79
    247            {
    248              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000015                ; Setup parameters for call to function HalFlashRead
   \   000015   75..08       MOV     ?V0 + 2,#0x8
   \   000018   75..00       MOV     ?V0 + 3,#0x0
   \   00001B   78..         MOV     R0,#?V0 + 2
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   AC82         MOV     R4,DPL
   \   000027   AD83         MOV     R5,DPH
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   EF           MOV     A,R7
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
    249          
    250              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F4           CPL     A
   \   00003D   7003         JNZ     ??initNV_1
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F4           CPL     A
   \                     ??initNV_1:
   \   000042   7013         JNZ     ??initNV_2
    251              {
    252                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000044   90....       MOV     DPTR,#pgRes
   \   000047   E0           MOVX    A,@DPTR
   \   000048   7004         JNZ     ??initNV_3
    253                {
    254                  pgRes = pg;
   \   00004A   EF           MOV     A,R7
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   8019         SJMP    ??initNV_4
    255                }
    256                else
    257                {
    258                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   00004E                ; Setup parameters for call to function setPageUse
   \   00004E   7A01         MOV     R2,#0x1
   \   000050   EF           MOV     A,R7
   \   000051   F9           MOV     R1,A
   \   000052   12....       LCALL   ??setPageUse?relay
   \   000055   8010         SJMP    ??initNV_4
    259                }
    260              }
    261              // An Xfer from this page was in progress.
    262              else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   000057   7404         MOV     A,#0x4
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F4           CPL     A
   \   00005E   7003         JNZ     ??initNV_5
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F4           CPL     A
   \                     ??initNV_5:
   \   000063   6002         JZ      ??initNV_4
    263              {
    264                oldPg = pg;
   \   000065   EF           MOV     A,R7
   \   000066   FE           MOV     R6,A
    265              }
    266            }
   \                     ??initNV_4:
   \   000067   0F           INC     R7
   \   000068   EF           MOV     A,R7
   \   000069   C3           CLR     C
   \   00006A   947F         SUBB    A,#0x7f
   \   00006C   40A7         JC      ??initNV_0
    267          
    268            // If a page compaction was interrupted before the old page was erased.
    269            if ( oldPg != OSAL_NV_PAGE_NULL )
   \   00006E   EE           MOV     A,R6
   \   00006F   90....       MOV     DPTR,#pgRes
   \   000072   601E         JZ      ??initNV_6
    270            {
    271              /* Interrupted compaction before the target of compaction was put in use;
    272               * so erase the target of compaction and start again.
    273               */
    274              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   000074   E0           MOVX    A,@DPTR
   \   000075   600F         JZ      ??initNV_7
    275              {
    276                erasePage( pgRes );
   \   000077                ; Setup parameters for call to function erasePage
   \   000077   F9           MOV     R1,A
   \   000078   12....       LCALL   ??erasePage?relay
    277                (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
   \   00007B                ; Setup parameters for call to function compactPage
   \   00007B   7A00         MOV     R2,#0x0
   \   00007D   7B00         MOV     R3,#0x0
   \   00007F   EE           MOV     A,R6
   \   000080   F9           MOV     R1,A
   \   000081   12....       LCALL   ??compactPage?relay
   \   000084   8013         SJMP    ??initNV_8
    278              }
    279              /* Interrupted compaction after the target of compaction was put in use,
    280               * but before the old page was erased; so erase it now and create a new reserve page.
    281               */
    282              else
    283              {
    284                erasePage( oldPg );
   \                     ??initNV_7:
   \   000086                ; Setup parameters for call to function erasePage
   \   000086   EE           MOV     A,R6
   \   000087   F9           MOV     R1,A
   \   000088   12....       LCALL   ??erasePage?relay
    285                pgRes = oldPg;
   \   00008B   EE           MOV     A,R6
   \   00008C   90....       MOV     DPTR,#pgRes
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   8007         SJMP    ??initNV_8
    286              }
    287            }
    288            else if ( pgRes != OSAL_NV_PAGE_NULL )
   \                     ??initNV_6:
   \   000092   E0           MOVX    A,@DPTR
   \   000093   6004         JZ      ??initNV_8
    289            {
    290              erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
   \   000095                ; Setup parameters for call to function erasePage
   \   000095   F9           MOV     R1,A
   \   000096   12....       LCALL   ??erasePage?relay
    291            }
    292            /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
    293             * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
    294             * while trying to erase the page to be compacted. Such a page should only contain duplicate items
    295             * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
    296             * size less the page header.
    297             */
    298          
    299            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_8:
   \   000099   7F79         MOV     R7,#0x79
    300            {
    301              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    302              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_9:
   \   00009B                ; Setup parameters for call to function initPage
   \   00009B   AC..         MOV     R4,?V0 + 0
   \   00009D   7A00         MOV     R2,#0x0
   \   00009F   7B00         MOV     R3,#0x0
   \   0000A1   EF           MOV     A,R7
   \   0000A2   F9           MOV     R1,A
   \   0000A3   12....       LCALL   ??initPage?relay
   \   0000A6   8B..         MOV     ?V0 + 3,R3
   \   0000A8   EA           MOV     A,R2
   \   0000A9   45..         ORL     A,?V0 + 3
   \   0000AB   6005         JZ      ??initNV_10
    303              {
    304                findDups = TRUE;
   \   0000AD   75..01       MOV     ?V0 + 0,#0x1
    305                pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
   \   0000B0   7F78         MOV     R7,#0x78
    306                continue;
    307              }
    308            }
   \                     ??initNV_10:
   \   0000B2   0F           INC     R7
   \   0000B3   EF           MOV     A,R7
   \   0000B4   C3           CLR     C
   \   0000B5   947F         SUBB    A,#0x7f
   \   0000B7   40E2         JC      ??initNV_9
    309          
    310            if (findDups)
   \   0000B9   E5..         MOV     A,?V0 + 0
   \   0000BB   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000BD   5014         JNC     ??initNV_11
    311            {
    312              // Final pass to calculate page lost after invalidating duplicate items.
    313              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   0000BF   7F79         MOV     R7,#0x79
    314              {
    315                (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
   \                     ??initNV_12:
   \   0000C1                ; Setup parameters for call to function initPage
   \   0000C1   7C00         MOV     R4,#0x0
   \   0000C3   7A00         MOV     R2,#0x0
   \   0000C5   7B00         MOV     R3,#0x0
   \   0000C7   EF           MOV     A,R7
   \   0000C8   F9           MOV     R1,A
   \   0000C9   12....       LCALL   ??initPage?relay
    316              }
   \   0000CC   0F           INC     R7
   \   0000CD   EF           MOV     A,R7
   \   0000CE   C3           CLR     C
   \   0000CF   947F         SUBB    A,#0x7f
   \   0000D1   40EE         JC      ??initNV_12
    317            }
    318          
    319            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_11:
   \   0000D3   90....       MOV     DPTR,#pgRes
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   704A         JNZ     ??initNV_13
    320            {
    321              uint8 idx, mostLost = 0;
   \   0000D9   7F00         MOV     R7,#0x0
    322          
    323              for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
   \   0000DB   7A00         MOV     R2,#0x0
    324              {
    325                // Is this the page that was compacted?
    326                if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
   \                     ??initNV_14:
   \   0000DD   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000E0   64F8         XRL     A,#0xf8
   \   0000E2   7004         JNZ     ??initNV_15
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   6407         XRL     A,#0x7
   \                     ??initNV_15:
   \   0000E8   7004         JNZ     ??initNV_16
    327                {
    328                  mostLost = idx;
   \   0000EA   EA           MOV     A,R2
   \   0000EB   FF           MOV     R7,A
    329                  break;
   \   0000EC   802A         SJMP    ??initNV_17
    330                }
    331                /* This check is not expected to be necessary because the above test should always succeed
    332                 * with an early loop exit.
    333                 */
    334                else if (pgLost[idx] > pgLost[mostLost])
   \                     ??initNV_16:
   \   0000EE   EF           MOV     A,R7
   \   0000EF   C3           CLR     C
   \   0000F0   33           RLC     A
   \   0000F1   F8           MOV     R0,A
   \   0000F2   E4           CLR     A
   \   0000F3   33           RLC     A
   \   0000F4   F9           MOV     R1,A
   \   0000F5   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0000F8   C082         PUSH    DPL
   \   0000FA   C083         PUSH    DPH
   \   0000FC   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000FF   F8           MOV     R0,A
   \   000100   A3           INC     DPTR
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F9           MOV     R1,A
   \   000103   D083         POP     DPH
   \   000105   D082         POP     DPL
   \   000107   C3           CLR     C
   \   000108   E0           MOVX    A,@DPTR
   \   000109   98           SUBB    A,R0
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   99           SUBB    A,R1
   \   00010D   5002         JNC     ??initNV_18
    335                {
    336                  mostLost = idx;
   \   00010F   EA           MOV     A,R2
   \   000110   FF           MOV     R7,A
    337                }
    338              }
   \                     ??initNV_18:
   \   000111   0A           INC     R2
   \   000112   EA           MOV     A,R2
   \   000113   C3           CLR     C
   \   000114   9406         SUBB    A,#0x6
   \   000116   40C5         JC      ??initNV_14
    339          
    340              pgRes = mostLost + OSAL_NV_PAGE_BEG;
   \                     ??initNV_17:
   \   000118   7479         MOV     A,#0x79
   \   00011A   2F           ADD     A,R7
   \   00011B   90....       MOV     DPTR,#pgRes
   \   00011E   F0           MOVX    @DPTR,A
    341              erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
   \   00011F                ; Setup parameters for call to function erasePage
   \   00011F   F9           MOV     R1,A
   \   000120   12....       LCALL   ??erasePage?relay
    342            }
    343          
    344            return TRUE;
   \                     ??initNV_13:
   \   000123   7901         MOV     R1,#0x1
   \   000125   02....       LJMP    ?Subroutine0 & 0xFFFF
    345          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EA           MOV     A,R2
   \   000001   C3           CLR     C
   \   000002   33           RLC     A
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   F9           MOV     R1,A
   \   000007                REQUIRE ??Subroutine51_0
   \   000007                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   74..         MOV     A,#pgLost & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   12....       LCALL   ??HalFlashRead?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7408         MOV     A,#0x8
   \   000002                REQUIRE ??Subroutine60_0
   \   000002                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    346          
    347          /*********************************************************************
    348           * @fn      setPageUse
    349           *
    350           * @brief   Set page header active/inUse state according to 'inUse'.
    351           *
    352           * @param   pg - Valid NV page to verify and init.
    353           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    354           *
    355           * @return  none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    358          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FF           MOV     R7,A
    359            osalNvPgHdr_t pgHdr;
    360          
    361            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    362          
    363            if ( inUse )
   \   000016   EF           MOV     A,R7
   \   000017   6008         JZ      ??setPageUse_0
    364            {
    365              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E4           CLR     A
   \   00001F   8007         SJMP    ??setPageUse_1
    366            }
    367            else
    368            {
    369              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   74FF         MOV     A,#-0x1
    370            }
   \                     ??setPageUse_1:
   \   000028   12....       LCALL   ??Subroutine56_0 & 0xFFFF
    371          
    372            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_97:
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ??writeWord?relay
    373          }
   \   000032   7408         MOV     A,#0x8
   \   000034                REQUIRE ?Subroutine1
   \   000034                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function writeWordH
   \   000001                ; Setup parameters for call to function writeWord
   \   000001                ; Setup parameters for call to function writeWord
   \   000001                ; Setup parameters for call to function writeWord
   \   000001                ; Setup parameters for call to function writeWord
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AC82         MOV     R4,DPL
   \   000009   AD83         MOV     R5,DPH
   \   00000B   22           RET
    374          
    375          /*********************************************************************
    376           * @fn      initPage
    377           *
    378           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    379           *
    380           * @param   pg - Valid NV page to verify and init.
    381           * @param   id - Valid NV item Id to use function as a "findItem".
    382           *               If set to NULL then just perform the page initialization.
    383           * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
    384           *                     left from a write that is interrupted by a reset/power-cycle.
    385           *                     FALSE otherwise.
    386           *
    387           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    388           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    391          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 4,R1
   \   00000C   8A..         MOV     ?V0 + 6,R2
   \   00000E   8B..         MOV     ?V0 + 7,R3
   \   000010   8C..         MOV     ?V0 + 5,R4
    392            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000012   75..08       MOV     ?V0 + 2,#0x8
   \   000015   75..00       MOV     ?V0 + 3,#0x0
    393            uint16 sz, lost = 0;
   \   000018   7E00         MOV     R6,#0x0
   \   00001A   7F00         MOV     R7,#0x0
    394            osalNvHdr_t hdr;
    395          
    396            do
    397            {
    398              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??initPage_0:
   \   00001C                ; Setup parameters for call to function HalFlashRead
   \   00001C   75..08       MOV     ?V0 + 0,#0x8
   \   00001F   75..00       MOV     ?V0 + 1,#0x0
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   AC82         MOV     R4,DPL
   \   00002E   AD83         MOV     R5,DPH
   \   000030   AA..         MOV     R2,?V0 + 2
   \   000032   AB..         MOV     R3,?V0 + 3
   \   000034   A9..         MOV     R1,?V0 + 4
   \   000036   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
    399          
    400              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F4           CPL     A
   \   000044   7003         JNZ     ??initPage_1
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F4           CPL     A
   \                     ??initPage_1:
   \   000049   7003         JNZ     $+5
   \   00004B   02....       LJMP    ??initPage_2 & 0xFFFF
    401              {
    402                break;
    403              }
    404          
    405              // Get the actual size in bytes which is the ceiling(hdr.len)
    406              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000056   4008         JC      ??initPage_3
   \   000058   75..FC       MOV     ?V0 + 0,#-0x4
   \   00005B   75..FF       MOV     ?V0 + 1,#-0x1
   \   00005E   800D         SJMP    ??initPage_4
   \                     ??initPage_3:
   \   000060   7402         MOV     A,#0x2
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000068   F5..         MOV     ?V0 + 0,A
   \   00006A   E9           MOV     A,R1
   \   00006B   F5..         MOV     ?V0 + 1,A
    407          
    408              // A bad 'len' write has blown away the rest of the page.
    409              if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
   \                     ??initPage_4:
   \   00006D   74F8         MOV     A,#-0x8
   \   00006F   C3           CLR     C
   \   000070   95..         SUBB    A,?V0 + 2
   \   000072   F8           MOV     R0,A
   \   000073   7407         MOV     A,#0x7
   \   000075   95..         SUBB    A,?V0 + 3
   \   000077   F9           MOV     R1,A
   \   000078   C3           CLR     C
   \   000079   E8           MOV     A,R0
   \   00007A   95..         SUBB    A,?V0 + 0
   \   00007C   E9           MOV     A,R1
   \   00007D   95..         SUBB    A,?V0 + 1
   \   00007F   501A         JNC     ??initPage_5
    410              {
    411                lost += (OSAL_NV_PAGE_SIZE - offset);
   \   000081   EE           MOV     A,R6
   \   000082   2400         ADD     A,#0x0
   \   000084   F8           MOV     R0,A
   \   000085   EF           MOV     A,R7
   \   000086   3408         ADDC    A,#0x8
   \   000088   F9           MOV     R1,A
   \   000089   E8           MOV     A,R0
   \   00008A   C3           CLR     C
   \   00008B   95..         SUBB    A,?V0 + 2
   \   00008D   FE           MOV     R6,A
   \   00008E   E9           MOV     A,R1
   \   00008F   95..         SUBB    A,?V0 + 3
   \   000091   FF           MOV     R7,A
    412                offset = OSAL_NV_PAGE_SIZE;
   \   000092   75..00       MOV     ?V0 + 2,#0x0
   \   000095   75..08       MOV     ?V0 + 3,#0x8
    413                break;
   \   000098   02....       LJMP    ??initPage_2 & 0xFFFF
    414              }
    415          
    416              offset += OSAL_NV_HDR_SIZE;
   \                     ??initPage_5:
   \   00009B   12....       LCALL   ?Subroutine34 & 0xFFFF
    417          
    418              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \                     ??CrossCallReturnLabel_55:
   \   00009E   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   0000A1   E8           MOV     A,R0
   \   0000A2   49           ORL     A,R1
   \   0000A3   7003         JNZ     $+5
   \   0000A5   02....       LJMP    ??initPage_6 & 0xFFFF
    419              {
    420                /* This trick allows function to do double duty for findItem() without
    421                 * compromising its essential functionality at powerup initialization.
    422                 */
    423                if ( id != OSAL_NV_ITEM_NULL )
   \   0000A8   E5..         MOV     A,?V0 + 6
   \   0000AA   45..         ORL     A,?V0 + 7
   \   0000AC   604A         JZ      ??initPage_7
    424                {
    425                  /* This trick allows asking to find the old/transferred item in case
    426                   * of a successful new item write that gets interrupted before the
    427                   * old item can be zeroed out.
    428                   */
    429                  if ( (id & 0x7fff) == hdr.id )
   \   0000AE   A8..         MOV     R0,?V0 + 6
   \   0000B0   E5..         MOV     A,?V0 + 7
   \   0000B2   547F         ANL     A,#0x7f
   \   0000B4   F9           MOV     R1,A
   \   0000B5   85..82       MOV     DPL,?XSP + 0
   \   0000B8   85..83       MOV     DPH,?XSP + 1
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   68           XRL     A,R0
   \   0000BD   7003         JNZ     ??initPage_8
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   69           XRL     A,R1
   \                     ??initPage_8:
   \   0000C2   6003         JZ      $+5
   \   0000C4   02....       LJMP    ??initPage_9 & 0xFFFF
    430                  {
    431                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    432                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
   \   0000C7   E5..         MOV     A,?V0 + 7
   \   0000C9   5480         ANL     A,#0x80
   \   0000CB   7013         JNZ     ??initPage_10
   \   0000CD   7406         MOV     A,#0x6
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F4           CPL     A
   \   0000D4   7003         JNZ     ??initPage_11
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F4           CPL     A
   \                     ??initPage_11:
   \   0000D9   6003         JZ      $+5
   \   0000DB   02....       LJMP    ??initPage_9 & 0xFFFF
   \   0000DE   8011         SJMP    ??initPage_12
   \                     ??initPage_10:
   \   0000E0   7406         MOV     A,#0x6
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F4           CPL     A
   \   0000E7   7003         JNZ     ??initPage_13
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F4           CPL     A
   \                     ??initPage_13:
   \   0000EC   7003         JNZ     $+5
   \   0000EE   02....       LJMP    ??initPage_9 & 0xFFFF
    433                    {
    434                      return offset;
   \                     ??initPage_12:
   \   0000F1   AA..         MOV     R2,?V0 + 2
   \   0000F3   AB..         MOV     R3,?V0 + 3
   \   0000F5   02....       LJMP    ??initPage_14 & 0xFFFF
    435                    }
    436                  }
    437                }
    438                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    439                else
    440                {
    441                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
   \                     ??initPage_7:
   \   0000F8                ; Setup parameters for call to function calcChkF
   \   0000F8   7402         MOV     A,#0x2
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000100   A9..         MOV     R1,?V0 + 4
   \   000102   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000105   7404         MOV     A,#0x4
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   68           XRL     A,R0
   \   00010C   7003         JNZ     ??initPage_15
   \   00010E   A3           INC     DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   69           XRL     A,R1
   \                     ??initPage_15:
   \   000111   7046         JNZ     ??initPage_16
    442                  {
    443                    if ( findDups )
   \   000113   E5..         MOV     A,?V0 + 5
   \   000115   602E         JZ      ??initPage_17
    444                    {
    445                      if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000117   7406         MOV     A,#0x6
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   F4           CPL     A
   \   00011E   7003         JNZ     ??initPage_18
   \   000120   A3           INC     DPTR
   \   000121   E0           MOVX    A,@DPTR
   \   000122   F4           CPL     A
   \                     ??initPage_18:
   \   000123   704F         JNZ     ??initPage_9
    446                      {
    447                        /* The trick of setting the MSB of the item Id causes the logic
    448                         * immediately above to return a valid page only if the header 'stat'
    449                         * indicates that it was the older item being transferred.
    450                         */
    451                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
   \   000125                ; Setup parameters for call to function findItem
   \   000125   85..82       MOV     DPL,?XSP + 0
   \   000128   85..83       MOV     DPH,?XSP + 1
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   FA           MOV     R2,A
   \   00012D   A3           INC     DPTR
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   4480         ORL     A,#0x80
   \   000131   FB           MOV     R3,A
   \   000132   12....       LCALL   ??findItem?relay
    452          
    453                        if ( off != OSAL_NV_ITEM_NULL )
   \   000135   EA           MOV     A,R2
   \   000136   4B           ORL     A,R3
   \   000137   603B         JZ      ??initPage_9
    454                        {
    455                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
   \   000139                ; Setup parameters for call to function setItem
   \   000139   7C01         MOV     R4,#0x1
   \   00013B   90....       MOV     DPTR,#findPg
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F9           MOV     R1,A
   \   000140   12....       LCALL   ??setItem?relay
   \   000143   802F         SJMP    ??initPage_9
    456                        }
    457                      }
    458                    }
    459                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    460                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
   \                     ??initPage_17:
   \   000145   7406         MOV     A,#0x6
   \   000147   12....       LCALL   ?XSTACK_DISP0_8
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   F4           CPL     A
   \   00014C   7003         JNZ     ??initPage_19
   \   00014E   A3           INC     DPTR
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   F4           CPL     A
   \                     ??initPage_19:
   \   000151   6021         JZ      ??initPage_9
    461                    {
    462                      return OSAL_NV_ERASED_ID;
   \   000153   7AFF         MOV     R2,#-0x1
   \   000155   7BFF         MOV     R3,#-0x1
   \   000157   804C         SJMP    ??initPage_14
    463                    }
    464                  }
    465                  else
    466                  {
    467                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
   \                     ??initPage_16:
   \   000159                ; Setup parameters for call to function setItem
   \   000159   7C01         MOV     R4,#0x1
   \   00015B   AA..         MOV     R2,?V0 + 2
   \   00015D   AB..         MOV     R3,?V0 + 3
   \   00015F   A9..         MOV     R1,?V0 + 4
   \   000161   12....       LCALL   ??setItem?relay
    468                    lost += (OSAL_NV_HDR_SIZE + sz);
    469                  }
    470                }
    471              }
    472              else
    473              {
    474                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_6:
   \   000164   E5..         MOV     A,?V0 + 0
   \   000166   2408         ADD     A,#0x8
   \   000168   F8           MOV     R0,A
   \   000169   E5..         MOV     A,?V0 + 1
   \   00016B   3400         ADDC    A,#0x0
   \   00016D   F9           MOV     R1,A
   \   00016E   EE           MOV     A,R6
   \   00016F   28           ADD     A,R0
   \   000170   FE           MOV     R6,A
   \   000171   EF           MOV     A,R7
   \   000172   39           ADDC    A,R1
   \   000173   FF           MOV     R7,A
    475              }
    476              offset += sz;
   \                     ??initPage_9:
   \   000174   E5..         MOV     A,?V0 + 2
   \   000176   25..         ADD     A,?V0 + 0
   \   000178   F5..         MOV     ?V0 + 2,A
   \   00017A   E5..         MOV     A,?V0 + 3
   \   00017C   35..         ADDC    A,?V0 + 1
   \   00017E   F5..         MOV     ?V0 + 3,A
    477          
    478            } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
   \   000180   C3           CLR     C
   \   000181   E5..         MOV     A,?V0 + 2
   \   000183   94F8         SUBB    A,#-0x8
   \   000185   E5..         MOV     A,?V0 + 3
   \   000187   9407         SUBB    A,#0x7
   \   000189   5003         JNC     $+5
   \   00018B   02....       LJMP    ??initPage_0 & 0xFFFF
    479          
    480            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_2:
   \   00018E   E5..         MOV     A,?V0 + 4
   \   000190   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000193   E5..         MOV     A,?V0 + 2
   \   000195   F0           MOVX    @DPTR,A
   \   000196   A3           INC     DPTR
   \   000197   E5..         MOV     A,?V0 + 3
   \   000199   12....       LCALL   ?Subroutine11 & 0xFFFF
    481            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_4:
   \   00019C   EE           MOV     A,R6
   \   00019D   F0           MOVX    @DPTR,A
   \   00019E   A3           INC     DPTR
   \   00019F   EF           MOV     A,R7
   \   0001A0   F0           MOVX    @DPTR,A
    482          
    483            return OSAL_NV_ITEM_NULL;
   \   0001A1   7A00         MOV     R2,#0x0
   \   0001A3   7B00         MOV     R3,#0x0
   \                     ??initPage_14:
   \   0001A5   7408         MOV     A,#0x8
   \   0001A7   80..         SJMP    ??Subroutine54_0
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine53_0
   \   000006                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0A         MOV     R7,#0xa
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   74..         MOV     A,#(pgLost + 14) & 0xff
   \   000003   28           ADD     A,R0
   \   000004   F582         MOV     DPL,A
   \   000006   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   000008   39           ADDC    A,R1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ??calcChkF?relay
   \   000003   8A..         MOV     ?V0 + 8,R2
   \   000005   8B..         MOV     ?V0 + 9,R3
   \   000007   A8..         MOV     R0,?V0 + 8
   \   000009   A9..         MOV     R1,?V0 + 9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   94FC         SUBB    A,#-0x4
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   94FF         SUBB    A,#-0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2403         ADD     A,#0x3
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   54FC         ANL     A,#0xfc
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   2408         ADD     A,#0x8
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   E5..         MOV     A,?V0 + 3
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   AA..         MOV     R2,?V0 + 2
   \   000005   AB..         MOV     R3,?V0 + 3
   \   000007   22           RET
    485          
    486          /*********************************************************************
    487           * @fn      erasePage
    488           *
    489           * @brief   Erases a page in Flash.
    490           *
    491           * @param   pg - Valid NV page to erase.
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void erasePage( uint8 pg )
   \                     erasePage:
    496          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    497            HalFlashErase(pg);
   \   000007                ; Setup parameters for call to function HalFlashErase
   \   000007   12....       LCALL   ??HalFlashErase?relay
    498          
    499            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00000A   EE           MOV     A,R6
   \   00000B   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00000E   7408         MOV     A,#0x8
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   E4           CLR     A
   \   000013   12....       LCALL   ?Subroutine11 & 0xFFFF
    500            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_5:
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
    501          }
   \   00001A   02....       LJMP    ??Subroutine52_0 & 0xFFFF
    502          
    503          /*********************************************************************
    504           * @fn      compactPage
    505           *
    506           * @brief   Compacts the page specified.
    507           *
    508           * @param   srcPg - Valid NV page to erase.
    509           * @param   skipId - Item Id to not compact.
    510           *
    511           * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
    512           *          FALSE otherwise.
    513           *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
    514           *          the risk of infinitely looping on HAL flash failure.
    515           *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
    516           *          All page compactions will fail which will cause all osal_nv_write() calls to return
    517           *          NV_OPER_FAILED.
    518           *          Eventually, all pages in use may also be in the state of "pending compaction" where
    519           *          the page header member OSAL_NV_PG_XFER is zeroed out.
    520           *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
    521           *          causes an actual chip brown-out, of course.) Although no new NV items will be created
    522           *          or written, the last value written with a return value of SUCCESS can continue to be
    523           *          read successfully.
    524           *          If eventually HAL flash starts working again, all of the pages marked as
    525           *          "pending compaction" may or may not be eventually compacted. But, initNV() will
    526           *          deterministically clean-up one page pending compaction per power-cycle
    527           *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
    528           *          through such a scenario.
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          static uint8 compactPage( uint8 srcPg, uint16 skipId )
   \                     compactPage:
    531          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
   \   00000C   8A..         MOV     ?V0 + 2,R2
   \   00000E   8B..         MOV     ?V0 + 3,R3
    532            uint16 srcOff;
    533            uint8 rtrn;
    534          
    535            // To minimize code size, only check for a clean page here where it's absolutely required.
    536            for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
   \   000010   7E00         MOV     R6,#0x0
   \   000012   7F00         MOV     R7,#0x0
    537            {
    538              HalFlashRead(pgRes, srcOff, &rtrn, 1);
   \                     ??compactPage_0:
   \   000014                ; Setup parameters for call to function HalFlashRead
   \   000014   75..01       MOV     ?V0 + 4,#0x1
   \   000017   75..00       MOV     ?V0 + 5,#0x0
   \   00001A   78..         MOV     R0,#?V0 + 4
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   AC82         MOV     R4,DPL
   \   000026   AD83         MOV     R5,DPH
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FB           MOV     R3,A
   \   00002C   90....       MOV     DPTR,#pgRes
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
    539              if (rtrn != OSAL_NV_ERASED)
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F4           CPL     A
   \   00003F   6008         JZ      ??compactPage_1
    540              {
    541                erasePage(pgRes);
   \   000041                ; Setup parameters for call to function erasePage
   \   000041   12....       LCALL   ?Subroutine26 & 0xFFFF
    542                return FALSE;
   \                     ??CrossCallReturnLabel_91:
   \   000044   7900         MOV     R1,#0x0
   \   000046   02....       LJMP    ??compactPage_2 & 0xFFFF
    543              }
    544            }
   \                     ??compactPage_1:
   \   000049   EE           MOV     A,R6
   \   00004A   2401         ADD     A,#0x1
   \   00004C   0E           INC     R6
   \   00004D   EF           MOV     A,R7
   \   00004E   3400         ADDC    A,#0x0
   \   000050   FF           MOV     R7,A
   \   000051   C3           CLR     C
   \   000052   9408         SUBB    A,#0x8
   \   000054   40BE         JC      ??compactPage_0
    545          
    546            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   000056   7E08         MOV     R6,#0x8
   \   000058   7F00         MOV     R7,#0x0
    547            rtrn = TRUE;
   \   00005A   7401         MOV     A,#0x1
   \   00005C   F0           MOVX    @DPTR,A
    548          
    549            while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
    550            {
    551              osalNvHdr_t hdr;
    552              uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \                     ??compactPage_3:
   \   00005D   90....       MOV     DPTR,#pgRes
   \   000060   E0           MOVX    A,@DPTR
   \   000061   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F5..         MOV     ?V0 + 4,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F5..         MOV     ?V0 + 5,A
    553          
    554              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00006B                ; Setup parameters for call to function HalFlashRead
   \   00006B   75..08       MOV     ?V0 + 6,#0x8
   \   00006E   75..00       MOV     ?V0 + 7,#0x0
   \   000071   78..         MOV     R0,#?V0 + 6
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   AC82         MOV     R4,DPL
   \   00007D   AD83         MOV     R5,DPH
   \   00007F   EE           MOV     A,R6
   \   000080   FA           MOV     R2,A
   \   000081   EF           MOV     A,R7
   \   000082   FB           MOV     R3,A
   \   000083   A9..         MOV     R1,?V0 + 0
   \   000085   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
    555          
    556              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00008B   7401         MOV     A,#0x1
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F4           CPL     A
   \   000092   7003         JNZ     ??compactPage_4
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F4           CPL     A
   \                     ??compactPage_4:
   \   000097   7003         JNZ     $+5
   \   000099   02....       LJMP    ??compactPage_5 & 0xFFFF
    557              {
    558                break;
    559              }
    560          
    561              // Get the actual size in bytes which is the ceiling(hdr.len)
    562              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   00009C   7403         MOV     A,#0x3
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A4   4008         JC      ??compactPage_6
   \   0000A6   75..FC       MOV     ?V0 + 6,#-0x4
   \   0000A9   75..FF       MOV     ?V0 + 7,#-0x1
   \   0000AC   800D         SJMP    ??compactPage_7
   \                     ??compactPage_6:
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000B6   F5..         MOV     ?V0 + 6,A
   \   0000B8   E9           MOV     A,R1
   \   0000B9   F5..         MOV     ?V0 + 7,A
    563          
    564              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
   \                     ??compactPage_7:
   \   0000BB   74F8         MOV     A,#-0x8
   \   0000BD   C3           CLR     C
   \   0000BE   9E           SUBB    A,R6
   \   0000BF   F8           MOV     R0,A
   \   0000C0   7407         MOV     A,#0x7
   \   0000C2   9F           SUBB    A,R7
   \   0000C3   F9           MOV     R1,A
   \   0000C4   C3           CLR     C
   \   0000C5   E8           MOV     A,R0
   \   0000C6   95..         SUBB    A,?V0 + 6
   \   0000C8   E9           MOV     A,R1
   \   0000C9   95..         SUBB    A,?V0 + 7
   \   0000CB   5003         JNC     $+5
   \   0000CD   02....       LJMP    ??compactPage_5 & 0xFFFF
    565              {
    566                break;
    567              }
    568          
    569              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
   \   0000D0   74F8         MOV     A,#-0x8
   \   0000D2   C3           CLR     C
   \   0000D3   95..         SUBB    A,?V0 + 4
   \   0000D5   F8           MOV     R0,A
   \   0000D6   7407         MOV     A,#0x7
   \   0000D8   95..         SUBB    A,?V0 + 5
   \   0000DA   F9           MOV     R1,A
   \   0000DB   C3           CLR     C
   \   0000DC   E8           MOV     A,R0
   \   0000DD   95..         SUBB    A,?V0 + 6
   \   0000DF   E9           MOV     A,R1
   \   0000E0   95..         SUBB    A,?V0 + 7
   \   0000E2   500B         JNC     ??compactPage_8
    570              {
    571                rtrn = FALSE;
   \                     ??compactPage_9:
   \   0000E4   85..82       MOV     DPL,?XSP + 0
   \   0000E7   85..83       MOV     DPH,?XSP + 1
   \   0000EA   E4           CLR     A
   \   0000EB   F0           MOVX    @DPTR,A
    572                break;
   \   0000EC   02....       LJMP    ??compactPage_10 & 0xFFFF
    573              }
    574          
    575              srcOff += OSAL_NV_HDR_SIZE;
   \                     ??compactPage_8:
   \   0000EF   EE           MOV     A,R6
   \   0000F0   2408         ADD     A,#0x8
   \   0000F2   FE           MOV     R6,A
   \   0000F3   EF           MOV     A,R7
   \   0000F4   3400         ADDC    A,#0x0
   \   0000F6   FF           MOV     R7,A
    576          
    577              if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
   \   0000F7   7401         MOV     A,#0x1
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0000FF   E8           MOV     A,R0
   \   000100   49           ORL     A,R1
   \   000101   7003         JNZ     $+5
   \   000103   02....       LJMP    ??compactPage_11 & 0xFFFF
   \   000106   7401         MOV     A,#0x1
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   65..         XRL     A,?V0 + 2
   \   00010E   7004         JNZ     ??compactPage_12
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   65..         XRL     A,?V0 + 3
   \                     ??compactPage_12:
   \   000114   7003         JNZ     $+5
   \   000116   02....       LJMP    ??compactPage_11 & 0xFFFF
    578              {
    579                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   000119                ; Setup parameters for call to function calcChkF
   \   000119   7403         MOV     A,#0x3
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000121   EE           MOV     A,R6
   \   000122   FA           MOV     R2,A
   \   000123   EF           MOV     A,R7
   \   000124   FB           MOV     R3,A
   \   000125   A9..         MOV     R1,?V0 + 0
   \   000127   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00012A   12....       LCALL   ?XSTACK_DISP0_8
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   68           XRL     A,R0
   \   00012F   7003         JNZ     ??compactPage_13
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   69           XRL     A,R1
   \                     ??compactPage_13:
   \   000134   6003         JZ      $+5
   \   000136   02....       LJMP    ??compactPage_11 & 0xFFFF
    580                {
    581                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
    582                   * OSAL_Nv interruptions caused by resets.
    583                   */
    584                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000139   7407         MOV     A,#0x7
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F4           CPL     A
   \   000140   7003         JNZ     ??compactPage_14
   \   000142   A3           INC     DPTR
   \   000143   E0           MOVX    A,@DPTR
   \   000144   F4           CPL     A
   \                     ??compactPage_14:
   \   000145   700B         JNZ     ??compactPage_15
    585                  {
    586                    setItem( srcPg, srcOff, eNvXfer );
   \   000147                ; Setup parameters for call to function setItem
   \   000147   7C00         MOV     R4,#0x0
   \   000149   EE           MOV     A,R6
   \   00014A   FA           MOV     R2,A
   \   00014B   EF           MOV     A,R7
   \   00014C   FB           MOV     R3,A
   \   00014D   A9..         MOV     R1,?V0 + 0
   \   00014F   12....       LCALL   ??setItem?relay
    587                  }
    588          
    589                  if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
   \                     ??compactPage_15:
   \   000152                ; Setup parameters for call to function writeItem
   \   000152   75..00       MOV     ?V0 + 1,#0x0
   \   000155   78..         MOV     R0,#?V0 + 1
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015A   E4           CLR     A
   \   00015B   F5..         MOV     ?V0 + 8,A
   \   00015D   F5..         MOV     ?V0 + 9,A
   \   00015F   78..         MOV     R0,#?V0 + 8
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000164   7406         MOV     A,#0x6
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00016C   7404         MOV     A,#0x4
   \   00016E   12....       LCALL   ?XSTACK_DISP0_8
   \   000171   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000174   90....       MOV     DPTR,#pgRes
   \   000177   E0           MOVX    A,@DPTR
   \   000178   F9           MOV     R1,A
   \   000179   12....       LCALL   ??writeItem?relay
   \   00017C   7403         MOV     A,#0x3
   \   00017E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000181   E9           MOV     A,R1
   \   000182   7003         JNZ     $+5
   \   000184   02....       LJMP    ??compactPage_9 & 0xFFFF
    590                  {
    591                    dstOff += OSAL_NV_HDR_SIZE;
   \   000187   E5..         MOV     A,?V0 + 4
   \   000189   2408         ADD     A,#0x8
   \   00018B   F5..         MOV     ?V0 + 4,A
   \   00018D   E5..         MOV     A,?V0 + 5
   \   00018F   3400         ADDC    A,#0x0
   \   000191   F5..         MOV     ?V0 + 5,A
    592                    xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \   000193                ; Setup parameters for call to function xferBuf
   \   000193   78..         MOV     R0,#?V0 + 6
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000198   78..         MOV     R0,#?V0 + 4
   \   00019A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019D   90....       MOV     DPTR,#pgRes
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   FC           MOV     R4,A
   \   0001A2   EE           MOV     A,R6
   \   0001A3   FA           MOV     R2,A
   \   0001A4   EF           MOV     A,R7
   \   0001A5   FB           MOV     R3,A
   \   0001A6   A9..         MOV     R1,?V0 + 0
   \   0001A8   12....       LCALL   ??xferBuf?relay
   \   0001AB   7404         MOV     A,#0x4
   \   0001AD   12....       LCALL   ?DEALLOC_XSTACK8
    593                    // Calculate and write the new checksum.
    594                    if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
   \   0001B0                ; Setup parameters for call to function calcChkF
   \   0001B0   7403         MOV     A,#0x3
   \   0001B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B5   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001B8   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   68           XRL     A,R0
   \   0001C0   7003         JNZ     ??compactPage_16
   \   0001C2   A3           INC     DPTR
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   69           XRL     A,R1
   \                     ??compactPage_16:
   \   0001C5   6003         JZ      $+5
   \   0001C7   02....       LJMP    ??compactPage_9 & 0xFFFF
    595                    {
    596                      if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
   \   0001CA                ; Setup parameters for call to function setChk
   \   0001CA   7405         MOV     A,#0x5
   \   0001CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CF   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0001D2   12....       LCALL   ??setChk?relay
   \   0001D5   8A..         MOV     ?V0 + 8,R2
   \   0001D7   8B..         MOV     ?V0 + 9,R3
   \   0001D9   A8..         MOV     R0,?V0 + 8
   \   0001DB   A9..         MOV     R1,?V0 + 9
   \   0001DD   7405         MOV     A,#0x5
   \   0001DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   68           XRL     A,R0
   \   0001E4   7003         JNZ     ??compactPage_17
   \   0001E6   A3           INC     DPTR
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   69           XRL     A,R1
   \                     ??compactPage_17:
   \   0001E9   6003         JZ      $+5
   \   0001EB   02....       LJMP    ??compactPage_9 & 0xFFFF
    597                      {
    598                        rtrn = FALSE;
    599                        break;
    600                      }
    601                      else
    602                      {
    603                        hotItemUpdate(pgRes, dstOff, hdr.id);
   \   0001EE                ; Setup parameters for call to function hotItemUpdate
   \   0001EE   7401         MOV     A,#0x1
   \   0001F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F3   12....       LCALL   ?Subroutine14 & 0xFFFF
    604                      }
    605                    }
    606                    else
    607                    {
    608                      rtrn = FALSE;
    609                      break;
    610                    }
    611                  }
    612                  else
    613                  {
    614                    rtrn = FALSE;
    615                    break;
    616                  }
    617                }
    618              }
   \                     ??CrossCallReturnLabel_13:
   \   0001F6   12....       LCALL   ??hotItemUpdate?relay
    619          
    620              srcOff += sz;
   \                     ??compactPage_11:
   \   0001F9   EE           MOV     A,R6
   \   0001FA   25..         ADD     A,?V0 + 6
   \   0001FC   FE           MOV     R6,A
   \   0001FD   EF           MOV     A,R7
   \   0001FE   35..         ADDC    A,?V0 + 7
   \   000200   FF           MOV     R7,A
    621            }
   \   000201   C3           CLR     C
   \   000202   EE           MOV     A,R6
   \   000203   94F8         SUBB    A,#-0x8
   \   000205   EF           MOV     A,R7
   \   000206   9407         SUBB    A,#0x7
   \   000208   5003         JNC     $+5
   \   00020A   02....       LJMP    ??compactPage_3 & 0xFFFF
    622          
    623            if (rtrn == FALSE)
   \                     ??compactPage_5:
   \   00020D   85..82       MOV     DPL,?XSP + 0
   \   000210   85..83       MOV     DPH,?XSP + 1
   \   000213   E0           MOVX    A,@DPTR
   \   000214   7005         JNZ     ??compactPage_18
    624            {
    625              erasePage(pgRes);
   \                     ??compactPage_10:
   \   000216                ; Setup parameters for call to function erasePage
   \   000216   12....       LCALL   ?Subroutine26 & 0xFFFF
    626            }
   \                     ??CrossCallReturnLabel_92:
   \   000219   8014         SJMP    ??compactPage_19
    627            else if (skipId == OSAL_NV_ITEM_NULL)
   \                     ??compactPage_18:
   \   00021B   E5..         MOV     A,?V0 + 2
   \   00021D   45..         ORL     A,?V0 + 3
   \   00021F   700E         JNZ     ??compactPage_19
    628            {
    629              COMPACT_PAGE_CLEANUP(srcPg);
   \   000221                ; Setup parameters for call to function setPageUse
   \   000221   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000224                ; Setup parameters for call to function erasePage
   \   000224   A9..         MOV     R1,?V0 + 0
   \   000226   12....       LCALL   ??erasePage?relay
   \   000229   E5..         MOV     A,?V0 + 0
   \   00022B   90....       MOV     DPTR,#pgRes
   \   00022E   F0           MOVX    @DPTR,A
    630            }
    631            // else invoking function must cleanup.
    632          
    633            return rtrn;
   \                     ??compactPage_19:
   \   00022F   85..82       MOV     DPL,?XSP + 0
   \   000232   85..83       MOV     DPH,?XSP + 1
   \   000235   E0           MOVX    A,@DPTR
   \   000236   F9           MOV     R1,A
   \                     ??compactPage_2:
   \   000237   7409         MOV     A,#0x9
   \   000239   02....       LJMP    ??Subroutine54_0 & 0xFFFF
    634          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   7405         MOV     A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV     DPTR,#pgRes
   \   000003                REQUIRE ??Subroutine55_0
   \   000003                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??erasePage?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   AA..         MOV     R2,?V0 + 4
   \   000005   AB..         MOV     R3,?V0 + 5
   \   000007   90....       MOV     DPTR,#pgRes
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   7A01         MOV     R2,#0x1
   \   000002   90....       MOV     DPTR,#pgRes
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??setPageUse?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    635          
    636          /*********************************************************************
    637           * @fn      findItem
    638           *
    639           * @brief   Find an item Id in NV and return the page and offset to its data.
    640           *
    641           * @param   id - Valid NV item Id.
    642           *
    643           * @return  Offset of data corresponding to item Id, if found;
    644           *          otherwise OSAL_NV_ITEM_NULL.
    645           *
    646           *          The page containing the item, if found;
    647           *          otherwise no valid assignment made - left equal to item Id.
    648           *
    649           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          static uint16 findItem( uint16 id )
   \                     findItem:
    651          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   8003         SJMP    ??findItem_0
    652            uint16 off;
    653            uint8 pg;
    654          
    655            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    656            {
    657              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    658              {
    659                findPg = pg;
    660                return off;
    661              }
    662            }
    663          
    664            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    665            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    666            {
    667              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV     A,#-0x80
   \   00000C   4F           ORL     A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV     R7,A
    668            }
   \   00000E   75..79       MOV     ?V0 + 0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV     R4,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   A9..         MOV     R1,?V0 + 0
   \   000019   12....       LCALL   ??initPage?relay
   \   00001C   8B..         MOV     ?V0 + 3,R3
   \   00001E   A9..         MOV     R1,?V0 + 3
   \   000020   EA           MOV     A,R2
   \   000021   49           ORL     A,R1
   \   000022   6008         JZ      ??findItem_3
   \   000024   E5..         MOV     A,?V0 + 0
   \   000026   90....       MOV     DPTR,#findPg
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   8015         SJMP    ??findItem_4
   \                     ??findItem_3:
   \   00002C   05..         INC     ?V0 + 0
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   C3           CLR     C
   \   000031   947F         SUBB    A,#0x7f
   \   000033   40DC         JC      ??findItem_2
   \   000035   EF           MOV     A,R7
   \   000036   5480         ANL     A,#0x80
   \   000038   60D0         JZ      ??findItem_1
    669            else
    670            {
    671              findPg = OSAL_NV_PAGE_NULL;
   \   00003A   90....       MOV     DPTR,#findPg
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
    672              return OSAL_NV_ITEM_NULL;
   \   00003F   FA           MOV     R2,A
   \   000040   FB           MOV     R3,A
    673            }
   \                     ??findItem_4:
   \   000041   02....       LJMP    ??Subroutine61_0 & 0xFFFF
    674          }
    675          
    676          /*********************************************************************
    677           * @fn      initItem
    678           *
    679           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    680           *
    681           * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
    682           *                 (i.e. if invoked from osal_nv_item_init() ).
    683           *                 FALSE if writeItem() should just write the header and the 'buf' parameter
    684           *                 is ok to use as a return value of the page number to be cleaned with
    685           *                 COMPACT_PAGE_CLEANUP().
    686           *                 (i.e. if invoked from osal_nv_write() ).
    687           * @param   id  - Valid NV item Id.
    688           * @param   len - Item data length.
    689           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    690           *
    691           * @return  The OSAL Nv page number if item write and read back checksums ok;
    692           *          OSAL_NV_PAGE_NULL otherwise.
    693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    695          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   8A..         MOV     ?V0 + 4,R2
   \   00000E   8B..         MOV     ?V0 + 5,R3
   \   000010   8C..         MOV     ?V0 + 0,R4
   \   000012   8D..         MOV     ?V0 + 1,R5
   \   000014   741C         MOV     A,#0x1c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine22 & 0xFFFF
    696            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \                     ??CrossCallReturnLabel_32:
   \   00001C   C3           CLR     C
   \   00001D   EC           MOV     A,R4
   \   00001E   94F4         SUBB    A,#-0xc
   \   000020   ED           MOV     A,R5
   \   000021   94FF         SUBB    A,#-0x1
   \   000023   400E         JC      ??initItem_0
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   74FC         MOV     A,#-0x4
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   74FF         MOV     A,#-0x1
   \   000031   801C         SJMP    ??initItem_1
   \                     ??initItem_0:
   \   000033   EC           MOV     A,R4
   \   000034   2403         ADD     A,#0x3
   \   000036   F8           MOV     R0,A
   \   000037   ED           MOV     A,R5
   \   000038   3400         ADDC    A,#0x0
   \   00003A   F9           MOV     R1,A
   \   00003B   E8           MOV     A,R0
   \   00003C   54FC         ANL     A,#0xfc
   \   00003E   2408         ADD     A,#0x8
   \   000040   F8           MOV     R0,A
   \   000041   E9           MOV     A,R1
   \   000042   3400         ADDC    A,#0x0
   \   000044   F9           MOV     R1,A
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   E8           MOV     A,R0
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   E9           MOV     A,R1
   \                     ??initItem_1:
   \   00004F   F0           MOVX    @DPTR,A
    697            uint8 rtrn = OSAL_NV_PAGE_NULL;
   \   000050   7F00         MOV     R7,#0x0
    698            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000052   7C06         MOV     R4,#0x6
    699            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   000054   90....       MOV     DPTR,#pgRes
   \   000057   E0           MOVX    A,@DPTR
   \   000058   04           INC     A
   \   000059   FE           MOV     R6,A
    700          
    701            do {
    702              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_2:
   \   00005A   EE           MOV     A,R6
   \   00005B   C3           CLR     C
   \   00005C   947F         SUBB    A,#0x7f
   \   00005E   4002         JC      ??initItem_3
    703              {
    704                pg = OSAL_NV_PAGE_BEG;
   \   000060   7E79         MOV     R6,#0x79
    705              }
    706              if ( pg != pgRes )
   \                     ??initItem_3:
   \   000062   90....       MOV     DPTR,#pgRes
   \   000065   E0           MOVX    A,@DPTR
   \   000066   6E           XRL     A,R6
   \   000067   602B         JZ      ??initItem_4
    707              {
    708                uint8 idx = pg - OSAL_NV_PAGE_BEG;
   \   000069   7487         MOV     A,#-0x79
   \   00006B   2E           ADD     A,R6
    709                if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
   \   00006C   C3           CLR     C
   \   00006D   33           RLC     A
   \   00006E   F8           MOV     R0,A
   \   00006F   E4           CLR     A
   \   000070   33           RLC     A
   \   000071   F9           MOV     R1,A
   \   000072   74..         MOV     A,#pgOff & 0xff
   \   000074   28           ADD     A,R0
   \   000075   F582         MOV     DPL,A
   \   000077   74..         MOV     A,#(pgOff >> 8) & 0xff
   \   000079   39           ADDC    A,R1
   \   00007A   F583         MOV     DPH,A
   \   00007C   12....       LCALL   ?Subroutine21 & 0xFFFF
    710                {
    711                  break;
    712                }
    713              }
   \                     ??CrossCallReturnLabel_27:
   \   00007F   E4           CLR     A
   \   000080   C3           CLR     C
   \   000081   9A           SUBB    A,R2
   \   000082   FA           MOV     R2,A
   \   000083   7408         MOV     A,#0x8
   \   000085   9B           SUBB    A,R3
   \   000086   FB           MOV     R3,A
   \   000087   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00008A   2A           ADD     A,R2
   \   00008B   FA           MOV     R2,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   3B           ADDC    A,R3
   \   00008F   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000092   5008         JNC     ??initItem_5
    714              pg++;
   \                     ??initItem_4:
   \   000094   0E           INC     R6
    715            } while (--cnt);
   \   000095   1C           DEC     R4
   \   000096   EC           MOV     A,R4
   \   000097   70C1         JNZ     ??initItem_2
   \   000099   02....       LJMP    ??initItem_6 & 0xFFFF
    716          
    717            if (cnt)
   \                     ??initItem_5:
   \   00009C   EC           MOV     A,R4
   \   00009D   7003         JNZ     $+5
   \   00009F   02....       LJMP    ??initItem_6 & 0xFFFF
    718            {
    719              // Item fits if an old page is compacted.
    720              if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
   \   0000A2   EE           MOV     A,R6
   \   0000A3   12....       LCALL   ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000A6   FA           MOV     R2,A
   \   0000A7   7408         MOV     A,#0x8
   \   0000A9   99           SUBB    A,R1
   \   0000AA   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000AD   4003         JC      $+5
   \   0000AF   02....       LJMP    ??initItem_7 & 0xFFFF
    721              {
    722                osalNvPgHdr_t pgHdr;
    723          
    724                /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
    725                 * OSAL_Nv interruptions caused by resets.
    726                 */
    727                HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
   \   0000B2                ; Setup parameters for call to function HalFlashRead
   \   0000B2   75..08       MOV     ?V0 + 8,#0x8
   \   0000B5   8F..         MOV     ?V0 + 9,R7
   \   0000B7   78..         MOV     R0,#?V0 + 8
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BC   7404         MOV     A,#0x4
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   AC82         MOV     R4,DPL
   \   0000C3   AD83         MOV     R5,DPH
   \   0000C5   7A00         MOV     R2,#0x0
   \   0000C7   7B00         MOV     R3,#0x0
   \   0000C9   EE           MOV     A,R6
   \   0000CA   F9           MOV     R1,A
   \   0000CB   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
    728                if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
   \   0000D1   7406         MOV     A,#0x6
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F4           CPL     A
   \   0000D8   7003         JNZ     ??initItem_8
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F4           CPL     A
   \                     ??initItem_8:
   \   0000DD   700B         JNZ     ??initItem_9
    729                {
    730                  // Mark the old page as being in process of compaction.
    731                  sz = OSAL_NV_ZEROED_ID;
   \   0000DF   12....       LCALL   ?Subroutine8 & 0xFFFF
    732                  writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
    733                }
   \                     ??CrossCallReturnLabel_95:
   \   0000E2   7A04         MOV     R2,#0x4
   \   0000E4   FB           MOV     R3,A
   \   0000E5   EE           MOV     A,R6
   \   0000E6   F9           MOV     R1,A
   \   0000E7   12....       LCALL   ??writeWordH?relay
    734          
    735                /* First the old page is compacted, then the new item will be the last one written to what
    736                 * had been the reserved page.
    737                 */
    738                if (compactPage( pg, id ))
   \                     ??initItem_9:
   \   0000EA                ; Setup parameters for call to function compactPage
   \   0000EA   AA..         MOV     R2,?V0 + 4
   \   0000EC   AB..         MOV     R3,?V0 + 5
   \   0000EE   EE           MOV     A,R6
   \   0000EF   F9           MOV     R1,A
   \   0000F0   12....       LCALL   ??compactPage?relay
   \   0000F3   E9           MOV     A,R1
   \   0000F4   606A         JZ      ??initItem_6
    739                {
    740                  if ( writeItem( pgRes, id, len, buf, flag ) )
   \   0000F6                ; Setup parameters for call to function writeItem
   \   0000F6   E5..         MOV     A,?V0 + 2
   \   0000F8   F5..         MOV     ?V0 + 3,A
   \   0000FA   78..         MOV     R0,#?V0 + 3
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FF   78..         MOV     R0,#?V0 + 6
   \   000101   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000104   AC..         MOV     R4,?V0 + 0
   \   000106   AD..         MOV     R5,?V0 + 1
   \   000108   AA..         MOV     R2,?V0 + 4
   \   00010A   AB..         MOV     R3,?V0 + 5
   \   00010C   90....       MOV     DPTR,#pgRes
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   F9           MOV     R1,A
   \   000111   12....       LCALL   ??writeItem?relay
   \   000114   7403         MOV     A,#0x3
   \   000116   12....       LCALL   ?DEALLOC_XSTACK8
   \   000119   E9           MOV     A,R1
   \   00011A   6005         JZ      ??initItem_10
    741                  {
    742                    rtrn = pgRes;
   \   00011C   90....       MOV     DPTR,#pgRes
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   FF           MOV     R7,A
    743                  }
    744          
    745                  if ( flag == FALSE )
   \                     ??initItem_10:
   \   000121   E5..         MOV     A,?V0 + 2
   \   000123   700A         JNZ     ??initItem_11
    746                  {
    747                    /* Overload 'buf' as an OUT parameter to pass back to the calling function
    748                     * the old page to be cleaned up.
    749                     */
    750                    *(uint8 *)buf = pg;
   \   000125   EE           MOV     A,R6
   \   000126   85..82       MOV     DPL,?V0 + 6
   \   000129   85..83       MOV     DPH,?V0 + 7
   \                     ??initItem_12:
   \   00012C   F0           MOVX    @DPTR,A
   \   00012D   8031         SJMP    ??initItem_6
    751                  }
    752                  else
    753                  {
    754                    /* Safe to do the compacted page cleanup even if writeItem() above failed because the
    755                     * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
    756                     */
    757                    COMPACT_PAGE_CLEANUP( pg );
   \                     ??initItem_11:
   \   00012F                ; Setup parameters for call to function setPageUse
   \   00012F   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000132                ; Setup parameters for call to function erasePage
   \   000132   EE           MOV     A,R6
   \   000133   F9           MOV     R1,A
   \   000134   12....       LCALL   ??erasePage?relay
   \   000137   EE           MOV     A,R6
   \   000138   90....       MOV     DPTR,#pgRes
   \   00013B   80EF         SJMP    ??initItem_12
    758                  }
    759                }
    760              }
    761              else
    762              {
    763                if ( writeItem( pg, id, len, buf, flag ) )
   \                     ??initItem_7:
   \   00013D                ; Setup parameters for call to function writeItem
   \   00013D   E5..         MOV     A,?V0 + 2
   \   00013F   F5..         MOV     ?V0 + 3,A
   \   000141   78..         MOV     R0,#?V0 + 3
   \   000143   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000146   78..         MOV     R0,#?V0 + 6
   \   000148   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014B   AC..         MOV     R4,?V0 + 0
   \   00014D   AA..         MOV     R2,?V0 + 4
   \   00014F   AB..         MOV     R3,?V0 + 5
   \   000151   EE           MOV     A,R6
   \   000152   F9           MOV     R1,A
   \   000153   12....       LCALL   ??writeItem?relay
   \   000156   7403         MOV     A,#0x3
   \   000158   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015B   E9           MOV     A,R1
   \   00015C   6002         JZ      ??initItem_6
    764                {
    765                  rtrn = pg;
   \   00015E   EE           MOV     A,R6
   \   00015F   FF           MOV     R7,A
    766                }
    767              }
    768            }
    769          
    770            return rtrn;
   \                     ??initItem_6:
   \   000160   EF           MOV     A,R7
   \   000161   F9           MOV     R1,A
   \   000162   740A         MOV     A,#0xa
   \   000164   02....       LJMP    ??Subroutine54_0 & 0xFFFF
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000004   C3           CLR     C
   \   000005   EA           MOV     A,R2
   \   000006   98           SUBB    A,R0
   \   000007   EB           MOV     A,R3
   \   000008   99           SUBB    A,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007                REQUIRE ??Subroutine56_0
   \   000007                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 6,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000006   E4           CLR     A
   \   000007   C3           CLR     C
   \   000008   98           SUBB    A,R0
   \   000009   22           RET
    772          
    773          /*********************************************************************
    774           * @fn      setItem
    775           *
    776           * @brief   Set an item Id or status to mark its state.
    777           *
    778           * @param   pg - Valid NV page.
    779           * @param   offset - Valid offset into the page of the item data - the header
    780           *                   offset is calculated from this.
    781           * @param   stat - Valid enum value for the item status.
    782           *
    783           * @return  none
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    786          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 1,R1
   \   00000C   8C..         MOV     ?V0 + 0,R4
    787            osalNvHdr_t hdr;
    788          
    789            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV     A,R2
   \   00000F   24F8         ADD     A,#-0x8
   \   000011   F5..         MOV     ?V0 + 2,A
   \   000013   EB           MOV     A,R3
   \   000014   34FF         ADDC    A,#-0x1
   \   000016   F5..         MOV     ?V0 + 3,A
    790            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV     ?V0 + 4,#0x8
   \   00001B   75..00       MOV     ?V0 + 5,#0x0
   \   00001E   78..         MOV     R0,#?V0 + 4
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   AC82         MOV     R4,DPL
   \   00002A   AD83         MOV     R5,DPH
   \   00002C   AA..         MOV     R2,?V0 + 2
   \   00002E   AB..         MOV     R3,?V0 + 3
   \   000030   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
    791          
    792            if ( stat == eNvXfer )
   \   000036   E5..         MOV     A,?V0 + 0
   \   000038   7023         JNZ     ??setItem_0
    793            {
    794              hdr.stat = OSAL_NV_ACTIVE;
   \   00003A   7406         MOV     A,#0x6
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
    795              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   000043                ; Setup parameters for call to function writeWord
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   AC82         MOV     R4,DPL
   \   00004A   AD83         MOV     R5,DPH
   \   00004C   E5..         MOV     A,?V0 + 2
   \   00004E   2404         ADD     A,#0x4
   \   000050   FA           MOV     R2,A
   \   000051   E5..         MOV     A,?V0 + 3
   \   000053   3400         ADDC    A,#0x0
   \   000055   FB           MOV     R3,A
   \   000056   A9..         MOV     R1,?V0 + 1
   \   000058   12....       LCALL   ??writeWord?relay
   \   00005B   8019         SJMP    ??CrossCallReturnLabel_101
    796            }
    797            else // if ( stat == eNvZero )
    798            {
    799              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    800                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   12....       LCALL   ?Subroutine13 & 0xFFFF
    801              hdr.id = 0;
   \                     ??CrossCallReturnLabel_8:
   \   000065   12....       LCALL   ?Subroutine8 & 0xFFFF
    802              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_96:
   \   000068   AA..         MOV     R2,?V0 + 2
   \   00006A   AB..         MOV     R3,?V0 + 3
   \   00006C   A9..         MOV     R1,?V0 + 1
   \   00006E   12....       LCALL   ??writeWord?relay
    803              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   000071   E5..         MOV     A,?V0 + 1
   \   000073   12....       LCALL   ?Subroutine23 & 0xFFFF
    804            }
    805          }
   \                     ??CrossCallReturnLabel_101:
   \   000076   7408         MOV     A,#0x8
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B                REQUIRE ?Subroutine3
   \   00007B                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#(pgLost + 14) & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   00000D                REQUIRE ??Subroutine57_0
   \   00000D                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   2408         ADD     A,#0x8
   \   000005   FE           MOV     R6,A
   \   000006   E9           MOV     A,R1
   \   000007   3400         ADDC    A,#0x0
   \   000009   FF           MOV     R7,A
   \   00000A   22           RET
    806          
    807          /*********************************************************************
    808           * @fn      setChk
    809           *
    810           * @brief   Set the item header checksum given the data buffer offset.
    811           *
    812           * @param   pg - Valid NV page.
    813           * @param   offset - Valid offset into the page of the item data - the header
    814           *                   offset is calculated from this.
    815           * @param   chk - The checksum to set.
    816           *
    817           * @return  The checksum read back.
    818           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    819          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
   \                     setChk:
    820          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0 + 0,R1
   \   000017   EA           MOV     A,R2
   \   000018   FE           MOV     R6,A
   \   000019   EB           MOV     A,R3
   \   00001A   FF           MOV     R7,A
    821            offset -= OSAL_NV_WORD_SIZE;
   \   00001B   EE           MOV     A,R6
   \   00001C   24FC         ADD     A,#-0x4
   \   00001E   FE           MOV     R6,A
   \   00001F   EF           MOV     A,R7
   \   000020   34FF         ADDC    A,#-0x1
   \   000022   FF           MOV     R7,A
    822            writeWordH( pg, offset, (uint8 *)&chk );
   \   000023                ; Setup parameters for call to function writeWordH
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   AC82         MOV     R4,DPL
   \   00002B   AD83         MOV     R5,DPH
   \   00002D   EE           MOV     A,R6
   \   00002E   FA           MOV     R2,A
   \   00002F   EF           MOV     A,R7
   \   000030   FB           MOV     R3,A
   \   000031   12....       LCALL   ??writeWordH?relay
    823            HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
   \   000034                ; Setup parameters for call to function HalFlashRead
   \   000034   75..02       MOV     ?V0 + 2,#0x2
   \   000037   75..00       MOV     ?V0 + 3,#0x0
   \   00003A   78..         MOV     R0,#?V0 + 2
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   AC82         MOV     R4,DPL
   \   000046   AD83         MOV     R5,DPH
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   A9..         MOV     R1,?V0 + 0
   \   00004E   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
    824          
    825            return chk;
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00005D                REQUIRE ?Subroutine6
   \   00005D                ; // Fall through to label ?Subroutine6
    826          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine60_0 & 0xFFFF
    827          
    828          /*********************************************************************
    829           * @fn      calcChkB
    830           *
    831           * @brief   Calculates the data checksum over the 'buf' parameter.
    832           *
    833           * @param   len - Byte count of the data to be checksummed.
    834           * @param   buf - Data buffer to be checksummed.
    835           *
    836           * @return  Calculated checksum of the data bytes.
    837           */
    838          static uint16 calcChkB( uint16 len, uint8 *buf )
    839          {
    840            uint8 fill = len % OSAL_NV_WORD_SIZE;
    841            uint16 chk;
    842          
    843            if ( !buf )
    844            {
    845              chk = len * OSAL_NV_ERASED;
    846            }
    847            else
    848            {
    849              chk = 0;
    850              while ( len-- )
    851              {
    852                chk += *buf++;
    853              }
    854            }
    855          
    856            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    857            if ( fill )
    858            {
    859              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    860            }
    861          
    862            return chk;
    863          }
    864          
    865          /*********************************************************************
    866           * @fn      calcChkF
    867           *
    868           * @brief   Calculates the data checksum by reading the data bytes from NV.
    869           *
    870           * @param   pg - A valid NV Flash page.
    871           * @param   offset - A valid offset into the page.
    872           * @param   len - Byte count of the data to be checksummed.
    873           *
    874           * @return  Calculated checksum of the data bytes.
    875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
   \                     calcChkF:
    877          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 4,R1
   \   00000C   8A..         MOV     ?V0 + 2,R2
   \   00000E   8B..         MOV     ?V0 + 3,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
    878            uint16 chk = 0;
   \   000014   75..00       MOV     ?V0 + 0,#0x0
   \   000017   75..00       MOV     ?V0 + 1,#0x0
    879          
    880            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   00001A   EE           MOV     A,R6
   \   00001B   2403         ADD     A,#0x3
   \   00001D   F5..         MOV     ?V0 + 6,A
   \   00001F   EF           MOV     A,R7
   \   000020   3400         ADDC    A,#0x0
   \   000022   F5..         MOV     ?V0 + 7,A
   \   000024   7402         MOV     A,#0x2
   \   000026   78..         MOV     R0,#?V0 + 6
   \   000028   12....       LCALL   ?US_SHR
   \   00002B   AE..         MOV     R6,?V0 + 6
   \   00002D   AF..         MOV     R7,?V0 + 7
    881          
    882            while ( len-- )
   \                     ??calcChkF_0:
   \   00002F   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000032   6049         JZ      ??calcChkF_1
    883            {
    884              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    885          
    886              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   000034                ; Setup parameters for call to function HalFlashRead
   \   000034   75..04       MOV     ?V0 + 6,#0x4
   \   000037   75..00       MOV     ?V0 + 7,#0x0
   \   00003A   78..         MOV     R0,#?V0 + 6
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   AC82         MOV     R4,DPL
   \   000046   AD83         MOV     R5,DPH
   \   000048   AA..         MOV     R2,?V0 + 2
   \   00004A   AB..         MOV     R3,?V0 + 3
   \   00004C   A9..         MOV     R1,?V0 + 4
   \   00004E   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
    887              offset += OSAL_NV_WORD_SIZE;
   \   000054   E5..         MOV     A,?V0 + 2
   \   000056   2404         ADD     A,#0x4
   \   000058   F5..         MOV     ?V0 + 2,A
   \   00005A   E5..         MOV     A,?V0 + 3
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   F5..         MOV     ?V0 + 3,A
    888          
    889              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \   000060   7800         MOV     R0,#0x0
    890              {
    891                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   000062   88..         MOV     ?V0 + 6,R0
   \   000064   12....       LCALL   ?Subroutine38 & 0xFFFF
    892              }
   \                     ??CrossCallReturnLabel_63:
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FA           MOV     R2,A
   \   000069   E5..         MOV     A,?V0 + 0
   \   00006B   2A           ADD     A,R2
   \   00006C   F5..         MOV     ?V0 + 0,A
   \   00006E   E5..         MOV     A,?V0 + 1
   \   000070   3400         ADDC    A,#0x0
   \   000072   F5..         MOV     ?V0 + 1,A
   \   000074   08           INC     R0
   \   000075   E8           MOV     A,R0
   \   000076   C3           CLR     C
   \   000077   9404         SUBB    A,#0x4
   \   000079   50B4         JNC     ??calcChkF_0
   \   00007B   80E5         SJMP    ??calcChkF_2
    893            }
    894          
    895            return chk;
   \                     ??calcChkF_1:
   \   00007D   AA..         MOV     R2,?V0 + 0
   \   00007F   AB..         MOV     R3,?V0 + 1
   \   000081   7404         MOV     A,#0x4
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
   \   000086                REQUIRE ?Subroutine4
   \   000086                ; // Fall through to label ?Subroutine4
    896          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 6
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EE           MOV     A,R6
   \   000001   F8           MOV     R0,A
   \   000002   EF           MOV     A,R7
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   24FF         ADD     A,#-0x1
   \   000007   1E           DEC     R6
   \   000008   E9           MOV     A,R1
   \   000009   34FF         ADDC    A,#-0x1
   \   00000B   FF           MOV     R7,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   22           RET
    897          
    898          /*********************************************************************
    899           * @fn      writeWord
    900           *
    901           * @brief   Writes a Flash-WORD to NV.
    902           *
    903           * @param   pg - A valid NV Flash page.
    904           * @param   offset - A valid offset into the page.
    905           * @param   buf - Pointer to source buffer.
    906           *
    907           * @return  none
    908           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    909          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    910          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    911            offset = (offset / HAL_FLASH_WORD_SIZE) +
    912                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    913          
    914            HalFlashWrite(offset, buf, 1);
   \   000007                ; Setup parameters for call to function HalFlashWrite
   \   000007   75..01       MOV     ?V0 + 0,#0x1
   \   00000A   75..00       MOV     ?V0 + 1,#0x0
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   8A..         MOV     ?V0 + 0,R2
   \   000014   8B..         MOV     ?V0 + 1,R3
   \   000016   7402         MOV     A,#0x2
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?US_SHR
   \   00001D   8E..         MOV     ?V0 + 2,R6
   \   00001F   F5..         MOV     ?V0 + 3,A
   \   000021   7409         MOV     A,#0x9
   \   000023   78..         MOV     R0,#?V0 + 2
   \   000025   12....       LCALL   ?S_SHL
   \   000028   E5..         MOV     A,?V0 + 0
   \   00002A   2400         ADD     A,#0x0
   \   00002C   FA           MOV     R2,A
   \   00002D   E5..         MOV     A,?V0 + 1
   \   00002F   35..         ADDC    A,?V0 + 3
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??HalFlashWrite?relay
   \   000035   02....       LJMP    ?Subroutine6 & 0xFFFF
    915          }
    916          
    917          /*********************************************************************
    918           * @fn      writeWordM
    919           *
    920           * @brief   Writes multiple Flash-WORDs to NV.
    921           *
    922           * @param   pg - A valid NV Flash page.
    923           * @param   offset - A valid offset into the page.
    924           * @param   buf - Pointer to source buffer.
    925           * @param   cnt - Number of 4-byte blocks to write.
    926           *
    927           * @return  none
    928           */
    929          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    930          {
    931            offset = (offset / HAL_FLASH_WORD_SIZE) +
    932                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    933            HalFlashWrite(offset, buf, cnt);
    934          }
    935          
    936          /*********************************************************************
    937           * @fn      writeWordH
    938           *
    939           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    940           *
    941           * @param   pg - A valid NV Flash page.
    942           * @param   offset - A valid offset into the page.
    943           * @param   buf - Pointer to source buffer.
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    948          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    949            uint8 tmp[4];
    950          
    951            tmp[0] = buf[0];
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   F0           MOVX    @DPTR,A
    952            tmp[1] = buf[1];
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
    953            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   74FF         MOV     A,#-0x1
   \   00002D   F0           MOVX    @DPTR,A
    954            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   74FF         MOV     A,#-0x1
   \   000035   12....       LCALL   ?Subroutine12 & 0xFFFF
    955          
    956            writeWord( pg, offset, tmp );
   \                     ??CrossCallReturnLabel_6:
   \   000038   12....       LCALL   ??writeWord?relay
    957          }
   \   00003B   7404         MOV     A,#0x4
   \   00003D   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   22           RET
    958          
    959          /*********************************************************************
    960           * @fn      writeBuf
    961           *
    962           * @brief   Writes a data buffer to NV.
    963           *
    964           * @param   dstPg - A valid NV Flash page.
    965           * @param   offset - A valid offset into the page.
    966           * @param   len  - Byte count of the data to write.
    967           * @param   buf  - The data to write.
    968           *
    969           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7404         MOV     A,#0x4
   \   000002                REQUIRE ??Subroutine54_0
   \   000002                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    971          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    972          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 1,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V0 + 4,R4
   \   000012   8D..         MOV     ?V0 + 5,R5
   \   000014   7416         MOV     A,#0x16
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine24 & 0xFFFF
    973            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_35:
   \   00001C   EE           MOV     A,R6
   \   00001D   5403         ANL     A,#0x3
   \   00001F   F5..         MOV     ?V0 + 0,A
    974            uint8 tmp[OSAL_NV_WORD_SIZE];
    975          
    976            if ( rem )
   \   000021   606A         JZ      ??writeBuf_0
    977            {
    978              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   000023   74FC         MOV     A,#-0x4
   \   000025   5E           ANL     A,R6
   \   000026   FE           MOV     R6,A
    979              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000027                ; Setup parameters for call to function HalFlashRead
   \   000027   75..04       MOV     ?V0 + 6,#0x4
   \   00002A   75..00       MOV     ?V0 + 7,#0x0
   \   00002D   78..         MOV     R0,#?V0 + 6
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   AC82         MOV     R4,DPL
   \   000039   AD83         MOV     R5,DPH
   \   00003B   EE           MOV     A,R6
   \   00003C   FA           MOV     R2,A
   \   00003D   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??writeBuf_1:
   \   000043   E5..         MOV     A,?V0 + 4
   \   000045   45..         ORL     A,?V0 + 5
   \   000047   6029         JZ      ??writeBuf_2
    980          
    981              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    982              {
    983                tmp[rem++] = *buf++;
   \   000049   85..82       MOV     DPL,?V0 + 2
   \   00004C   85..83       MOV     DPH,?V0 + 3
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C0E0         PUSH    A
   \   000052   85....       MOV     ?V0 + 6,?V0 + 0
   \   000055   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000058   D0E0         POP     A
   \   00005A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00005D   05..         INC     ?V0 + 0
    984                len--;
   \   00005F   E5..         MOV     A,?V0 + 4
   \   000061   24FF         ADD     A,#-0x1
   \   000063   F5..         MOV     ?V0 + 4,A
   \   000065   E5..         MOV     A,?V0 + 5
   \   000067   34FF         ADDC    A,#-0x1
   \   000069   F5..         MOV     ?V0 + 5,A
    985              }
   \   00006B   E5..         MOV     A,?V0 + 0
   \   00006D   C3           CLR     C
   \   00006E   9404         SUBB    A,#0x4
   \   000070   40D1         JC      ??writeBuf_1
    986          
    987              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_2:
   \   000072                ; Setup parameters for call to function writeWord
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   AC82         MOV     R4,DPL
   \   00007A   AD83         MOV     R5,DPH
   \   00007C   EE           MOV     A,R6
   \   00007D   FA           MOV     R2,A
   \   00007E   EF           MOV     A,R7
   \   00007F   FB           MOV     R3,A
   \   000080   A9..         MOV     R1,?V0 + 1
   \   000082   12....       LCALL   ??writeWord?relay
    988              dstOff += OSAL_NV_WORD_SIZE;
   \   000085   EE           MOV     A,R6
   \   000086   2404         ADD     A,#0x4
   \   000088   FE           MOV     R6,A
   \   000089   EF           MOV     A,R7
   \   00008A   3400         ADDC    A,#0x0
   \   00008C   FF           MOV     R7,A
    989            }
    990          
    991            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??writeBuf_0:
   \   00008D   E5..         MOV     A,?V0 + 4
   \   00008F   5403         ANL     A,#0x3
   \   000091   F5..         MOV     ?V0 + 0,A
    992            len /= OSAL_NV_WORD_SIZE;
   \   000093   85....       MOV     ?V0 + 6,?V0 + 4
   \   000096   85....       MOV     ?V0 + 7,?V0 + 5
   \   000099   7402         MOV     A,#0x2
   \   00009B   78..         MOV     R0,#?V0 + 6
   \   00009D   12....       LCALL   ?US_SHR
   \   0000A0   85....       MOV     ?V0 + 4,?V0 + 6
   \   0000A3   85....       MOV     ?V0 + 5,?V0 + 7
    993          
    994            if ( len )
   \   0000A6   E5..         MOV     A,?V0 + 4
   \   0000A8   45..         ORL     A,?V0 + 5
   \   0000AA   604D         JZ      ??writeBuf_3
    995            {
    996              writeWordM( dstPg, dstOff, buf, len );
   \   0000AC                ; Setup parameters for call to function HalFlashWrite
   \   0000AC   78..         MOV     R0,#?V0 + 4
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   AC..         MOV     R4,?V0 + 2
   \   0000B3   AD..         MOV     R5,?V0 + 3
   \   0000B5   8E..         MOV     ?V0 + 6,R6
   \   0000B7   8F..         MOV     ?V0 + 7,R7
   \   0000B9   7402         MOV     A,#0x2
   \   0000BB   78..         MOV     R0,#?V0 + 6
   \   0000BD   12....       LCALL   ?US_SHR
   \   0000C0   85....       MOV     ?V0 + 8,?V0 + 1
   \   0000C3   F5..         MOV     ?V0 + 9,A
   \   0000C5   7409         MOV     A,#0x9
   \   0000C7   78..         MOV     R0,#?V0 + 8
   \   0000C9   12....       LCALL   ?S_SHL
   \   0000CC   E5..         MOV     A,?V0 + 6
   \   0000CE   2400         ADD     A,#0x0
   \   0000D0   FA           MOV     R2,A
   \   0000D1   E5..         MOV     A,?V0 + 7
   \   0000D3   35..         ADDC    A,?V0 + 9
   \   0000D5   FB           MOV     R3,A
   \   0000D6   12....       LCALL   ??HalFlashWrite?relay
   \   0000D9   7402         MOV     A,#0x2
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
    997              dstOff += OSAL_NV_WORD_SIZE * len;
   \   0000DE   7402         MOV     A,#0x2
   \   0000E0   78..         MOV     R0,#?V0 + 4
   \   0000E2   12....       LCALL   ?S_SHL
   \   0000E5   A8..         MOV     R0,?V0 + 4
   \   0000E7   A9..         MOV     R1,?V0 + 5
   \   0000E9   EE           MOV     A,R6
   \   0000EA   28           ADD     A,R0
   \   0000EB   FE           MOV     R6,A
   \   0000EC   EF           MOV     A,R7
   \   0000ED   39           ADDC    A,R1
   \   0000EE   FF           MOV     R7,A
    998              buf += OSAL_NV_WORD_SIZE * len;
   \   0000EF   E5..         MOV     A,?V0 + 2
   \   0000F1   28           ADD     A,R0
   \   0000F2   F5..         MOV     ?V0 + 2,A
   \   0000F4   E5..         MOV     A,?V0 + 3
   \   0000F6   39           ADDC    A,R1
   \   0000F7   F5..         MOV     ?V0 + 3,A
    999            }
   1000          
   1001            if ( rem )
   \                     ??writeBuf_3:
   \   0000F9   E5..         MOV     A,?V0 + 0
   \   0000FB   6069         JZ      ??writeBuf_4
   1002            {
   1003              uint8 idx = 0;
   \   0000FD   75..00       MOV     ?V0 + 6,#0x0
   1004              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000100                ; Setup parameters for call to function HalFlashRead
   \   000100   75..04       MOV     ?V0 + 4,#0x4
   \   000103   75..00       MOV     ?V0 + 5,#0x0
   \   000106   78..         MOV     R0,#?V0 + 4
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   7402         MOV     A,#0x2
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   AC82         MOV     R4,DPL
   \   000112   AD83         MOV     R5,DPH
   \   000114   EE           MOV     A,R6
   \   000115   FA           MOV     R2,A
   \   000116   EF           MOV     A,R7
   \   000117   FB           MOV     R3,A
   \   000118   A9..         MOV     R1,?V0 + 1
   \   00011A   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00011D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000120   8025         SJMP    ??writeBuf_5
   1005              while ( rem-- )
   1006              {
   1007                tmp[idx++] = *buf++;
   \                     ??writeBuf_6:
   \   000122   85..82       MOV     DPL,?V0 + 2
   \   000125   85..83       MOV     DPH,?V0 + 3
   \   000128   E0           MOVX    A,@DPTR
   \   000129   C0E0         PUSH    A
   \   00012B   85....       MOV     ?V0 + 4,?V0 + 6
   \   00012E   85..82       MOV     DPL,?XSP + 0
   \   000131   85..83       MOV     DPH,?XSP + 1
   \   000134   E582         MOV     A,DPL
   \   000136   25..         ADD     A,?V0 + 4
   \   000138   F582         MOV     DPL,A
   \   00013A   E583         MOV     A,DPH
   \   00013C   3400         ADDC    A,#0x0
   \   00013E   F583         MOV     DPH,A
   \   000140   D0E0         POP     A
   \   000142   12....       LCALL   ?Subroutine10 & 0xFFFF
   1008              }
   \                     ??CrossCallReturnLabel_3:
   \   000145   05..         INC     ?V0 + 6
   \                     ??writeBuf_5:
   \   000147   85....       MOV     ?V0 + 4,?V0 + 0
   \   00014A   74FF         MOV     A,#-0x1
   \   00014C   25..         ADD     A,?V0 + 4
   \   00014E   F5..         MOV     ?V0 + 0,A
   \   000150   04           INC     A
   \   000151   70CF         JNZ     ??writeBuf_6
   1009              writeWord( dstPg, dstOff, tmp );
   \   000153                ; Setup parameters for call to function writeWord
   \   000153   85..82       MOV     DPL,?XSP + 0
   \   000156   85..83       MOV     DPH,?XSP + 1
   \   000159   AC82         MOV     R4,DPL
   \   00015B   AD83         MOV     R5,DPH
   \   00015D   EE           MOV     A,R6
   \   00015E   FA           MOV     R2,A
   \   00015F   EF           MOV     A,R7
   \   000160   FB           MOV     R3,A
   \   000161   A9..         MOV     R1,?V0 + 1
   \   000163   12....       LCALL   ??writeWord?relay
   1010            }
   1011          }
   \                     ??writeBuf_4:
   \   000166   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   A3           INC     DPTR
   \   000008   8582..       MOV     ?V0 + 2,DPL
   \   00000B   8583..       MOV     ?V0 + 3,DPH
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET
   1012          
   1013          /*********************************************************************
   1014           * @fn      xferBuf
   1015           *
   1016           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
   1017           *
   1018           * @return  none
   1019           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0 + 8
   \   000004   FC           MOV     R4,A
   \   000005   E583         MOV     A,DPH
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A                REQUIRE ??Subroutine58_0
   \   00000A                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   AA..         MOV     R2,?V0 + 4
   \   000002   AB..         MOV     R3,?V0 + 5
   \   000004   A9..         MOV     R1,?V0 + 6
   \   000006                REQUIRE ??Subroutine59_0
   \   000006                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1020          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
   1021          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 6,R1
   \   00000C   8A..         MOV     ?V0 + 4,R2
   \   00000E   8B..         MOV     ?V0 + 5,R3
   \   000010   8C..         MOV     ?V0 + 3,R4
   \   000012   7416         MOV     A,#0x16
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 1,A
   \   00001E   7418         MOV     A,#0x18
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FE           MOV     R6,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FF           MOV     R7,A
   1022            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000028   E5..         MOV     A,?V0 + 0
   \   00002A   5403         ANL     A,#0x3
   \   00002C   F5..         MOV     ?V0 + 2,A
   1023            uint8 tmp[OSAL_NV_WORD_SIZE];
   1024          
   1025            if ( rem )
   \   00002E   6060         JZ      ??CrossCallReturnLabel_53
   1026            {
   1027              dstOff -= rem;
   \   000030   F5..         MOV     ?V0 + 8,A
   \   000032   C3           CLR     C
   \   000033   E5..         MOV     A,?V0 + 0
   \   000035   95..         SUBB    A,?V0 + 8
   \   000037   F5..         MOV     ?V0 + 0,A
   \   000039   E5..         MOV     A,?V0 + 1
   \   00003B   9400         SUBB    A,#0x0
   \   00003D   F5..         MOV     ?V0 + 1,A
   1028              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00003F                ; Setup parameters for call to function HalFlashRead
   \   00003F   75..04       MOV     ?V0 + 8,#0x4
   \   000042   75..00       MOV     ?V0 + 9,#0x0
   \   000045   78..         MOV     R0,#?V0 + 8
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   7402         MOV     A,#0x2
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   AC82         MOV     R4,DPL
   \   000051   AD83         MOV     R5,DPH
   \   000053   AA..         MOV     R2,?V0 + 0
   \   000055   AB..         MOV     R3,?V0 + 1
   \   000057   A9..         MOV     R1,?V0 + 3
   \   000059   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??xferBuf_0:
   \   00005F   EE           MOV     A,R6
   \   000060   4F           ORL     A,R7
   \   000061   602A         JZ      ??xferBuf_1
   1029          
   1030              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   1031              {
   1032                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   000063                ; Setup parameters for call to function HalFlashRead
   \   000063   75..01       MOV     ?V0 + 8,#0x1
   \   000066   78..         MOV     R0,#?V0 + 8
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   85....       MOV     ?V0 + 8,?V0 + 2
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   1033                srcOff++;
   \   000079   12....       LCALL   ?Subroutine37 & 0xFFFF
   1034                rem++;
   \                     ??CrossCallReturnLabel_61:
   \   00007C   05..         INC     ?V0 + 2
   1035                len--;
   \   00007E   EE           MOV     A,R6
   \   00007F   24FF         ADD     A,#-0x1
   \   000081   1E           DEC     R6
   \   000082   EF           MOV     A,R7
   \   000083   34FF         ADDC    A,#-0x1
   \   000085   FF           MOV     R7,A
   1036              }
   \   000086   E5..         MOV     A,?V0 + 2
   \   000088   C3           CLR     C
   \   000089   9404         SUBB    A,#0x4
   \   00008B   40D2         JC      ??xferBuf_0
   1037          
   1038              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_1:
   \   00008D                ; Setup parameters for call to function writeWord
   \   00008D   12....       LCALL   ?Subroutine33 & 0xFFFF
   1039              dstOff += OSAL_NV_WORD_SIZE;
   1040            }
   1041          
   1042            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_53:
   \   000090   EE           MOV     A,R6
   \   000091   5403         ANL     A,#0x3
   \   000093   F5..         MOV     ?V0 + 2,A
   1043            len /= OSAL_NV_WORD_SIZE;
   \   000095   8E..         MOV     ?V0 + 8,R6
   \   000097   8F..         MOV     ?V0 + 9,R7
   \   000099   7402         MOV     A,#0x2
   \   00009B   78..         MOV     R0,#?V0 + 8
   \   00009D   12....       LCALL   ?US_SHR
   \   0000A0   AE..         MOV     R6,?V0 + 8
   \   0000A2   AF..         MOV     R7,?V0 + 9
   \   0000A4   8029         SJMP    ??CrossCallReturnLabel_54
   1044          
   1045            while ( len-- )
   1046            {
   1047              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_2:
   \   0000A6                ; Setup parameters for call to function HalFlashRead
   \   0000A6   75..04       MOV     ?V0 + 8,#0x4
   \   0000A9   75..00       MOV     ?V0 + 9,#0x0
   \   0000AC   78..         MOV     R0,#?V0 + 8
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   AC82         MOV     R4,DPL
   \   0000B8   AD83         MOV     R5,DPH
   \   0000BA   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000BD   12....       LCALL   ?DEALLOC_XSTACK8
   1048              srcOff += OSAL_NV_WORD_SIZE;
   \   0000C0   E5..         MOV     A,?V0 + 4
   \   0000C2   2404         ADD     A,#0x4
   \   0000C4   F5..         MOV     ?V0 + 4,A
   \   0000C6   E5..         MOV     A,?V0 + 5
   \   0000C8   3400         ADDC    A,#0x0
   \   0000CA   F5..         MOV     ?V0 + 5,A
   1049              writeWord( dstPg, dstOff, tmp );
   \   0000CC                ; Setup parameters for call to function writeWord
   \   0000CC   12....       LCALL   ?Subroutine33 & 0xFFFF
   1050              dstOff += OSAL_NV_WORD_SIZE;
   1051            }
   \                     ??CrossCallReturnLabel_54:
   \   0000CF   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000D2   70D2         JNZ     ??xferBuf_2
   1052          
   1053            if ( rem )
   \   0000D4   E5..         MOV     A,?V0 + 2
   \   0000D6   6059         JZ      ??xferBuf_3
   1054            {
   1055              uint8 idx = 0;
   \   0000D8   7E00         MOV     R6,#0x0
   1056              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000DA                ; Setup parameters for call to function HalFlashRead
   \   0000DA   75..04       MOV     ?V0 + 8,#0x4
   \   0000DD   8E..         MOV     ?V0 + 9,R6
   \   0000DF   78..         MOV     R0,#?V0 + 8
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   7402         MOV     A,#0x2
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   AC82         MOV     R4,DPL
   \   0000EB   AD83         MOV     R5,DPH
   \   0000ED   AA..         MOV     R2,?V0 + 0
   \   0000EF   AB..         MOV     R3,?V0 + 1
   \   0000F1   A9..         MOV     R1,?V0 + 3
   \   0000F3   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000F6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F9   8019         SJMP    ??xferBuf_4
   1057              while ( rem-- )
   1058              {
   1059                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_5:
   \   0000FB                ; Setup parameters for call to function HalFlashRead
   \   0000FB   75..01       MOV     ?V0 + 8,#0x1
   \   0000FE   78..         MOV     R0,#?V0 + 8
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000103   8E..         MOV     ?V0 + 8,R6
   \   000105   7402         MOV     A,#0x2
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
   1060                srcOff++;
   \   000110   12....       LCALL   ?Subroutine37 & 0xFFFF
   1061                idx++;
   \                     ??CrossCallReturnLabel_62:
   \   000113   0E           INC     R6
   1062              }
   \                     ??xferBuf_4:
   \   000114   AF..         MOV     R7,?V0 + 2
   \   000116   74FF         MOV     A,#-0x1
   \   000118   2F           ADD     A,R7
   \   000119   F5..         MOV     ?V0 + 2,A
   \   00011B   04           INC     A
   \   00011C   70DD         JNZ     ??xferBuf_5
   1063              writeWord( dstPg, dstOff, tmp );
   \   00011E                ; Setup parameters for call to function writeWord
   \   00011E   85..82       MOV     DPL,?XSP + 0
   \   000121   85..83       MOV     DPH,?XSP + 1
   \   000124   AC82         MOV     R4,DPL
   \   000126   AD83         MOV     R5,DPH
   \   000128   AA..         MOV     R2,?V0 + 0
   \   00012A   AB..         MOV     R3,?V0 + 1
   \   00012C   A9..         MOV     R1,?V0 + 3
   \   00012E   12....       LCALL   ??writeWord?relay
   1064            }
   1065          }
   \                     ??xferBuf_3:
   \   000131   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 4,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 5,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   AC82         MOV     R4,DPL
   \   000008   AD83         MOV     R5,DPH
   \   00000A   AA..         MOV     R2,?V0 + 0
   \   00000C   AB..         MOV     R3,?V0 + 1
   \   00000E   A9..         MOV     R1,?V0 + 3
   \   000010   12....       LCALL   ??writeWord?relay
   \   000013   E5..         MOV     A,?V0 + 0
   \   000015   2404         ADD     A,#0x4
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   E5..         MOV     A,?V0 + 1
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   F5..         MOV     ?V0 + 1,A
   \   00001F   22           RET
   1066          
   1067          /*********************************************************************
   1068           * @fn      writeItem
   1069           *
   1070           * @brief   Writes an item header/data combo to the specified NV page.
   1071           *
   1072           * @param   pg - Valid NV Flash page.
   1073           * @param   id - Valid NV item Id.
   1074           * @param   len  - Byte count of the data to write.
   1075           * @param   buf  - The data to write. If NULL, no data/checksum write.
   1076           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
   1077           *
   1078           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
   1079           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1080          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
   1081          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
   \   00000C   8A..         MOV     ?V0 + 8,R2
   \   00000E   8B..         MOV     ?V0 + 9,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   \   000014   741C         MOV     A,#0x1c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00001C   741E         MOV     A,#0x1e
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 4,A
   1082            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000024   E9           MOV     A,R1
   \   000025   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000028   12....       LCALL   ?Subroutine24 & 0xFFFF
   1083            uint8 rtrn = FALSE;
   \                     ??CrossCallReturnLabel_36:
   \   00002B   75..00       MOV     ?V0 + 1,#0x0
   1084            osalNvHdr_t hdr;
   1085          
   1086            hdr.id = id;
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   EA           MOV     A,R2
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   EB           MOV     A,R3
   \   000038   F0           MOVX    @DPTR,A
   1087            hdr.len = len;
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   EE           MOV     A,R6
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   EF           MOV     A,R7
   \   000042   12....       LCALL   ?Subroutine12 & 0xFFFF
   1088          
   1089            writeWord( pg, offset, (uint8 *)&hdr );
   \                     ??CrossCallReturnLabel_7:
   \   000045   AA..         MOV     R2,?V0 + 2
   \   000047   AB..         MOV     R3,?V0 + 3
   \   000049   A9..         MOV     R1,?V0 + 0
   \   00004B   12....       LCALL   ??writeWord?relay
   1090            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00004E                ; Setup parameters for call to function HalFlashRead
   \   00004E   75..08       MOV     ?V0 + 10,#0x8
   \   000051   75..00       MOV     ?V0 + 11,#0x0
   \   000054   78..         MOV     R0,#?V0 + 10
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   AC82         MOV     R4,DPL
   \   000060   AD83         MOV     R5,DPH
   \   000062   AA..         MOV     R2,?V0 + 2
   \   000064   AB..         MOV     R3,?V0 + 3
   \   000066   A9..         MOV     R1,?V0 + 0
   \   000068   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   1091          
   1092            if ( (hdr.id == id) && (hdr.len == len) )
   \   00006E   85..82       MOV     DPL,?XSP + 0
   \   000071   85..83       MOV     DPH,?XSP + 1
   \   000074   E0           MOVX    A,@DPTR
   \   000075   65..         XRL     A,?V0 + 8
   \   000077   7004         JNZ     ??writeItem_0
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   65..         XRL     A,?V0 + 9
   \                     ??writeItem_0:
   \   00007D   6003         JZ      $+5
   \   00007F   02....       LJMP    ??writeItem_1 & 0xFFFF
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   E0           MOVX    A,@DPTR
   \   000088   6E           XRL     A,R6
   \   000089   7003         JNZ     ??writeItem_2
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   6F           XRL     A,R7
   \                     ??writeItem_2:
   \   00008E   6003         JZ      $+5
   \   000090   02....       LJMP    ??writeItem_1 & 0xFFFF
   1093            {
   1094              if ( flag )
   \   000093   E5..         MOV     A,?V0 + 4
   \   000095   7003         JNZ     $+5
   \   000097   02....       LJMP    ??CrossCallReturnLabel_19 & 0xFFFF
   1095              {
   1096                hdr.chk = calcChkB( len, buf );
   \   00009A   85..82       MOV     DPL,?V0 + 6
   \   00009D   85..83       MOV     DPH,?V0 + 7
   \   0000A0   EE           MOV     A,R6
   \   0000A1   F8           MOV     R0,A
   \   0000A2   EF           MOV     A,R7
   \   0000A3   F9           MOV     R1,A
   \   0000A4   E8           MOV     A,R0
   \   0000A5   5403         ANL     A,#0x3
   \   0000A7   F5..         MOV     ?V0 + 4,A
   \   0000A9   E582         MOV     A,DPL
   \   0000AB   4583         ORL     A,DPH
   \   0000AD   7015         JNZ     ??writeItem_3
   \   0000AF   E8           MOV     A,R0
   \   0000B0   75F0FF       MOV     B,#-0x1
   \   0000B3   A4           MUL     AB
   \   0000B4   F8           MOV     R0,A
   \   0000B5   AAF0         MOV     R2,B
   \   0000B7   75F0FF       MOV     B,#-0x1
   \   0000BA   E9           MOV     A,R1
   \   0000BB   A4           MUL     AB
   \   0000BC   2A           ADD     A,R2
   \   0000BD   F9           MOV     R1,A
   \   0000BE   E8           MOV     A,R0
   \   0000BF   FA           MOV     R2,A
   \   0000C0   E9           MOV     A,R1
   \   0000C1   FB           MOV     R3,A
   \   0000C2   8020         SJMP    ??writeItem_4
   \                     ??writeItem_3:
   \   0000C4   7A00         MOV     R2,#0x0
   \   0000C6   7B00         MOV     R3,#0x0
   \   0000C8   800A         SJMP    ??writeItem_5
   \                     ??writeItem_6:
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FC           MOV     R4,A
   \   0000CC   EA           MOV     A,R2
   \   0000CD   2C           ADD     A,R4
   \   0000CE   FA           MOV     R2,A
   \   0000CF   EB           MOV     A,R3
   \   0000D0   3400         ADDC    A,#0x0
   \   0000D2   FB           MOV     R3,A
   \   0000D3   A3           INC     DPTR
   \                     ??writeItem_5:
   \   0000D4   E8           MOV     A,R0
   \   0000D5   FC           MOV     R4,A
   \   0000D6   E9           MOV     A,R1
   \   0000D7   FD           MOV     R5,A
   \   0000D8   EC           MOV     A,R4
   \   0000D9   24FF         ADD     A,#-0x1
   \   0000DB   18           DEC     R0
   \   0000DC   ED           MOV     A,R5
   \   0000DD   34FF         ADDC    A,#-0x1
   \   0000DF   F9           MOV     R1,A
   \   0000E0   EC           MOV     A,R4
   \   0000E1   4D           ORL     A,R5
   \   0000E2   70E6         JNZ     ??writeItem_6
   \                     ??writeItem_4:
   \   0000E4   E5..         MOV     A,?V0 + 4
   \   0000E6   601E         JZ      ??writeItem_7
   \   0000E8   7404         MOV     A,#0x4
   \   0000EA   C3           CLR     C
   \   0000EB   95..         SUBB    A,?V0 + 4
   \   0000ED   F8           MOV     R0,A
   \   0000EE   95E0         SUBB    A,0xE0 /* A   */
   \   0000F0   F9           MOV     R1,A
   \   0000F1   E8           MOV     A,R0
   \   0000F2   75F0FF       MOV     B,#-0x1
   \   0000F5   A4           MUL     AB
   \   0000F6   F8           MOV     R0,A
   \   0000F7   ACF0         MOV     R4,B
   \   0000F9   75F0FF       MOV     B,#-0x1
   \   0000FC   E9           MOV     A,R1
   \   0000FD   A4           MUL     AB
   \   0000FE   2C           ADD     A,R4
   \   0000FF   F9           MOV     R1,A
   \   000100   EA           MOV     A,R2
   \   000101   28           ADD     A,R0
   \   000102   FA           MOV     R2,A
   \   000103   EB           MOV     A,R3
   \   000104   39           ADDC    A,R1
   \   000105   FB           MOV     R3,A
   \                     ??writeItem_7:
   \   000106   7404         MOV     A,#0x4
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   EA           MOV     A,R2
   \   00010C   F0           MOVX    @DPTR,A
   \   00010D   A3           INC     DPTR
   \   00010E   EB           MOV     A,R3
   \   00010F   F0           MOVX    @DPTR,A
   1097          
   1098                offset += OSAL_NV_HDR_SIZE;
   \   000110   12....       LCALL   ?Subroutine34 & 0xFFFF
   1099                if ( buf != NULL )
   \                     ??CrossCallReturnLabel_56:
   \   000113   E5..         MOV     A,?V0 + 6
   \   000115   45..         ORL     A,?V0 + 7
   \   000117   6017         JZ      ??writeItem_8
   1100                {
   1101                  writeBuf( pg, offset, len, buf );
   \   000119                ; Setup parameters for call to function writeBuf
   \   000119   78..         MOV     R0,#?V0 + 6
   \   00011B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011E   EE           MOV     A,R6
   \   00011F   FC           MOV     R4,A
   \   000120   EF           MOV     A,R7
   \   000121   FD           MOV     R5,A
   \   000122   AA..         MOV     R2,?V0 + 2
   \   000124   AB..         MOV     R3,?V0 + 3
   \   000126   A9..         MOV     R1,?V0 + 0
   \   000128   12....       LCALL   ??writeBuf?relay
   \   00012B   7402         MOV     A,#0x2
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   1102                }
   1103          
   1104                if ( hdr.chk == calcChkF( pg, offset, len ) )
   \                     ??writeItem_8:
   \   000130                ; Setup parameters for call to function calcChkF
   \   000130   EE           MOV     A,R6
   \   000131   FC           MOV     R4,A
   \   000132   EF           MOV     A,R7
   \   000133   FD           MOV     R5,A
   \   000134   AA..         MOV     R2,?V0 + 2
   \   000136   AB..         MOV     R3,?V0 + 3
   \   000138   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00013B   7404         MOV     A,#0x4
   \   00013D   12....       LCALL   ?XSTACK_DISP0_8
   \   000140   E0           MOVX    A,@DPTR
   \   000141   68           XRL     A,R0
   \   000142   7003         JNZ     ??writeItem_9
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \   000146   69           XRL     A,R1
   \                     ??writeItem_9:
   \   000147   7022         JNZ     ??writeItem_10
   1105                {
   1106                  if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
   \   000149                ; Setup parameters for call to function setChk
   \   000149   7404         MOV     A,#0x4
   \   00014B   12....       LCALL   ?XSTACK_DISP0_8
   \   00014E   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000151   7404         MOV     A,#0x4
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   E0           MOVX    A,@DPTR
   \   000157   68           XRL     A,R0
   \   000158   7003         JNZ     ??writeItem_11
   \   00015A   A3           INC     DPTR
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   69           XRL     A,R1
   \                     ??writeItem_11:
   \   00015D   700C         JNZ     ??writeItem_10
   1107                  {
   1108                    hotItemUpdate(pg, offset, hdr.id);
   \   00015F                ; Setup parameters for call to function hotItemUpdate
   \   00015F   85..82       MOV     DPL,?XSP + 0
   \   000162   85..83       MOV     DPH,?XSP + 1
   \   000165   12....       LCALL   ?Subroutine17 & 0xFFFF
   1109                    rtrn = TRUE;
   1110                  }
   1111                }
   1112              }
   1113              else
   1114              {
   1115                rtrn = TRUE;
   \                     ??CrossCallReturnLabel_19:
   \   000168   75..01       MOV     ?V0 + 1,#0x1
   1116              }
   1117          
   1118              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_10:
   \   00016B   7402         MOV     A,#0x2
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   C3           CLR     C
   \   000171   E0           MOVX    A,@DPTR
   \   000172   94F4         SUBB    A,#-0xc
   \   000174   A3           INC     DPTR
   \   000175   E0           MOVX    A,@DPTR
   \   000176   94FF         SUBB    A,#-0x1
   \   000178   4006         JC      ??writeItem_12
   \   00017A   7EFC         MOV     R6,#-0x4
   \   00017C   7FFF         MOV     R7,#-0x1
   \   00017E   8043         SJMP    ??CrossCallReturnLabel_102
   \                     ??writeItem_12:
   \   000180   7402         MOV     A,#0x2
   \   000182   12....       LCALL   ?XSTACK_DISP0_8
   \   000185   12....       LCALL   ?Subroutine13 & 0xFFFF
   1119            }
   \                     ??CrossCallReturnLabel_9:
   \   000188   8039         SJMP    ??CrossCallReturnLabel_102
   1120            else
   1121            {
   1122              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_1:
   \   00018A   7402         MOV     A,#0x2
   \   00018C   12....       LCALL   ?XSTACK_DISP0_8
   \   00018F   C3           CLR     C
   \   000190   E0           MOVX    A,@DPTR
   \   000191   94F4         SUBB    A,#-0xc
   \   000193   A3           INC     DPTR
   \   000194   E0           MOVX    A,@DPTR
   \   000195   94FF         SUBB    A,#-0x1
   \   000197   4006         JC      ??writeItem_13
   \   000199   7EFC         MOV     R6,#-0x4
   \   00019B   7FFF         MOV     R7,#-0x1
   \   00019D   8008         SJMP    ??CrossCallReturnLabel_10
   \                     ??writeItem_13:
   \   00019F   7402         MOV     A,#0x2
   \   0001A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A4   12....       LCALL   ?Subroutine13 & 0xFFFF
   1123          
   1124              if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
   \                     ??CrossCallReturnLabel_10:
   \   0001A7   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0001AA   F8           MOV     R0,A
   \   0001AB   7408         MOV     A,#0x8
   \   0001AD   99           SUBB    A,R1
   \   0001AE   F9           MOV     R1,A
   \   0001AF   C3           CLR     C
   \   0001B0   E8           MOV     A,R0
   \   0001B1   9E           SUBB    A,R6
   \   0001B2   E9           MOV     A,R1
   \   0001B3   9F           SUBB    A,R7
   \   0001B4   5008         JNC     ??writeItem_14
   1125              {
   1126                len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
   \   0001B6   12....       LCALL   ?Subroutine18 & 0xFFFF
   1127              }
   \                     ??CrossCallReturnLabel_125:
   \   0001B9   FE           MOV     R6,A
   \   0001BA   7408         MOV     A,#0x8
   \   0001BC   99           SUBB    A,R1
   \   0001BD   FF           MOV     R7,A
   1128          
   1129              pgLost[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_14:
   \   0001BE   E5..         MOV     A,?V0 + 0
   \   0001C0   12....       LCALL   ?Subroutine23 & 0xFFFF
   1130            }
   1131            pgOff[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??CrossCallReturnLabel_102:
   \   0001C3   E5..         MOV     A,?V0 + 0
   \   0001C5   C3           CLR     C
   \   0001C6   33           RLC     A
   \   0001C7   F8           MOV     R0,A
   \   0001C8   E4           CLR     A
   \   0001C9   33           RLC     A
   \   0001CA   F9           MOV     R1,A
   \   0001CB   74..         MOV     A,#(pgOff + 14) & 0xff
   \   0001CD   28           ADD     A,R0
   \   0001CE   F582         MOV     DPL,A
   \   0001D0   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   0001D2   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   1132          
   1133            return rtrn;
   \                     ??CrossCallReturnLabel_100:
   \   0001D5   A9..         MOV     R1,?V0 + 1
   \   0001D7   7408         MOV     A,#0x8
   \   0001D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001DC   7F0C         MOV     R7,#0xc
   \   0001DE   02....       LJMP    ?BANKED_LEAVE_XDATA
   1134          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002                REQUIRE ??Subroutine62_0
   \   000002                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   A9..         MOV     R1,?V0 + 0
   \   000002   12....       LCALL   ??calcChkF?relay
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   A8..         MOV     R0,?V0 + 4
   \   00000B   A9..         MOV     R1,?V0 + 5
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   12....       LCALL   ??hotItemUpdate?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   12....       LCALL   ??setChk?relay
   \   000006   8A..         MOV     ?V0 + 4,R2
   \   000008   8B..         MOV     ?V0 + 5,R3
   \   00000A   A8..         MOV     R0,?V0 + 4
   \   00000C   A9..         MOV     R1,?V0 + 5
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   AA..         MOV     R2,?V0 + 2
   \   000007   AB..         MOV     R3,?V0 + 3
   \   000009   A9..         MOV     R1,?V0 + 0
   \   00000B   22           RET
   1135          
   1136          /*********************************************************************
   1137           * @fn      hotItem
   1138           *
   1139           * @brief   Look for the parameter 'id' in the hot items array.
   1140           *
   1141           * @param   id - A valid NV item Id.
   1142           *
   1143           * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
   1144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1145          static uint8 hotItem(uint16 id)
   \                     hotItem:
   1146          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1147            uint8 hotIdx;
   1148          
   1149            for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
   \   000004   7900         MOV     R1,#0x0
   1150            {
   1151              if (hotIds[hotIdx] == id)
   \                     ??hotItem_0:
   \   000006   E9           MOV     A,R1
   \   000007   C3           CLR     C
   \   000008   33           RLC     A
   \   000009   FC           MOV     R4,A
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   FD           MOV     R5,A
   \   00000D   74..         MOV     A,#hotIds & 0xff
   \   00000F   2C           ADD     A,R4
   \   000010   F582         MOV     DPL,A
   \   000012   74..         MOV     A,#(hotIds >> 8) & 0xff
   \   000014   3D           ADDC    A,R5
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6A           XRL     A,R2
   \   000019   7003         JNZ     ??hotItem_1
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6B           XRL     A,R3
   \                     ??hotItem_1:
   \   00001E   6007         JZ      ??hotItem_2
   1152              {
   1153                break;
   1154              }
   1155            }
   \   000020   09           INC     R1
   \   000021   E9           MOV     A,R1
   \   000022   C3           CLR     C
   \   000023   9403         SUBB    A,#0x3
   \   000025   40DF         JC      ??hotItem_0
   1156          
   1157            return hotIdx;
   \                     ??hotItem_2:
   \   000027                REQUIRE ?Subroutine5
   \   000027                ; // Fall through to label ?Subroutine5
   1158          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
   1159          
   1160          /*********************************************************************
   1161           * @fn      hotItemUpdate
   1162           *
   1163           * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
   1164           *
   1165           * @param   pg - The new NV page corresponding to the hot item.
   1166           * @param   off - The new NV page offset corresponding to the hot item.
   1167           * @param   id - A valid NV item Id.
   1168           *
   1169           * @return  none
   1170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1171          static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
   \                     hotItemUpdate:
   1172          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FA           MOV     R2,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FB           MOV     R3,A
   1173            uint8 hotIdx = hotItem(id);
   \   00000F                ; Setup parameters for call to function hotItem
   \   00000F   12....       LCALL   ?Subroutine40 & 0xFFFF
   1174          
   1175            if (hotIdx < OSAL_NV_MAX_HOT)
   \                     ??CrossCallReturnLabel_68:
   \   000012   500E         JNC     ??hotItemUpdate_0
   1176            {
   1177              {
   1178                hotPg[hotIdx] = pg;
   \   000014   12....       LCALL   ?Subroutine32 & 0xFFFF
   1179                hotOff[hotIdx] = off;
   1180              }
   1181            }
   \                     ??CrossCallReturnLabel_51:
   \   000017   EE           MOV     A,R6
   \   000018   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00001B   E5..         MOV     A,?V0 + 0
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   E5..         MOV     A,?V0 + 1
   \   000021   F0           MOVX    @DPTR,A
   1182          }
   \                     ??hotItemUpdate_0:
   \   000022   7F02         MOV     R7,#0x2
   \   000024   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ??hotItem?relay
   \   000003   E9           MOV     A,R1
   \   000004   F8           MOV     R0,A
   \   000005   C3           CLR     C
   \   000006   9403         SUBB    A,#0x3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   74..         MOV     A,#hotPg & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(hotPg >> 8) & 0xff
   \   000007   3400         ADDC    A,#0x0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#hotOff & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(hotOff >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET
   1183          
   1184          /*********************************************************************
   1185           * @fn      osal_nv_init
   1186           *
   1187           * @brief   Initialize NV service.
   1188           *
   1189           * @param   p - Not used.
   1190           *
   1191           * @return  none
   1192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1193          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1194          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1195            (void)p;  // Suppress Lint warning.
   1196            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL   ??initNV?relay
   1197          }
   \   000007   80..         SJMP    ?Subroutine5
   1198          
   1199          /*********************************************************************
   1200           * @fn      osal_nv_item_init
   1201           *
   1202           * @brief   If the NV item does not already exist, it is created and
   1203           *          initialized with the data passed to the function, if any.
   1204           *          This function must be called before calling osal_nv_read() or
   1205           *          osal_nv_write().
   1206           *
   1207           * @param   id  - Valid NV item Id.
   1208           * @param   len - Item length.
   1209           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1210           *
   1211           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1212           *          SUCCESS        - Id already existed, no action taken.
   1213           *          NV_OPER_FAILED - Failure to find or create Id.
   1214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1215          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1216          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine24 & 0xFFFF
   1217            uint16 offset;
   1218          
   1219            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \                     ??CrossCallReturnLabel_37:
   \   000015                ; Setup parameters for call to function HalAdcCheckVdd
   \   000015   794E         MOV     R1,#0x4e
   \   000017   12....       LCALL   ??HalAdcCheckVdd?relay
   \   00001A   E9           MOV     A,R1
   \   00001B   7004         JNZ     ??osal_nv_item_init_0
   1220            {
   1221              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_1:
   \   00001D   790A         MOV     R1,#0xa
   \   00001F   8037         SJMP    ??osal_nv_item_init_2
   1222            }
   1223            else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_item_init_0:
   \   000021                ; Setup parameters for call to function findItem
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   ??findItem?relay
   \   000028   EA           MOV     A,R2
   \   000029   4B           ORL     A,R3
   \   00002A   6010         JZ      ??osal_nv_item_init_3
   1224            {
   1225              // Re-populate the NV hot item data if the corresponding items are already established.
   1226              hotItemUpdate(findPg, offset, id);
   \   00002C                ; Setup parameters for call to function hotItemUpdate
   \   00002C   EE           MOV     A,R6
   \   00002D   FC           MOV     R4,A
   \   00002E   EF           MOV     A,R7
   \   00002F   FD           MOV     R5,A
   \   000030   90....       MOV     DPTR,#findPg
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   12....       LCALL   ??hotItemUpdate?relay
   1227          
   1228              return SUCCESS;
   \   000038   7900         MOV     R1,#0x0
   \   00003A   801C         SJMP    ??osal_nv_item_init_2
   1229            }
   1230            else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_item_init_3:
   \   00003C                ; Setup parameters for call to function initItem
   \   00003C   78..         MOV     R0,#?V0 + 2
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   AC..         MOV     R4,?V0 + 0
   \   000043   AD..         MOV     R5,?V0 + 1
   \   000045   EE           MOV     A,R6
   \   000046   FA           MOV     R2,A
   \   000047   EF           MOV     A,R7
   \   000048   FB           MOV     R3,A
   \   000049   7901         MOV     R1,#0x1
   \   00004B   12....       LCALL   ??initItem?relay
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   \   000053   E9           MOV     A,R1
   \   000054   60C7         JZ      ??osal_nv_item_init_1
   1231            {
   1232              return NV_ITEM_UNINIT;
   \   000056   7909         MOV     R1,#0x9
   1233            }
   \                     ??osal_nv_item_init_2:
   \   000058   02....       LJMP    ?Subroutine3 & 0xFFFF
   1234            else
   1235            {
   1236              return NV_OPER_FAILED;
   1237            }
   1238          }
   1239          
   1240          /*********************************************************************
   1241           * @fn      osal_nv_item_len
   1242           *
   1243           * @brief   Get the data length of the item stored in NV memory.
   1244           *
   1245           * @param   id  - Valid NV item Id.
   1246           *
   1247           * @return  Item length, if found; zero otherwise.
   1248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1249          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1250          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1251            osalNvHdr_t hdr;
   1252            uint16 offset;
   1253            uint8 hotIdx;
   1254          
   1255            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000E                ; Setup parameters for call to function hotItem
   \   00000E   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000011   503F         JNC     ??osal_nv_item_len_0
   1256            {
   1257              findPg = hotPg[hotIdx];
   \   000013   12....       LCALL   ?Subroutine32 & 0xFFFF
   1258              offset = hotOff[hotIdx];
   1259            }
   \                     ??CrossCallReturnLabel_52:
   \   000016   E0           MOVX    A,@DPTR
   \   000017   90....       MOV     DPTR,#findPg
   \   00001A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00001D   12....       LCALL   ?Subroutine21 & 0xFFFF
   1260            else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   1261            {
   1262              return 0;
   1263            }
   1264          
   1265            HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_29:
   \   000020                ; Setup parameters for call to function HalFlashRead
   \   000020   75..08       MOV     ?V0 + 2,#0x8
   \   000023   75..00       MOV     ?V0 + 3,#0x0
   \   000026   78..         MOV     R0,#?V0 + 2
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   AC82         MOV     R4,DPL
   \   000032   AD83         MOV     R5,DPH
   \   000034   EA           MOV     A,R2
   \   000035   24F8         ADD     A,#-0x8
   \   000037   FA           MOV     R2,A
   \   000038   EB           MOV     A,R3
   \   000039   34FF         ADDC    A,#-0x1
   \   00003B   FB           MOV     R3,A
   \   00003C   90....       MOV     DPTR,#findPg
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   1266            return hdr.len;
   \   000047   7402         MOV     A,#0x2
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00004F   02....       LJMP    ?Subroutine0 & 0xFFFF
   \                     ??osal_nv_item_len_0:
   \   000052                ; Setup parameters for call to function findItem
   \   000052   EE           MOV     A,R6
   \   000053   FA           MOV     R2,A
   \   000054   EF           MOV     A,R7
   \   000055   FB           MOV     R3,A
   \   000056   12....       LCALL   ??findItem?relay
   \   000059   8B..         MOV     ?V0 + 3,R3
   \   00005B   A9..         MOV     R1,?V0 + 3
   \   00005D   EA           MOV     A,R2
   \   00005E   49           ORL     A,R1
   \   00005F   70BF         JNZ     ??CrossCallReturnLabel_29
   \   000061   7A00         MOV     R2,#0x0
   \   000063   7B00         MOV     R3,#0x0
   \   000065   80E8         SJMP    ??CrossCallReturnLabel_30
   1267          }
   1268          
   1269          /*********************************************************************
   1270           * @fn      osal_nv_write
   1271           *
   1272           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1273           *          an element of an item by indexing into the item with an offset.
   1274           *
   1275           * @param   id  - Valid NV item Id.
   1276           * @param   ndx - Index offset into item
   1277           * @param   len - Length of data to write.
   1278           * @param  *buf - Data to write.
   1279           *
   1280           * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
   1281           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1284          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 14,R2
   \   00000C   8B..         MOV     ?V0 + 15,R3
   \   00000E   8C..         MOV     ?V0 + 4,R4
   \   000010   8D..         MOV     ?V0 + 5,R5
   \   000012   7423         MOV     A,#0x23
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 10,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 11,A
   1285            uint8 rtrn = SUCCESS;
   \   00001E   75..00       MOV     ?V0 + 9,#0x0
   1286          
   1287            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   000021                ; Setup parameters for call to function HalAdcCheckVdd
   \   000021   794E         MOV     R1,#0x4e
   \   000023   12....       LCALL   ??HalAdcCheckVdd?relay
   \   000026   E9           MOV     A,R1
   \   000027   7005         JNZ     ??osal_nv_write_0
   1288            {
   1289              return NV_OPER_FAILED;
   \                     ??osal_nv_write_1:
   \   000029   790A         MOV     R1,#0xa
   \   00002B   02....       LJMP    ??osal_nv_write_2 & 0xFFFF
   1290            }
   1291            else if ( len != 0 )
   \                     ??osal_nv_write_0:
   \   00002E   E5..         MOV     A,?V0 + 10
   \   000030   45..         ORL     A,?V0 + 11
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??CrossCallReturnLabel_25 & 0xFFFF
   1292            {
   1293              osalNvHdr_t hdr;
   1294              uint16 origOff, srcOff;
   1295              uint16 cnt, chk;
   1296              uint8 *ptr, srcPg;
   1297          
   1298              origOff = srcOff = findItem( id );
   \   000037                ; Setup parameters for call to function findItem
   \   000037   AA..         MOV     R2,?V0 + 14
   \   000039   AB..         MOV     R3,?V0 + 15
   \   00003B   12....       LCALL   ??findItem?relay
   \   00003E   8A..         MOV     ?V0 + 0,R2
   \   000040   8B..         MOV     ?V0 + 1,R3
   \   000042   A8..         MOV     R0,?V0 + 0
   \   000044   A9..         MOV     R1,?V0 + 1
   \   000046   88..         MOV     ?V0 + 2,R0
   \   000048   89..         MOV     ?V0 + 3,R1
   \   00004A   7401         MOV     A,#0x1
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E8           MOV     A,R0
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   E9           MOV     A,R1
   \   000053   F0           MOVX    @DPTR,A
   1299              srcPg = findPg;
   \   000054   90....       MOV     DPTR,#findPg
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F5..         MOV     ?V0 + 8,A
   1300              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   00005A   E8           MOV     A,R0
   \   00005B   45..         ORL     A,?V0 + 3
   \   00005D   7005         JNZ     ??osal_nv_write_3
   1301              {
   1302                return NV_ITEM_UNINIT;
   \   00005F   7909         MOV     R1,#0x9
   \   000061   02....       LJMP    ??osal_nv_write_2 & 0xFFFF
   1303              }
   1304          
   1305              HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_3:
   \   000064                ; Setup parameters for call to function HalFlashRead
   \   000064   75..08       MOV     ?V0 + 0,#0x8
   \   000067   75..00       MOV     ?V0 + 1,#0x0
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   7405         MOV     A,#0x5
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   AC82         MOV     R4,DPL
   \   000076   AD83         MOV     R5,DPH
   \   000078   EA           MOV     A,R2
   \   000079   24F8         ADD     A,#-0x8
   \   00007B   FA           MOV     R2,A
   \   00007C   E9           MOV     A,R1
   \   00007D   34FF         ADDC    A,#-0x1
   \   00007F   FB           MOV     R3,A
   \   000080   A9..         MOV     R1,?V0 + 8
   \   000082   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   1306              if ( hdr.len < (ndx + len) )
   \   000088   7405         MOV     A,#0x5
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   E5..         MOV     A,?V0 + 4
   \   00008F   25..         ADD     A,?V0 + 10
   \   000091   F8           MOV     R0,A
   \   000092   E5..         MOV     A,?V0 + 5
   \   000094   35..         ADDC    A,?V0 + 11
   \   000096   F9           MOV     R1,A
   \   000097   C3           CLR     C
   \   000098   E0           MOVX    A,@DPTR
   \   000099   98           SUBB    A,R0
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   99           SUBB    A,R1
   \   00009D   408A         JC      ??osal_nv_write_1
   1307              {
   1308                return NV_OPER_FAILED;
   1309              }
   1310          
   1311              srcOff += ndx;
   \   00009F   12....       LCALL   ?Subroutine41 & 0xFFFF
   1312              ptr = buf;
   \                     ??CrossCallReturnLabel_71:
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL   ?Subroutine22 & 0xFFFF
   1313              cnt = len;
   \                     ??CrossCallReturnLabel_34:
   \   0000A8   AE..         MOV     R6,?V0 + 10
   \   0000AA   AF..         MOV     R7,?V0 + 11
   1314              chk = 0;
   \   0000AC   75..00       MOV     ?V0 + 0,#0x0
   \   0000AF   8071         SJMP    ??osal_nv_write_4
   1315              while ( cnt-- )
   1316              {
   1317                uint8 tmp;
   1318                HalFlashRead(srcPg, srcOff, &tmp, 1);
   \                     ??osal_nv_write_5:
   \   0000B1                ; Setup parameters for call to function HalFlashRead
   \   0000B1   75..01       MOV     ?V0 + 12,#0x1
   \   0000B4   75..00       MOV     ?V0 + 13,#0x0
   \   0000B7   78..         MOV     R0,#?V0 + 12
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BC   7402         MOV     A,#0x2
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   AC82         MOV     R4,DPL
   \   0000C3   AD83         MOV     R5,DPH
   \   0000C5   AA..         MOV     R2,?V0 + 2
   \   0000C7   AB..         MOV     R3,?V0 + 3
   \   0000C9   A9..         MOV     R1,?V0 + 8
   \   0000CB   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
   1319                if ( tmp != *ptr )
   \   0000D1   85..82       MOV     DPL,?XSP + 0
   \   0000D4   85..83       MOV     DPH,?XSP + 1
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F8           MOV     R0,A
   \   0000D9   85..82       MOV     DPL,?V0 + 6
   \   0000DC   85..83       MOV     DPH,?V0 + 7
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   68           XRL     A,R0
   \   0000E1   6026         JZ      ??osal_nv_write_6
   1320                {
   1321                  chk = 1;  // Mark that at least one byte is different.
   \   0000E3   75..01       MOV     ?V0 + 0,#0x1
   1322                  // Calculate expected checksum after transferring old data and writing new data.
   1323                  hdr.chk -= tmp;
   \   0000E6   7407         MOV     A,#0x7
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   C3           CLR     C
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   98           SUBB    A,R0
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   9400         SUBB    A,#0x0
   \   0000F3   F0           MOVX    @DPTR,A
   1324                  hdr.chk += *ptr;
   \   0000F4   85..82       MOV     DPL,?V0 + 6
   \   0000F7   85..83       MOV     DPH,?V0 + 7
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F8           MOV     R0,A
   \   0000FC   7407         MOV     A,#0x7
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   E0           MOVX    A,@DPTR
   \   000102   28           ADD     A,R0
   \   000103   F0           MOVX    @DPTR,A
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   3400         ADDC    A,#0x0
   \   000108   F0           MOVX    @DPTR,A
   1325                }
   1326                srcOff++;
   \                     ??osal_nv_write_6:
   \   000109   E5..         MOV     A,?V0 + 2
   \   00010B   2401         ADD     A,#0x1
   \   00010D   F5..         MOV     ?V0 + 2,A
   \   00010F   E5..         MOV     A,?V0 + 3
   \   000111   3400         ADDC    A,#0x0
   \   000113   F5..         MOV     ?V0 + 3,A
   1327                ptr++;
   \   000115   85..82       MOV     DPL,?V0 + 6
   \   000118   85..83       MOV     DPH,?V0 + 7
   \   00011B   A3           INC     DPTR
   \   00011C   8582..       MOV     ?V0 + 6,DPL
   \   00011F   8583..       MOV     ?V0 + 7,DPH
   1328              }
   \                     ??osal_nv_write_4:
   \   000122   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000125   708A         JNZ     ??osal_nv_write_5
   1329          
   1330              if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
   \   000127   E5..         MOV     A,?V0 + 0
   \   000129   A2E0         MOV     C,0xE0 /* A   */.0
   \   00012B   4003         JC      $+5
   \   00012D   02....       LJMP    ??CrossCallReturnLabel_25 & 0xFFFF
   1331              {
   1332                uint8 comPg = OSAL_NV_PAGE_NULL;
   \   000130   85..82       MOV     DPL,?XSP + 0
   \   000133   85..83       MOV     DPH,?XSP + 1
   \   000136   E4           CLR     A
   \   000137   F0           MOVX    @DPTR,A
   1333                uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   000138                ; Setup parameters for call to function initItem
   \   000138   8582..       MOV     ?V0 + 0,DPL
   \   00013B   8583..       MOV     ?V0 + 1,DPH
   \   00013E   78..         MOV     R0,#?V0 + 0
   \   000140   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000143   7407         MOV     A,#0x7
   \   000145   12....       LCALL   ?XSTACK_DISP0_8
   \   000148   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00014B   AA..         MOV     R2,?V0 + 14
   \   00014D   AB..         MOV     R3,?V0 + 15
   \   00014F   7900         MOV     R1,#0x0
   \   000151   12....       LCALL   ??initItem?relay
   \   000154   7402         MOV     A,#0x2
   \   000156   12....       LCALL   ?DEALLOC_XSTACK8
   \   000159   E9           MOV     A,R1
   \   00015A   F5..         MOV     ?V0 + 0,A
   1334          
   1335                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   00015C   7003         JNZ     $+5
   \   00015E   02....       LJMP    ??osal_nv_write_7 & 0xFFFF
   1336                {
   1337                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   000161   7405         MOV     A,#0x5
   \   000163   12....       LCALL   ?XSTACK_DISP0_8
   \   000166   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000169   4006         JC      ??osal_nv_write_8
   \   00016B   7EFC         MOV     R6,#-0x4
   \   00016D   7FFF         MOV     R7,#-0x1
   \   00016F   800B         SJMP    ??osal_nv_write_9
   \                     ??osal_nv_write_8:
   \   000171   7405         MOV     A,#0x5
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000179   FE           MOV     R6,A
   \   00017A   E9           MOV     A,R1
   \   00017B   FF           MOV     R7,A
   1338                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??osal_nv_write_9:
   \   00017C   12....       LCALL   ?Subroutine27 & 0xFFFF
   1339                  srcOff = origOff;
   1340          
   1341                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
   1342                   * OSAL_Nv interruptions caused by resets.
   1343                   */
   1344                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \                     ??CrossCallReturnLabel_40:
   \   00017F   7409         MOV     A,#0x9
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   E0           MOVX    A,@DPTR
   \   000185   F4           CPL     A
   \   000186   7003         JNZ     ??osal_nv_write_10
   \   000188   A3           INC     DPTR
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   F4           CPL     A
   \                     ??osal_nv_write_10:
   \   00018B   700A         JNZ     ??CrossCallReturnLabel_24
   1345                  {
   1346                    setItem( srcPg, srcOff, eNvXfer );
   \   00018D                ; Setup parameters for call to function setItem
   \   00018D   7C00         MOV     R4,#0x0
   \   00018F   7401         MOV     A,#0x1
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   12....       LCALL   ?Subroutine20 & 0xFFFF
   1347                  }
   1348          
   1349                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??CrossCallReturnLabel_24:
   \   000197                ; Setup parameters for call to function xferBuf
   \   000197   78..         MOV     R0,#?V0 + 4
   \   000199   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019C   78..         MOV     R0,#?V0 + 2
   \   00019E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A1   AC..         MOV     R4,?V0 + 0
   \   0001A3   7405         MOV     A,#0x5
   \   0001A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A8   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0001AB   A9..         MOV     R1,?V0 + 8
   \   0001AD   12....       LCALL   ??xferBuf?relay
   \   0001B0   7404         MOV     A,#0x4
   \   0001B2   12....       LCALL   ?DEALLOC_XSTACK8
   1350                  srcOff += ndx;
   1351                  dstOff += ndx;
   \   0001B5   12....       LCALL   ?Subroutine41 & 0xFFFF
   1352          
   1353                  writeBuf( dstPg, dstOff, len, buf );
   \                     ??CrossCallReturnLabel_72:
   \   0001B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BB   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001BE   AC..         MOV     R4,?V0 + 10
   \   0001C0   AD..         MOV     R5,?V0 + 11
   \   0001C2   AA..         MOV     R2,?V0 + 2
   \   0001C4   AB..         MOV     R3,?V0 + 3
   \   0001C6   A9..         MOV     R1,?V0 + 0
   \   0001C8   12....       LCALL   ??writeBuf?relay
   \   0001CB   7402         MOV     A,#0x2
   \   0001CD   12....       LCALL   ?DEALLOC_XSTACK8
   1354                  srcOff += len;
   1355                  dstOff += len;
   1356          
   1357                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   0001D0                ; Setup parameters for call to function xferBuf
   \   0001D0   7405         MOV     A,#0x5
   \   0001D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D5   E0           MOVX    A,@DPTR
   \   0001D6   C3           CLR     C
   \   0001D7   95..         SUBB    A,?V0 + 4
   \   0001D9   F8           MOV     R0,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   95..         SUBB    A,?V0 + 5
   \   0001DE   F9           MOV     R1,A
   \   0001DF   E8           MOV     A,R0
   \   0001E0   C3           CLR     C
   \   0001E1   95..         SUBB    A,?V0 + 10
   \   0001E3   F5..         MOV     ?V0 + 6,A
   \   0001E5   E9           MOV     A,R1
   \   0001E6   95..         SUBB    A,?V0 + 11
   \   0001E8   F5..         MOV     ?V0 + 7,A
   \   0001EA   78..         MOV     R0,#?V0 + 6
   \   0001EC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EF   E5..         MOV     A,?V0 + 2
   \   0001F1   25..         ADD     A,?V0 + 10
   \   0001F3   F5..         MOV     ?V0 + 2,A
   \   0001F5   E5..         MOV     A,?V0 + 3
   \   0001F7   35..         ADDC    A,?V0 + 11
   \   0001F9   F5..         MOV     ?V0 + 3,A
   \   0001FB   78..         MOV     R0,#?V0 + 2
   \   0001FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000200   AC..         MOV     R4,?V0 + 0
   \   000202   7405         MOV     A,#0x5
   \   000204   12....       LCALL   ?XSTACK_DISP0_8
   \   000207   E0           MOVX    A,@DPTR
   \   000208   25..         ADD     A,?V0 + 4
   \   00020A   F8           MOV     R0,A
   \   00020B   A3           INC     DPTR
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   35..         ADDC    A,?V0 + 5
   \   00020F   F9           MOV     R1,A
   \   000210   E8           MOV     A,R0
   \   000211   25..         ADD     A,?V0 + 10
   \   000213   FA           MOV     R2,A
   \   000214   E9           MOV     A,R1
   \   000215   35..         ADDC    A,?V0 + 11
   \   000217   FB           MOV     R3,A
   \   000218   A9..         MOV     R1,?V0 + 8
   \   00021A   12....       LCALL   ??xferBuf?relay
   \   00021D   7404         MOV     A,#0x4
   \   00021F   12....       LCALL   ?DEALLOC_XSTACK8
   1358          
   1359                  // Calculate and write the new checksum.
   1360                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   000222   12....       LCALL   ?Subroutine27 & 0xFFFF
   1361          
   1362                  if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
   \                     ??CrossCallReturnLabel_41:
   \   000225                ; Setup parameters for call to function calcChkF
   \   000225   7405         MOV     A,#0x5
   \   000227   12....       LCALL   ?XSTACK_DISP0_8
   \   00022A   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00022D   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000230   7407         MOV     A,#0x7
   \   000232   12....       LCALL   ?XSTACK_DISP0_8
   \   000235   E0           MOVX    A,@DPTR
   \   000236   68           XRL     A,R0
   \   000237   7003         JNZ     ??osal_nv_write_11
   \   000239   A3           INC     DPTR
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   69           XRL     A,R1
   \                     ??osal_nv_write_11:
   \   00023C   7016         JNZ     ??osal_nv_write_7
   1363                  {
   1364                    if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
   \   00023E                ; Setup parameters for call to function setChk
   \   00023E   7407         MOV     A,#0x7
   \   000240   12....       LCALL   ?XSTACK_DISP0_8
   \   000243   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000246   7407         MOV     A,#0x7
   \   000248   12....       LCALL   ?XSTACK_DISP0_8
   \   00024B   E0           MOVX    A,@DPTR
   \   00024C   68           XRL     A,R0
   \   00024D   7003         JNZ     ??osal_nv_write_12
   \   00024F   A3           INC     DPTR
   \   000250   E0           MOVX    A,@DPTR
   \   000251   69           XRL     A,R1
   \                     ??osal_nv_write_12:
   \   000252   6005         JZ      ??osal_nv_write_13
   1365                    {
   1366                      rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_7:
   \   000254   75..0A       MOV     ?V0 + 9,#0xa
   \   000257   8008         SJMP    ??CrossCallReturnLabel_20
   1367                    }
   1368                    else
   1369                    {
   1370                      hotItemUpdate(dstPg, dstOff, hdr.id);
   \                     ??osal_nv_write_13:
   \   000259                ; Setup parameters for call to function hotItemUpdate
   \   000259   7403         MOV     A,#0x3
   \   00025B   12....       LCALL   ?XSTACK_DISP0_8
   \   00025E   12....       LCALL   ?Subroutine17 & 0xFFFF
   1371                    }
   1372                  }
   1373                  else
   1374                  {
   1375                    rtrn = NV_OPER_FAILED;
   1376                  }
   1377                }
   1378                else
   1379                {
   1380                  rtrn = NV_OPER_FAILED;
   1381                }
   1382          
   1383                if ( comPg != OSAL_NV_PAGE_NULL )
   \                     ??CrossCallReturnLabel_20:
   \   000261   85..82       MOV     DPL,?XSP + 0
   \   000264   85..83       MOV     DPH,?XSP + 1
   \   000267   E0           MOVX    A,@DPTR
   \   000268   6026         JZ      ??osal_nv_write_14
   1384                {
   1385                  /* Even though the page compaction succeeded, if the new item is coming from the compacted
   1386                   * page and writing the new value failed, then the compaction must be aborted.
   1387                   */
   1388                  if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
   \   00026A   65..         XRL     A,?V0 + 8
   \   00026C   700B         JNZ     ??osal_nv_write_15
   \   00026E   740A         MOV     A,#0xa
   \   000270   65..         XRL     A,?V0 + 9
   \   000272   7005         JNZ     ??osal_nv_write_15
   1389                  {
   1390                    erasePage( pgRes );
   \   000274                ; Setup parameters for call to function erasePage
   \   000274   12....       LCALL   ?Subroutine26 & 0xFFFF
   1391                  }
   \                     ??CrossCallReturnLabel_93:
   \   000277   8017         SJMP    ??osal_nv_write_14
   1392                  else
   1393                  {
   1394                    COMPACT_PAGE_CLEANUP( comPg );
   \                     ??osal_nv_write_15:
   \   000279                ; Setup parameters for call to function setPageUse
   \   000279   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00027C                ; Setup parameters for call to function erasePage
   \   00027C   85..82       MOV     DPL,?XSP + 0
   \   00027F   85..83       MOV     DPH,?XSP + 1
   \   000282   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000285   85..82       MOV     DPL,?XSP + 0
   \   000288   85..83       MOV     DPH,?XSP + 1
   \   00028B   E0           MOVX    A,@DPTR
   \   00028C   90....       MOV     DPTR,#pgRes
   \   00028F   F0           MOVX    @DPTR,A
   1395                  }
   1396                }
   1397          
   1398                /* Zero of the old item must wait until after compact page cleanup has finished - if the item
   1399                 * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
   1400                 */
   1401                if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
   \                     ??osal_nv_write_14:
   \   000290   85..82       MOV     DPL,?XSP + 0
   \   000293   85..83       MOV     DPH,?XSP + 1
   \   000296   E0           MOVX    A,@DPTR
   \   000297   65..         XRL     A,?V0 + 8
   \   000299   600F         JZ      ??CrossCallReturnLabel_25
   \   00029B   740A         MOV     A,#0xa
   \   00029D   65..         XRL     A,?V0 + 9
   \   00029F   6009         JZ      ??CrossCallReturnLabel_25
   1402                {
   1403                  setItem( srcPg, origOff, eNvZero );
   \   0002A1                ; Setup parameters for call to function setItem
   \   0002A1   7C01         MOV     R4,#0x1
   \   0002A3   EC           MOV     A,R4
   \   0002A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A7   12....       LCALL   ?Subroutine20 & 0xFFFF
   1404                }
   1405              }
   1406            }
   1407          
   1408            return rtrn;
   \                     ??CrossCallReturnLabel_25:
   \   0002AA   A9..         MOV     R1,?V0 + 9
   \                     ??osal_nv_write_2:
   \   0002AC   740B         MOV     A,#0xb
   \   0002AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002B1   7F10         MOV     R7,#0x10
   \   0002B3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1409          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   25..         ADD     A,?V0 + 4
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   E5..         MOV     A,?V0 + 3
   \   000008   35..         ADDC    A,?V0 + 5
   \   00000A   F5..         MOV     ?V0 + 3,A
   \   00000C                ; Setup parameters for call to function writeBuf
   \   00000C   7425         MOV     A,#0x25
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000005   E0           MOVX    A,@DPTR
   \   000006   C3           CLR     C
   \   000007   9E           SUBB    A,R6
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   9F           SUBB    A,R7
   \   00000D   F5..         MOV     ?V0 + 3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   A9..         MOV     R1,?V0 + 8
   \   000007   12....       LCALL   ??setItem?relay
   \   00000A   22           RET
   1410          
   1411          /*********************************************************************
   1412           * @fn      osal_nv_read
   1413           *
   1414           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1415           *          an element of an item by indexing into the item with an offset.
   1416           *          Read data is copied into *buf.
   1417           *
   1418           * @param   id  - Valid NV item Id.
   1419           * @param   ndx - Index offset into item
   1420           * @param   len - Length of data to read.
   1421           * @param  *buf - Data is read into this buffer.
   1422           *
   1423           * @return  SUCCESS if NV data was copied to the parameter 'buf'.
   1424           *          Otherwise, NV_OPER_FAILED for failure.
   1425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1426          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1427          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 4,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 5,A
   \   000019   7412         MOV     A,#0x12
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 1,A
   1428            uint16 offset;
   1429            uint8 hotIdx;
   1430          
   1431            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   000025                ; Setup parameters for call to function hotItem
   \   000025   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000028   5027         JNC     ??osal_nv_read_0
   1432            {
   1433              HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
   \   00002A   8882         MOV     DPL,R0
   \   00002C   AE82         MOV     R6,DPL
   \   00002E                ; Setup parameters for call to function HalFlashRead
   \   00002E   78..         MOV     R0,#?V0 + 4
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   AC..         MOV     R4,?V0 + 0
   \   000035   AD..         MOV     R5,?V0 + 1
   \   000037   EE           MOV     A,R6
   \   000038   12....       LCALL   ?Subroutine49 & 0xFFFF
   1434              return SUCCESS;
   1435            }
   \                     ??CrossCallReturnLabel_82:
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   25..         ADD     A,?V0 + 2
   \   00003E   FA           MOV     R2,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   35..         ADDC    A,?V0 + 3
   \   000043   FB           MOV     R3,A
   \   000044   74..         MOV     A,#hotPg & 0xff
   \   000046   2E           ADD     A,R6
   \   000047   F582         MOV     DPL,A
   \   000049   74..         MOV     A,#(hotPg >> 8) & 0xff
   \   00004B   3400         ADDC    A,#0x0
   \   00004D   F583         MOV     DPH,A
   \   00004F   8023         SJMP    ??osal_nv_read_1
   1436          
   1437            if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_read_0:
   \   000051                ; Setup parameters for call to function findItem
   \   000051   EE           MOV     A,R6
   \   000052   FA           MOV     R2,A
   \   000053   EF           MOV     A,R7
   \   000054   FB           MOV     R3,A
   \   000055   12....       LCALL   ??findItem?relay
   \   000058   EA           MOV     A,R2
   \   000059   4B           ORL     A,R3
   \   00005A   7004         JNZ     ??osal_nv_read_2
   1438            {
   1439              return NV_OPER_FAILED;
   \   00005C   790A         MOV     R1,#0xa
   \   00005E   801E         SJMP    ??osal_nv_read_3
   1440            }
   1441            else
   1442            {
   1443              HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_2:
   \   000060                ; Setup parameters for call to function HalFlashRead
   \   000060   78..         MOV     R0,#?V0 + 4
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   AC..         MOV     R4,?V0 + 0
   \   000067   AD..         MOV     R5,?V0 + 1
   \   000069   EA           MOV     A,R2
   \   00006A   25..         ADD     A,?V0 + 2
   \   00006C   FA           MOV     R2,A
   \   00006D   EB           MOV     A,R3
   \   00006E   35..         ADDC    A,?V0 + 3
   \   000070   FB           MOV     R3,A
   \   000071   90....       MOV     DPTR,#findPg
   \                     ??osal_nv_read_1:
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
   1444              return SUCCESS;
   \   00007C   7900         MOV     R1,#0x0
   1445            }
   \                     ??osal_nv_read_3:
   \   00007E   02....       LJMP    ?Subroutine4 & 0xFFFF
   1446          }
   1447          
   1448          /*********************************************************************
   1449           * @fn      osal_nv_delete
   1450           *
   1451           * @brief   Delete item from NV. This function will fail if the length
   1452           *          parameter does not match the length of the item in NV.
   1453           *
   1454           * @param   id  - Valid NV item Id.
   1455           * @param   len - Length of item to delete.
   1456           *
   1457           * @return  SUCCESS if item was deleted,
   1458           *          NV_ITEM_UNINIT if item did not exist in NV,
   1459           *          NV_BAD_ITEM_LEN if length parameter not correct,
   1460           *          NV_OPER_FAILED if attempted deletion failed.
   1461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1462          uint8 osal_nv_delete( uint16 id, uint16 len )
   \                     osal_nv_delete:
   1463          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   1464            uint16 length;
   1465            uint16 offset;
   1466          
   1467            offset = findItem( id );
   \   00000D                ; Setup parameters for call to function findItem
   \   00000D   12....       LCALL   ??findItem?relay
   \   000010   8A..         MOV     ?V0 + 0,R2
   \   000012   8B..         MOV     ?V0 + 1,R3
   1468            if ( offset == OSAL_NV_ITEM_NULL )
   \   000014   EA           MOV     A,R2
   \   000015   45..         ORL     A,?V0 + 1
   \   000017   7004         JNZ     ??osal_nv_delete_0
   1469            {
   1470              // NV item does not exist
   1471              return NV_ITEM_UNINIT;
   \   000019   7909         MOV     R1,#0x9
   \   00001B   803D         SJMP    ??osal_nv_delete_1
   1472            }
   1473          
   1474            length = osal_nv_item_len( id );
   1475            if ( length != len )
   \                     ??osal_nv_delete_0:
   \   00001D                ; Setup parameters for call to function osal_nv_item_len
   \   00001D   EE           MOV     A,R6
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   ??osal_nv_item_len?relay
   \   000024   8A..         MOV     ?V0 + 4,R2
   \   000026   8B..         MOV     ?V0 + 5,R3
   \   000028   E5..         MOV     A,?V0 + 2
   \   00002A   65..         XRL     A,?V0 + 4
   \   00002C   7004         JNZ     ??osal_nv_delete_2
   \   00002E   E5..         MOV     A,?V0 + 3
   \   000030   65..         XRL     A,?V0 + 5
   \                     ??osal_nv_delete_2:
   \   000032   6004         JZ      ??osal_nv_delete_3
   1476            {
   1477              // NV item has different length
   1478              return NV_BAD_ITEM_LEN;
   \   000034   790C         MOV     R1,#0xc
   \   000036   8022         SJMP    ??osal_nv_delete_1
   1479            }
   1480          
   1481            // Set item header ID to zero to 'delete' the item
   1482            setItem( findPg, offset, eNvZero );
   \                     ??osal_nv_delete_3:
   \   000038                ; Setup parameters for call to function setItem
   \   000038   7C01         MOV     R4,#0x1
   \   00003A   AA..         MOV     R2,?V0 + 0
   \   00003C   AB..         MOV     R3,?V0 + 1
   \   00003E   90....       MOV     DPTR,#findPg
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   ??setItem?relay
   1483          
   1484            // Verify that item has been removed
   1485            offset = findItem( id );
   1486            if ( offset != OSAL_NV_ITEM_NULL )
   \   000046                ; Setup parameters for call to function findItem
   \   000046   EE           MOV     A,R6
   \   000047   FA           MOV     R2,A
   \   000048   EF           MOV     A,R7
   \   000049   FB           MOV     R3,A
   \   00004A   12....       LCALL   ??findItem?relay
   \   00004D   8B..         MOV     ?V0 + 1,R3
   \   00004F   EA           MOV     A,R2
   \   000050   45..         ORL     A,?V0 + 1
   \   000052   6004         JZ      ??osal_nv_delete_4
   1487            {
   1488              // Still there
   1489              return NV_OPER_FAILED;
   \   000054   790A         MOV     R1,#0xa
   \   000056   8002         SJMP    ??osal_nv_delete_1
   1490            }
   1491            else
   1492            {
   1493              // Yes, it's gone
   1494              return SUCCESS;
   \                     ??osal_nv_delete_4:
   \   000058   7900         MOV     R1,#0x0
   1495            }
   \                     ??osal_nv_delete_1:
   \   00005A   02....       LJMP    ?Subroutine3 & 0xFFFF
   1496          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setPageUse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initPage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??erasePage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??compactPage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??findItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setChk?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setChk

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??calcChkF?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWord?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWordH?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??xferBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??hotItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??hotItemUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItemUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_item_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_item_len?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_read?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_delete?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_delete
   1497          
   1498          /*********************************************************************
   1499           */

   Maximum stack usage in bytes:

     Function              ISTACK PSTACK XSTACK
     --------              ------ ------ ------
     calcChkF                  0      0     57
       -> HalFlashRead         0      0     44
     compactPage               0      0     59
       -> HalFlashRead         0      0     58
       -> erasePage            0      0     54
       -> HalFlashRead         0      0     58
       -> calcChkF             0      0     54
       -> setItem              0      0     54
       -> writeItem            0      0     60
       -> xferBuf              0      0     62
       -> calcChkF             0      0     54
       -> setChk               0      0     54
       -> hotItemUpdate        0      0     54
       -> erasePage            0      0     54
       -> setPageUse           0      0     54
       -> erasePage            0      0     54
     erasePage                 0      0     44
       -> HalFlashErase        0      0     18
     findItem                  0      0     47
       -> initPage             0      0     24
     hotItem                   2      0     20
     hotItemUpdate             1      0     45
       -> hotItem              0      0     20
     initItem                  1      0     68
       -> HalFlashRead         0      0     60
       -> writeWordH           0      0     56
       -> compactPage          0      0     56
       -> writeItem            0      0     62
       -> setPageUse           0      0     56
       -> erasePage            0      0     56
       -> writeItem            0      0     62
     initNV                    2      0     22
       -> HalFlashRead         0      0     44
       -> setPageUse           0      0     40
       -> erasePage            0      0     40
       -> compactPage          0      0     40
       -> erasePage            0      0     40
       -> erasePage            0      0     40
       -> initPage             0      0     40
       -> initPage             0      0     40
       -> erasePage            0      0     40
     initPage                  0      0     48
       -> HalFlashRead         0      0     56
       -> calcChkF             0      0     52
       -> findItem             0      0     52
       -> setItem              0      0     52
       -> setItem              0      0     52
     osal_nv_delete            0      0     14
       -> findItem             0      0     28
       -> osal_nv_item_len     0      0     28
       -> setItem              0      0     28
       -> findItem             0      0     28
     osal_nv_init              2      0      0
       -> initNV               4      0      0
     osal_nv_item_init         0      0     18
       -> HalAdcCheckVdd       0      0     28
       -> findItem             0      0     28
       -> hotItemUpdate        0      0     28
       -> initItem             0      0     32
     osal_nv_item_len          0      0     36
       -> hotItem              0      0     40
       -> HalFlashRead         0      0     44
       -> findItem             0      0     40
     osal_nv_read              0      0     22
       -> hotItem              0      0     32
       -> HalFlashRead         0      0     36
       -> findItem             0      0     32
       -> HalFlashRead         0      0     36
     osal_nv_write             0      0     43
       -> HalAdcCheckVdd       0      0     70
       -> findItem             0      0     70
       -> HalFlashRead         0      0     74
       -> HalFlashRead         0      0     74
       -> initItem             0      0     74
       -> setItem              0      0     70
       -> xferBuf              0      0     78
       -> writeBuf             0      0     74
       -> xferBuf              0      0     78
       -> calcChkF             0      0     70
       -> setChk               0      0     70
       -> hotItemUpdate        0      0     70
       -> erasePage            0      0     70
       -> setPageUse           0      0     70
       -> erasePage            0      0     70
       -> setItem              0      0     70
     setChk                    0      0     51
       -> writeWordH           0      0     28
       -> HalFlashRead         0      0     32
     setItem                   0      0     59
       -> HalFlashRead         0      0     48
       -> writeWord            0      0     44
       -> writeWord            0      0     44
     setPageUse                0      0     52
       -> writeWord            0      0     34
     writeBuf                  1      0     61
       -> HalFlashRead         0      0     48
       -> writeWord            0      0     44
       -> HalFlashWrite        0      0     48
       -> HalFlashRead         0      0     48
       -> writeWord            0      0     44
     writeItem                 0      0     61
       -> writeWord            0      0     56
       -> HalFlashRead         0      0     60
       -> writeBuf             0      0     60
       -> calcChkF             0      0     56
       -> setChk               0      0     56
       -> hotItemUpdate        0      0     56
     writeWord                 0      0     42
       -> HalFlashWrite        0      0     28
     writeWordH                1      0     41
       -> writeWord            0      0     26
     xferBuf                   0      0     63
       -> HalFlashRead         0      0     48
       -> HalFlashRead         0      0     48
       -> writeWord            0      0     44
       -> HalFlashRead         0      0     48
       -> writeWord            0      0     44
       -> HalFlashRead         0      0     48
       -> HalFlashRead         0      0     48
       -> writeWord            0      0     44


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     hotIds                        6
     _nvBuf                    12288
     pgOff                        12
     pgLost                       12
     pgRes                         1
     findPg                        1
     hotPg                         3
     hotOff                        6
     initNV                      296
     ?Subroutine31                 7
     ??Subroutine51_0              5
     ?Subroutine48                11
     ??Subroutine59_0              6
     ?Subroutine0                  2
     ??Subroutine60_0              3
     ??Subroutine61_0              5
     setPageUse                   52
     ?Subroutine1                  3
     ??Subroutine52_0              5
     ??Subroutine56_0              6
     ?Subroutine42                12
     initPage                    425
     ?Subroutine46                 6
     ??Subroutine53_0              6
     ??Subroutine54_0              8
     ?Subroutine11                12
     ?Subroutine50                12
     ?Subroutine30                 4
     ?Subroutine47                17
     ?Subroutine19                 9
     ?Subroutine16                 4
     ?Subroutine43                13
     ?Subroutine34                13
     ?Subroutine45                 6
     ?Subroutine28                 8
     erasePage                    29
     compactPage                 572
     ?Subroutine35                 6
     ?Subroutine26                 3
     ??Subroutine55_0              6
     ?Subroutine14                13
     ?Subroutine29                11
     ?Subroutine21                 6
     findItem                     68
     initItem                    359
     ?Subroutine25                10
     ?Subroutine8                  7
     ?Subroutine22                 8
     ??Subroutine62_0             10
     setItem                     123
     ?Subroutine3                  5
     ?Subroutine23                13
     ??Subroutine57_0             11
     ?Subroutine13                11
     setChk                       93
     ?Subroutine6                  5
     calcChkF                    134
     ?Subroutine4                  5
     ?Subroutine38                19
     ?Subroutine39                15
     writeWord                    56
     writeWordH                   64
     ?Subroutine12                 4
     ?Subroutine2                  2
     writeBuf                    361
     ?Subroutine10                15
     ?Subroutine24                 8
     ?Subroutine7                 10
     ??Subroutine58_0              6
     xferBuf                     308
     ?Subroutine37                13
     ?Subroutine33                32
     writeItem                   481
     ?Subroutine18                 2
     ?Subroutine36                14
     ?Subroutine17                 7
     ?Subroutine15                15
     ?Subroutine44                12
     hotItem                      39
     ?Subroutine5                  7
     hotItemUpdate                39
     ?Subroutine40                 9
     ?Subroutine32                12
     ?Subroutine9                  6
     ?Subroutine49                17
     osal_nv_init                  9
     osal_nv_item_init            91
     osal_nv_item_len            103
     osal_nv_write               694
     ?Subroutine41                15
     ?Subroutine27                16
     ?Subroutine20                11
     osal_nv_read                129
     osal_nv_delete               93
     ??initNV?relay                6
     ??setPageUse?relay            6
     ??initPage?relay              6
     ??erasePage?relay             6
     ??compactPage?relay           6
     ??findItem?relay              6
     ??initItem?relay              6
     ??setItem?relay               6
     ??setChk?relay                6
     ??calcChkF?relay              6
     ??writeWord?relay             6
     ??writeWordH?relay            6
     ??writeBuf?relay              6
     ??xferBuf?relay               6
     ??writeItem?relay             6
     ??hotItem?relay               6
     ??hotItemUpdate?relay         6
     ??osal_nv_init?relay          6
     ??osal_nv_item_init?relay     6
     ??osal_nv_item_len?relay      6
     ??osal_nv_write?relay         6
     ??osal_nv_read?relay          6
     ??osal_nv_delete?relay        6

 
  5 198 bytes in segment BANKED_CODE
    138 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_ROM_C
     35 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
  5 336 bytes of CODE  memory
      6 bytes of CONST memory
 12 323 bytes of XDATA memory

Errors: none
Warnings: none
