///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        26/Nov/2019  21:28:44 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Co /
//                          mponents\hal\target\CC2530EB\hal_led.c            /
//    Command line       =  -f C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ       /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO     /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\6.Z /
//                          Stack-2.5.1a¹¤³ÌÄ£°å\Components\hal\target\CC2530 /
//                          EB\hal_led.c -D ZAPP_P1 -D MT_TASK -D             /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\Coordina /
//                          torEB\List\ -lA C:\Users\25814\Desktop\6.ZStack-2 /
//                          .5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\SampleApp\C /
//                          C2530DB\CoordinatorEB\List\ --diag_suppress       /
//                          Pe001,Pa010 -o C:\Users\25814\Desktop\6.ZStack-2. /
//                          5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\CoordinatorEB\Obj\ -e --no_code_motion     /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\ -I   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\Sourc /
//                          e\ -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ /
//                          £°å\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\ZMain\TI2530DB\ -I                         /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\hal\include\ -I                 /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\hal\target\CC2530EB\ -I         /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\include\ -I                 /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\high_level\ -I              /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\low_level\srf04\ -I         /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mac\low_level\srf04\single_chip /
//                          \ -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£ /
//                          °å\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\mt\ -I                     /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\osal\include\ -I                /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\services\saddr\ -I              /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\services\sdata\ -I              /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\af\ -I                    /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\nwk\ -I                   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\sapi\ -I                  /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\sec\ -I                   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\sys\ -I                   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\zdo\ -I                   /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\zmac\ -I                        /
//                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\zmac\f8w\ -Ohz                  /
//    List file          =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\Coordina /
//                          torEB\List\hal_led.s51                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_led

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_GE_X
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,0203H
        PUBLIC ??HalLedEnterSleep?relay
        FUNCTION ??HalLedEnterSleep?relay,0203H
        PUBLIC ??HalLedExitSleep?relay
        FUNCTION ??HalLedExitSleep?relay,0203H
        PUBLIC ??HalLedGetState?relay
        FUNCTION ??HalLedGetState?relay,0203H
        PUBLIC ??HalLedInit?relay
        FUNCTION ??HalLedInit?relay,0203H
        PUBLIC ??HalLedOnOff?relay
        FUNCTION ??HalLedOnOff?relay,0203H
        PUBLIC ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,0203H
        PUBLIC ??HalLedUpdate?relay
        FUNCTION ??HalLedUpdate?relay,0203H
        PUBLIC HalLedBlink
        FUNCTION HalLedBlink,021203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC HalLedEnterSleep
        FUNCTION HalLedEnterSleep,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLedExitSleep
        FUNCTION HalLedExitSleep,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLedGetState
        FUNCTION HalLedGetState,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLedInit
        FUNCTION HalLedInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLedOnOff
        FUNCTION HalLedOnOff,0203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLedSet
        FUNCTION HalLedSet,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC HalLedUpdate
        FUNCTION HalLedUpdate,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBWEAK _A_P1
        PUBWEAK __Constant_64
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_GetSystemClock SYMBOL "osal_GetSystemClock"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_set_event      SYMBOL "osal_set_event"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_GetSystemClock?relay SYMBOL "?relay", osal_GetSystemClock
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
HalLedBlink         SYMBOL "HalLedBlink"
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
HalLedEnterSleep    SYMBOL "HalLedEnterSleep"
??HalLedEnterSleep?relay SYMBOL "?relay", HalLedEnterSleep
HalLedExitSleep     SYMBOL "HalLedExitSleep"
??HalLedExitSleep?relay SYMBOL "?relay", HalLedExitSleep
HalLedGetState      SYMBOL "HalLedGetState"
??HalLedGetState?relay SYMBOL "?relay", HalLedGetState
HalLedInit          SYMBOL "HalLedInit"
??HalLedInit?relay  SYMBOL "?relay", HalLedInit
HalLedOnOff         SYMBOL "HalLedOnOff"
??HalLedOnOff?relay SYMBOL "?relay", HalLedOnOff
HalLedSet           SYMBOL "HalLedSet"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
HalLedUpdate        SYMBOL "HalLedUpdate"
??HalLedUpdate?relay SYMBOL "?relay", HalLedUpdate

        EXTERN osal_GetSystemClock
        FUNCTION osal_GetSystemClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??osal_GetSystemClock?relay
        FUNCTION ??osal_GetSystemClock?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN Hal_TaskID

// C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Components\hal\target\CC2530EB\hal_led.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_led.c
//    3   Revised:        $Date: 2012-02-14 12:43:32 -0800 (Tue, 14 Feb 2012) $
//    4   Revision:       $Revision: 29281 $
//    5 
//    6   Description:    This file contains the interface to the HAL LED Service.
//    7 
//    8 
//    9   Copyright 2006-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  *                                             INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1
//   44 #include "hal_defs.h"
//   45 #include "hal_types.h"
//   46 #include "hal_drivers.h"
//   47 #include "hal_led.h"
//   48 #include "osal.h"
//   49 #include "hal_board.h"
//   50 
//   51 /***************************************************************************************************
//   52  *                                             CONSTANTS
//   53  ***************************************************************************************************/
//   54 
//   55 /***************************************************************************************************
//   56  *                                              MACROS
//   57  ***************************************************************************************************/
//   58 
//   59 /***************************************************************************************************
//   60  *                                              TYPEDEFS
//   61  ***************************************************************************************************/
//   62 /* LED control structure */
//   63 typedef struct {
//   64   uint8 mode;       /* Operation mode */
//   65   uint8 todo;       /* Blink cycles left */
//   66   uint8 onPct;      /* On cycle percentage */
//   67   uint16 time;      /* On/off cycle time (msec) */
//   68   uint32 next;      /* Time for next change */
//   69 } HalLedControl_t;
//   70 
//   71 typedef struct
//   72 {
//   73   HalLedControl_t HalLedControlTable[HAL_LED_DEFAULT_MAX_LEDS];
//   74   uint8           sleepActive;
//   75 } HalLedStatus_t;
//   76 
//   77 
//   78 /***************************************************************************************************
//   79  *                                           GLOBAL VARIABLES
//   80  ***************************************************************************************************/
//   81 
//   82 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   83 static uint8 HalLedState;              // LED state at last set/clr/blink update
HalLedState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   84 
//   85 #if HAL_LED == TRUE

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   86 static uint8 HalSleepLedState;         // LED state at last set/clr/blink update
HalSleepLedState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   87 static uint8 preBlinkState;            // Original State before going to blink mode
preBlinkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   88                                        // bit 0, 1, 2, 3 represent led 0, 1, 2, 3
//   89 #endif
//   90 
//   91 #ifdef BLINK_LEDS

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   92   static HalLedStatus_t HalLedStatusControl;
HalLedStatusControl:
        DS 37
        REQUIRE __INIT_XDATA_Z
//   93 #endif
//   94 
//   95 /***************************************************************************************************
//   96  *                                            LOCAL FUNCTION
//   97  ***************************************************************************************************/
//   98 #if (HAL_LED == TRUE)
//   99 void HalLedUpdate (void);
//  100 void HalLedOnOff (uint8 leds, uint8 mode);
//  101 #endif /* HAL_LED */
//  102 
//  103 /***************************************************************************************************
//  104  *                                            FUNCTIONS - API
//  105  ***************************************************************************************************/
//  106 
//  107 /***************************************************************************************************
//  108  * @fn      HalLedInit
//  109  *
//  110  * @brief   Initialize LED Service
//  111  *
//  112  * @param   init - pointer to void that contains the initialized value
//  113  *
//  114  * @return  None
//  115  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  116 void HalLedInit (void)
HalLedInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalLedInit
        CODE
//  117 {
        FUNCALL HalLedInit, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  118 #if (HAL_LED == TRUE)
//  119   /* Initialize all LEDs to OFF */
//  120   HalLedSet (HAL_LED_ALL, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0xf
        LCALL   ??HalLedSet?relay
//  121 #endif /* HAL_LED */
//  122 #ifdef BLINK_LEDS
//  123   /* Initialize sleepActive to FALSE */
//  124   HalLedStatusControl.sleepActive = FALSE;
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  125 #endif
//  126 }
//  127 
//  128 /***************************************************************************************************
//  129  * @fn      HalLedSet
//  130  *
//  131  * @brief   Tun ON/OFF/TOGGLE given LEDs
//  132  *
//  133  * @param   led - bit mask value of leds to be turned ON/OFF/TOGGLE
//  134  *          mode - BLINK, FLASH, TOGGLE, ON, OFF
//  135  * @return  None
//  136  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  137 uint8 HalLedSet (uint8 leds, uint8 mode)
HalLedSet:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function HalLedSet
        CODE
//  138 {
        FUNCALL HalLedSet, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedSet, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedSet, HalLedOnOff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 2,R2
//  139 
//  140 #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
//  141   uint8 led;
//  142   HalLedControl_t *sts;
//  143 
//  144   switch (mode)
        MOV     A,R2
        JZ      ??HalLedSet_0
        DEC     A
        JZ      ??HalLedSet_0
        DEC     A
        JZ      ??HalLedSet_1
        ADD     A,#-0x2
        JZ      ??HalLedSet_2
        ADD     A,#-0x4
        JZ      ??HalLedSet_0
        SJMP    ??HalLedSet_3
//  145   {
//  146     case HAL_LED_MODE_BLINK:
//  147       /* Default blink, 1 time, D% duty cycle */
//  148       HalLedBlink (leds, 1, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
??HalLedSet_1:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#0x1
??HalLedSet_4:
        LCALL   ??HalLedBlink?relay
//  149       break;
//  150 
//  151     case HAL_LED_MODE_FLASH:
//  152       /* Default flash, N times, D% duty cycle */
//  153       HalLedBlink (leds, HAL_LED_DEFAULT_FLASH_COUNT, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
//  154       break;
//  155 
//  156     case HAL_LED_MODE_ON:
//  157     case HAL_LED_MODE_OFF:
//  158     case HAL_LED_MODE_TOGGLE:
//  159 
//  160       led = HAL_LED_1;
//  161       leds &= HAL_LED_ALL;
//  162       sts = HalLedStatusControl.HalLedControlTable;
//  163 
//  164       while (leds)
//  165       {
//  166         if (leds & led)
//  167         {
//  168           if (mode != HAL_LED_MODE_TOGGLE)
//  169           {
//  170             sts->mode = mode;  /* ON or OFF */
//  171           }
//  172           else
//  173           {
//  174             sts->mode ^= HAL_LED_MODE_ON;  /* Toggle */
//  175           }
//  176           HalLedOnOff (led, sts->mode);
//  177           leds ^= led;
//  178         }
//  179         led <<= 1;
//  180         sts++;
//  181       }
//  182       break;
//  183 
//  184     default:
//  185       break;
//  186   }
//  187 
//  188 #elif (HAL_LED == TRUE)
//  189   LedOnOff(leds, mode);
//  190 #else
//  191   // HAL LED is disabled, suppress unused argument warnings
//  192   (void) leds;
//  193   (void) mode;
//  194 #endif /* BLINK_LEDS && HAL_LED   */
//  195 
//  196   return ( HalLedState );
??HalLedSet_3:
        MOV     DPTR,#HalLedState
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
??HalLedSet_2:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#0x32
        SJMP    ??HalLedSet_4
??HalLedSet_0:
        MOV     ?V0 + 1,#0x1
        ANL     ?V0 + 0,#0xf
        MOV     R6,#HalLedStatusControl & 0xff
        MOV     R7,#(HalLedStatusControl >> 8) & 0xff
        SJMP    ??HalLedSet_5
??HalLedSet_6:
        MOVX    A,@DPTR
        XRL     A,#0x1
??HalLedSet_7:
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedOnOff
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,?V0 + 1
        LCALL   ??HalLedOnOff?relay
        MOV     A,?V0 + 1
        XRL     ?V0 + 0,A
??HalLedSet_8:
        MOV     A,?V0 + 1
        CLR     C
        RLC     A
        MOV     ?V0 + 1,A
        MOV     A,R6
        ADD     A,#0x9
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??HalLedSet_5:
        MOV     A,?V0 + 0
        JZ      ??HalLedSet_3
        ANL     A,?V0 + 1
        JZ      ??HalLedSet_8
        MOV     A,#0x8
        XRL     A,?V0 + 2
        MOV     DPL,R6
        MOV     DPH,R7
        JZ      ??HalLedSet_6
        MOV     A,?V0 + 2
        SJMP    ??HalLedSet_7
        CFI EndBlock cfiBlock1
//  197 
//  198 }
//  199 
//  200 /***************************************************************************************************
//  201  * @fn      HalLedBlink
//  202  *
//  203  * @brief   Blink the leds
//  204  *
//  205  * @param   leds       - bit mask value of leds to be blinked
//  206  *          numBlinks  - number of blinks
//  207  *          percent    - the percentage in each period where the led
//  208  *                       will be on
//  209  *          period     - length of each cycle in milliseconds
//  210  *
//  211  * @return  None
//  212  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  213 void HalLedBlink (uint8 leds, uint8 numBlinks, uint8 percent, uint16 period)
HalLedBlink:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function HalLedBlink
        CODE
//  214 {
        FUNCALL HalLedBlink, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedBlink, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedBlink, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedBlink, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedBlink, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 3,R2
        MOV     ?V0 + 4,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  215 #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
//  216   uint8 led;
//  217   HalLedControl_t *sts;
//  218 
//  219   if (leds && percent && period)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??HalLedBlink_0 & 0xFFFF
        MOV     A,R3
        JNZ     $+5
        LJMP    ??HalLedBlink_0 & 0xFFFF
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??HalLedBlink_0 & 0xFFFF
//  220   {
//  221     if (percent < 100)
        MOV     A,R3
        CLR     C
        SUBB    A,#0x64
        JC      $+5
        LJMP    ??HalLedBlink_1 & 0xFFFF
//  222     {
//  223       led = HAL_LED_1;
        MOV     ?V0 + 5,#0x1
//  224       leds &= HAL_LED_ALL;
        ANL     ?V0 + 2,#0xf
//  225       sts = HalLedStatusControl.HalLedControlTable;
        MOV     ?V0 + 0,#HalLedStatusControl & 0xff
        MOV     ?V0 + 1,#(HalLedStatusControl >> 8) & 0xff
        SJMP    ??HalLedBlink_2
//  226 
//  227       while (leds)
//  228       {
//  229         if (leds & led)
??HalLedBlink_3:
        ANL     A,?V0 + 5
        JZ      ??HalLedBlink_4
//  230         {
//  231           /* Store the current state of the led before going to blinking if not already blinking */
//  232           if(sts->mode < HAL_LED_MODE_BLINK )
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x2
        JNC     ??HalLedBlink_5
//  233           	preBlinkState |= (led & HalLedState);
        MOV     DPTR,#HalLedState
        MOVX    A,@DPTR
        ANL     A,?V0 + 5
        MOV     R0,A
        MOV     DPTR,#preBlinkState
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
//  234 
//  235           sts->mode  = HAL_LED_MODE_OFF;                    /* Stop previous blink */
??HalLedBlink_5:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        CLR     A
        MOVX    @DPTR,A
//  236           sts->time  = period;                              /* Time for one on/off cycle */
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine1 & 0xFFFF
//  237           sts->onPct = percent;                             /* % of cycle LED is on */
??CrossCallReturnLabel_0:
        INC     DPTR
        MOV     A,?V0 + 4
        LCALL   ?Subroutine1 & 0xFFFF
//  238           sts->todo  = numBlinks;                           /* Number of blink cycles */
??CrossCallReturnLabel_1:
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  239           if (!numBlinks) sts->mode |= HAL_LED_MODE_FLASH;  /* Continuous */
        JNZ     ??HalLedBlink_6
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  240           sts->next = osal_GetSystemClock();                /* Start now */
??HalLedBlink_6:
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL   ??osal_GetSystemClock?relay
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XSTORE_R2345
//  241           sts->mode |= HAL_LED_MODE_BLINK;                  /* Enable blinking */
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//  242           leds ^= led;
        MOV     A,?V0 + 5
        XRL     ?V0 + 2,A
//  243         }
//  244         led <<= 1;
??HalLedBlink_4:
        MOV     A,?V0 + 5
        CLR     C
        RLC     A
        MOV     ?V0 + 5,A
//  245         sts++;
        MOV     A,?V0 + 0
        ADD     A,#0x9
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
//  246       }
??HalLedBlink_2:
        MOV     A,?V0 + 2
        JNZ     ??HalLedBlink_3
//  247       // Cancel any overlapping timer for blink events
//  248       osal_stop_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  249       osal_set_event (Hal_TaskID, HAL_LED_BLINK_EVENT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        SJMP    ??HalLedBlink_7
//  250     }
//  251     else
//  252     {
//  253       HalLedSet (leds, HAL_LED_MODE_ON);                    /* >= 100%, turn on */
??HalLedBlink_1:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??HalLedBlink_8
//  254     }
//  255   }
//  256   else
//  257   {
//  258     HalLedSet (leds, HAL_LED_MODE_OFF);                     /* No on time, turn off */
??HalLedBlink_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??HalLedBlink_8:
        LCALL   ??HalLedSet?relay
//  259   }
//  260 #elif (HAL_LED == TRUE)
//  261   percent = (leds & HalLedState) ? HAL_LED_MODE_OFF : HAL_LED_MODE_ON;
//  262   HalLedOnOff (leds, percent);                              /* Toggle */
//  263 #else
//  264   // HAL LED is disabled, suppress unused argument warnings
//  265   (void) leds;
//  266   (void) numBlinks;
//  267   (void) percent;
//  268   (void) period;
//  269 #endif /* BLINK_LEDS && HAL_LED */
//  270 }
??HalLedBlink_7:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  271 
//  272 #if (HAL_LED == TRUE)
//  273 /***************************************************************************************************
//  274  * @fn      HalLedUpdate
//  275  *
//  276  * @brief   Update leds to work with blink
//  277  *
//  278  * @param   none
//  279  *
//  280  * @return  none
//  281  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  282 void HalLedUpdate (void)
HalLedUpdate:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function HalLedUpdate
        CODE
//  283 {
        FUNCALL HalLedUpdate, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedUpdate, HalLedOnOff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedUpdate, HalLedOnOff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedUpdate, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedUpdate, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  284   uint8 led;
//  285   uint8 pct;
//  286   uint8 leds;
//  287   HalLedControl_t *sts;
//  288   uint32 time;
//  289   uint16 next;
//  290   uint16 wait;
//  291 
//  292   next = 0;
        MOV     ?V0 + 12,#0x0
        MOV     ?V0 + 13,#0x0
//  293   led  = HAL_LED_1;
        MOV     ?V0 + 14,#0x1
//  294   leds = HAL_LED_ALL;
        MOV     ?V0 + 15,#0xf
//  295   sts = HalLedStatusControl.HalLedControlTable;
        MOV     R6,#HalLedStatusControl & 0xff
        MOV     R7,#(HalLedStatusControl >> 8) & 0xff
//  296 
//  297   /* Check if sleep is active or not */
//  298   if (!HalLedStatusControl.sleepActive)
        MOV     DPTR,#HalLedStatusControl + 36
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??HalLedUpdate_0 & 0xFFFF
//  299   {
//  300     while (leds)
//  301     {
//  302       if (leds & led)
??HalLedUpdate_1:
        MOV     A,?V0 + 15
        ANL     A,?V0 + 14
        JNZ     $+5
        LJMP    ??HalLedUpdate_2 & 0xFFFF
//  303       {
//  304         if (sts->mode & HAL_LED_MODE_BLINK)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JC      $+5
        LJMP    ??HalLedUpdate_3 & 0xFFFF
//  305         {
//  306           time = osal_GetSystemClock();
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL   ??osal_GetSystemClock?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  307           if (time >= sts->next)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 4
        LCALL   ?UL_GE_X
        MOV     DPL,R6
        MOV     DPH,R7
        JC      $+5
        LJMP    ??HalLedUpdate_4 & 0xFFFF
//  308           {
//  309             if (sts->mode & HAL_LED_MODE_ON)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        INC     DPTR
        JNC     ??HalLedUpdate_5
//  310             {
//  311               pct = 100 - sts->onPct;               /* Percentage of cycle for off */
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x64
        CLR     C
        SUBB    A,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  312               sts->mode &= ~HAL_LED_MODE_ON;        /* Say it's not on */
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        MOVX    @DPTR,A
//  313               HalLedOnOff (led, HAL_LED_MODE_OFF);  /* Turn it off */
        ; Setup parameters for call to function HalLedOnOff
        MOV     R2,#0x0
        MOV     R1,?V0 + 14
        LCALL   ??HalLedOnOff?relay
//  314 
//  315               if (!(sts->mode & HAL_LED_MODE_FLASH))
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JC      ??HalLedUpdate_6
//  316               {
//  317                 sts->todo--;                        /* Not continuous, reduce count */
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
??HalLedUpdate_7:
        MOVX    @DPTR,A
        SJMP    ??HalLedUpdate_6
//  318               }
//  319             }            
//  320             else if ( (!sts->todo) && !(sts->mode & HAL_LED_MODE_FLASH) )
??HalLedUpdate_5:
        MOVX    A,@DPTR
        JNZ     ??HalLedUpdate_8
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JC      ??HalLedUpdate_8
//  321             {
//  322               sts->mode ^= HAL_LED_MODE_BLINK;      /* No more blinks */  
        XRL     A,#0x2
        SJMP    ??HalLedUpdate_7
//  323             }            
//  324             else
//  325             {
//  326               pct = sts->onPct;                     /* Percentage of cycle for on */
??HalLedUpdate_8:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  327               sts->mode |= HAL_LED_MODE_ON;         /* Say it's on */
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//  328               HalLedOnOff (led, HAL_LED_MODE_ON);   /* Turn it on */
        ; Setup parameters for call to function HalLedOnOff
        MOV     R2,#0x1
        MOV     R1,?V0 + 14
        LCALL   ??HalLedOnOff?relay
//  329             }
//  330             if (sts->mode & HAL_LED_MODE_BLINK)
??HalLedUpdate_6:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??HalLedUpdate_9
//  331             {
//  332               wait = (((uint32)pct * (uint32)sts->time) / 100);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        CLR     A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_64
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?UL_DIV_MOD
//  333               sts->next = time + wait;
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,?V0 + 1
        CLR     A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?L_ADD
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
??HalLedUpdate_10:
        MOVX    @DPTR,A
        SJMP    ??HalLedUpdate_11
//  334             }
//  335             else
//  336             {
//  337               /* no more blink, no more wait */
//  338               wait = 0;
??HalLedUpdate_9:
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  339               /* After blinking, set the LED back to the state before it blinks */
//  340               HalLedSet (led, ((preBlinkState & led)!=0)?HAL_LED_MODE_ON:HAL_LED_MODE_OFF);
        MOV     DPTR,#preBlinkState
        MOVX    A,@DPTR
        ANL     A,?V0 + 14
        JZ      ??HalLedUpdate_12
        MOV     R2,#0x1
        SJMP    ??HalLedUpdate_13
??HalLedUpdate_12:
        MOV     R2,#0x0
??HalLedUpdate_13:
        ; Setup parameters for call to function HalLedSet
        MOV     R1,?V0 + 14
        LCALL   ??HalLedSet?relay
//  341               /* Clear the saved bit */
//  342               preBlinkState &= (led ^ 0xFF);
        MOV     A,#-0x1
        XRL     A,?V0 + 14
        MOV     R0,A
        MOV     DPTR,#preBlinkState
        MOVX    A,@DPTR
        ANL     A,R0
        SJMP    ??HalLedUpdate_10
//  343             }
//  344           }
//  345           else
//  346           {
//  347             wait = sts->next - time;  /* Time left */
??HalLedUpdate_4:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,?V0 + 4
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        SUBB    A,?V0 + 5
        MOV     ?V0 + 1,A
//  348           }
//  349 
//  350           if (!next || ( wait && (wait < next) ))
??HalLedUpdate_11:
        MOV     A,?V0 + 12
        ORL     A,?V0 + 13
        JZ      ??HalLedUpdate_14
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??HalLedUpdate_3
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,?V0 + 12
        MOV     A,?V0 + 1
        SUBB    A,?V0 + 13
        JNC     ??HalLedUpdate_3
//  351           {
//  352             next = wait;
??HalLedUpdate_14:
        MOV     ?V0 + 12,?V0 + 0
        MOV     ?V0 + 13,?V0 + 1
//  353           }
//  354         }
//  355         leds ^= led;
??HalLedUpdate_3:
        MOV     A,?V0 + 14
        XRL     ?V0 + 15,A
//  356       }
//  357       led <<= 1;
??HalLedUpdate_2:
        MOV     A,?V0 + 14
        CLR     C
        RLC     A
        MOV     ?V0 + 14,A
//  358       sts++;
        MOV     A,R6
        ADD     A,#0x9
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  359     }
        MOV     A,?V0 + 15
        JZ      $+5
        LJMP    ??HalLedUpdate_1 & 0xFFFF
//  360 
//  361     if (next)
        MOV     A,?V0 + 12
        ORL     A,?V0 + 13
        JZ      ??HalLedUpdate_0
//  362     {
//  363       osal_start_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT, next);   /* Schedule event */
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,?V0 + 12
        MOV     R5,?V0 + 13
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  364     }
//  365   }
//  366 }
??HalLedUpdate_0:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  367 
//  368 /***************************************************************************************************
//  369  * @fn      HalLedOnOff
//  370  *
//  371  * @brief   Turns specified LED ON or OFF
//  372  *
//  373  * @param   leds - LED bit mask
//  374  *          mode - LED_ON,LED_OFF,
//  375  *
//  376  * @return  none
//  377  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  378 void HalLedOnOff (uint8 leds, uint8 mode)
HalLedOnOff:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function HalLedOnOff
        CODE
//  379 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  380   if (leds & HAL_LED_1)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        JNC     ??HalLedOnOff_0
//  381   {
//  382     if (mode == HAL_LED_MODE_ON)
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??HalLedOnOff_1
//  383     {
//  384       HAL_TURN_ON_LED1();
        SETB    0x90.0
        SJMP    ??HalLedOnOff_0
//  385     }
//  386     else
//  387     {
//  388       HAL_TURN_OFF_LED1();
??HalLedOnOff_1:
        CLR     0x90.0
//  389     }
//  390   }
//  391 
//  392   if (leds & HAL_LED_2)
??HalLedOnOff_0:
        MOV     A,R1
        MOV     C,0xE0 /* A   */.1
        JNC     ??HalLedOnOff_2
//  393   {
//  394     if (mode == HAL_LED_MODE_ON)
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??HalLedOnOff_3
//  395     {
//  396       HAL_TURN_ON_LED2();
        SETB    0x90.1
        SJMP    ??HalLedOnOff_2
//  397     }
//  398     else
//  399     {
//  400       HAL_TURN_OFF_LED2();
??HalLedOnOff_3:
        CLR     0x90.1
//  401     }
//  402   }
//  403 
//  404   if (leds & HAL_LED_3)
??HalLedOnOff_2:
        MOV     A,R1
        MOV     C,0xE0 /* A   */.2
        JNC     ??HalLedOnOff_4
//  405   {
//  406     if (mode == HAL_LED_MODE_ON)
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??HalLedOnOff_5
//  407     {
//  408       HAL_TURN_ON_LED3();
        SETB    0x90.4
        SJMP    ??HalLedOnOff_4
//  409     }
//  410     else
//  411     {
//  412       HAL_TURN_OFF_LED3();
??HalLedOnOff_5:
        CLR     0x90.4
//  413     }
//  414   }
//  415 
//  416   if (leds & HAL_LED_4)
??HalLedOnOff_4:
        MOV     A,R1
        MOV     C,0xE0 /* A   */.3
        JNC     ??HalLedOnOff_6
//  417   {
//  418     if (mode == HAL_LED_MODE_ON)
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??HalLedOnOff_7
//  419     {
//  420       HAL_TURN_ON_LED4();
        SETB    0x90.0
        SJMP    ??HalLedOnOff_8
//  421     }
//  422     else
//  423     {
//  424       HAL_TURN_OFF_LED4();
??HalLedOnOff_7:
        CLR     0x90.0
//  425     }
//  426   }
//  427 
//  428   /* Remember current state */
//  429   if (mode)
??HalLedOnOff_6:
        MOV     A,R2
        JZ      ??HalLedOnOff_9
//  430   {
//  431     HalLedState |= leds;
??HalLedOnOff_8:
        MOV     DPTR,#HalLedState
        MOVX    A,@DPTR
        ORL     A,R1
        SJMP    ??HalLedOnOff_10
//  432   }
//  433   else
//  434   {
//  435     HalLedState &= (leds ^ 0xFF);
??HalLedOnOff_9:
        MOV     A,#-0x1
        XRL     A,R1
        MOV     R0,A
        MOV     DPTR,#HalLedState
        MOVX    A,@DPTR
        ANL     A,R0
//  436   }
??HalLedOnOff_10:
        SJMP    ??Subroutine2_0
        CFI EndBlock cfiBlock7
        REQUIRE _A_P1
//  437 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     DPTR,#HalLedStatusControl + 36
        CLR     A
        CFI EndBlock cfiBlock8
        REQUIRE ??Subroutine2_0
        ; // Fall through to label ??Subroutine2_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine2_0:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock9
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine3_0:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock10
//  438 #endif /* HAL_LED */
//  439 
//  440 /***************************************************************************************************
//  441  * @fn      HalGetLedState
//  442  *
//  443  * @brief   Dim LED2 - Dim (set level) of LED2
//  444  *
//  445  * @param   none
//  446  *
//  447  * @return  led state
//  448  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  449 uint8 HalLedGetState ()
HalLedGetState:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function HalLedGetState
        CODE
//  450 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  451 #if (HAL_LED == TRUE)
//  452   return HalLedState;
        MOV     DPTR,#HalLedState
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??Subroutine3_0
        CFI EndBlock cfiBlock11
//  453 #else
//  454   return 0;
//  455 #endif
//  456 }
//  457 
//  458 /***************************************************************************************************
//  459  * @fn      HalLedEnterSleep
//  460  *
//  461  * @brief   Store current LEDs state before sleep
//  462  *
//  463  * @param   none
//  464  *
//  465  * @return  none
//  466  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  467 void HalLedEnterSleep( void )
HalLedEnterSleep:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function HalLedEnterSleep
        CODE
//  468 {
        FUNCALL HalLedEnterSleep, HalLedOnOff
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  469 #ifdef BLINK_LEDS
//  470   /* Sleep ON */
//  471   HalLedStatusControl.sleepActive = TRUE;
        MOV     DPTR,#HalLedStatusControl + 36
        MOV     A,#0x1
        MOVX    @DPTR,A
//  472 #endif /* BLINK_LEDS */
//  473 
//  474 #if (HAL_LED == TRUE)
//  475   /* Save the state of each led */
//  476   HalSleepLedState = 0;
//  477   HalSleepLedState |= HAL_STATE_LED1();
        MOV     A,0x90
        MOV     R3,A
//  478   HalSleepLedState |= HAL_STATE_LED2() << 1;
        MOV     A,0x90
        MOV     R0,A
//  479   HalSleepLedState |= HAL_STATE_LED3() << 2;
        MOV     A,0x90
        MOV     R1,A
//  480   HalSleepLedState |= HAL_STATE_LED4() << 3;
        MOV     A,0x90
        MOV     R2,A
        MOV     A,R0
        MOV     C,0xE0 /* A   */.1
        JNC     ??HalLedEnterSleep_0
        SETB    B.0
        SJMP    ??HalLedEnterSleep_1
??HalLedEnterSleep_0:
        CLR     B.0
??HalLedEnterSleep_1:
        MOV     A,R1
        MOV     C,0xE0 /* A   */.4
        JNC     ??HalLedEnterSleep_2
        SETB    B.1
        SJMP    ??HalLedEnterSleep_3
??HalLedEnterSleep_2:
        CLR     B.1
??HalLedEnterSleep_3:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        CLR     A
        RLC     A
        RLC     A
        RLC     A
        RLC     A
        MOV     R2,A
        MOV     C,B.1
        CLR     A
        RLC     A
        RLC     A
        RLC     A
        MOV     R1,A
        MOV     C,B.0
        CLR     A
        RLC     A
        RLC     A
        MOV     R0,A
        MOV     A,R3
        MOV     C,0xE0 /* A   */.0
        CLR     A
        RLC     A
        ORL     A,R0
        ORL     A,R1
        ORL     A,R2
        MOV     DPTR,#HalSleepLedState
        MOVX    @DPTR,A
//  481 
//  482   /* TURN OFF all LEDs to save power */
//  483   HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedOnOff
        MOV     R2,#0x0
        MOV     R1,#0xf
        LCALL   ??HalLedOnOff?relay
//  484 #endif /* HAL_LED */
//  485 
//  486 }
        SJMP    ??Subroutine3_0
        CFI EndBlock cfiBlock12
        REQUIRE _A_P1
//  487 
//  488 /***************************************************************************************************
//  489  * @fn      HalLedExitSleep
//  490  *
//  491  * @brief   Restore current LEDs state after sleep
//  492  *
//  493  * @param   none
//  494  *
//  495  * @return  none
//  496  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  497 void HalLedExitSleep( void )
HalLedExitSleep:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function HalLedExitSleep
        CODE
//  498 {
        FUNCALL HalLedExitSleep, HalLedOnOff
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedExitSleep, HalLedUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  499 #if (HAL_LED == TRUE)
//  500   /* Load back the saved state */
//  501   HalLedOnOff(HalSleepLedState, HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedOnOff
        MOV     R2,#0x1
        MOV     DPTR,#HalSleepLedState
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??HalLedOnOff?relay
//  502 
//  503   /* Restart - This takes care BLINKING LEDS */
//  504   HalLedUpdate();
        ; Setup parameters for call to function HalLedUpdate
        LCALL   ??HalLedUpdate?relay
//  505 #endif /* HAL_LED */
//  506 
//  507 #ifdef BLINK_LEDS
//  508   /* Sleep OFF */
//  509   HalLedStatusControl.sleepActive = FALSE;
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock13
//  510 #endif /* BLINK_LEDS */
//  511 }

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedBlink?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedBlink

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedOnOff?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedOnOff

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedGetState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedGetState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedEnterSleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedEnterSleep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedExitSleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedExitSleep

        END
//  512 
//  513 /***************************************************************************************************
//  514 ***************************************************************************************************/
//  515 
//  516 
//  517 
//  518 
// 
// 1 024 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//     4 bytes in segment XDATA_ROM_C
//    40 bytes in segment XDATA_Z
// 
// 1 072 bytes of CODE  memory
//     0 bytes of CONST memory (+ 4 bytes shared)
//     0 bytes of DATA  memory (+ 1 byte  shared)
//    40 bytes of XDATA memory
//
//Errors: none
//Warnings: none
