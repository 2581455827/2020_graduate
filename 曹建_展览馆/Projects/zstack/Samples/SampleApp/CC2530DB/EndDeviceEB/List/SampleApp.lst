###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         27/Nov/2019  18:21:13 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\Source\SampleApp.c              #
#    Command line       =  -f C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func   #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f C:\Users\25814\Desktop\≤‹Ω® #
#                          _’π¿¿π›\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg             #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\≤‹Ω® #
#                          _’π¿¿π›\Projects\zstack\Samples\SampleApp\Source\S #
#                          ampleApp.c -D NWK_AUTO_POLL -D ZAPP_P1 -D MT_TASK  #
#                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D                   #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\25814\Desktop\≤‹Ω #
#                          ®_’π¿¿π›\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\List\ -lA C:\Users\25814\Desktop\≤‹Ω #
#                          ®_’π¿¿π›\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\List\ --diag_suppress Pe001,Pa010    #
#                          -o C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\    #
#                          -e --no_code_motion --debug --core=plain           #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\≤‹Ω #
#                          ®_’π¿¿π›\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\ -I C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\Source\ -I    #
#                          C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530D #
#                          B\ -I C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\hal\include\ -I                          #
#                          C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\hal\target\CC2530EB\ -I                        #
#                          C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\mac\include\ -I C:\Users\25814\Desktop\≤‹Ω®_’π #
#                          ¿¿π›\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\high_level\ -I         #
#                          C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\mac\low_level\srf04\ -I                        #
#                          C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\mac\low_level\srf04\single_chip\ -I            #
#                          C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\mt\ -I C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\osal\include\ -I                    #
#                          C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\services\saddr\ -I C:\Users\25814\Desktop\≤‹Ω® #
#                          _’π¿¿π›\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\services\sdata\ -I      #
#                          C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\stack\af\ -I C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π #
#                          ›\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\nwk\ -I                 #
#                          C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\stack\sapi\ -I C:\Users\25814\Desktop\≤‹Ω®_’π¿ #
#                          ¿π›\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\Components\stack\sec\ -I               #
#                          C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I C:\Users\25814\Desktop\≤‹Ω®_’π¿¿ #
#                          π›\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\zdo\ -I                #
#                          C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\zmac\ -I C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\zmac\f8w\ -Ohz                    #
#    List file          =  C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\EndDeviceEB\List\Sampl #
#                          eApp.lst                                           #
#    Object file        =  C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\Sample #
#                          App.r51                                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          #include <stdio.h>
     79          #include <string.h>
     80          
     81          //MY DEVICE
     82          #include "DHT11.h"
     83          #include "gy30.h"
     84          
     85          /*********************************************************************
     86           * MACROS
     87           */
     88          
     89          #define GAS P0_6
     90          #define FIRE P1_1
     91          #define BEEP P1_2
     92          /*********************************************************************
     93           * CONSTANTS
     94           */
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          /*********************************************************************
    101           * GLOBAL VARIABLES
    102           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    103          uint8 AppTitle[] = "ALD2530 Example"; //”¶”√≥Ã–Ú√˚≥∆ 
   \                     AppTitle:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for AppTitle>`
   \   000010                REQUIRE __INIT_XDATA_I
    104          uint16 ReadGasData( void );
    105           

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          void myDelay(){
   \                     myDelay:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    107            for(int j =0;j<100;j++)
   \   000000   7A64         MOV     R2,#0x64
    108              for(int i = 0;i<0xffff;i++)
   \                     ??myDelay_0:
   \   000002   7800         MOV     R0,#0x0
   \   000004   7900         MOV     R1,#0x0
   \                     ??myDelay_1:
   \   000006   E8           MOV     A,R0
   \   000007   2401         ADD     A,#0x1
   \   000009   08           INC     R0
   \   00000A   E9           MOV     A,R1
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   68           XRL     A,R0
   \   000011   7003         JNZ     ??myDelay_2
   \   000013   74FF         MOV     A,#-0x1
   \   000015   69           XRL     A,R1
   \                     ??myDelay_2:
   \   000016   70EE         JNZ     ??myDelay_1
    109              {}
   \   000018   1A           DEC     R2
   \   000019   EA           MOV     A,R2
   \   00001A   70E6         JNZ     ??myDelay_0
    110          }
   \   00001C   02....       LJMP    ?BRET
    111          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    112          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    113          {
    114            SAMPLEAPP_PERIODIC_CLUSTERID,
    115            SAMPLEAPP_FLASH_CLUSTERID
    116          };
    117          

   \                                 In  segment XDATA_ROM_C, align 1
    118          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    119          {
    120            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    121            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    122            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    123            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    124            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    125            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    126            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    127            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    128            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    129          };
    130          
    131          // This is the Endpoint/Interface description.  It is defined here, but
    132          // filled-in in SampleApp_Init().  Another way to go would be to fill
    133          // in the structure here and make it a "const" (in code space).  The
    134          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    136          
    137          /*********************************************************************
    138           * EXTERNAL VARIABLES
    139           */
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL VARIABLES
    147           */
    148          
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151                                    // This variable will be received when
    152                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    164          
    165          /*********************************************************************
    166           * LOCAL FUNCTIONS
    167           */
    168          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    169          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    170          void SampleApp_SendPeriodicMessage( void );
    171          void SampleApp_SendFlashMessage( uint16 flashTime );
    172          void SampleApp_Send_P2P_Message(void);
    173          /*********************************************************************
    174           * NETWORK LAYER CALLBACKS
    175           */
    176          
    177          /*********************************************************************
    178           * PUBLIC FUNCTIONS
    179           */
    180           
    181          /*********************************************************************
    182           * @fn      SampleApp_Init
    183           *
    184           * @brief   Initialization function for the Generic App Task.
    185           *          This is called during initialization and should contain
    186           *          any application specific initialization (ie. hardware
    187           *          initialization/setup, table initialization, power up
    188           *          notificaiton ... ).
    189           *
    190           * @param   task_id - the ID assigned by OSAL.  This ID should be
    191           *                    used to send messages and set timers.
    192           *
    193           * @return  none
    194           */
    195          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    196          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    197          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    198            
    199           
    200            SampleApp_TaskID = task_id;   //osal∑÷≈‰µƒ»ŒŒÒIDÀÊ◊≈”√ªßÃÌº”»ŒŒÒµƒ‘ˆ∂‡∂¯∏ƒ±‰
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    201            SampleApp_NwkState = DEV_INIT;//…Ë±∏◊¥Ã¨…Ë∂®Œ™ZDO≤„÷–∂®“Âµƒ≥ı ºªØ◊¥Ã¨
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    202            SampleApp_TransID = 0;        //œ˚œ¢∑¢ÀÕID£®∂‡œ˚œ¢ ±”–À≥–Ú÷Æ∑÷£©
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    203            //ƒ£øÈ≥ı ºªØ
    204            LIGHT_INIT();//≥ı ºªØπ‚’’ 
   \   000016   53F3CF       ANL     0xf3,#0xcf
   \   000019   43FD30       ORL     0xfd,#0x30
   \   00001C   D285         SETB    0x80.5
   \   00001E   D284         SETB    0x80.4
    205            P0SEL&=~0x40;
   \   000020   53F3BF       ANL     0xf3,#0xbf
    206            P0DIR&=~0x40;//≥ı ºªØ∆¯ÃÂ
   \   000023   53FDBF       ANL     0xfd,#0xbf
    207            P1SEL&=~0x2;
   \   000026   53F4FD       ANL     0xf4,#0xfd
    208            P1DIR&=~0x2;//≥ı ºªØª—Ê p0_2
   \   000029   53FEFD       ANL     0xfe,#0xfd
    209            P1SEL&=~0x2;//∑‰√˘∆˜
   \   00002C   53F4FD       ANL     0xf4,#0xfd
    210            P1DIR|=~0x2;//≥ı ºªØbeep
   \   00002F   43FEFD       ORL     0xfe,#0xfd
    211            //¥Æø⁄≈‰÷√
    212            MT_UartInit();
   \   000032                ; Setup parameters for call to function MT_UartInit
   \   000032   12....       LCALL   ??MT_UartInit?relay
    213            MT_UartRegisterTaskID(task_id);  
   \   000035                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000035   EE           MOV     A,R6
   \   000036   F9           MOV     R1,A
   \   000037   12....       LCALL   ??MT_UartRegisterTaskID?relay
    214            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n")); 
   \   00003A                ; Setup parameters for call to function HalUARTWrite
   \   00003A   7C0D         MOV     R4,#0xd
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   000040   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   000042   7900         MOV     R1,#0x0
   \   000044   12....       LCALL   ??HalUARTWrite?relay
    215            
    216          
    217            // Device hardware initialization can be added here or in main() (Zmain.c).
    218            // If the hardware is application specific - add it here.
    219            // If the hardware is other parts of the device add it in main().
    220          
    221          #if defined ( BUILD_ALL_DEVICES )
    222            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    223            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    224            // together - if they are - we will start up a coordinator. Otherwise,
    225            // the device will start as a router.
    226            if ( readCoordinatorJumper() )
    227              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    228            else
    229              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    230          #endif // BUILD_ALL_DEVICES
    231          
    232          //∏√∂Œµƒ“‚Àº «£¨»Áπ˚…Ë÷√¡ÀHOLD_AUTO_START∫Í∂®“Â£¨Ω´ª·‘⁄∆Ù∂Ø–æ∆¨µƒ ±∫Úª·‘›Õ£∆Ù∂Ø
    233          //¡˜≥Ã£¨÷ª”–Õ‚≤ø¥•∑¢“‘∫Û≤≈ª·∆Ù∂Ø–æ∆¨°£∆‰ µæÕ «–Ë“™“ª∏ˆ∞¥≈•¥•∑¢À¸µƒ∆Ù∂Ø¡˜≥Ã°£  
    234          #if defined ( HOLD_AUTO_START )
    235            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    236            //  from starting the device and wait for the application to
    237            //  start the device.
    238            ZDOInitDevice(0);
    239          #endif
    240          
    241            // Setup for the periodic message's destination address …Ë÷√∑¢ÀÕ ˝æ›µƒ∑Ω Ω∫Õƒøµƒµÿ÷∑—∞÷∑ƒ£ Ω
    242            // Broadcast to everyone ∑¢ÀÕƒ£ Ω:π„≤•∑¢ÀÕ
    243            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//π„≤•
   \   000047   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00004A   740F         MOV     A,#0xf
   \   00004C   F0           MOVX    @DPTR,A
    244            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   00004D   A3           INC     DPTR
   \   00004E   7414         MOV     A,#0x14
   \   000050   F0           MOVX    @DPTR,A
    245            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//÷∏∂®ƒøµƒÕ¯¬Áµÿ÷∑Œ™π„≤•µÿ÷∑
   \   000051   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000054   74FF         MOV     A,#-0x1
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   F0           MOVX    @DPTR,A
    246          
    247            // Setup for the flash command's destination address - Group 1 ◊È≤•∑¢ÀÕ
    248            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //◊È—∞÷∑
   \   000059   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00005C   7401         MOV     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
    249            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   00005F   A3           INC     DPTR
   \   000060   7414         MOV     A,#0x14
   \   000062   F0           MOVX    @DPTR,A
    250            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//◊È∫≈0x0001
   \   000063   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000066   7401         MOV     A,#0x1
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   E4           CLR     A
   \   00006B   F0           MOVX    @DPTR,A
    251          
    252            // Fill out the endpoint description. ∂®“Â±æ…Ë±∏”√¿¥Õ®–≈µƒAPS≤„∂Àµ„√Ë ˆ∑˚
    253            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   00006C   90....       MOV     DPTR,#SampleApp_epDesc
   \   00006F   7414         MOV     A,#0x14
   \   000071   F0           MOVX    @DPTR,A
    254            SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp √Ë ˆ∑˚µƒ»ŒŒÒID
   \   000072   A3           INC     DPTR
   \   000073   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000079   F0           MOVX    @DPTR,A
    255            SampleApp_epDesc.simpleDesc
    256                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleAppºÚµ•√Ë ˆ∑˚
   \   00007A   A3           INC     DPTR
   \   00007B   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000081   F0           MOVX    @DPTR,A
    257            SampleApp_epDesc.latencyReq = noLatencyReqs;    //—” ±≤ﬂ¬‘
   \   000082   A3           INC     DPTR
   \   000083   E4           CLR     A
   \   000084   F0           MOVX    @DPTR,A
    258          
    259            // Register the endpoint description with the AF
    260            afRegister( &SampleApp_epDesc );    //œÚAF≤„µ«º«√Ë ˆ∑˚
   \   000085                ; Setup parameters for call to function afRegister
   \   000085   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000087   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000089   12....       LCALL   ??afRegister?relay
    261          
    262            // Register for all key events - This app will handle all key events
    263            RegisterForKeys( SampleApp_TaskID ); // µ«º«À˘”–µƒ∞¥º¸ ¬º˛
   \   00008C                ; Setup parameters for call to function RegisterForKeys
   \   00008C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F9           MOV     R1,A
   \   000091   12....       LCALL   ??RegisterForKeys?relay
    264          
    265            // By default, all devices start out in Group 1
    266            SampleApp_Group.ID = 0x0001;//◊È∫≈
   \   000094   90....       MOV     DPTR,#SampleApp_Group
   \   000097   7401         MOV     A,#0x1
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   E4           CLR     A
   \   00009C   F0           MOVX    @DPTR,A
    267            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//…Ë∂®◊È√˚
   \   00009D                ; Setup parameters for call to function osal_memcpy
   \   00009D   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000A0   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000A3   F5..         MOV     ?V0 + 2,A
   \   0000A5   78..         MOV     R0,#?V0 + 0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AA   7C07         MOV     R4,#0x7
   \   0000AC   7D00         MOV     R5,#0x0
   \   0000AE   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000B0   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000B2   12....       LCALL   ??osal_memcpy?relay
   \   0000B5   7403         MOV     A,#0x3
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
    268            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//∞—∏√◊Èµ«º«ÃÌº”µΩAPS÷–
   \   0000BA                ; Setup parameters for call to function aps_AddGroup
   \   0000BA   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000BC   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000BE   7914         MOV     R1,#0x14
   \   0000C0   12....       LCALL   ??aps_AddGroup?relay
    269          
    270          #if defined ( LCD_SUPPORTED )
    271            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //»Áπ˚÷ß≥÷LCD£¨œ‘ æÃ· æ–≈œ¢
   \   0000C3                ; Setup parameters for call to function HalLcdWriteString
   \   0000C3   7900         MOV     R1,#0x0
   \   0000C5   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000C7   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000C9   12....       LCALL   ??HalLcdWriteString?relay
    272          #endif
    273          }
   \   0000CC                REQUIRE ?Subroutine0
   \   0000CC                REQUIRE P0SEL
   \   0000CC                REQUIRE P0DIR
   \   0000CC                REQUIRE _A_P0
   \   0000CC                REQUIRE P1SEL
   \   0000CC                REQUIRE P1DIR
   \   0000CC                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    274          
    275          /*********************************************************************
    276           * @fn      SampleApp_ProcessEvent
    277           *
    278           * @brief   Generic Application Task event processor.  This function
    279           *          is called to process all events for the task.  Events
    280           *          include timers, messages and any other user defined events.
    281           *
    282           * @param   task_id  - The OSAL assigned task ID.
    283           * @param   events - events to process.  This is a bit map and can
    284           *                   contain more than one event.
    285           *
    286           * @return  none
    287           */
    288          //”√ªß”¶”√»ŒŒÒµƒ ¬º˛¥¶¿Ì∫Ø ˝

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    289          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    290          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    291            afIncomingMSGPacket_t *MSGpkt;
    292            (void)task_id;  // Intentionally unreferenced parameter
    293          
    294            if ( events & SYS_EVENT_MSG ) //Ω” ’œµÕ≥œ˚œ¢‘ŸΩ¯––≈–∂œ
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    295            {
    296              //Ω” ’ Ù”⁄±æ”¶”√»ŒŒÒSampleAppµƒœ˚œ¢£¨“‘SampleApp_TaskID±Íº«
    297              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    298              while ( MSGpkt )
    299              {
    300                switch ( MSGpkt->hdr.event )
    301                {
    302                  // Received when a key is pressed
    303                  case KEY_CHANGE://∞¥º¸ ¬º˛
    304                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    305                    break;
    306          
    307                  // Received when a messages is received (OTA) for this endpoint
    308                case AF_INCOMING_MSG_CMD://Ω” ’ ˝æ› ¬º˛,µ˜”√∫Ø ˝AF_DataRequest()Ω” ’ ˝æ›
    309                    SampleApp_MessageMSGCB( MSGpkt );//µ˜”√ªÿµ˜∫Ø ˝∂‘ ’µΩµƒ ˝æ›Ω¯––¥¶¿Ì
    310                    break;
    311          
    312                  // Received whenever the device changes state in the network
    313                  case ZDO_STATE_CHANGE:
    314                    //÷ª“™Õ¯¬Á◊¥Ã¨∑¢…˙∏ƒ±‰£¨æÕÕ®π˝ZDO_STATE_CHANGE ¬º˛Õ®÷™À˘”–µƒ»ŒŒÒ°£
    315                    //Õ¨ ±ÕÍ≥…∂‘–≠µ˜∆˜£¨¬∑”…∆˜£¨÷’∂Àµƒ…Ë÷√
    316                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    317                    //if ( (SampleApp_NwkState == DEV_ZB_COORD)// µ—È÷––≠µ˜∆˜÷ªΩ” ’ ˝æ›À˘“‘»°œ˚∑¢ÀÕ ¬º˛
    318                    if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    319                    {
    320                      // Start sending the periodic message in a regular interval.
    321                      //’‚∏ˆ∂® ±∆˜÷ª «Œ™∑¢ÀÕ÷‹∆⁄–≈œ¢ø™∆Ùµƒ£¨…Ë±∏∆Ù∂Ø≥ı ºªØ∫Û¥”’‚¿Ôø™ º
    322                      //¥•∑¢µ⁄“ª∏ˆ÷‹∆⁄–≈œ¢µƒ∑¢ÀÕ£¨»ª∫Û÷‹∂¯∏¥ ºœ¬»•
    323                      osal_start_timerEx( SampleApp_TaskID,
    324                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    325                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    326                     
    327                    }
    328                    else
    329                    {
    330                        
    331                    }
    332                    break;
    333          
    334                  default:
    335                    break;
    336                }
    337          
    338                // Release the memory  ¬º˛¥¶¿ÌÕÍ¡À£¨ Õ∑≈œ˚œ¢’º”√µƒƒ⁄¥Ê
    339                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    340             
    341                // Next - if one is available ÷∏’Î÷∏œÚœ¬“ª∏ˆ∑≈‘⁄ª∫≥Â«¯µƒ¥˝¥¶¿Ìµƒ ¬º˛£¨
    342                //∑µªÿwhile ( MSGpkt )÷ÿ–¬¥¶¿Ì ¬º˛£¨÷±µΩª∫≥Â«¯√ª”–µ»¥˝¥¶¿Ì ¬º˛Œ™÷π
    343                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    344              }
    345          
    346              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    347              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    348            }
    349          
    350            // Send a message out - This event is generated by a timer
    351            //  (setup in SampleApp_Init()).
    352            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    353            {
    354              // Send the periodic message ¥¶¿Ì÷‹∆⁄–‘ ¬º˛£¨
    355              //¿˚”√SampleApp_SendPeriodicMessage()¥¶¿ÌÕÍµ±«∞µƒ÷‹∆⁄–‘ ¬º˛£¨»ª∫Û∆Ù∂Ø∂® ±∆˜
    356              //ø™∆Ùœ¬“ª∏ˆ÷‹∆⁄–‘ ¬«È£¨’‚—˘“ª÷÷—≠ª∑œ¬»•£¨“≤º¥ «…œ√ÊÀµµƒ÷‹∆⁄–‘ ¬º˛¡À£¨
    357              //ø…“‘◊ˆŒ™¥´∏–∆˜∂® ±≤…ºØ°¢…œ¥´»ŒŒÒ
    358              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    359              
    360              // Setup to send message again in normal period (+ a little jitter)
    361              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    362                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24E8         ADD     A,#-0x18
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3403         ADDC    A,#0x3
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    363          
    364              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    365              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    366            }
    367          
    368            // Discard unknown events
    369            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    370          }
    371          
    372          /*********************************************************************
    373           * Event Generation Functions
    374           */
    375          /*********************************************************************
    376           * @fn      SampleApp_HandleKeys
    377           *
    378           * @brief   Handles all key events for this device.
    379           *
    380           * @param   shift - true if in shift/alt.
    381           * @param   keys - bit field for key events. Valid entries:
    382           *                 HAL_KEY_SW_2
    383           *                 HAL_KEY_SW_1
    384           *
    385           * @return  none
    386           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    387          void SampleApp_HandleKeys( uint8 shift, uint8 keys )  
   \                     SampleApp_HandleKeys:
    388          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    389            (void)shift;  // Intentionally unreferenced parameter
    390            
    391            if ( keys & HAL_KEY_SW_1 )
   \   000006   A2E0         MOV     C,0xE0 /* A   */.0
   \   000008   5007         JNC     ??SampleApp_HandleKeys_0
    392            {
    393              /* This key sends the Flash Command is sent to Group 1.
    394               * This device will not receive the Flash Command from this
    395               * device (even if it belongs to group 1).
    396               */
    397             SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000A                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000A   7AE8         MOV     R2,#-0x18
   \   00000C   7B03         MOV     R3,#0x3
   \   00000E   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    398             
    399              
    400            
    401            }
    402          
    403            if ( keys & HAL_KEY_SW_6 )
    404            {
    405              /* The Flashr Command is sent to Group 1.
    406               * This key toggles this device in and out of group 1.
    407               * If this device doesn't belong to group 1, this application
    408               * will not receive the Flash command sent to group 1.
    409               */
    410            
    411             /*
    412              aps_Group_t *grp;
    413              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    414              if ( grp )
    415              {
    416                // Remove from the group
    417                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    418              }
    419              else
    420              {
    421                // Add to the flash group
    422                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    423              }
    424             */
    425            }
    426          }
   \                     ??SampleApp_HandleKeys_0:
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
    427          
    428          /*********************************************************************
    429           * LOCAL FUNCTIONS
    430           */
    431          
    432          /*********************************************************************
    433           * @fn      SampleApp_MessageMSGCB
    434           *
    435           * @brief   Data message processor callback.  This function processes
    436           *          any incoming data - probably from other devices.  So, based
    437           *          on cluster ID, perform the intended action.
    438           *
    439           * @param   none
    440           *
    441           * @return  none
    442           */
    443          //Ω” ’ ˝æ›£¨≤Œ ˝Œ™Ω” ’µΩµƒ ˝æ›

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    444          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    445          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    446            uint16 flashTime;
    447            unsigned short len = 6+5+3+1;
    448            byte buf[6+5+3+1+1]; 
    449            
    450            switch ( pkt->clusterId ) //≈–∂œ¥ÿID
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 1,A
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000022   0100         DW        1
   \   000024   01           DB        1
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000027   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000029   ....         DW        ??SampleApp_MessageMSGCB_2
    451            {
    452              case SAMPLEAPP_PERIODIC_CLUSTERID: // ’µΩπ„≤• ˝æ›
    453                osal_memset(buf, 0 , len);
   \                     ??SampleApp_MessageMSGCB_1:
   \   00002B                ; Setup parameters for call to function osal_memset
   \   00002B   7C0F         MOV     R4,#0xf
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7900         MOV     R1,#0x0
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   12....       LCALL   ??osal_memset?relay
    454                osal_memcpy(buf, pkt->cmd.Data, len); //∏¥÷∆ ˝æ›µΩª∫≥Â«¯÷–
   \   00003E                ; Setup parameters for call to function osal_memcpy
   \   00003E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000041   F5..         MOV     ?V0 + 0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0 + 1,A
   \   000047   75..00       MOV     ?V0 + 2,#0x0
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004F   7C0F         MOV     R4,#0xf
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   AA82         MOV     R2,DPL
   \   00005A   AB83         MOV     R3,DPH
   \   00005C   12....       LCALL   ??osal_memcpy?relay
   \   00005F   7403         MOV     A,#0x3
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
    455                HalUARTWrite(0,buf, len);
   \   000064                ; Setup parameters for call to function HalUARTWrite
   \   000064   7C0F         MOV     R4,#0xf
   \   000066   7D00         MOV     R5,#0x0
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   AA82         MOV     R2,DPL
   \   000070   AB83         MOV     R3,DPH
   \   000072   7900         MOV     R1,#0x0
   \   000074   12....       LCALL   ??HalUARTWrite?relay
    456            
    457               
    458                break;
   \   000077   8033         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   000079   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00007C   F8           MOV     R0,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080                ; Setup parameters for call to function HalLedBlink
   \   000080   8882         MOV     DPL,R0
   \   000082   8983         MOV     DPH,R1
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   FA           MOV     R2,A
   \   000087   8882         MOV     DPL,R0
   \   000089   8983         MOV     DPH,R1
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   EA           MOV     A,R2
   \   000090   2400         ADD     A,#0x0
   \   000092   F5..         MOV     ?V0 + 0,A
   \   000094   E4           CLR     A
   \   000095   39           ADDC    A,R1
   \   000096   F5..         MOV     ?V0 + 1,A
   \   000098   7402         MOV     A,#0x2
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?US_SHR
   \   00009F   AC..         MOV     R4,?V0 + 0
   \   0000A1   AD..         MOV     R5,?V0 + 1
   \   0000A3   7B32         MOV     R3,#0x32
   \   0000A5   7A04         MOV     R2,#0x4
   \   0000A7   7908         MOV     R1,#0x8
    459          
    460              case SAMPLEAPP_FLASH_CLUSTERID: // ’µΩ◊È≤• ˝æ›  
    461                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    462                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   0000A9   12....       LCALL   ??HalLedBlink?relay
    463                break;
    464            case SAMPLEAPP_P2P_CLUSTERID:
    465           
    466              break;
    467            }
    468          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000AC   7410         MOV     A,#0x10
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B1   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    469          
    470          /*********************************************************************
    471           * @fn      SampleApp_SendPeriodicMessage
    472           *
    473           * @brief   Send the periodic message.
    474           *
    475           * @param   none
    476           *
    477           * @return  none
    478           */
    479          //∑÷Œˆ∑¢ÀÕ÷‹∆⁄–≈œ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    480          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    481          { 
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    482          #ifndef ZDO_COORDINATOR 
    483            //ªÒµ√µƒ ˝æ›Õ®π˝¥Æø⁄ ‰≥ˆµΩµÁƒ‘œ‘ æ  
    484            char str[6+2+4+1]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   C082         PUSH    DPL
   \   00000F   7406         MOV     A,#0x6
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   D082         POP     DPL
   \   00001D   740D         MOV     A,#0xd
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    485            //ªÒ»°Œ¬ ™∂»
    486            unsigned char temp_humi[6]={0};
   \   000022   90....       MOV     DPTR,#`?<Constant {0}>_1`
   \   000025   C082         PUSH    DPL
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AC82         MOV     R4,DPL
   \   00002F   AD83         MOV     R5,DPH
   \   000031   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   000034   D082         POP     DPL
   \   000036   7406         MOV     A,#0x6
   \   000038   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    487            strcpy(temp_humi,DHT11());
                          ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

    strcpy(temp_humi,DHT11());
                     ^
"C:\Users\25814\Desktop\≤‹Ω®_’π¿¿π›\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",487  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   00003B                ; Setup parameters for call to function strcpy
   \   00003B                ; Setup parameters for call to function DHT11
   \   00003B   12....       LCALL   ??DHT11?relay
   \   00003E   EA           MOV     A,R2
   \   00003F   FC           MOV     R4,A
   \   000040   EB           MOV     A,R3
   \   000041   FD           MOV     R5,A
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   12....       LCALL   ??strcpy?relay
    488            //ªÒ»°∆¯ÃÂ
    489            uint16 gas = ReadGasData();
   \   00004F                ; Setup parameters for call to function ReadGasData
   \   00004F   12....       LCALL   ??ReadGasData?relay
   \   000052   8A..         MOV     ?V0 + 0,R2
   \   000054   8B..         MOV     ?V0 + 1,R3
    490            //ªÒ»°π‚«ø
    491            unsigned int lt = Light();//ªÒ»°π‚«ø
   \   000056                ; Setup parameters for call to function Light
   \   000056   12....       LCALL   ??Light?relay
   \   000059   8A..         MOV     ?V0 + 2,R2
   \   00005B   8B..         MOV     ?V0 + 3,R3
    492             
    493            ///ªÒ»°ª—Ê
    494            byte fire = 0;
    495            if(FIRE)
   \   00005D   E590         MOV     A,0x90
    496              fire = 0;
    497            else
    498              fire = 1;
    499          
    500            sprintf(str,"%s%2d%4d%d\n",temp_humi,gas,lt,fire);
   \   00005F                ; Setup parameters for call to function sprintf
   \   00005F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000061   B3           CPL     C
   \   000062   E4           CLR     A
   \   000063   33           RLC     A
   \   000064   F5..         MOV     ?V0 + 4,A
   \   000066   75..00       MOV     ?V0 + 5,#0x0
   \   000069   78..         MOV     R0,#?V0 + 4
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   78..         MOV     R0,#?V0 + 2
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   78..         MOV     R0,#?V0 + 0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   7406         MOV     A,#0x6
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   8582..       MOV     ?V0 + 0,DPL
   \   000080   8583..       MOV     ?V0 + 1,DPH
   \   000083   78..         MOV     R0,#?V0 + 0
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000088   7C..         MOV     R4,#`?<Constant "%s%2d%4d%d\\n">` & 0xff
   \   00008A   7D..         MOV     R5,#(`?<Constant "%s%2d%4d%d\\n">` >> 8) & 0xff
   \   00008C   740E         MOV     A,#0xe
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   AA82         MOV     R2,DPL
   \   000093   AB83         MOV     R3,DPH
   \   000095   12....       LCALL   ??sprintf?relay
   \   000098   7408         MOV     A,#0x8
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
    501            
    502            HalUARTWrite(0,str,sizeof(str));
                                  ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00009D                ; Setup parameters for call to function HalUARTWrite
   \   00009D   7C0D         MOV     R4,#0xd
   \   00009F   7D00         MOV     R5,#0x0
   \   0000A1   7406         MOV     A,#0x6
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   AA82         MOV     R2,DPL
   \   0000A8   AB83         MOV     R3,DPH
   \   0000AA   7900         MOV     R1,#0x0
   \   0000AC   12....       LCALL   ??HalUARTWrite?relay
    503             if(FIRE == 0){
   \   0000AF   A291         MOV     C,0x90.1
   \   0000B1   4004         JC      ??SampleApp_SendPeriodicMessage_0
    504                //”–ªπ‚
    505                BEEP = 0;
   \   0000B3   C292         CLR     0x90.2
   \   0000B5   8002         SJMP    ??SampleApp_SendPeriodicMessage_1
    506                /*
    507                myDelay();      
    508                BEEP= 1;
    509                myDelay();
    510                */
    511              }
    512             else
    513               BEEP = 1;
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   0000B7   D292         SETB    0x90.2
    514             // µ˜”√AF_DataRequestΩ´ ˝æ›Œﬁœﬂπ„≤•≥ˆ»•
    515            if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    516                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    517                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    518                                 sizeof(str),       //∑¢ÀÕ ˝æ›≥§∂»
    519                                 (uchar*)str,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    520                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    521                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    522                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   0000B9                ; Setup parameters for call to function AF_DataRequest
   \   0000B9   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0000C4   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0000C7   78..         MOV     R0,#?V0 + 0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   7409         MOV     A,#0x9
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   8582..       MOV     ?V0 + 0,DPL
   \   0000D4   8583..       MOV     ?V0 + 1,DPH
   \   0000D7   78..         MOV     R0,#?V0 + 0
   \   0000D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DC   75..0D       MOV     ?V0 + 0,#0xd
   \   0000DF   75..00       MOV     ?V0 + 1,#0x0
   \   0000E2   78..         MOV     R0,#?V0 + 0
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E7   75..01       MOV     ?V0 + 0,#0x1
   \   0000EA   78..         MOV     R0,#?V0 + 0
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EF   7920         MOV     R1,#0x20
   \   0000F1   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000F3   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000F5   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   0000F7   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   0000F9   12....       LCALL   ??AF_DataRequest?relay
   \   0000FC   7409         MOV     A,#0x9
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000101   E9           MOV     A,R1
   \   000102   6007         JZ      ??SampleApp_SendPeriodicMessage_2
    523            {
    524            }
    525            else
    526            {
    527              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   000104                ; Setup parameters for call to function HalLedSet
   \   000104   7A01         MOV     R2,#0x1
   \   000106   7901         MOV     R1,#0x1
   \   000108   12....       LCALL   ??HalLedSet?relay
    528              // Error occurred in request to send.
    529            }
    530          #endif 
    531            
    532           
    533          }
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   00010B   7413         MOV     A,#0x13
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000110   7F06         MOV     R7,#0x6
   \   000112   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000115                REQUIRE _A_P1
    534          
    535          /*********************************************************************
    536           * @fn      SampleApp_SendFlashMessage
    537           *
    538           * @brief   Send the flash message to group 1.
    539           *
    540           * @param   flashTime - in milliseconds
    541           *
    542           * @return  none
    543           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    544          void SampleApp_SendFlashMessage( uint16 flashTime )  
   \                     SampleApp_SendFlashMessage:
    545          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    546            uint8 buffer[3];
    547            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    548            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    549            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    550          
    551            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    552                                 SAMPLEAPP_FLASH_CLUSTERID,
    553                                 3,
    554                                 buffer,
    555                                 &SampleApp_TransID,
    556                                 AF_DISCV_ROUTE,
    557                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029                REQUIRE ?Subroutine1
   \   000029                ; // Fall through to label ?Subroutine1
    558            {
    559            }
    560            else
    561            {
    562              // Error occurred in request to send.
    563            }
    564          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..1E       MOV     ?V0 + 0,#0x1e
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000008   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00000B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000013   7403         MOV     A,#0x3
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   8582..       MOV     ?V0 + 0,DPL
   \   00001B   8583..       MOV     ?V0 + 1,DPH
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..03       MOV     ?V0 + 0,#0x3
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..02       MOV     ?V0 + 0,#0x2
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7920         MOV     R1,#0x20
   \   000038   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00003A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003C   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   00003E   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000040   12....       LCALL   ??AF_DataRequest?relay
   \   000043   7409         MOV     A,#0x9
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004D   7F02         MOV     R7,#0x2
   \   00004F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    565          void SampleApp_Send_P2P_Message(void){
   \                     SampleApp_Send_P2P_Message:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    566            uchar cmd[3] ="LED";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "LED">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "LED">` & 0xff
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    567            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    568                                 SAMPLEAPP_FLASH_CLUSTERID,
    569                                 3,
    570                                 cmd,
    571                                 &SampleApp_TransID,
    572                                 AF_DISCV_ROUTE,
    573                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   80..         SJMP    ?Subroutine1
    574            {
    575            }
    576          }
    577          /*********************************************************************
    578          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579           uint16 ReadGasData( void )
   \                     ReadGasData:
    580          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    581            uint16 reading = 0;
    582            
    583            /* Enable channel */
    584            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    585            
    586            /* writing to this register starts the extra conversion */
    587            ADCCON3 = 0x86;// AVDD5 “˝Ω≈  00£∫ 64 ≥È»°¬ (7 ŒªENOB)  0110£∫ AIN6
   \   000003   75B686       MOV     0xb6,#-0x7a
    588            
    589            /* Wait for the conversion to be done */
    590            while (!(ADCCON1 & 0x80));
   \                     ??ReadGasData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadGasData_0
    591            
    592            /* Disable channel after done conversion */
    593            ADCCFG &= (0x40 ^ 0xFF); //∞¥Œª“ÏªÚ°£»Á1010^1111=0101£®∂˛Ω¯÷∆£©
   \   00000C   53F2BF       ANL     0xf2,#0xbf
    594            
    595            /* Read the result */
    596            reading = ADCL;
   \   00000F   E5BA         MOV     A,0xba
    597            reading |= (int16) (ADCH << 8); 
    598            
    599            reading >>= 8;
    600            
    601            return (reading);
   \   000011   E5BB         MOV     A,0xbb
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   FB           MOV     R3,A
   \   000016   02....       LJMP    ?BRET
   \   000019                REQUIRE ADCCFG
   \   000019                REQUIRE ADCCON3
   \   000019                REQUIRE ADCCON1
   \   000019                REQUIRE ADCL
   \   000019                REQUIRE ADCH
    602          } 

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 Example"
   \            35333020
   \            4578616D
   \            706C6500

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??myDelay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    myDelay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s%2d%4d%d\\n">`:
   \   000000   25732532     DB "%s%2d%4d%d\012"
   \            64253464
   \            25640A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED">`:
   \   000000   4C4544       DB 4CH, 45H, 44H

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadGasData                        0      0     33
     SampleApp_HandleKeys               0      0     21
       -> SampleApp_SendFlashMessage
                                        0      0     18
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     42
       -> osal_memset                   0      0     54
       -> osal_memcpy                   0      0     60
       -> HalUARTWrite                  0      0     54
       -> HalLedBlink                   0      0     54
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     31
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     54
       -> DHT11                         0      0     66
       -> strcpy                        0      0     66
       -> ReadGasData                   0      0     66
       -> Light                         0      0     66
       -> sprintf                       0      0     82
       -> HalUARTWrite                  0      0     66
       -> AF_DataRequest                0      0     84
       -> HalLedSet                     0      0     66
     SampleApp_Send_P2P_Message         2      0     22
       -> AF_DataRequest                0      0     44
     myDelay                            0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_P1                                    1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     P1SEL                                    1
     P0DIR                                    1
     P1DIR                                    1
     AppTitle                                16
     myDelay                                 31
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         204
     ?Subroutine0                             5
     SampleApp_ProcessEvent                 176
     SampleApp_HandleKeys                    22
     SampleApp_MessageMSGCB                 180
     ?Subroutine2                            12
     SampleApp_SendPeriodicMessage          277
     SampleApp_SendFlashMessage              41
     ?Subroutine1                            82
     SampleApp_Send_P2P_Message              33
     ReadGasData                             25
     ?<Initializer for AppTitle>             16
     ??myDelay?relay                          6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??ReadGasData?relay                      6
     ?<Constant "UartInit OK\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant {0}>                         13
     ?<Constant {0}>_1                        6
     ?<Constant "%s%2d%4d%d\n">              12
     ?<Constant "LED">                        3

 
 1 088 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
    11 bytes in segment SFR_AN
    16 bytes in segment XDATA_I
    16 bytes in segment XDATA_ID
    81 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
 1 158 bytes of CODE  memory
    81 bytes of CONST memory
     0 bytes of DATA  memory (+ 11 bytes shared)
    69 bytes of XDATA memory

Errors: none
Warnings: 3
