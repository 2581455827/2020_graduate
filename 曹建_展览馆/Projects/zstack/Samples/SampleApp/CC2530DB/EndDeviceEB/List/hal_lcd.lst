###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         26/Nov/2019  18:53:07 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Com #
#                          ponents\hal\target\CC2530EB\hal_lcd.c              #
#    Command line       =  -f C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ          #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\T #
#                          ools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO           #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\6.ZS #
#                          tack-2.5.1a工程模板\Components\hal\target\CC2530EB #
#                          \hal_lcd.c -D NWK_AUTO_POLL -D ZAPP_P1 -D MT_TASK  #
#                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D                   #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\25814\Desktop\6.Z #
#                          Stack-2.5.1a工程模板\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB\List\ -lA                #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\EndDeviceE #
#                          B\List\ --diag_suppress Pe001,Pa010 -o             #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\EndDeviceE #
#                          B\Obj\ -e --no_code_motion --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\6.Z #
#                          Stack-2.5.1a工程模板\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\ -I C:\Users\25814\Desktop\6.ZStack- #
#                          2.5.1a工程模板\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\Source\ -I C:\Users\25814\Desktop\6.ZSt #
#                          ack-2.5.1a工程模板\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\ZMain\TI2530DB\ -I            #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\target\CC2530EB\ -I            #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\include\ -I                    #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\high_level\ -I                 #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\low_level\srf04\ -I            #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\low_level\srf04\single_chip\   #
#                          -I C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mt\ -I                          #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\osal\include\ -I                   #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\services\saddr\ -I                 #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\services\sdata\ -I                 #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\af\ -I                       #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\nwk\ -I                      #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\sapi\ -I                     #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\sec\ -I                      #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\sys\ -I                      #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\zmac\ -I                           #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\zmac\f8w\ -Ohz                     #
#    List file          =  C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\EndDeviceE #
#                          B\List\hal_lcd.lst                                 #
#    Object file        =  C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\EndDeviceE #
#                          B\Obj\hal_lcd.r51                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\6.ZStack-2.5.1a工程模板\Components\hal\target\CC2530EB\hal_lcd.c
      1          /****************************************************************************
      2          * Filename: hal_lcd.c
      3          * Author:      Andy  https://aldsz.taobao.com
      4          * Date:        2015-06-16
      5          * Version:     1.0
      6          * Description: OLED driver
      7          ****************************************************************************/
      8          #include "hal_types.h"
      9          #include "hal_lcd.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     10          #include "OSAL.h"
     11          #include "OnBoard.h"
     12          #include "hal_assert.h"
     13          #include <string.h>
     14          
     15          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
     16            #include "DebugTrace.h"
     17          #endif
     18          
     19          
     20          //------------------------------------------------------------------------------
     21          #define LCD_COMMAND 0x00
     22          #define LCD_DATA    0x01
     23          
     24          #define LCD_MAX_BUF 25
     25          
     26          #define SOFTWARE_SPI
     27          //#define HARDWARE_SPI //采用硬件SPI通讯
     28          
     29          #define COL_SPACE   2  //字符间距
     30          #define ROW_SPACE   4  //行间距
     31          #define ALL_CNS     128
     32          #define X_MAX_PIXEL 128
     33          #define Y_MAX_PIXEL 128
     34          
     35          // SPI TFT LCD端口定义
     36          #define LCD_DC           P0_0  // 数据/命令选择
     37          #define LCD_SDA          P1_3  // 双向数据 
     38          #define LCD_SCL          P1_2  // 时钟   
     39          //#define LCD_CS         P1_2  // 片选, L_S 将片选接地
     40          #define LCD_RST          P1_7  // 控制lcd复位   
     41          
     42          //液晶控制口置1操作语句宏定义
     43          //#define LCD_CS_SET  	(LCD_CS_CLRx01)   
     44          #define	LCD_DC_SET  	(LCD_DC = 0x01)  
     45          #define	LCD_SDA_SET  	(LCD_SDA = 0x01)    
     46          #define	LCD_SCL_SET  	(LCD_SCL = 0x01)   
     47          #define	LCD_RST_SET  	(LCD_RST = 0x01)  
     48          
     49          //液晶控制口置0操作语句宏定义
     50          //#define LCD_CS_CLR  	(LCD_CS_CLRx00)    
     51          #define	LCD_DC_CLR  	(LCD_DC = 0x00)  
     52          #define	LCD_SDA_CLR  	(LCD_SDA = 0x00)     
     53          #define	LCD_SCL_CLR  	(LCD_SCL = 0x00)
     54          #define	LCD_RST_CLR  	(LCD_RST = 0x00)   
     55          
     56          
     57          void SPI_Init(void);
     58          void LCD_clear(unsigned int color);
     59          void LCD_write_EN_string(unsigned char X,unsigned char Y,uint8 *s);
     60          static void LCD_set_window(unsigned int X, unsigned int Y, 
     61                                     unsigned Width,unsigned int Height);
     62          static void LCD_write_EN(unsigned int X, unsigned int Y, unsigned char c);
     63          static void LCD_write_CN(unsigned int X, unsigned int Y, unsigned char c);
     64          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     65          unsigned int  Color    = BLUE; //默认前景颜色
   \                     Color:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for Color>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     66          unsigned int  Color_BK = GREEN;//默认背景颜色
   \                     Color_BK:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for Color_BK>`
   \   000002                REQUIRE __INIT_XDATA_I
     67          //------------------------------------------------------------------------------
     68          
     69          #define XLevelL            0x00
     70          #define XLevelH            0x10
     71          #define XLevel             ((XLevelH&0x0F)*16+XLevelL)
     72          #define Max_Column         128
     73          #define Max_Row            64
     74          #define Brightness         0xCF 
     75          #define X_WIDTH            128
     76          #define Y_WIDTH            64
     77          
     78          #define LCD_MAX_BUF        25
     79          #define HAL_LCD_MAX_CHARS  16   // Max number of chars on a single LCD line 
     80          
     81          
     82          #if (HAL_LCD == TRUE)
     83          void HalLcd_HW_Init(void);
     84          void HalLcd_HW_WaitUs(uint16 i);
     85          void HalLcd_HW_Clear(void);
     86          void HalLcd_HW_Control(uint8 cmd);
     87          void HalLcd_HW_Write(uint8 data);
     88          void HalLcd_HW_SetContrast(uint8 value);
     89          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
     90          void HalLcd_HW_WriteLine(uint8 line, const char *pText);
     91          
     92          void DelayMS(unsigned int msec);
     93          void LCD_WrDat(unsigned char dat);
     94          void LCD_WrCmd(unsigned char cmd);
     95          void LCD_Set_Pos(unsigned char x, unsigned char y);
     96          void LCD_Fill(unsigned char bmp_dat) ;
     97          void LCD_CLS(void);
     98          
     99          //-----------------------------------------------------------------------------
    100          void DrawRect(unsigned int Xpos, unsigned int Ypos, unsigned int Width, 
    101                        unsigned int Height,unsigned Color);
    102          void DrawRectFill(unsigned int Xpos  , unsigned int Ypos, unsigned int Width, 
    103                            unsigned int Height, unsigned Color);
    104          void  SendByte(unsigned char Data);
    105          void  SPI_WriteData(unsigned char Data);
    106          void LCD_write_byte(unsigned char data, unsigned char command);
    107          void LCD_WriteData_16Bit(unsigned short Data);
    108          void LCD_write_CN_string(unsigned char X,unsigned char Y,uint8 *s);
    109          void ShowImage(const unsigned char *p);
    110          
    111          void DrawPixel(unsigned int x, unsigned int y, unsigned int color);
    112          void DrawVerticalLine(unsigned int x, unsigned int y, 
    113                                unsigned int Length,unsigned int Color);
    114          void DrawHorizonLine(unsigned int x, unsigned int y, 
    115                               unsigned int Length,unsigned int Color);               
    116          void Lcd_Reset(void);
    117          
    118          
    119          //中文14x14点阵字符索引 ALD

   \                                 In  segment CODE_C, align 1
    120          __code const  unsigned char CN14x14_Index[] =
   \                     CN14x14_Index:
   \   000000   BFC6BCBC     DB 0BFH, 0C6H, 0BCH, 0BCH, 0D3H, 0C3H, 0BBH, 0A7H
   \            D3C3BBA7
   \   000008   B5C7C2BC     DB 0B5H, 0C7H, 0C2H, 0BCH, 0D5H, 0CAH, 0BAH, 0C5H
   \            D5CABAC5
   \   000010   C3DCC2EB     DB 0C3H, 0DCH, 0C2H, 0EBH, 0C8H, 0B7H, 0B6H, 0A8H
   \            C8B7B6A8
   \   000018   C8A1CFFB     DB 0C8H, 0A1H, 0CFH, 0FBH, 0D7H, 0A8H, 0D2H, 0B5H
   \            D7A8D2B5
   \   000020   D7A8D7A2     DB 0D7H, 0A8H, 0D7H, 0A2H, 0CEH, 0DEH, 0CFH, 0DFH
   \            CEDECFDF
   \   000028   CDA8D1B6     DB 0CDH, 0A8H, 0D1H, 0B6H, 0B3H, 0CFH, 0D0H, 0C5H
   \            B3CFD0C5
   \   000030   C1A2D7E3     DB 0C1H, 0A2H, 0D7H, 0E3H, 0B4H, 0B4H, 0D0H, 0C2H
   \            B4B4D0C2
   \   000038   D6C2D4B6     DB 0D6H, 0C2H, 0D4H, 0B6H, 0C7H, 0BFH, 0B4H, 0F3H
   \            C7BFB4F3
   \   000040   D4ADA3BA     DB 0D4H, 0ADH, 0A3H, 0BAH, 0
   \            00      
    121          {
    122            "科技用户登录帐号密码确定取消专业专注无线通讯诚信立足创新致远强大原："
    123          };
    124          
    125          //中文14x14点阵字符 ald

   \                                 In  segment XDATA_ROM_C, align 1
    126           const unsigned char CN14x14[][28] =
   \                     CN14x14:
   \   000000   00           DB 0
   \   000001   20           DB 32
   \   000002   0D           DB 13
   \   000003   20           DB 32
   \   000004   70           DB 112
   \   000005   A0           DB 160
   \   000006   10           DB 16
   \   000007   A0           DB 160
   \   000008   12           DB 18
   \   000009   20           DB 32
   \   00000A   FD           DB 253
   \   00000B   20           DB 32
   \   00000C   11           DB 17
   \   00000D   20           DB 32
   \   00000E   30           DB 48
   \   00000F   38           DB 56
   \   000010   3B           DB 59
   \   000011   E0           DB 224
   \   000012   54           DB 84
   \   000013   20           DB 32
   \   000014   90           DB 144
   \   000015   20           DB 32
   \   000016   10           DB 16
   \   000017   20           DB 32
   \   000018   10           DB 16
   \   000019   20           DB 32
   \   00001A   10           DB 16
   \   00001B   20           DB 32
   \   00001C   20           DB 32
   \   00001D   80           DB 128
   \   00001E   20           DB 32
   \   00001F   80           DB 128
   \   000020   20           DB 32
   \   000021   80           DB 128
   \   000022   F7           DB 247
   \   000023   F0           DB 240
   \   000024   20           DB 32
   \   000025   80           DB 128
   \   000026   20           DB 32
   \   000027   80           DB 128
   \   000028   27           DB 39
   \   000029   E0           DB 224
   \   00002A   32           DB 50
   \   00002B   20           DB 32
   \   00002C   E2           DB 226
   \   00002D   20           DB 32
   \   00002E   21           DB 33
   \   00002F   40           DB 64
   \   000030   20           DB 32
   \   000031   80           DB 128
   \   000032   21           DB 33
   \   000033   40           DB 64
   \   000034   22           DB 34
   \   000035   20           DB 32
   \   000036   EC           DB 236
   \   000037   18           DB 24
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   3F           DB 63
   \   00003B   F8           DB 248
   \   00003C   21           DB 33
   \   00003D   08           DB 8
   \   00003E   21           DB 33
   \   00003F   08           DB 8
   \   000040   21           DB 33
   \   000041   08           DB 8
   \   000042   3F           DB 63
   \   000043   F8           DB 248
   \   000044   21           DB 33
   \   000045   08           DB 8
   \   000046   21           DB 33
   \   000047   08           DB 8
   \   000048   3F           DB 63
   \   000049   F8           DB 248
   \   00004A   21           DB 33
   \   00004B   08           DB 8
   \   00004C   21           DB 33
   \   00004D   08           DB 8
   \   00004E   41           DB 65
   \   00004F   08           DB 8
   \   000050   41           DB 65
   \   000051   08           DB 8
   \   000052   80           DB 128
   \   000053   38           DB 56
   \   000054   02           DB 2
   \   000055   00           DB 0
   \   000056   01           DB 1
   \   000057   00           DB 0
   \   000058   3F           DB 63
   \   000059   F8           DB 248
   \   00005A   20           DB 32
   \   00005B   08           DB 8
   \   00005C   20           DB 32
   \   00005D   08           DB 8
   \   00005E   20           DB 32
   \   00005F   08           DB 8
   \   000060   3F           DB 63
   \   000061   F8           DB 248
   \   000062   20           DB 32
   \   000063   08           DB 8
   \   000064   20           DB 32
   \   000065   00           DB 0
   \   000066   20           DB 32
   \   000067   00           DB 0
   \   000068   20           DB 32
   \   000069   00           DB 0
   \   00006A   40           DB 64
   \   00006B   00           DB 0
   \   00006C   40           DB 64
   \   00006D   00           DB 0
   \   00006E   80           DB 128
   \   00006F   00           DB 0
   \   000070   01           DB 1
   \   000071   20           DB 32
   \   000072   7D           DB 125
   \   000073   40           DB 64
   \   000074   04           DB 4
   \   000075   90           DB 144
   \   000076   28           DB 40
   \   000077   A0           DB 160
   \   000078   10           DB 16
   \   000079   40           DB 64
   \   00007A   2F           DB 47
   \   00007B   A0           DB 160
   \   00007C   40           DB 64
   \   00007D   18           DB 24
   \   00007E   9F           DB 159
   \   00007F   C0           DB 192
   \   000080   10           DB 16
   \   000081   40           DB 64
   \   000082   10           DB 16
   \   000083   40           DB 64
   \   000084   1F           DB 31
   \   000085   C0           DB 192
   \   000086   10           DB 16
   \   000087   40           DB 64
   \   000088   08           DB 8
   \   000089   80           DB 128
   \   00008A   FF           DB 255
   \   00008B   F8           DB 248
   \   00008C   00           DB 0
   \   00008D   00           DB 0
   \   00008E   7F           DB 127
   \   00008F   E0           DB 224
   \   000090   00           DB 0
   \   000091   20           DB 32
   \   000092   3F           DB 63
   \   000093   E0           DB 224
   \   000094   00           DB 0
   \   000095   20           DB 32
   \   000096   FF           DB 255
   \   000097   F8           DB 248
   \   000098   02           DB 2
   \   000099   00           DB 0
   \   00009A   22           DB 34
   \   00009B   20           DB 32
   \   00009C   13           DB 19
   \   00009D   40           DB 64
   \   00009E   0A           DB 10
   \   00009F   80           DB 128
   \   0000A0   12           DB 18
   \   0000A1   40           DB 64
   \   0000A2   22           DB 34
   \   0000A3   20           DB 32
   \   0000A4   C2           DB 194
   \   0000A5   18           DB 24
   \   0000A6   0E           DB 14
   \   0000A7   00           DB 0
   \   0000A8   21           DB 33
   \   0000A9   00           DB 0
   \   0000AA   21           DB 33
   \   0000AB   10           DB 16
   \   0000AC   21           DB 33
   \   0000AD   10           DB 16
   \   0000AE   F9           DB 249
   \   0000AF   20           DB 32
   \   0000B0   A9           DB 169
   \   0000B1   40           DB 64
   \   0000B2   A9           DB 169
   \   0000B3   00           DB 0
   \   0000B4   AB           DB 171
   \   0000B5   F8           DB 248
   \   0000B6   A9           DB 169
   \   0000B7   40           DB 64
   \   0000B8   A9           DB 169
   \   0000B9   40           DB 64
   \   0000BA   A9           DB 169
   \   0000BB   20           DB 32
   \   0000BC   B9           DB 185
   \   0000BD   20           DB 32
   \   0000BE   21           DB 33
   \   0000BF   50           DB 80
   \   0000C0   21           DB 33
   \   0000C1   88           DB 136
   \   0000C2   21           DB 33
   \   0000C3   00           DB 0
   \   0000C4   3F           DB 63
   \   0000C5   E0           DB 224
   \   0000C6   20           DB 32
   \   0000C7   20           DB 32
   \   0000C8   20           DB 32
   \   0000C9   20           DB 32
   \   0000CA   3F           DB 63
   \   0000CB   E0           DB 224
   \   0000CC   00           DB 0
   \   0000CD   00           DB 0
   \   0000CE   00           DB 0
   \   0000CF   00           DB 0
   \   0000D0   FF           DB 255
   \   0000D1   F8           DB 248
   \   0000D2   08           DB 8
   \   0000D3   00           DB 0
   \   0000D4   10           DB 16
   \   0000D5   00           DB 0
   \   0000D6   3F           DB 63
   \   0000D7   E0           DB 224
   \   0000D8   00           DB 0
   \   0000D9   20           DB 32
   \   0000DA   00           DB 0
   \   0000DB   20           DB 32
   \   0000DC   00           DB 0
   \   0000DD   20           DB 32
   \   0000DE   00           DB 0
   \   0000DF   C0           DB 192
   \   0000E0   02           DB 2
   \   0000E1   00           DB 0
   \   0000E2   FF           DB 255
   \   0000E3   F8           DB 248
   \   0000E4   80           DB 128
   \   0000E5   08           DB 8
   \   0000E6   04           DB 4
   \   0000E7   40           DB 64
   \   0000E8   52           DB 82
   \   0000E9   90           DB 144
   \   0000EA   51           DB 81
   \   0000EB   08           DB 8
   \   0000EC   92           DB 146
   \   0000ED   28           DB 40
   \   0000EE   0F           DB 15
   \   0000EF   E0           DB 224
   \   0000F0   30           DB 48
   \   0000F1   00           DB 0
   \   0000F2   C2           DB 194
   \   0000F3   00           DB 0
   \   0000F4   22           DB 34
   \   0000F5   20           DB 32
   \   0000F6   22           DB 34
   \   0000F7   20           DB 32
   \   0000F8   3F           DB 63
   \   0000F9   E0           DB 224
   \   0000FA   00           DB 0
   \   0000FB   20           DB 32
   \   0000FC   00           DB 0
   \   0000FD   00           DB 0
   \   0000FE   07           DB 7
   \   0000FF   E0           DB 224
   \   000100   F8           DB 248
   \   000101   20           DB 32
   \   000102   22           DB 34
   \   000103   20           DB 32
   \   000104   22           DB 34
   \   000105   20           DB 32
   \   000106   42           DB 66
   \   000107   20           DB 32
   \   000108   7B           DB 123
   \   000109   F8           DB 248
   \   00010A   C8           DB 200
   \   00010B   08           DB 8
   \   00010C   48           DB 72
   \   00010D   08           DB 8
   \   00010E   4F           DB 79
   \   00010F   E8           DB 232
   \   000110   48           DB 72
   \   000111   08           DB 8
   \   000112   78           DB 120
   \   000113   08           DB 8
   \   000114   48           DB 72
   \   000115   08           DB 8
   \   000116   00           DB 0
   \   000117   30           DB 48
   \   000118   01           DB 1
   \   000119   00           DB 0
   \   00011A   01           DB 1
   \   00011B   F0           DB 240
   \   00011C   FA           DB 250
   \   00011D   10           DB 16
   \   00011E   24           DB 36
   \   00011F   20           DB 32
   \   000120   23           DB 35
   \   000121   F8           DB 248
   \   000122   42           DB 66
   \   000123   48           DB 72
   \   000124   7A           DB 122
   \   000125   48           DB 72
   \   000126   CB           DB 203
   \   000127   F8           DB 248
   \   000128   4A           DB 74
   \   000129   48           DB 72
   \   00012A   4A           DB 74
   \   00012B   48           DB 72
   \   00012C   4B           DB 75
   \   00012D   F8           DB 248
   \   00012E   7A           DB 122
   \   00012F   48           DB 72
   \   000130   42           DB 66
   \   000131   48           DB 72
   \   000132   04           DB 4
   \   000133   18           DB 24
   \   000134   04           DB 4
   \   000135   00           DB 0
   \   000136   02           DB 2
   \   000137   00           DB 0
   \   000138   FF           DB 255
   \   000139   F8           DB 248
   \   00013A   80           DB 128
   \   00013B   08           DB 8
   \   00013C   00           DB 0
   \   00013D   00           DB 0
   \   00013E   3F           DB 63
   \   00013F   E0           DB 224
   \   000140   02           DB 2
   \   000141   00           DB 0
   \   000142   02           DB 2
   \   000143   00           DB 0
   \   000144   22           DB 34
   \   000145   00           DB 0
   \   000146   23           DB 35
   \   000147   E0           DB 224
   \   000148   22           DB 34
   \   000149   00           DB 0
   \   00014A   22           DB 34
   \   00014B   00           DB 0
   \   00014C   52           DB 82
   \   00014D   00           DB 0
   \   00014E   8F           DB 143
   \   00014F   F8           DB 248
   \   000150   00           DB 0
   \   000151   00           DB 0
   \   000152   FC           DB 252
   \   000153   00           DB 0
   \   000154   4B           DB 75
   \   000155   F0           DB 240
   \   000156   49           DB 73
   \   000157   10           DB 16
   \   000158   79           DB 121
   \   000159   10           DB 16
   \   00015A   49           DB 73
   \   00015B   10           DB 16
   \   00015C   49           DB 73
   \   00015D   10           DB 16
   \   00015E   78           DB 120
   \   00015F   A0           DB 160
   \   000160   48           DB 72
   \   000161   A0           DB 160
   \   000162   4E           DB 78
   \   000163   40           DB 64
   \   000164   F8           DB 248
   \   000165   40           DB 64
   \   000166   08           DB 8
   \   000167   A0           DB 160
   \   000168   09           DB 9
   \   000169   10           DB 16
   \   00016A   0A           DB 10
   \   00016B   08           DB 8
   \   00016C   00           DB 0
   \   00016D   80           DB 128
   \   00016E   44           DB 68
   \   00016F   90           DB 144
   \   000170   22           DB 34
   \   000171   A0           DB 160
   \   000172   10           DB 16
   \   000173   80           DB 128
   \   000174   07           DB 7
   \   000175   F0           DB 240
   \   000176   84           DB 132
   \   000177   10           DB 16
   \   000178   44           DB 68
   \   000179   10           DB 16
   \   00017A   17           DB 23
   \   00017B   F0           DB 240
   \   00017C   14           DB 20
   \   00017D   10           DB 16
   \   00017E   24           DB 36
   \   00017F   10           DB 16
   \   000180   27           DB 39
   \   000181   F0           DB 240
   \   000182   44           DB 68
   \   000183   10           DB 16
   \   000184   44           DB 68
   \   000185   10           DB 16
   \   000186   04           DB 4
   \   000187   70           DB 112
   \   000188   02           DB 2
   \   000189   00           DB 0
   \   00018A   02           DB 2
   \   00018B   00           DB 0
   \   00018C   7F           DB 127
   \   00018D   F0           DB 240
   \   00018E   04           DB 4
   \   00018F   00           DB 0
   \   000190   04           DB 4
   \   000191   00           DB 0
   \   000192   FF           DB 255
   \   000193   F8           DB 248
   \   000194   08           DB 8
   \   000195   00           DB 0
   \   000196   10           DB 16
   \   000197   00           DB 0
   \   000198   3F           DB 63
   \   000199   E0           DB 224
   \   00019A   00           DB 0
   \   00019B   20           DB 32
   \   00019C   00           DB 0
   \   00019D   40           DB 64
   \   00019E   1C           DB 28
   \   00019F   80           DB 128
   \   0001A0   03           DB 3
   \   0001A1   00           DB 0
   \   0001A2   00           DB 0
   \   0001A3   80           DB 128
   \   0001A4   08           DB 8
   \   0001A5   80           DB 128
   \   0001A6   08           DB 8
   \   0001A7   80           DB 128
   \   0001A8   08           DB 8
   \   0001A9   80           DB 128
   \   0001AA   88           DB 136
   \   0001AB   90           DB 144
   \   0001AC   48           DB 72
   \   0001AD   90           DB 144
   \   0001AE   48           DB 72
   \   0001AF   90           DB 144
   \   0001B0   28           DB 40
   \   0001B1   A0           DB 160
   \   0001B2   28           DB 40
   \   0001B3   A0           DB 160
   \   0001B4   28           DB 40
   \   0001B5   C0           DB 192
   \   0001B6   08           DB 8
   \   0001B7   80           DB 128
   \   0001B8   08           DB 8
   \   0001B9   80           DB 128
   \   0001BA   08           DB 8
   \   0001BB   80           DB 128
   \   0001BC   08           DB 8
   \   0001BD   80           DB 128
   \   0001BE   FF           DB 255
   \   0001BF   F8           DB 248
   \   0001C0   02           DB 2
   \   0001C1   00           DB 0
   \   0001C2   02           DB 2
   \   0001C3   00           DB 0
   \   0001C4   7F           DB 127
   \   0001C5   F0           DB 240
   \   0001C6   04           DB 4
   \   0001C7   00           DB 0
   \   0001C8   04           DB 4
   \   0001C9   00           DB 0
   \   0001CA   FF           DB 255
   \   0001CB   F8           DB 248
   \   0001CC   08           DB 8
   \   0001CD   00           DB 0
   \   0001CE   10           DB 16
   \   0001CF   00           DB 0
   \   0001D0   3F           DB 63
   \   0001D1   E0           DB 224
   \   0001D2   00           DB 0
   \   0001D3   20           DB 32
   \   0001D4   00           DB 0
   \   0001D5   40           DB 64
   \   0001D6   1C           DB 28
   \   0001D7   80           DB 128
   \   0001D8   03           DB 3
   \   0001D9   00           DB 0
   \   0001DA   00           DB 0
   \   0001DB   80           DB 128
   \   0001DC   01           DB 1
   \   0001DD   00           DB 0
   \   0001DE   40           DB 64
   \   0001DF   80           DB 128
   \   0001E0   20           DB 32
   \   0001E1   00           DB 0
   \   0001E2   17           DB 23
   \   0001E3   F0           DB 240
   \   0001E4   00           DB 0
   \   0001E5   80           DB 128
   \   0001E6   80           DB 128
   \   0001E7   80           DB 128
   \   0001E8   40           DB 64
   \   0001E9   80           DB 128
   \   0001EA   00           DB 0
   \   0001EB   80           DB 128
   \   0001EC   17           DB 23
   \   0001ED   F0           DB 240
   \   0001EE   10           DB 16
   \   0001EF   80           DB 128
   \   0001F0   20           DB 32
   \   0001F1   80           DB 128
   \   0001F2   20           DB 32
   \   0001F3   80           DB 128
   \   0001F4   40           DB 64
   \   0001F5   80           DB 128
   \   0001F6   4F           DB 79
   \   0001F7   F8           DB 248
   \   0001F8   00           DB 0
   \   0001F9   00           DB 0
   \   0001FA   7F           DB 127
   \   0001FB   F0           DB 240
   \   0001FC   02           DB 2
   \   0001FD   00           DB 0
   \   0001FE   02           DB 2
   \   0001FF   00           DB 0
   \   000200   02           DB 2
   \   000201   00           DB 0
   \   000202   02           DB 2
   \   000203   00           DB 0
   \   000204   FF           DB 255
   \   000205   F8           DB 248
   \   000206   05           DB 5
   \   000207   00           DB 0
   \   000208   05           DB 5
   \   000209   00           DB 0
   \   00020A   09           DB 9
   \   00020B   00           DB 0
   \   00020C   11           DB 17
   \   00020D   00           DB 0
   \   00020E   21           DB 33
   \   00020F   08           DB 8
   \   000210   41           DB 65
   \   000211   08           DB 8
   \   000212   80           DB 128
   \   000213   F8           DB 248
   \   000214   20           DB 32
   \   000215   A0           DB 160
   \   000216   20           DB 32
   \   000217   90           DB 144
   \   000218   48           DB 72
   \   000219   80           DB 128
   \   00021A   48           DB 72
   \   00021B   F0           DB 240
   \   00021C   F3           DB 243
   \   00021D   80           DB 128
   \   00021E   10           DB 16
   \   00021F   80           DB 128
   \   000220   20           DB 32
   \   000221   B8           DB 184
   \   000222   43           DB 67
   \   000223   C0           DB 192
   \   000224   F8           DB 248
   \   000225   90           DB 144
   \   000226   00           DB 0
   \   000227   A0           DB 160
   \   000228   00           DB 0
   \   000229   48           DB 72
   \   00022A   18           DB 24
   \   00022B   A8           DB 168
   \   00022C   E3           DB 227
   \   00022D   18           DB 24
   \   00022E   00           DB 0
   \   00022F   08           DB 8
   \   000230   47           DB 71
   \   000231   F0           DB 240
   \   000232   21           DB 33
   \   000233   20           DB 32
   \   000234   20           DB 32
   \   000235   C0           DB 192
   \   000236   07           DB 7
   \   000237   F0           DB 240
   \   000238   04           DB 4
   \   000239   90           DB 144
   \   00023A   E4           DB 228
   \   00023B   90           DB 144
   \   00023C   27           DB 39
   \   00023D   F0           DB 240
   \   00023E   24           DB 36
   \   00023F   90           DB 144
   \   000240   24           DB 36
   \   000241   90           DB 144
   \   000242   27           DB 39
   \   000243   F0           DB 240
   \   000244   24           DB 36
   \   000245   90           DB 144
   \   000246   24           DB 36
   \   000247   B0           DB 176
   \   000248   50           DB 80
   \   000249   00           DB 0
   \   00024A   8F           DB 143
   \   00024B   F8           DB 248
   \   00024C   40           DB 64
   \   00024D   00           DB 0
   \   00024E   2F           DB 47
   \   00024F   E0           DB 224
   \   000250   22           DB 34
   \   000251   20           DB 32
   \   000252   02           DB 2
   \   000253   20           DB 32
   \   000254   02           DB 2
   \   000255   20           DB 32
   \   000256   E2           DB 226
   \   000257   20           DB 32
   \   000258   2F           DB 47
   \   000259   E0           DB 224
   \   00025A   22           DB 34
   \   00025B   20           DB 32
   \   00025C   22           DB 34
   \   00025D   20           DB 32
   \   00025E   22           DB 34
   \   00025F   28           DB 40
   \   000260   2A           DB 42
   \   000261   28           DB 40
   \   000262   32           DB 50
   \   000263   28           DB 40
   \   000264   22           DB 34
   \   000265   18           DB 24
   \   000266   02           DB 2
   \   000267   08           DB 8
   \   000268   40           DB 64
   \   000269   50           DB 80
   \   00026A   20           DB 32
   \   00026B   48           DB 72
   \   00026C   20           DB 32
   \   00026D   40           DB 64
   \   00026E   07           DB 7
   \   00026F   F8           DB 248
   \   000270   E4           DB 228
   \   000271   40           DB 64
   \   000272   24           DB 36
   \   000273   48           DB 72
   \   000274   27           DB 39
   \   000275   48           DB 72
   \   000276   25           DB 37
   \   000277   50           DB 80
   \   000278   25           DB 37
   \   000279   50           DB 80
   \   00027A   2D           DB 45
   \   00027B   20           DB 32
   \   00027C   35           DB 53
   \   00027D   28           DB 40
   \   00027E   2B           DB 43
   \   00027F   68           DB 104
   \   000280   08           DB 8
   \   000281   98           DB 152
   \   000282   11           DB 17
   \   000283   08           DB 8
   \   000284   11           DB 17
   \   000285   00           DB 0
   \   000286   10           DB 16
   \   000287   80           DB 128
   \   000288   2F           DB 47
   \   000289   F8           DB 248
   \   00028A   20           DB 32
   \   00028B   00           DB 0
   \   00028C   67           DB 103
   \   00028D   F0           DB 240
   \   00028E   A0           DB 160
   \   00028F   00           DB 0
   \   000290   27           DB 39
   \   000291   F0           DB 240
   \   000292   20           DB 32
   \   000293   00           DB 0
   \   000294   27           DB 39
   \   000295   F0           DB 240
   \   000296   24           DB 36
   \   000297   10           DB 16
   \   000298   24           DB 36
   \   000299   10           DB 16
   \   00029A   24           DB 36
   \   00029B   10           DB 16
   \   00029C   27           DB 39
   \   00029D   F0           DB 240
   \   00029E   24           DB 36
   \   00029F   10           DB 16
   \   0002A0   04           DB 4
   \   0002A1   00           DB 0
   \   0002A2   02           DB 2
   \   0002A3   00           DB 0
   \   0002A4   00           DB 0
   \   0002A5   00           DB 0
   \   0002A6   7F           DB 127
   \   0002A7   F0           DB 240
   \   0002A8   00           DB 0
   \   0002A9   00           DB 0
   \   0002AA   00           DB 0
   \   0002AB   00           DB 0
   \   0002AC   00           DB 0
   \   0002AD   20           DB 32
   \   0002AE   20           DB 32
   \   0002AF   20           DB 32
   \   0002B0   10           DB 16
   \   0002B1   40           DB 64
   \   0002B2   10           DB 16
   \   0002B3   40           DB 64
   \   0002B4   08           DB 8
   \   0002B5   80           DB 128
   \   0002B6   08           DB 8
   \   0002B7   80           DB 128
   \   0002B8   01           DB 1
   \   0002B9   00           DB 0
   \   0002BA   FF           DB 255
   \   0002BB   F8           DB 248
   \   0002BC   00           DB 0
   \   0002BD   00           DB 0
   \   0002BE   3F           DB 63
   \   0002BF   E0           DB 224
   \   0002C0   20           DB 32
   \   0002C1   20           DB 32
   \   0002C2   20           DB 32
   \   0002C3   20           DB 32
   \   0002C4   20           DB 32
   \   0002C5   20           DB 32
   \   0002C6   3F           DB 63
   \   0002C7   E0           DB 224
   \   0002C8   02           DB 2
   \   0002C9   00           DB 0
   \   0002CA   02           DB 2
   \   0002CB   00           DB 0
   \   0002CC   22           DB 34
   \   0002CD   00           DB 0
   \   0002CE   23           DB 35
   \   0002CF   F0           DB 240
   \   0002D0   22           DB 34
   \   0002D1   00           DB 0
   \   0002D2   22           DB 34
   \   0002D3   00           DB 0
   \   0002D4   52           DB 82
   \   0002D5   00           DB 0
   \   0002D6   8F           DB 143
   \   0002D7   F8           DB 248
   \   0002D8   10           DB 16
   \   0002D9   10           DB 16
   \   0002DA   10           DB 16
   \   0002DB   10           DB 16
   \   0002DC   28           DB 40
   \   0002DD   10           DB 16
   \   0002DE   24           DB 36
   \   0002DF   90           DB 144
   \   0002E0   42           DB 66
   \   0002E1   90           DB 144
   \   0002E2   80           DB 128
   \   0002E3   90           DB 144
   \   0002E4   7C           DB 124
   \   0002E5   90           DB 144
   \   0002E6   44           DB 68
   \   0002E7   90           DB 144
   \   0002E8   44           DB 68
   \   0002E9   90           DB 144
   \   0002EA   44           DB 68
   \   0002EB   90           DB 144
   \   0002EC   58           DB 88
   \   0002ED   10           DB 16
   \   0002EE   42           DB 66
   \   0002EF   10           DB 16
   \   0002F0   42           DB 66
   \   0002F1   10           DB 16
   \   0002F2   3E           DB 62
   \   0002F3   70           DB 112
   \   0002F4   20           DB 32
   \   0002F5   18           DB 24
   \   0002F6   10           DB 16
   \   0002F7   E0           DB 224
   \   0002F8   FE           DB 254
   \   0002F9   80           DB 128
   \   0002FA   44           DB 68
   \   0002FB   80           DB 128
   \   0002FC   28           DB 40
   \   0002FD   80           DB 128
   \   0002FE   FE           DB 254
   \   0002FF   F8           DB 248
   \   000300   00           DB 0
   \   000301   90           DB 144
   \   000302   10           DB 16
   \   000303   90           DB 144
   \   000304   FE           DB 254
   \   000305   90           DB 144
   \   000306   10           DB 16
   \   000307   90           DB 144
   \   000308   54           DB 84
   \   000309   90           DB 144
   \   00030A   92           DB 146
   \   00030B   90           DB 144
   \   00030C   11           DB 17
   \   00030D   10           DB 16
   \   00030E   72           DB 114
   \   00030F   10           DB 16
   \   000310   00           DB 0
   \   000311   80           DB 128
   \   000312   FE           DB 254
   \   000313   80           DB 128
   \   000314   10           DB 16
   \   000315   80           DB 128
   \   000316   24           DB 36
   \   000317   F8           DB 248
   \   000318   43           DB 67
   \   000319   10           DB 16
   \   00031A   FE           DB 254
   \   00031B   90           DB 144
   \   00031C   12           DB 18
   \   00031D   90           DB 144
   \   00031E   10           DB 16
   \   00031F   90           DB 144
   \   000320   FE           DB 254
   \   000321   A0           DB 160
   \   000322   10           DB 16
   \   000323   A0           DB 160
   \   000324   10           DB 16
   \   000325   40           DB 64
   \   000326   1E           DB 30
   \   000327   A0           DB 160
   \   000328   F1           DB 241
   \   000329   10           DB 16
   \   00032A   02           DB 2
   \   00032B   08           DB 8
   \   00032C   00           DB 0
   \   00032D   00           DB 0
   \   00032E   47           DB 71
   \   00032F   E0           DB 224
   \   000330   20           DB 32
   \   000331   00           DB 0
   \   000332   20           DB 32
   \   000333   00           DB 0
   \   000334   00           DB 0
   \   000335   00           DB 0
   \   000336   0F           DB 15
   \   000337   F0           DB 240
   \   000338   E2           DB 226
   \   000339   40           DB 64
   \   00033A   22           DB 34
   \   00033B   40           DB 64
   \   00033C   22           DB 34
   \   00033D   40           DB 64
   \   00033E   22           DB 34
   \   00033F   48           DB 72
   \   000340   24           DB 36
   \   000341   48           DB 72
   \   000342   28           DB 40
   \   000343   38           DB 56
   \   000344   50           DB 80
   \   000345   00           DB 0
   \   000346   8F           DB 143
   \   000347   F8           DB 248
   \   000348   00           DB 0
   \   000349   00           DB 0
   \   00034A   F3           DB 243
   \   00034B   E0           DB 224
   \   00034C   12           DB 18
   \   00034D   20           DB 32
   \   00034E   12           DB 18
   \   00034F   20           DB 32
   \   000350   F3           DB 243
   \   000351   E0           DB 224
   \   000352   80           DB 128
   \   000353   80           DB 128
   \   000354   87           DB 135
   \   000355   F0           DB 240
   \   000356   84           DB 132
   \   000357   90           DB 144
   \   000358   F4           DB 244
   \   000359   90           DB 144
   \   00035A   17           DB 23
   \   00035B   F0           DB 240
   \   00035C   10           DB 16
   \   00035D   80           DB 128
   \   00035E   10           DB 16
   \   00035F   90           DB 144
   \   000360   1F           DB 31
   \   000361   F8           DB 248
   \   000362   60           DB 96
   \   000363   08           DB 8
   \   000364   02           DB 2
   \   000365   00           DB 0
   \   000366   02           DB 2
   \   000367   00           DB 0
   \   000368   02           DB 2
   \   000369   00           DB 0
   \   00036A   02           DB 2
   \   00036B   00           DB 0
   \   00036C   FF           DB 255
   \   00036D   F8           DB 248
   \   00036E   02           DB 2
   \   00036F   00           DB 0
   \   000370   05           DB 5
   \   000371   00           DB 0
   \   000372   05           DB 5
   \   000373   00           DB 0
   \   000374   05           DB 5
   \   000375   00           DB 0
   \   000376   08           DB 8
   \   000377   80           DB 128
   \   000378   08           DB 8
   \   000379   80           DB 128
   \   00037A   10           DB 16
   \   00037B   40           DB 64
   \   00037C   20           DB 32
   \   00037D   20           DB 32
   \   00037E   C0           DB 192
   \   00037F   18           DB 24
   \   000380   3F           DB 63
   \   000381   F8           DB 248
   \   000382   20           DB 32
   \   000383   80           DB 128
   \   000384   21           DB 33
   \   000385   00           DB 0
   \   000386   27           DB 39
   \   000387   F0           DB 240
   \   000388   24           DB 36
   \   000389   10           DB 16
   \   00038A   27           DB 39
   \   00038B   F0           DB 240
   \   00038C   24           DB 36
   \   00038D   10           DB 16
   \   00038E   27           DB 39
   \   00038F   F0           DB 240
   \   000390   20           DB 32
   \   000391   80           DB 128
   \   000392   24           DB 36
   \   000393   90           DB 144
   \   000394   24           DB 36
   \   000395   88           DB 136
   \   000396   48           DB 72
   \   000397   88           DB 136
   \   000398   40           DB 64
   \   000399   80           DB 128
   \   00039A   83           DB 131
   \   00039B   80           DB 128
   \   00039C   00           DB 0
   \   00039D   00           DB 0
   \   00039E   00           DB 0
   \   00039F   00           DB 0
   \   0003A0   00           DB 0
   \   0003A1   00           DB 0
   \   0003A2   00           DB 0
   \   0003A3   00           DB 0
   \   0003A4   00           DB 0
   \   0003A5   00           DB 0
   \   0003A6   00           DB 0
   \   0003A7   00           DB 0
   \   0003A8   18           DB 24
   \   0003A9   00           DB 0
   \   0003AA   18           DB 24
   \   0003AB   00           DB 0
   \   0003AC   00           DB 0
   \   0003AD   00           DB 0
   \   0003AE   00           DB 0
   \   0003AF   00           DB 0
   \   0003B0   18           DB 24
   \   0003B1   00           DB 0
   \   0003B2   18           DB 24
   \   0003B3   00           DB 0
   \   0003B4   00           DB 0
   \   0003B5   00           DB 0
   \   0003B6   00           DB 0
   \   0003B7   00           DB 0
    127          {
    128          
    129          
    130          0x00,0x20,0x0D,0x20,0x70,0xA0,0x10,0xA0,0x12,0x20,0xFD,0x20,0x11,0x20,0x30,0x38,
    131          0x3B,0xE0,0x54,0x20,0x90,0x20,0x10,0x20,0x10,0x20,0x10,0x20,/*"科",6*/
    132          
    133          0x20,0x80,0x20,0x80,0x20,0x80,0xF7,0xF0,0x20,0x80,0x20,0x80,0x27,0xE0,0x32,0x20,
    134          0xE2,0x20,0x21,0x40,0x20,0x80,0x21,0x40,0x22,0x20,0xEC,0x18,/*"技",7*/
    135          
    136          0x00,0x00,0x3F,0xF8,0x21,0x08,0x21,0x08,0x21,0x08,0x3F,0xF8,0x21,0x08,0x21,0x08,
    137          0x3F,0xF8,0x21,0x08,0x21,0x08,0x41,0x08,0x41,0x08,0x80,0x38,/*"用",8*/
    138          
    139          0x02,0x00,0x01,0x00,0x3F,0xF8,0x20,0x08,0x20,0x08,0x20,0x08,0x3F,0xF8,0x20,0x08,
    140          0x20,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0x80,0x00,/*"户",9*/
    141          
    142          0x01,0x20,0x7D,0x40,0x04,0x90,0x28,0xA0,0x10,0x40,0x2F,0xA0,0x40,0x18,0x9F,0xC0,
    143          0x10,0x40,0x10,0x40,0x1F,0xC0,0x10,0x40,0x08,0x80,0xFF,0xF8,/*"登",10*/
    144          
    145          0x00,0x00,0x7F,0xE0,0x00,0x20,0x3F,0xE0,0x00,0x20,0xFF,0xF8,0x02,0x00,0x22,0x20,
    146          0x13,0x40,0x0A,0x80,0x12,0x40,0x22,0x20,0xC2,0x18,0x0E,0x00,/*"录",11*/
    147          
    148          0x21,0x00,0x21,0x10,0x21,0x10,0xF9,0x20,0xA9,0x40,0xA9,0x00,0xAB,0xF8,0xA9,0x40,
    149          0xA9,0x40,0xA9,0x20,0xB9,0x20,0x21,0x50,0x21,0x88,0x21,0x00,/*"帐",12*/
    150          
    151          0x3F,0xE0,0x20,0x20,0x20,0x20,0x3F,0xE0,0x00,0x00,0x00,0x00,0xFF,0xF8,0x08,0x00,
    152          0x10,0x00,0x3F,0xE0,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0xC0,/*"号",13*/
    153          
    154          0x02,0x00,0xFF,0xF8,0x80,0x08,0x04,0x40,0x52,0x90,0x51,0x08,0x92,0x28,0x0F,0xE0,
    155          0x30,0x00,0xC2,0x00,0x22,0x20,0x22,0x20,0x3F,0xE0,0x00,0x20,/*"密",14*/
    156          
    157          0x00,0x00,0x07,0xE0,0xF8,0x20,0x22,0x20,0x22,0x20,0x42,0x20,0x7B,0xF8,0xC8,0x08,
    158          0x48,0x08,0x4F,0xE8,0x48,0x08,0x78,0x08,0x48,0x08,0x00,0x30,/*"码",15*/
    159          
    160          0x01,0x00,0x01,0xF0,0xFA,0x10,0x24,0x20,0x23,0xF8,0x42,0x48,0x7A,0x48,0xCB,0xF8,
    161          0x4A,0x48,0x4A,0x48,0x4B,0xF8,0x7A,0x48,0x42,0x48,0x04,0x18,/*"确",16*/
    162          
    163          0x04,0x00,0x02,0x00,0xFF,0xF8,0x80,0x08,0x00,0x00,0x3F,0xE0,0x02,0x00,0x02,0x00,
    164          0x22,0x00,0x23,0xE0,0x22,0x00,0x22,0x00,0x52,0x00,0x8F,0xF8,/*"定",17*/
    165          
    166          0x00,0x00,0xFC,0x00,0x4B,0xF0,0x49,0x10,0x79,0x10,0x49,0x10,0x49,0x10,0x78,0xA0,
    167          0x48,0xA0,0x4E,0x40,0xF8,0x40,0x08,0xA0,0x09,0x10,0x0A,0x08,/*"取",18*/
    168          
    169          0x00,0x80,0x44,0x90,0x22,0xA0,0x10,0x80,0x07,0xF0,0x84,0x10,0x44,0x10,0x17,0xF0,
    170          0x14,0x10,0x24,0x10,0x27,0xF0,0x44,0x10,0x44,0x10,0x04,0x70,/*"消",19*/
    171          
    172          0x02,0x00,0x02,0x00,0x7F,0xF0,0x04,0x00,0x04,0x00,0xFF,0xF8,0x08,0x00,0x10,0x00,
    173          0x3F,0xE0,0x00,0x20,0x00,0x40,0x1C,0x80,0x03,0x00,0x00,0x80,/*"专",20*/
    174          
    175          0x08,0x80,0x08,0x80,0x08,0x80,0x88,0x90,0x48,0x90,0x48,0x90,0x28,0xA0,0x28,0xA0,
    176          0x28,0xC0,0x08,0x80,0x08,0x80,0x08,0x80,0x08,0x80,0xFF,0xF8,/*"业",21*/
    177          
    178          0x02,0x00,0x02,0x00,0x7F,0xF0,0x04,0x00,0x04,0x00,0xFF,0xF8,0x08,0x00,0x10,0x00,
    179          0x3F,0xE0,0x00,0x20,0x00,0x40,0x1C,0x80,0x03,0x00,0x00,0x80,/*"专",22*/
    180          
    181          0x01,0x00,0x40,0x80,0x20,0x00,0x17,0xF0,0x00,0x80,0x80,0x80,0x40,0x80,0x00,0x80,
    182          0x17,0xF0,0x10,0x80,0x20,0x80,0x20,0x80,0x40,0x80,0x4F,0xF8,/*"注",23*/
    183          
    184          0x00,0x00,0x7F,0xF0,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0xFF,0xF8,0x05,0x00,
    185          0x05,0x00,0x09,0x00,0x11,0x00,0x21,0x08,0x41,0x08,0x80,0xF8,/*"无",24*/
    186          
    187          0x20,0xA0,0x20,0x90,0x48,0x80,0x48,0xF0,0xF3,0x80,0x10,0x80,0x20,0xB8,0x43,0xC0,
    188          0xF8,0x90,0x00,0xA0,0x00,0x48,0x18,0xA8,0xE3,0x18,0x00,0x08,/*"线",25*/
    189          
    190          0x47,0xF0,0x21,0x20,0x20,0xC0,0x07,0xF0,0x04,0x90,0xE4,0x90,0x27,0xF0,0x24,0x90,
    191          0x24,0x90,0x27,0xF0,0x24,0x90,0x24,0xB0,0x50,0x00,0x8F,0xF8,/*"通",26*/
    192          
    193          0x40,0x00,0x2F,0xE0,0x22,0x20,0x02,0x20,0x02,0x20,0xE2,0x20,0x2F,0xE0,0x22,0x20,
    194          0x22,0x20,0x22,0x28,0x2A,0x28,0x32,0x28,0x22,0x18,0x02,0x08,/*"讯",27*/
    195          
    196          0x40,0x50,0x20,0x48,0x20,0x40,0x07,0xF8,0xE4,0x40,0x24,0x48,0x27,0x48,0x25,0x50,
    197          0x25,0x50,0x2D,0x20,0x35,0x28,0x2B,0x68,0x08,0x98,0x11,0x08,/*"诚",28*/
    198          
    199          0x11,0x00,0x10,0x80,0x2F,0xF8,0x20,0x00,0x67,0xF0,0xA0,0x00,0x27,0xF0,0x20,0x00,
    200          0x27,0xF0,0x24,0x10,0x24,0x10,0x24,0x10,0x27,0xF0,0x24,0x10,/*"信",29*/
    201          
    202          0x04,0x00,0x02,0x00,0x00,0x00,0x7F,0xF0,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,
    203          0x10,0x40,0x10,0x40,0x08,0x80,0x08,0x80,0x01,0x00,0xFF,0xF8,/*"立",30*/
    204          
    205          0x00,0x00,0x3F,0xE0,0x20,0x20,0x20,0x20,0x20,0x20,0x3F,0xE0,0x02,0x00,0x02,0x00,
    206          0x22,0x00,0x23,0xF0,0x22,0x00,0x22,0x00,0x52,0x00,0x8F,0xF8,/*"足",31*/
    207          
    208          0x10,0x10,0x10,0x10,0x28,0x10,0x24,0x90,0x42,0x90,0x80,0x90,0x7C,0x90,0x44,0x90,
    209          0x44,0x90,0x44,0x90,0x58,0x10,0x42,0x10,0x42,0x10,0x3E,0x70,/*"创",32*/
    210          
    211          0x20,0x18,0x10,0xE0,0xFE,0x80,0x44,0x80,0x28,0x80,0xFE,0xF8,0x00,0x90,0x10,0x90,
    212          0xFE,0x90,0x10,0x90,0x54,0x90,0x92,0x90,0x11,0x10,0x72,0x10,/*"新",33*/
    213          
    214          0x00,0x80,0xFE,0x80,0x10,0x80,0x24,0xF8,0x43,0x10,0xFE,0x90,0x12,0x90,0x10,0x90,
    215          0xFE,0xA0,0x10,0xA0,0x10,0x40,0x1E,0xA0,0xF1,0x10,0x02,0x08,/*"致",34*/
    216          
    217          0x00,0x00,0x47,0xE0,0x20,0x00,0x20,0x00,0x00,0x00,0x0F,0xF0,0xE2,0x40,0x22,0x40,
    218          0x22,0x40,0x22,0x48,0x24,0x48,0x28,0x38,0x50,0x00,0x8F,0xF8,/*"远",35*/
    219          
    220          0x00,0x00,0xF3,0xE0,0x12,0x20,0x12,0x20,0xF3,0xE0,0x80,0x80,0x87,0xF0,0x84,0x90,
    221          0xF4,0x90,0x17,0xF0,0x10,0x80,0x10,0x90,0x1F,0xF8,0x60,0x08,/*"强",36*/
    222          
    223          0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0xFF,0xF8,0x02,0x00,0x05,0x00,0x05,0x00,
    224          0x05,0x00,0x08,0x80,0x08,0x80,0x10,0x40,0x20,0x20,0xC0,0x18,/*"大",37*/
    225          
    226          0x3F,0xF8,0x20,0x80,0x21,0x00,0x27,0xF0,0x24,0x10,0x27,0xF0,0x24,0x10,0x27,0xF0,
    227          0x20,0x80,0x24,0x90,0x24,0x88,0x48,0x88,0x40,0x80,0x83,0x80,/*"原",38*/
    228          
    229          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,
    230          0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,/*"：",41*/
    231          
    232          };
    233          
    234          //英文7x14点阵字符 andy

   \                                 In  segment CODE_C, align 1
    235          __code const unsigned char ASCII7x14[][14] =
   \                     ASCII7x14:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   10           DB 16
   \   000011   10           DB 16
   \   000012   10           DB 16
   \   000013   10           DB 16
   \   000014   10           DB 16
   \   000015   10           DB 16
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   30           DB 48
   \   000019   30           DB 48
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   14           DB 20
   \   00001E   28           DB 40
   \   00001F   50           DB 80
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   28           DB 40
   \   00002E   28           DB 40
   \   00002F   FC           DB 252
   \   000030   28           DB 40
   \   000031   48           DB 72
   \   000032   50           DB 80
   \   000033   FC           DB 252
   \   000034   50           DB 80
   \   000035   50           DB 80
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   10           DB 16
   \   00003B   38           DB 56
   \   00003C   54           DB 84
   \   00003D   54           DB 84
   \   00003E   30           DB 48
   \   00003F   18           DB 24
   \   000040   14           DB 20
   \   000041   54           DB 84
   \   000042   54           DB 84
   \   000043   38           DB 56
   \   000044   10           DB 16
   \   000045   00           DB 0
   \   000046   00           DB 0
   \   000047   00           DB 0
   \   000048   00           DB 0
   \   000049   44           DB 68
   \   00004A   A8           DB 168
   \   00004B   A8           DB 168
   \   00004C   B0           DB 176
   \   00004D   54           DB 84
   \   00004E   1A           DB 26
   \   00004F   2A           DB 42
   \   000050   2A           DB 42
   \   000051   44           DB 68
   \   000052   00           DB 0
   \   000053   00           DB 0
   \   000054   00           DB 0
   \   000055   00           DB 0
   \   000056   00           DB 0
   \   000057   20           DB 32
   \   000058   50           DB 80
   \   000059   50           DB 80
   \   00005A   60           DB 96
   \   00005B   AC           DB 172
   \   00005C   A8           DB 168
   \   00005D   98           DB 152
   \   00005E   92           DB 146
   \   00005F   7C           DB 124
   \   000060   00           DB 0
   \   000061   00           DB 0
   \   000062   00           DB 0
   \   000063   60           DB 96
   \   000064   60           DB 96
   \   000065   20           DB 32
   \   000066   C0           DB 192
   \   000067   00           DB 0
   \   000068   00           DB 0
   \   000069   00           DB 0
   \   00006A   00           DB 0
   \   00006B   00           DB 0
   \   00006C   00           DB 0
   \   00006D   00           DB 0
   \   00006E   00           DB 0
   \   00006F   00           DB 0
   \   000070   00           DB 0
   \   000071   04           DB 4
   \   000072   08           DB 8
   \   000073   08           DB 8
   \   000074   10           DB 16
   \   000075   10           DB 16
   \   000076   10           DB 16
   \   000077   10           DB 16
   \   000078   10           DB 16
   \   000079   10           DB 16
   \   00007A   08           DB 8
   \   00007B   08           DB 8
   \   00007C   04           DB 4
   \   00007D   00           DB 0
   \   00007E   00           DB 0
   \   00007F   00           DB 0
   \   000080   40           DB 64
   \   000081   20           DB 32
   \   000082   10           DB 16
   \   000083   08           DB 8
   \   000084   04           DB 4
   \   000085   08           DB 8
   \   000086   10           DB 16
   \   000087   20           DB 32
   \   000088   40           DB 64
   \   000089   00           DB 0
   \   00008A   00           DB 0
   \   00008B   00           DB 0
   \   00008C   00           DB 0
   \   00008D   00           DB 0
   \   00008E   00           DB 0
   \   00008F   10           DB 16
   \   000090   10           DB 16
   \   000091   D6           DB 214
   \   000092   38           DB 56
   \   000093   38           DB 56
   \   000094   D6           DB 214
   \   000095   10           DB 16
   \   000096   10           DB 16
   \   000097   00           DB 0
   \   000098   00           DB 0
   \   000099   00           DB 0
   \   00009A   00           DB 0
   \   00009B   00           DB 0
   \   00009C   00           DB 0
   \   00009D   10           DB 16
   \   00009E   10           DB 16
   \   00009F   10           DB 16
   \   0000A0   FE           DB 254
   \   0000A1   10           DB 16
   \   0000A2   10           DB 16
   \   0000A3   10           DB 16
   \   0000A4   00           DB 0
   \   0000A5   00           DB 0
   \   0000A6   00           DB 0
   \   0000A7   00           DB 0
   \   0000A8   00           DB 0
   \   0000A9   00           DB 0
   \   0000AA   00           DB 0
   \   0000AB   00           DB 0
   \   0000AC   00           DB 0
   \   0000AD   00           DB 0
   \   0000AE   00           DB 0
   \   0000AF   00           DB 0
   \   0000B0   00           DB 0
   \   0000B1   00           DB 0
   \   0000B2   60           DB 96
   \   0000B3   60           DB 96
   \   0000B4   20           DB 32
   \   0000B5   C0           DB 192
   \   0000B6   00           DB 0
   \   0000B7   00           DB 0
   \   0000B8   00           DB 0
   \   0000B9   00           DB 0
   \   0000BA   00           DB 0
   \   0000BB   00           DB 0
   \   0000BC   FC           DB 252
   \   0000BD   00           DB 0
   \   0000BE   00           DB 0
   \   0000BF   00           DB 0
   \   0000C0   00           DB 0
   \   0000C1   00           DB 0
   \   0000C2   00           DB 0
   \   0000C3   00           DB 0
   \   0000C4   00           DB 0
   \   0000C5   00           DB 0
   \   0000C6   00           DB 0
   \   0000C7   00           DB 0
   \   0000C8   00           DB 0
   \   0000C9   00           DB 0
   \   0000CA   00           DB 0
   \   0000CB   00           DB 0
   \   0000CC   00           DB 0
   \   0000CD   00           DB 0
   \   0000CE   60           DB 96
   \   0000CF   60           DB 96
   \   0000D0   00           DB 0
   \   0000D1   00           DB 0
   \   0000D2   00           DB 0
   \   0000D3   02           DB 2
   \   0000D4   04           DB 4
   \   0000D5   04           DB 4
   \   0000D6   04           DB 4
   \   0000D7   08           DB 8
   \   0000D8   08           DB 8
   \   0000D9   10           DB 16
   \   0000DA   10           DB 16
   \   0000DB   20           DB 32
   \   0000DC   20           DB 32
   \   0000DD   20           DB 32
   \   0000DE   40           DB 64
   \   0000DF   00           DB 0
   \   0000E0   00           DB 0
   \   0000E1   00           DB 0
   \   0000E2   00           DB 0
   \   0000E3   30           DB 48
   \   0000E4   48           DB 72
   \   0000E5   84           DB 132
   \   0000E6   84           DB 132
   \   0000E7   84           DB 132
   \   0000E8   84           DB 132
   \   0000E9   84           DB 132
   \   0000EA   48           DB 72
   \   0000EB   30           DB 48
   \   0000EC   00           DB 0
   \   0000ED   00           DB 0
   \   0000EE   00           DB 0
   \   0000EF   00           DB 0
   \   0000F0   00           DB 0
   \   0000F1   10           DB 16
   \   0000F2   70           DB 112
   \   0000F3   10           DB 16
   \   0000F4   10           DB 16
   \   0000F5   10           DB 16
   \   0000F6   10           DB 16
   \   0000F7   10           DB 16
   \   0000F8   10           DB 16
   \   0000F9   7C           DB 124
   \   0000FA   00           DB 0
   \   0000FB   00           DB 0
   \   0000FC   00           DB 0
   \   0000FD   00           DB 0
   \   0000FE   00           DB 0
   \   0000FF   38           DB 56
   \   000100   44           DB 68
   \   000101   44           DB 68
   \   000102   04           DB 4
   \   000103   08           DB 8
   \   000104   10           DB 16
   \   000105   20           DB 32
   \   000106   44           DB 68
   \   000107   7C           DB 124
   \   000108   00           DB 0
   \   000109   00           DB 0
   \   00010A   00           DB 0
   \   00010B   00           DB 0
   \   00010C   00           DB 0
   \   00010D   38           DB 56
   \   00010E   44           DB 68
   \   00010F   44           DB 68
   \   000110   18           DB 24
   \   000111   04           DB 4
   \   000112   04           DB 4
   \   000113   44           DB 68
   \   000114   44           DB 68
   \   000115   38           DB 56
   \   000116   00           DB 0
   \   000117   00           DB 0
   \   000118   00           DB 0
   \   000119   00           DB 0
   \   00011A   08           DB 8
   \   00011B   08           DB 8
   \   00011C   18           DB 24
   \   00011D   28           DB 40
   \   00011E   48           DB 72
   \   00011F   48           DB 72
   \   000120   88           DB 136
   \   000121   7C           DB 124
   \   000122   08           DB 8
   \   000123   1C           DB 28
   \   000124   00           DB 0
   \   000125   00           DB 0
   \   000126   00           DB 0
   \   000127   00           DB 0
   \   000128   00           DB 0
   \   000129   7C           DB 124
   \   00012A   40           DB 64
   \   00012B   40           DB 64
   \   00012C   78           DB 120
   \   00012D   44           DB 68
   \   00012E   04           DB 4
   \   00012F   44           DB 68
   \   000130   44           DB 68
   \   000131   38           DB 56
   \   000132   00           DB 0
   \   000133   00           DB 0
   \   000134   00           DB 0
   \   000135   00           DB 0
   \   000136   00           DB 0
   \   000137   3C           DB 60
   \   000138   44           DB 68
   \   000139   80           DB 128
   \   00013A   B8           DB 184
   \   00013B   C4           DB 196
   \   00013C   84           DB 132
   \   00013D   84           DB 132
   \   00013E   84           DB 132
   \   00013F   78           DB 120
   \   000140   00           DB 0
   \   000141   00           DB 0
   \   000142   00           DB 0
   \   000143   00           DB 0
   \   000144   00           DB 0
   \   000145   7C           DB 124
   \   000146   44           DB 68
   \   000147   48           DB 72
   \   000148   08           DB 8
   \   000149   10           DB 16
   \   00014A   10           DB 16
   \   00014B   10           DB 16
   \   00014C   10           DB 16
   \   00014D   10           DB 16
   \   00014E   00           DB 0
   \   00014F   00           DB 0
   \   000150   00           DB 0
   \   000151   00           DB 0
   \   000152   00           DB 0
   \   000153   78           DB 120
   \   000154   84           DB 132
   \   000155   84           DB 132
   \   000156   48           DB 72
   \   000157   78           DB 120
   \   000158   84           DB 132
   \   000159   84           DB 132
   \   00015A   84           DB 132
   \   00015B   78           DB 120
   \   00015C   00           DB 0
   \   00015D   00           DB 0
   \   00015E   00           DB 0
   \   00015F   00           DB 0
   \   000160   00           DB 0
   \   000161   78           DB 120
   \   000162   84           DB 132
   \   000163   84           DB 132
   \   000164   84           DB 132
   \   000165   8C           DB 140
   \   000166   74           DB 116
   \   000167   04           DB 4
   \   000168   88           DB 136
   \   000169   F0           DB 240
   \   00016A   00           DB 0
   \   00016B   00           DB 0
   \   00016C   00           DB 0
   \   00016D   00           DB 0
   \   00016E   00           DB 0
   \   00016F   00           DB 0
   \   000170   00           DB 0
   \   000171   30           DB 48
   \   000172   30           DB 48
   \   000173   00           DB 0
   \   000174   00           DB 0
   \   000175   00           DB 0
   \   000176   30           DB 48
   \   000177   30           DB 48
   \   000178   00           DB 0
   \   000179   00           DB 0
   \   00017A   00           DB 0
   \   00017B   00           DB 0
   \   00017C   00           DB 0
   \   00017D   00           DB 0
   \   00017E   00           DB 0
   \   00017F   00           DB 0
   \   000180   10           DB 16
   \   000181   00           DB 0
   \   000182   00           DB 0
   \   000183   00           DB 0
   \   000184   00           DB 0
   \   000185   10           DB 16
   \   000186   10           DB 16
   \   000187   20           DB 32
   \   000188   00           DB 0
   \   000189   00           DB 0
   \   00018A   04           DB 4
   \   00018B   08           DB 8
   \   00018C   10           DB 16
   \   00018D   20           DB 32
   \   00018E   40           DB 64
   \   00018F   20           DB 32
   \   000190   10           DB 16
   \   000191   08           DB 8
   \   000192   04           DB 4
   \   000193   00           DB 0
   \   000194   00           DB 0
   \   000195   00           DB 0
   \   000196   00           DB 0
   \   000197   00           DB 0
   \   000198   00           DB 0
   \   000199   00           DB 0
   \   00019A   00           DB 0
   \   00019B   FC           DB 252
   \   00019C   00           DB 0
   \   00019D   00           DB 0
   \   00019E   FC           DB 252
   \   00019F   00           DB 0
   \   0001A0   00           DB 0
   \   0001A1   00           DB 0
   \   0001A2   00           DB 0
   \   0001A3   00           DB 0
   \   0001A4   00           DB 0
   \   0001A5   00           DB 0
   \   0001A6   40           DB 64
   \   0001A7   20           DB 32
   \   0001A8   10           DB 16
   \   0001A9   08           DB 8
   \   0001AA   04           DB 4
   \   0001AB   08           DB 8
   \   0001AC   10           DB 16
   \   0001AD   20           DB 32
   \   0001AE   40           DB 64
   \   0001AF   00           DB 0
   \   0001B0   00           DB 0
   \   0001B1   00           DB 0
   \   0001B2   00           DB 0
   \   0001B3   00           DB 0
   \   0001B4   78           DB 120
   \   0001B5   84           DB 132
   \   0001B6   84           DB 132
   \   0001B7   84           DB 132
   \   0001B8   08           DB 8
   \   0001B9   10           DB 16
   \   0001BA   10           DB 16
   \   0001BB   00           DB 0
   \   0001BC   30           DB 48
   \   0001BD   30           DB 48
   \   0001BE   00           DB 0
   \   0001BF   00           DB 0
   \   0001C0   00           DB 0
   \   0001C1   00           DB 0
   \   0001C2   00           DB 0
   \   0001C3   38           DB 56
   \   0001C4   44           DB 68
   \   0001C5   9A           DB 154
   \   0001C6   AA           DB 170
   \   0001C7   AA           DB 170
   \   0001C8   AA           DB 170
   \   0001C9   B4           DB 180
   \   0001CA   42           DB 66
   \   0001CB   3C           DB 60
   \   0001CC   00           DB 0
   \   0001CD   00           DB 0
   \   0001CE   00           DB 0
   \   0001CF   00           DB 0
   \   0001D0   00           DB 0
   \   0001D1   10           DB 16
   \   0001D2   10           DB 16
   \   0001D3   28           DB 40
   \   0001D4   28           DB 40
   \   0001D5   28           DB 40
   \   0001D6   38           DB 56
   \   0001D7   44           DB 68
   \   0001D8   44           DB 68
   \   0001D9   EE           DB 238
   \   0001DA   00           DB 0
   \   0001DB   00           DB 0
   \   0001DC   00           DB 0
   \   0001DD   00           DB 0
   \   0001DE   00           DB 0
   \   0001DF   F8           DB 248
   \   0001E0   44           DB 68
   \   0001E1   44           DB 68
   \   0001E2   78           DB 120
   \   0001E3   44           DB 68
   \   0001E4   44           DB 68
   \   0001E5   44           DB 68
   \   0001E6   44           DB 68
   \   0001E7   F8           DB 248
   \   0001E8   00           DB 0
   \   0001E9   00           DB 0
   \   0001EA   00           DB 0
   \   0001EB   00           DB 0
   \   0001EC   00           DB 0
   \   0001ED   3C           DB 60
   \   0001EE   44           DB 68
   \   0001EF   84           DB 132
   \   0001F0   80           DB 128
   \   0001F1   80           DB 128
   \   0001F2   80           DB 128
   \   0001F3   80           DB 128
   \   0001F4   44           DB 68
   \   0001F5   38           DB 56
   \   0001F6   00           DB 0
   \   0001F7   00           DB 0
   \   0001F8   00           DB 0
   \   0001F9   00           DB 0
   \   0001FA   00           DB 0
   \   0001FB   F0           DB 240
   \   0001FC   48           DB 72
   \   0001FD   44           DB 68
   \   0001FE   44           DB 68
   \   0001FF   44           DB 68
   \   000200   44           DB 68
   \   000201   44           DB 68
   \   000202   48           DB 72
   \   000203   F0           DB 240
   \   000204   00           DB 0
   \   000205   00           DB 0
   \   000206   00           DB 0
   \   000207   00           DB 0
   \   000208   00           DB 0
   \   000209   FC           DB 252
   \   00020A   44           DB 68
   \   00020B   40           DB 64
   \   00020C   48           DB 72
   \   00020D   78           DB 120
   \   00020E   48           DB 72
   \   00020F   40           DB 64
   \   000210   44           DB 68
   \   000211   FC           DB 252
   \   000212   00           DB 0
   \   000213   00           DB 0
   \   000214   00           DB 0
   \   000215   00           DB 0
   \   000216   00           DB 0
   \   000217   FC           DB 252
   \   000218   42           DB 66
   \   000219   40           DB 64
   \   00021A   48           DB 72
   \   00021B   78           DB 120
   \   00021C   48           DB 72
   \   00021D   40           DB 64
   \   00021E   40           DB 64
   \   00021F   E0           DB 224
   \   000220   00           DB 0
   \   000221   00           DB 0
   \   000222   00           DB 0
   \   000223   00           DB 0
   \   000224   00           DB 0
   \   000225   3C           DB 60
   \   000226   44           DB 68
   \   000227   84           DB 132
   \   000228   80           DB 128
   \   000229   80           DB 128
   \   00022A   8E           DB 142
   \   00022B   84           DB 132
   \   00022C   44           DB 68
   \   00022D   38           DB 56
   \   00022E   00           DB 0
   \   00022F   00           DB 0
   \   000230   00           DB 0
   \   000231   00           DB 0
   \   000232   00           DB 0
   \   000233   EE           DB 238
   \   000234   44           DB 68
   \   000235   44           DB 68
   \   000236   44           DB 68
   \   000237   7C           DB 124
   \   000238   44           DB 68
   \   000239   44           DB 68
   \   00023A   44           DB 68
   \   00023B   EE           DB 238
   \   00023C   00           DB 0
   \   00023D   00           DB 0
   \   00023E   00           DB 0
   \   00023F   00           DB 0
   \   000240   00           DB 0
   \   000241   7C           DB 124
   \   000242   10           DB 16
   \   000243   10           DB 16
   \   000244   10           DB 16
   \   000245   10           DB 16
   \   000246   10           DB 16
   \   000247   10           DB 16
   \   000248   10           DB 16
   \   000249   7C           DB 124
   \   00024A   00           DB 0
   \   00024B   00           DB 0
   \   00024C   00           DB 0
   \   00024D   00           DB 0
   \   00024E   00           DB 0
   \   00024F   7C           DB 124
   \   000250   10           DB 16
   \   000251   10           DB 16
   \   000252   10           DB 16
   \   000253   10           DB 16
   \   000254   10           DB 16
   \   000255   10           DB 16
   \   000256   10           DB 16
   \   000257   10           DB 16
   \   000258   90           DB 144
   \   000259   E0           DB 224
   \   00025A   00           DB 0
   \   00025B   00           DB 0
   \   00025C   00           DB 0
   \   00025D   EE           DB 238
   \   00025E   44           DB 68
   \   00025F   48           DB 72
   \   000260   50           DB 80
   \   000261   70           DB 112
   \   000262   48           DB 72
   \   000263   48           DB 72
   \   000264   44           DB 68
   \   000265   EE           DB 238
   \   000266   00           DB 0
   \   000267   00           DB 0
   \   000268   00           DB 0
   \   000269   00           DB 0
   \   00026A   00           DB 0
   \   00026B   E0           DB 224
   \   00026C   40           DB 64
   \   00026D   40           DB 64
   \   00026E   40           DB 64
   \   00026F   40           DB 64
   \   000270   40           DB 64
   \   000271   40           DB 64
   \   000272   44           DB 68
   \   000273   FC           DB 252
   \   000274   00           DB 0
   \   000275   00           DB 0
   \   000276   00           DB 0
   \   000277   00           DB 0
   \   000278   00           DB 0
   \   000279   EE           DB 238
   \   00027A   6C           DB 108
   \   00027B   6C           DB 108
   \   00027C   6C           DB 108
   \   00027D   54           DB 84
   \   00027E   54           DB 84
   \   00027F   54           DB 84
   \   000280   54           DB 84
   \   000281   D6           DB 214
   \   000282   00           DB 0
   \   000283   00           DB 0
   \   000284   00           DB 0
   \   000285   00           DB 0
   \   000286   00           DB 0
   \   000287   EE           DB 238
   \   000288   64           DB 100
   \   000289   64           DB 100
   \   00028A   54           DB 84
   \   00028B   54           DB 84
   \   00028C   54           DB 84
   \   00028D   4C           DB 76
   \   00028E   4C           DB 76
   \   00028F   E4           DB 228
   \   000290   00           DB 0
   \   000291   00           DB 0
   \   000292   00           DB 0
   \   000293   00           DB 0
   \   000294   00           DB 0
   \   000295   30           DB 48
   \   000296   48           DB 72
   \   000297   84           DB 132
   \   000298   84           DB 132
   \   000299   84           DB 132
   \   00029A   84           DB 132
   \   00029B   84           DB 132
   \   00029C   48           DB 72
   \   00029D   30           DB 48
   \   00029E   00           DB 0
   \   00029F   00           DB 0
   \   0002A0   00           DB 0
   \   0002A1   00           DB 0
   \   0002A2   00           DB 0
   \   0002A3   F8           DB 248
   \   0002A4   44           DB 68
   \   0002A5   44           DB 68
   \   0002A6   44           DB 68
   \   0002A7   78           DB 120
   \   0002A8   40           DB 64
   \   0002A9   40           DB 64
   \   0002AA   40           DB 64
   \   0002AB   E0           DB 224
   \   0002AC   00           DB 0
   \   0002AD   00           DB 0
   \   0002AE   00           DB 0
   \   0002AF   00           DB 0
   \   0002B0   00           DB 0
   \   0002B1   30           DB 48
   \   0002B2   48           DB 72
   \   0002B3   84           DB 132
   \   0002B4   84           DB 132
   \   0002B5   84           DB 132
   \   0002B6   84           DB 132
   \   0002B7   B4           DB 180
   \   0002B8   48           DB 72
   \   0002B9   38           DB 56
   \   0002BA   0C           DB 12
   \   0002BB   00           DB 0
   \   0002BC   00           DB 0
   \   0002BD   00           DB 0
   \   0002BE   00           DB 0
   \   0002BF   F8           DB 248
   \   0002C0   44           DB 68
   \   0002C1   44           DB 68
   \   0002C2   78           DB 120
   \   0002C3   50           DB 80
   \   0002C4   48           DB 72
   \   0002C5   48           DB 72
   \   0002C6   44           DB 68
   \   0002C7   E6           DB 230
   \   0002C8   00           DB 0
   \   0002C9   00           DB 0
   \   0002CA   00           DB 0
   \   0002CB   00           DB 0
   \   0002CC   00           DB 0
   \   0002CD   3C           DB 60
   \   0002CE   44           DB 68
   \   0002CF   40           DB 64
   \   0002D0   20           DB 32
   \   0002D1   18           DB 24
   \   0002D2   04           DB 4
   \   0002D3   04           DB 4
   \   0002D4   44           DB 68
   \   0002D5   78           DB 120
   \   0002D6   00           DB 0
   \   0002D7   00           DB 0
   \   0002D8   00           DB 0
   \   0002D9   00           DB 0
   \   0002DA   00           DB 0
   \   0002DB   FE           DB 254
   \   0002DC   92           DB 146
   \   0002DD   10           DB 16
   \   0002DE   10           DB 16
   \   0002DF   10           DB 16
   \   0002E0   10           DB 16
   \   0002E1   10           DB 16
   \   0002E2   10           DB 16
   \   0002E3   38           DB 56
   \   0002E4   00           DB 0
   \   0002E5   00           DB 0
   \   0002E6   00           DB 0
   \   0002E7   00           DB 0
   \   0002E8   00           DB 0
   \   0002E9   EE           DB 238
   \   0002EA   44           DB 68
   \   0002EB   44           DB 68
   \   0002EC   44           DB 68
   \   0002ED   44           DB 68
   \   0002EE   44           DB 68
   \   0002EF   44           DB 68
   \   0002F0   44           DB 68
   \   0002F1   38           DB 56
   \   0002F2   00           DB 0
   \   0002F3   00           DB 0
   \   0002F4   00           DB 0
   \   0002F5   00           DB 0
   \   0002F6   00           DB 0
   \   0002F7   EE           DB 238
   \   0002F8   44           DB 68
   \   0002F9   44           DB 68
   \   0002FA   28           DB 40
   \   0002FB   28           DB 40
   \   0002FC   28           DB 40
   \   0002FD   28           DB 40
   \   0002FE   10           DB 16
   \   0002FF   10           DB 16
   \   000300   00           DB 0
   \   000301   00           DB 0
   \   000302   00           DB 0
   \   000303   00           DB 0
   \   000304   00           DB 0
   \   000305   D6           DB 214
   \   000306   54           DB 84
   \   000307   54           DB 84
   \   000308   54           DB 84
   \   000309   54           DB 84
   \   00030A   6C           DB 108
   \   00030B   28           DB 40
   \   00030C   28           DB 40
   \   00030D   28           DB 40
   \   00030E   00           DB 0
   \   00030F   00           DB 0
   \   000310   00           DB 0
   \   000311   00           DB 0
   \   000312   00           DB 0
   \   000313   EE           DB 238
   \   000314   44           DB 68
   \   000315   28           DB 40
   \   000316   28           DB 40
   \   000317   10           DB 16
   \   000318   28           DB 40
   \   000319   28           DB 40
   \   00031A   44           DB 68
   \   00031B   EE           DB 238
   \   00031C   00           DB 0
   \   00031D   00           DB 0
   \   00031E   00           DB 0
   \   00031F   00           DB 0
   \   000320   00           DB 0
   \   000321   EE           DB 238
   \   000322   44           DB 68
   \   000323   28           DB 40
   \   000324   28           DB 40
   \   000325   10           DB 16
   \   000326   10           DB 16
   \   000327   10           DB 16
   \   000328   10           DB 16
   \   000329   38           DB 56
   \   00032A   00           DB 0
   \   00032B   00           DB 0
   \   00032C   00           DB 0
   \   00032D   00           DB 0
   \   00032E   00           DB 0
   \   00032F   7C           DB 124
   \   000330   88           DB 136
   \   000331   08           DB 8
   \   000332   10           DB 16
   \   000333   20           DB 32
   \   000334   20           DB 32
   \   000335   40           DB 64
   \   000336   44           DB 68
   \   000337   FC           DB 252
   \   000338   00           DB 0
   \   000339   00           DB 0
   \   00033A   00           DB 0
   \   00033B   1C           DB 28
   \   00033C   10           DB 16
   \   00033D   10           DB 16
   \   00033E   10           DB 16
   \   00033F   10           DB 16
   \   000340   10           DB 16
   \   000341   10           DB 16
   \   000342   10           DB 16
   \   000343   10           DB 16
   \   000344   10           DB 16
   \   000345   10           DB 16
   \   000346   1C           DB 28
   \   000347   00           DB 0
   \   000348   00           DB 0
   \   000349   70           DB 112
   \   00034A   10           DB 16
   \   00034B   10           DB 16
   \   00034C   10           DB 16
   \   00034D   10           DB 16
   \   00034E   10           DB 16
   \   00034F   10           DB 16
   \   000350   10           DB 16
   \   000351   10           DB 16
   \   000352   10           DB 16
   \   000353   10           DB 16
   \   000354   70           DB 112
   \   000355   00           DB 0
   \   000356   00           DB 0
   \   000357   70           DB 112
   \   000358   10           DB 16
   \   000359   10           DB 16
   \   00035A   10           DB 16
   \   00035B   10           DB 16
   \   00035C   10           DB 16
   \   00035D   10           DB 16
   \   00035E   10           DB 16
   \   00035F   10           DB 16
   \   000360   10           DB 16
   \   000361   10           DB 16
   \   000362   70           DB 112
   \   000363   00           DB 0
   \   000364   00           DB 0
   \   000365   10           DB 16
   \   000366   28           DB 40
   \   000367   00           DB 0
   \   000368   00           DB 0
   \   000369   00           DB 0
   \   00036A   00           DB 0
   \   00036B   00           DB 0
   \   00036C   00           DB 0
   \   00036D   00           DB 0
   \   00036E   00           DB 0
   \   00036F   00           DB 0
   \   000370   00           DB 0
   \   000371   00           DB 0
   \   000372   00           DB 0
   \   000373   00           DB 0
   \   000374   00           DB 0
   \   000375   00           DB 0
   \   000376   00           DB 0
   \   000377   00           DB 0
   \   000378   00           DB 0
   \   000379   00           DB 0
   \   00037A   00           DB 0
   \   00037B   00           DB 0
   \   00037C   00           DB 0
   \   00037D   00           DB 0
   \   00037E   00           DB 0
   \   00037F   FE           DB 254
   \   000380   00           DB 0
   \   000381   60           DB 96
   \   000382   60           DB 96
   \   000383   20           DB 32
   \   000384   C0           DB 192
   \   000385   00           DB 0
   \   000386   00           DB 0
   \   000387   00           DB 0
   \   000388   00           DB 0
   \   000389   00           DB 0
   \   00038A   00           DB 0
   \   00038B   00           DB 0
   \   00038C   00           DB 0
   \   00038D   00           DB 0
   \   00038E   00           DB 0
   \   00038F   00           DB 0
   \   000390   00           DB 0
   \   000391   00           DB 0
   \   000392   00           DB 0
   \   000393   00           DB 0
   \   000394   38           DB 56
   \   000395   44           DB 68
   \   000396   1C           DB 28
   \   000397   24           DB 36
   \   000398   44           DB 68
   \   000399   3E           DB 62
   \   00039A   00           DB 0
   \   00039B   00           DB 0
   \   00039C   00           DB 0
   \   00039D   00           DB 0
   \   00039E   00           DB 0
   \   00039F   C0           DB 192
   \   0003A0   40           DB 64
   \   0003A1   40           DB 64
   \   0003A2   78           DB 120
   \   0003A3   44           DB 68
   \   0003A4   44           DB 68
   \   0003A5   44           DB 68
   \   0003A6   44           DB 68
   \   0003A7   78           DB 120
   \   0003A8   00           DB 0
   \   0003A9   00           DB 0
   \   0003AA   00           DB 0
   \   0003AB   00           DB 0
   \   0003AC   00           DB 0
   \   0003AD   00           DB 0
   \   0003AE   00           DB 0
   \   0003AF   00           DB 0
   \   0003B0   3C           DB 60
   \   0003B1   44           DB 68
   \   0003B2   40           DB 64
   \   0003B3   40           DB 64
   \   0003B4   44           DB 68
   \   0003B5   38           DB 56
   \   0003B6   00           DB 0
   \   0003B7   00           DB 0
   \   0003B8   00           DB 0
   \   0003B9   00           DB 0
   \   0003BA   00           DB 0
   \   0003BB   0C           DB 12
   \   0003BC   04           DB 4
   \   0003BD   04           DB 4
   \   0003BE   3C           DB 60
   \   0003BF   44           DB 68
   \   0003C0   44           DB 68
   \   0003C1   44           DB 68
   \   0003C2   44           DB 68
   \   0003C3   3E           DB 62
   \   0003C4   00           DB 0
   \   0003C5   00           DB 0
   \   0003C6   00           DB 0
   \   0003C7   00           DB 0
   \   0003C8   00           DB 0
   \   0003C9   00           DB 0
   \   0003CA   00           DB 0
   \   0003CB   00           DB 0
   \   0003CC   38           DB 56
   \   0003CD   44           DB 68
   \   0003CE   7C           DB 124
   \   0003CF   40           DB 64
   \   0003D0   44           DB 68
   \   0003D1   38           DB 56
   \   0003D2   00           DB 0
   \   0003D3   00           DB 0
   \   0003D4   00           DB 0
   \   0003D5   00           DB 0
   \   0003D6   00           DB 0
   \   0003D7   1C           DB 28
   \   0003D8   24           DB 36
   \   0003D9   20           DB 32
   \   0003DA   F8           DB 248
   \   0003DB   20           DB 32
   \   0003DC   20           DB 32
   \   0003DD   20           DB 32
   \   0003DE   20           DB 32
   \   0003DF   78           DB 120
   \   0003E0   00           DB 0
   \   0003E1   00           DB 0
   \   0003E2   00           DB 0
   \   0003E3   00           DB 0
   \   0003E4   00           DB 0
   \   0003E5   00           DB 0
   \   0003E6   00           DB 0
   \   0003E7   00           DB 0
   \   0003E8   3C           DB 60
   \   0003E9   48           DB 72
   \   0003EA   48           DB 72
   \   0003EB   30           DB 48
   \   0003EC   40           DB 64
   \   0003ED   78           DB 120
   \   0003EE   44           DB 68
   \   0003EF   38           DB 56
   \   0003F0   00           DB 0
   \   0003F1   00           DB 0
   \   0003F2   00           DB 0
   \   0003F3   C0           DB 192
   \   0003F4   40           DB 64
   \   0003F5   40           DB 64
   \   0003F6   58           DB 88
   \   0003F7   64           DB 100
   \   0003F8   44           DB 68
   \   0003F9   44           DB 68
   \   0003FA   44           DB 68
   \   0003FB   EE           DB 238
   \   0003FC   00           DB 0
   \   0003FD   00           DB 0
   \   0003FE   00           DB 0
   \   0003FF   00           DB 0
   \   000400   00           DB 0
   \   000401   10           DB 16
   \   000402   00           DB 0
   \   000403   00           DB 0
   \   000404   70           DB 112
   \   000405   10           DB 16
   \   000406   10           DB 16
   \   000407   10           DB 16
   \   000408   10           DB 16
   \   000409   7C           DB 124
   \   00040A   00           DB 0
   \   00040B   00           DB 0
   \   00040C   00           DB 0
   \   00040D   00           DB 0
   \   00040E   00           DB 0
   \   00040F   08           DB 8
   \   000410   00           DB 0
   \   000411   00           DB 0
   \   000412   38           DB 56
   \   000413   08           DB 8
   \   000414   08           DB 8
   \   000415   08           DB 8
   \   000416   08           DB 8
   \   000417   08           DB 8
   \   000418   08           DB 8
   \   000419   70           DB 112
   \   00041A   00           DB 0
   \   00041B   00           DB 0
   \   00041C   00           DB 0
   \   00041D   C0           DB 192
   \   00041E   40           DB 64
   \   00041F   40           DB 64
   \   000420   5C           DB 92
   \   000421   48           DB 72
   \   000422   50           DB 80
   \   000423   70           DB 112
   \   000424   48           DB 72
   \   000425   EC           DB 236
   \   000426   00           DB 0
   \   000427   00           DB 0
   \   000428   00           DB 0
   \   000429   00           DB 0
   \   00042A   00           DB 0
   \   00042B   70           DB 112
   \   00042C   10           DB 16
   \   00042D   10           DB 16
   \   00042E   10           DB 16
   \   00042F   10           DB 16
   \   000430   10           DB 16
   \   000431   10           DB 16
   \   000432   10           DB 16
   \   000433   7C           DB 124
   \   000434   00           DB 0
   \   000435   00           DB 0
   \   000436   00           DB 0
   \   000437   00           DB 0
   \   000438   00           DB 0
   \   000439   00           DB 0
   \   00043A   00           DB 0
   \   00043B   00           DB 0
   \   00043C   F8           DB 248
   \   00043D   54           DB 84
   \   00043E   54           DB 84
   \   00043F   54           DB 84
   \   000440   54           DB 84
   \   000441   D6           DB 214
   \   000442   00           DB 0
   \   000443   00           DB 0
   \   000444   00           DB 0
   \   000445   00           DB 0
   \   000446   00           DB 0
   \   000447   00           DB 0
   \   000448   00           DB 0
   \   000449   00           DB 0
   \   00044A   D8           DB 216
   \   00044B   64           DB 100
   \   00044C   44           DB 68
   \   00044D   44           DB 68
   \   00044E   44           DB 68
   \   00044F   EE           DB 238
   \   000450   00           DB 0
   \   000451   00           DB 0
   \   000452   00           DB 0
   \   000453   00           DB 0
   \   000454   00           DB 0
   \   000455   00           DB 0
   \   000456   00           DB 0
   \   000457   00           DB 0
   \   000458   38           DB 56
   \   000459   44           DB 68
   \   00045A   44           DB 68
   \   00045B   44           DB 68
   \   00045C   44           DB 68
   \   00045D   38           DB 56
   \   00045E   00           DB 0
   \   00045F   00           DB 0
   \   000460   00           DB 0
   \   000461   00           DB 0
   \   000462   00           DB 0
   \   000463   00           DB 0
   \   000464   00           DB 0
   \   000465   00           DB 0
   \   000466   F8           DB 248
   \   000467   44           DB 68
   \   000468   44           DB 68
   \   000469   44           DB 68
   \   00046A   44           DB 68
   \   00046B   78           DB 120
   \   00046C   40           DB 64
   \   00046D   E0           DB 224
   \   00046E   00           DB 0
   \   00046F   00           DB 0
   \   000470   00           DB 0
   \   000471   00           DB 0
   \   000472   00           DB 0
   \   000473   00           DB 0
   \   000474   3C           DB 60
   \   000475   44           DB 68
   \   000476   44           DB 68
   \   000477   44           DB 68
   \   000478   44           DB 68
   \   000479   3C           DB 60
   \   00047A   04           DB 4
   \   00047B   0E           DB 14
   \   00047C   00           DB 0
   \   00047D   00           DB 0
   \   00047E   00           DB 0
   \   00047F   00           DB 0
   \   000480   00           DB 0
   \   000481   00           DB 0
   \   000482   EC           DB 236
   \   000483   30           DB 48
   \   000484   20           DB 32
   \   000485   20           DB 32
   \   000486   20           DB 32
   \   000487   F8           DB 248
   \   000488   00           DB 0
   \   000489   00           DB 0
   \   00048A   00           DB 0
   \   00048B   00           DB 0
   \   00048C   00           DB 0
   \   00048D   00           DB 0
   \   00048E   00           DB 0
   \   00048F   00           DB 0
   \   000490   3C           DB 60
   \   000491   44           DB 68
   \   000492   30           DB 48
   \   000493   08           DB 8
   \   000494   44           DB 68
   \   000495   78           DB 120
   \   000496   00           DB 0
   \   000497   00           DB 0
   \   000498   00           DB 0
   \   000499   00           DB 0
   \   00049A   00           DB 0
   \   00049B   00           DB 0
   \   00049C   10           DB 16
   \   00049D   10           DB 16
   \   00049E   7C           DB 124
   \   00049F   10           DB 16
   \   0004A0   10           DB 16
   \   0004A1   10           DB 16
   \   0004A2   10           DB 16
   \   0004A3   0C           DB 12
   \   0004A4   00           DB 0
   \   0004A5   00           DB 0
   \   0004A6   00           DB 0
   \   0004A7   00           DB 0
   \   0004A8   00           DB 0
   \   0004A9   00           DB 0
   \   0004AA   00           DB 0
   \   0004AB   00           DB 0
   \   0004AC   CC           DB 204
   \   0004AD   44           DB 68
   \   0004AE   44           DB 68
   \   0004AF   44           DB 68
   \   0004B0   44           DB 68
   \   0004B1   3E           DB 62
   \   0004B2   00           DB 0
   \   0004B3   00           DB 0
   \   0004B4   00           DB 0
   \   0004B5   00           DB 0
   \   0004B6   00           DB 0
   \   0004B7   00           DB 0
   \   0004B8   00           DB 0
   \   0004B9   00           DB 0
   \   0004BA   EE           DB 238
   \   0004BB   44           DB 68
   \   0004BC   28           DB 40
   \   0004BD   28           DB 40
   \   0004BE   28           DB 40
   \   0004BF   10           DB 16
   \   0004C0   00           DB 0
   \   0004C1   00           DB 0
   \   0004C2   00           DB 0
   \   0004C3   00           DB 0
   \   0004C4   00           DB 0
   \   0004C5   00           DB 0
   \   0004C6   00           DB 0
   \   0004C7   00           DB 0
   \   0004C8   D6           DB 214
   \   0004C9   54           DB 84
   \   0004CA   54           DB 84
   \   0004CB   54           DB 84
   \   0004CC   28           DB 40
   \   0004CD   28           DB 40
   \   0004CE   00           DB 0
   \   0004CF   00           DB 0
   \   0004D0   00           DB 0
   \   0004D1   00           DB 0
   \   0004D2   00           DB 0
   \   0004D3   00           DB 0
   \   0004D4   00           DB 0
   \   0004D5   00           DB 0
   \   0004D6   DC           DB 220
   \   0004D7   48           DB 72
   \   0004D8   30           DB 48
   \   0004D9   30           DB 48
   \   0004DA   48           DB 72
   \   0004DB   EC           DB 236
   \   0004DC   00           DB 0
   \   0004DD   00           DB 0
   \   0004DE   00           DB 0
   \   0004DF   00           DB 0
   \   0004E0   00           DB 0
   \   0004E1   00           DB 0
   \   0004E2   00           DB 0
   \   0004E3   00           DB 0
   \   0004E4   EE           DB 238
   \   0004E5   44           DB 68
   \   0004E6   28           DB 40
   \   0004E7   28           DB 40
   \   0004E8   10           DB 16
   \   0004E9   10           DB 16
   \   0004EA   20           DB 32
   \   0004EB   E0           DB 224
   \   0004EC   00           DB 0
   \   0004ED   00           DB 0
   \   0004EE   00           DB 0
   \   0004EF   00           DB 0
   \   0004F0   00           DB 0
   \   0004F1   00           DB 0
   \   0004F2   7C           DB 124
   \   0004F3   48           DB 72
   \   0004F4   10           DB 16
   \   0004F5   10           DB 16
   \   0004F6   24           DB 36
   \   0004F7   7C           DB 124
   \   0004F8   00           DB 0
   \   0004F9   00           DB 0
   \   0004FA   10           DB 16
   \   0004FB   10           DB 16
   \   0004FC   10           DB 16
   \   0004FD   10           DB 16
   \   0004FE   10           DB 16
   \   0004FF   10           DB 16
   \   000500   10           DB 16
   \   000501   10           DB 16
   \   000502   10           DB 16
   \   000503   10           DB 16
   \   000504   10           DB 16
   \   000505   10           DB 16
   \   000506   10           DB 16
   \   000507   10           DB 16
    236          {
    237          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//" ",0//
    238          {0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x30,0x30,0x00,0x00},//"!",1//
    239          {0x00,0x14,0x28,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//""",2//
    240          {0x00,0x00,0x00,0x28,0x28,0xFC,0x28,0x48,0x50,0xFC,0x50,0x50,0x00,0x00},//"#",3//
    241          {0x00,0x00,0x10,0x38,0x54,0x54,0x30,0x18,0x14,0x54,0x54,0x38,0x10,0x00},//"$",4//
    242          {0x00,0x00,0x00,0x44,0xA8,0xA8,0xB0,0x54,0x1A,0x2A,0x2A,0x44,0x00,0x00},//"%",5//
    243          {0x00,0x00,0x00,0x20,0x50,0x50,0x60,0xAC,0xA8,0x98,0x92,0x7C,0x00,0x00},//"&",6//
    244          {0x00,0x60,0x60,0x20,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"'",7//
    245          {0x00,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x00},//"(",8//
    246          {0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x40,0x00,0x00,0x00},//">",9//
    247          {0x00,0x00,0x00,0x10,0x10,0xD6,0x38,0x38,0xD6,0x10,0x10,0x00,0x00,0x00},//"*",10//
    248          {0x00,0x00,0x00,0x10,0x10,0x10,0xFE,0x10,0x10,0x10,0x00,0x00,0x00,0x00},//"+",11//
    249          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x20,0xC0},//",",12//
    250          {0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"-",13//
    251          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00,0x00},//".",14//
    252          {0x00,0x02,0x04,0x04,0x04,0x08,0x08,0x10,0x10,0x20,0x20,0x20,0x40,0x00},//"/",15//
    253          {0x00,0x00,0x00,0x30,0x48,0x84,0x84,0x84,0x84,0x84,0x48,0x30,0x00,0x00},//"0",16//
    254          {0x00,0x00,0x00,0x10,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},//"1",17//
    255          {0x00,0x00,0x00,0x38,0x44,0x44,0x04,0x08,0x10,0x20,0x44,0x7C,0x00,0x00},//"2",18//
    256          {0x00,0x00,0x00,0x38,0x44,0x44,0x18,0x04,0x04,0x44,0x44,0x38,0x00,0x00},//"3",19//
    257          {0x00,0x00,0x08,0x08,0x18,0x28,0x48,0x48,0x88,0x7C,0x08,0x1C,0x00,0x00},//"4",20//
    258          {0x00,0x00,0x00,0x7C,0x40,0x40,0x78,0x44,0x04,0x44,0x44,0x38,0x00,0x00},//"5",21//
    259          {0x00,0x00,0x00,0x3C,0x44,0x80,0xB8,0xC4,0x84,0x84,0x84,0x78,0x00,0x00},//"6",22//
    260          {0x00,0x00,0x00,0x7C,0x44,0x48,0x08,0x10,0x10,0x10,0x10,0x10,0x00,0x00},//"7",23//
    261          {0x00,0x00,0x00,0x78,0x84,0x84,0x48,0x78,0x84,0x84,0x84,0x78,0x00,0x00},//"8",24//
    262          {0x00,0x00,0x00,0x78,0x84,0x84,0x84,0x8C,0x74,0x04,0x88,0xF0,0x00,0x00},//"9",25//
    263          {0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x30,0x30,0x00,0x00},//":",26//
    264          {0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x10,0x10,0x20},//";",27//
    265          {0x00,0x00,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x00,0x00,0x00},//"<",28//
    266          {0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0xFC,0x00,0x00,0x00,0x00,0x00},//"=",29//
    267          {0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x40,0x00,0x00,0x00},//">",30//
    268          {0x00,0x00,0x78,0x84,0x84,0x84,0x08,0x10,0x10,0x00,0x30,0x30,0x00,0x00},//"?",31//
    269          {0x00,0x00,0x00,0x38,0x44,0x9A,0xAA,0xAA,0xAA,0xB4,0x42,0x3C,0x00,0x00},//"@",32//
    270          {0x00,0x00,0x00,0x10,0x10,0x28,0x28,0x28,0x38,0x44,0x44,0xEE,0x00,0x00},//"A",33//
    271          {0x00,0x00,0x00,0xF8,0x44,0x44,0x78,0x44,0x44,0x44,0x44,0xF8,0x00,0x00},//"B",34//
    272          {0x00,0x00,0x00,0x3C,0x44,0x84,0x80,0x80,0x80,0x80,0x44,0x38,0x00,0x00},//"C",35//
    273          {0x00,0x00,0x00,0xF0,0x48,0x44,0x44,0x44,0x44,0x44,0x48,0xF0,0x00,0x00},//"D",36//
    274          {0x00,0x00,0x00,0xFC,0x44,0x40,0x48,0x78,0x48,0x40,0x44,0xFC,0x00,0x00},//"E",37//
    275          {0x00,0x00,0x00,0xFC,0x42,0x40,0x48,0x78,0x48,0x40,0x40,0xE0,0x00,0x00},//"F",38//
    276          {0x00,0x00,0x00,0x3C,0x44,0x84,0x80,0x80,0x8E,0x84,0x44,0x38,0x00,0x00},//"G",39//
    277          {0x00,0x00,0x00,0xEE,0x44,0x44,0x44,0x7C,0x44,0x44,0x44,0xEE,0x00,0x00},//"H",40//
    278          {0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},//"I",41//
    279          {0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x90,0xE0},//"J",42//
    280          {0x00,0x00,0x00,0xEE,0x44,0x48,0x50,0x70,0x48,0x48,0x44,0xEE,0x00,0x00},//"K",43//
    281          {0x00,0x00,0x00,0xE0,0x40,0x40,0x40,0x40,0x40,0x40,0x44,0xFC,0x00,0x00},//"L",44//
    282          {0x00,0x00,0x00,0xEE,0x6C,0x6C,0x6C,0x54,0x54,0x54,0x54,0xD6,0x00,0x00},//"M",45//
    283          {0x00,0x00,0x00,0xEE,0x64,0x64,0x54,0x54,0x54,0x4C,0x4C,0xE4,0x00,0x00},//"N",46//
    284          {0x00,0x00,0x00,0x30,0x48,0x84,0x84,0x84,0x84,0x84,0x48,0x30,0x00,0x00},//"O",47//
    285          {0x00,0x00,0x00,0xF8,0x44,0x44,0x44,0x78,0x40,0x40,0x40,0xE0,0x00,0x00},//"P",48//
    286          {0x00,0x00,0x00,0x30,0x48,0x84,0x84,0x84,0x84,0xB4,0x48,0x38,0x0C,0x00},//"Q",49//
    287          {0x00,0x00,0x00,0xF8,0x44,0x44,0x78,0x50,0x48,0x48,0x44,0xE6,0x00,0x00},//"R",50//
    288          {0x00,0x00,0x00,0x3C,0x44,0x40,0x20,0x18,0x04,0x04,0x44,0x78,0x00,0x00},//"S",51//
    289          {0x00,0x00,0x00,0xFE,0x92,0x10,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00},//"T",52//
    290          {0x00,0x00,0x00,0xEE,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x38,0x00,0x00},//"U",53//
    291          {0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28,0x28,0x28,0x10,0x10,0x00,0x00},//"V",54//
    292          {0x00,0x00,0x00,0xD6,0x54,0x54,0x54,0x54,0x6C,0x28,0x28,0x28,0x00,0x00},//"W",55//
    293          {0x00,0x00,0x00,0xEE,0x44,0x28,0x28,0x10,0x28,0x28,0x44,0xEE,0x00,0x00},//"X",56//
    294          {0x00,0x00,0x00,0xEE,0x44,0x28,0x28,0x10,0x10,0x10,0x10,0x38,0x00,0x00},//"Y",57//
    295          {0x00,0x00,0x00,0x7C,0x88,0x08,0x10,0x20,0x20,0x40,0x44,0xFC,0x00,0x00},//"Z",58//
    296          {0x00,0x1C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1C,0x00},//"[",59//
    297          {0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x70,0x00},//"]",60//
    298          {0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x70,0x00},//"]",61//
    299          {0x00,0x10,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"^",62//
    300          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE},//"_",63//
    301          {0x00,0x60,0x60,0x20,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"'",64//
    302          {0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x1C,0x24,0x44,0x3E,0x00,0x00},//"a",65//
    303          {0x00,0x00,0x00,0xC0,0x40,0x40,0x78,0x44,0x44,0x44,0x44,0x78,0x00,0x00},//"b",66//
    304          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x44,0x40,0x40,0x44,0x38,0x00,0x00},//"c",67//
    305          {0x00,0x00,0x00,0x0C,0x04,0x04,0x3C,0x44,0x44,0x44,0x44,0x3E,0x00,0x00},//"d",68//
    306          {0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x7C,0x40,0x44,0x38,0x00,0x00},//"e",69//
    307          {0x00,0x00,0x00,0x1C,0x24,0x20,0xF8,0x20,0x20,0x20,0x20,0x78,0x00,0x00},//"f",70//
    308          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x48,0x48,0x30,0x40,0x78,0x44,0x38},//"g",71//
    309          {0x00,0x00,0x00,0xC0,0x40,0x40,0x58,0x64,0x44,0x44,0x44,0xEE,0x00,0x00},//"h",72//
    310          {0x00,0x00,0x00,0x10,0x00,0x00,0x70,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},//"i",73//
    311          {0x00,0x00,0x00,0x08,0x00,0x00,0x38,0x08,0x08,0x08,0x08,0x08,0x08,0x70},//"j",74//
    312          {0x00,0x00,0x00,0xC0,0x40,0x40,0x5C,0x48,0x50,0x70,0x48,0xEC,0x00,0x00},//"k",75//
    313          {0x00,0x00,0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},//"l",76//
    314          {0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x54,0x54,0x54,0x54,0xD6,0x00,0x00},//"m",77//
    315          {0x00,0x00,0x00,0x00,0x00,0x00,0xD8,0x64,0x44,0x44,0x44,0xEE,0x00,0x00},//"n",78//
    316          {0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x44,0x44,0x44,0x38,0x00,0x00},//"o",79//
    317          {0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x44,0x44,0x44,0x44,0x78,0x40,0xE0},//"p",80//
    318          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x44,0x44,0x44,0x44,0x3C,0x04,0x0E},//"q",81//
    319          {0x00,0x00,0x00,0x00,0x00,0x00,0xEC,0x30,0x20,0x20,0x20,0xF8,0x00,0x00},//"r",82//
    320          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x44,0x30,0x08,0x44,0x78,0x00,0x00},//"s",83//
    321          {0x00,0x00,0x00,0x00,0x10,0x10,0x7C,0x10,0x10,0x10,0x10,0x0C,0x00,0x00},//"t",84//
    322          {0x00,0x00,0x00,0x00,0x00,0x00,0xCC,0x44,0x44,0x44,0x44,0x3E,0x00,0x00},//"u",85//
    323          {0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x44,0x28,0x28,0x28,0x10,0x00,0x00},//"v",86//
    324          {0x00,0x00,0x00,0x00,0x00,0x00,0xD6,0x54,0x54,0x54,0x28,0x28,0x00,0x00},//"w",87//
    325          {0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0x48,0x30,0x30,0x48,0xEC,0x00,0x00},//"x",88//
    326          {0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x44,0x28,0x28,0x10,0x10,0x20,0xE0},//"y",89//
    327          {0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x48,0x10,0x10,0x24,0x7C,0x00,0x00},//"z",90//
    328          {0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10},//"|",91//
    329          };
    330          //-----------------------------------------------------------------------------
    331          #endif //LCD
    332          
    333          
    334          /**************************************************************************************************
    335           * @fn      HalLcdInit
    336           *
    337           * @brief   Initilize LCD Service
    338           *
    339           * @param   init - pointer to void that contains the initialized value
    340           *
    341           * @return  None
    342           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    343          void HalLcdInit(void)
   \                     HalLcdInit:
    344          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    345          #if (HAL_LCD == TRUE)
    346            HalLcd_HW_Init();
   \   000004                ; Setup parameters for call to function HalLcd_HW_Init
   \   000004   12....       LCALL   ??HalLcd_HW_Init?relay
    347          #endif
    348          }
   \   000007                REQUIRE ?Subroutine0
   \   000007                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    349          
    350          /**************************************************************************************************
    351           * @fn      HalLcdWriteValue
    352           *
    353           * @brief   Write a value to the LCD
    354           *
    355           * @param   value  - value that will be displayed
    356           *          radix  - 8, 10, 16
    357           *          option - display options
    358           *
    359           * @return  None
    360           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    361          void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
   \                     HalLcdWriteValue:
    362          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7429         MOV     A,#0x29
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FE           MOV     R6,A
    363          #if (HAL_LCD == TRUE)
    364            uint8 buf[LCD_MAX_BUF];
    365          
    366            _ltoa( value, &buf[0], radix );
   \   000011                ; Setup parameters for call to function _ltoa
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   8582..       MOV     ?V0 + 0,DPL
   \   00001A   8583..       MOV     ?V0 + 1,DPH
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
    367            HalLcdWriteString( (char*)buf, option );
   \   000028                ; Setup parameters for call to function HalLcdWriteString
   \   000028   EE           MOV     A,R6
   \   000029   F9           MOV     R1,A
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   AA82         MOV     R2,DPL
   \   000032   AB83         MOV     R3,DPH
   \   000034   12....       LCALL   ??HalLcdWriteString?relay
    368          #endif
    369          }
   \   000037   7419         MOV     A,#0x19
   \   000039                REQUIRE ?Subroutine1
   \   000039                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   12....       LCALL   ??_ltoa?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET
    370          
    371          /**************************************************************************************************
    372           * @fn      HalLcdWriteScreen
    373           *
    374           * @brief   Write a value to the LCD
    375           *
    376           * @param   line1  - string that will be displayed on line 1
    377           *          line2  - string that will be displayed on line 2
    378           *
    379           * @return  None
    380           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    381          void HalLcdWriteScreen( char *line1, char *line2 )
   \                     HalLcdWriteScreen:
    382          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    383          #if (HAL_LCD == TRUE)
    384            HalLcdWriteString( line1, 0 );//andy 
   \   000009                ; Setup parameters for call to function HalLcdWriteString
   \   000009   7900         MOV     R1,#0x0
   \   00000B   12....       LCALL   ??HalLcdWriteString?relay
    385            HalLcdWriteString( line2, 1 );
   \   00000E                ; Setup parameters for call to function HalLcdWriteString
   \   00000E   7901         MOV     R1,#0x1
   \   000010   EE           MOV     A,R6
   \   000011   FA           MOV     R2,A
   \   000012   EF           MOV     A,R7
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??HalLcdWriteString?relay
    386          #endif
    387          }
   \   000017   80..         SJMP    ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    388          
    389          /**************************************************************************************************
    390           * @fn      HalLcdWriteStringValue
    391           *
    392           * @brief   Write a string followed by a value to the LCD
    393           *
    394           * @param   title  - Title that will be displayed before the value
    395           *          value  - value
    396           *          format - redix
    397           *          line   - line number
    398           *
    399           * @return  None
    400           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
   \                     HalLcdWriteStringValue:
    402          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
   \   000012   89..         MOV     ?V0 + 0,R1
   \   000014   742B         MOV     A,#0x2b
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 1,A
    403          #if (HAL_LCD == TRUE)
    404            uint8 tmpLen;
    405            uint8 buf[LCD_MAX_BUF];
    406            uint32 err;
    407          
    408            tmpLen = (uint8)osal_strlen( (char*)title );
   \   00001C                ; Setup parameters for call to function osal_strlen
   \   00001C   12....       LCALL   ??osal_strlen?relay
   \   00001F   EA           MOV     A,R2
   \   000020   F5..         MOV     ?V0 + 8,A
    409            osal_memcpy( buf, title, tmpLen );
   \   000022                ; Setup parameters for call to function osal_memcpy
   \   000022   8E..         MOV     ?V0 + 4,R6
   \   000024   8F..         MOV     ?V0 + 5,R7
   \   000026   75..00       MOV     ?V0 + 6,#0x0
   \   000029   78..         MOV     R0,#?V0 + 4
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002E   8A..         MOV     ?V0 + 4,R2
   \   000030   AC..         MOV     R4,?V0 + 4
   \   000032   7D00         MOV     R5,#0x0
   \   000034   7403         MOV     A,#0x3
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AA82         MOV     R2,DPL
   \   00003B   AB83         MOV     R3,DPH
   \   00003D   12....       LCALL   ??osal_memcpy?relay
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    410            //buf[tmpLen] = ' ';
    411            err = (uint32)(value);
    412            _ltoa( err, &buf[tmpLen], format );
   \   000045                ; Setup parameters for call to function _ltoa
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   E582         MOV     A,DPL
   \   00004D   25..         ADD     A,?V0 + 8
   \   00004F   F5..         MOV     ?V0 + 4,A
   \   000051   E583         MOV     A,DPH
   \   000053   3400         ADDC    A,#0x0
   \   000055   F5..         MOV     ?V0 + 5,A
   \   000057   78..         MOV     R0,#?V0 + 4
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   A9..         MOV     R1,?V0 + 0
   \   00005E   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
    413            HalLcdWriteString( (char*)buf, line );		
   \   000064                ; Setup parameters for call to function HalLcdWriteString
   \   000064   A9..         MOV     R1,?V0 + 1
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   AA82         MOV     R2,DPL
   \   00006E   AB83         MOV     R3,DPH
   \   000070   12....       LCALL   ??HalLcdWriteString?relay
    414          #endif
    415          }
   \   000073   7419         MOV     A,#0x19
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   7F0A         MOV     R7,#0xa
   \   00007A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   AA..         MOV     R2,?V0 + 2
   \   000002   AB..         MOV     R3,?V0 + 3
   \   000004                REQUIRE ??Subroutine44_0
   \   000004                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   E4           CLR     A
   \   000001   FC           MOV     R4,A
   \   000002   FD           MOV     R5,A
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0
    416          
    417          /**************************************************************************************************
    418           * @fn      HalLcdWriteStringValue
    419           *
    420           * @brief   Write a string followed by a value to the LCD
    421           *
    422           * @param   title   - Title that will be displayed before the value
    423           *          value1  - value #1
    424           *          format1 - redix of value #1
    425           *          value2  - value #2
    426           *          format2 - redix of value #2
    427           *          line    - line number
    428           *
    429           * @return  None
    430           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
   \                     HalLcdWriteStringValueValue:
    432                                            uint16 value2, uint8 format2, uint8 line )
    433          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
   \   000012   89..         MOV     ?V0 + 5,R1
   \   000014   742C         MOV     A,#0x2c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 1,A
   \   000020   742E         MOV     A,#0x2e
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 4,A
   \   000028   742F         MOV     A,#0x2f
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 7,A
    434          #if (HAL_LCD == TRUE)
    435          
    436            uint8 tmpLen;
    437            uint8 buf[LCD_MAX_BUF];
    438            uint32 err;
    439          
    440            tmpLen = (uint8)osal_strlen( (char*)title );
   \   000030                ; Setup parameters for call to function osal_strlen
   \   000030   12....       LCALL   ??osal_strlen?relay
   \   000033   EA           MOV     A,R2
   \   000034   F5..         MOV     ?V0 + 6,A
    441            if ( tmpLen )
   \   000036   6023         JZ      ??HalLcdWriteStringValueValue_0
    442            {
    443              osal_memcpy( buf, title, tmpLen );
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   8E..         MOV     ?V0 + 8,R6
   \   00003A   8F..         MOV     ?V0 + 9,R7
   \   00003C   75..00       MOV     ?V0 + 10,#0x0
   \   00003F   78..         MOV     R0,#?V0 + 8
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000044   8A..         MOV     ?V0 + 8,R2
   \   000046   AC..         MOV     R4,?V0 + 8
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
   \   000053   12....       LCALL   ??osal_memcpy?relay
   \   000056   7403         MOV     A,#0x3
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
    444              //buf[tmpLen++] = ' ';
    445            }
    446          
    447            err = (uint32)(value1);
    448            _ltoa( err, &buf[tmpLen], format1 );
   \                     ??HalLcdWriteStringValueValue_0:
   \   00005B                ; Setup parameters for call to function _ltoa
   \   00005B   85....       MOV     ?V0 + 8,?V0 + 6
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   E582         MOV     A,DPL
   \   000066   25..         ADD     A,?V0 + 8
   \   000068   F5..         MOV     ?V0 + 8,A
   \   00006A   E583         MOV     A,DPH
   \   00006C   3400         ADDC    A,#0x0
   \   00006E   F5..         MOV     ?V0 + 9,A
   \   000070   78..         MOV     R0,#?V0 + 8
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   A9..         MOV     R1,?V0 + 5
   \   000077   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
    449            tmpLen = (uint8)osal_strlen( (char*)buf );
   \   00007D                ; Setup parameters for call to function osal_strlen
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   12....       LCALL   ??osal_strlen?relay
   \   00008A   EA           MOV     A,R2
   \   00008B   F5..         MOV     ?V0 + 6,A
    450          
    451            buf[tmpLen++] = ',';
   \   00008D   F5..         MOV     ?V0 + 2,A
   \   00008F   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000092   742C         MOV     A,#0x2c
   \   000094   F0           MOVX    @DPTR,A
   \   000095   05..         INC     ?V0 + 6
    452            buf[tmpLen++] = ' ';
   \   000097   85....       MOV     ?V0 + 2,?V0 + 6
   \   00009A   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00009D   7420         MOV     A,#0x20
   \   00009F   F0           MOVX    @DPTR,A
    453            err = (uint32)(value2);
    454            _ltoa( err, &buf[tmpLen], format2 );
   \   0000A0                ; Setup parameters for call to function _ltoa
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   25..         ADD     A,?V0 + 6
   \   0000A4   F8           MOV     R0,A
   \   0000A5   85..82       MOV     DPL,?XSP + 0
   \   0000A8   85..83       MOV     DPH,?XSP + 1
   \   0000AB   E582         MOV     A,DPL
   \   0000AD   28           ADD     A,R0
   \   0000AE   F5..         MOV     ?V0 + 2,A
   \   0000B0   E583         MOV     A,DPH
   \   0000B2   3400         ADDC    A,#0x0
   \   0000B4   F5..         MOV     ?V0 + 3,A
   \   0000B6   78..         MOV     R0,#?V0 + 2
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   A9..         MOV     R1,?V0 + 4
   \   0000BD   AA..         MOV     R2,?V0 + 0
   \   0000BF   AB..         MOV     R3,?V0 + 1
   \   0000C1   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
    455          
    456            HalLcdWriteString( (char *)buf, line );		
   \   0000C7                ; Setup parameters for call to function HalLcdWriteString
   \   0000C7   A9..         MOV     R1,?V0 + 7
   \   0000C9   85..82       MOV     DPL,?XSP + 0
   \   0000CC   85..83       MOV     DPH,?XSP + 1
   \   0000CF   AA82         MOV     R2,DPL
   \   0000D1   AB83         MOV     R3,DPH
   \   0000D3   12....       LCALL   ??HalLcdWriteString?relay
    457          
    458          #endif
    459          }
   \   0000D6   7419         MOV     A,#0x19
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DB   7F0B         MOV     R7,#0xb
   \   0000DD   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 2
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET
    460          
    461          #if (HAL_LCD == TRUE)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          void DelayMS(unsigned int msec)
   \                     DelayMS:
    463          { 
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8019         SJMP    ??DelayMS_0
    464            unsigned int i;
    465            while(msec >0)
    466            {
    467              for (i=0; i<8000; i++) asm("NOP"); //1ms
   \                     ??DelayMS_1:
   \   000002   7840         MOV     R0,#0x40
   \   000004   791F         MOV     R1,#0x1f
   \                     ??DelayMS_2:
   \   000006   00           NOP
   \   000007   E8           MOV     A,R0
   \   000008   24FF         ADD     A,#-0x1
   \   00000A   18           DEC     R0
   \   00000B   E9           MOV     A,R1
   \   00000C   34FF         ADDC    A,#-0x1
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   70F3         JNZ     ??DelayMS_2
    468              msec--;
   \   000013   EA           MOV     A,R2
   \   000014   24FF         ADD     A,#-0x1
   \   000016   1A           DEC     R2
   \   000017   EB           MOV     A,R3
   \   000018   34FF         ADDC    A,#-0x1
   \   00001A   FB           MOV     R3,A
    469            }  
   \                     ??DelayMS_0:
   \   00001B   EA           MOV     A,R2
   \   00001C   4B           ORL     A,R3
   \   00001D   70E3         JNZ     ??DelayMS_1
    470          }
   \   00001F   02....       LJMP    ?BRET
    471          
    472          //option 1=第1行  2=第2行 其它类推

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          void HalLcdWriteString (char *s, uint8 option)
   \                     HalLcdWriteString:
    474          {  
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
    475            Color = BLUE;
   \   00000B   90....       MOV     DPTR,#Color
   \   00000E   741F         MOV     A,#0x1f
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
    476            Color_BK = WHITE; 
   \   000014   90....       MOV     DPTR,#Color_BK
   \   000017   74FF         MOV     A,#-0x1
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    477            DrawRectFill(7,option*15+20,118,15,WHITE); 
   \   00001C                ; Setup parameters for call to function DrawRectFill
   \   00001C   F5..         MOV     ?V0 + 2,A
   \   00001E   F5..         MOV     ?V0 + 3,A
   \   000020   78..         MOV     R0,#?V0 + 2
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   75..0F       MOV     ?V0 + 2,#0xf
   \   000028   75..00       MOV     ?V0 + 3,#0x0
   \   00002B   78..         MOV     R0,#?V0 + 2
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   75..76       MOV     ?V0 + 2,#0x76
   \   000033   78..         MOV     R0,#?V0 + 2
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   E9           MOV     A,R1
   \   000039   75F00F       MOV     B,#0xf
   \   00003C   A4           MUL     AB
   \   00003D   2414         ADD     A,#0x14
   \   00003F   FC           MOV     R4,A
   \   000040   E5F0         MOV     A,B
   \   000042   3400         ADDC    A,#0x0
   \   000044   FD           MOV     R5,A
   \   000045   7A07         MOV     R2,#0x7
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ??DrawRectFill?relay
   \   00004C   7406         MOV     A,#0x6
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
    478            LCD_write_EN_string(7,option*15+20,(unsigned char *)s);
   \   000051                ; Setup parameters for call to function LCD_write_EN_string
   \   000051   EE           MOV     A,R6
   \   000052   FC           MOV     R4,A
   \   000053   EF           MOV     A,R7
   \   000054   FD           MOV     R5,A
   \   000055   75F00F       MOV     B,#0xf
   \   000058   E5..         MOV     A,?V0 + 0
   \   00005A   A4           MUL     AB
   \   00005B   2414         ADD     A,#0x14
   \   00005D   FA           MOV     R2,A
   \   00005E   7907         MOV     R1,#0x7
   \   000060   12....       LCALL   ??LCD_write_EN_string?relay
    479          }
   \   000063   80..         SJMP    ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    480          
    481          //向SPI总线传输一个8位数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    482          void SendByte(unsigned char Data)
   \                     SendByte:
    483          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    484            unsigned char i=0;
    485            
    486            for(i=8;i>0;i--)
   \   000000   7808         MOV     R0,#0x8
    487            {
    488              if(Data&0x80)	
   \                     ??SendByte_0:
   \   000002   E9           MOV     A,R1
   \   000003   A2E7         MOV     C,0xE0 /* A   */.7
   \   000005   5004         JNC     ??SendByte_1
    489                LCD_SDA_SET;//输出数据
   \   000007   D293         SETB    0x90.3
   \   000009   8002         SJMP    ??SendByte_2
    490              else 
    491                LCD_SDA_CLR;
   \                     ??SendByte_1:
   \   00000B   C293         CLR     0x90.3
    492              
    493              LCD_SCL_CLR;       
   \                     ??SendByte_2:
   \   00000D   C292         CLR     0x90.2
    494              LCD_SCL_SET;
   \   00000F   D292         SETB    0x90.2
    495              Data<<=1; 
   \   000011   C3           CLR     C
   \   000012   33           RLC     A
   \   000013   F9           MOV     R1,A
    496            }
   \   000014   18           DEC     R0
   \   000015   E8           MOV     A,R0
   \   000016   70EA         JNZ     ??SendByte_0
    497          }
   \   000018   02....       LJMP    ?BRET
   \   00001B                REQUIRE _A_P1
    498          
    499          //向SPI总线传输一个8位数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          void  SPI_WriteData(unsigned char Data)
   \                     SPI_WriteData:
    501          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    502            unsigned char i=0;
    503            
    504            for(i=8;i>0;i--)
   \   000000   7808         MOV     R0,#0x8
    505            {
    506              if(Data&0x80)	
   \                     ??SPI_WriteData_0:
   \   000002   E9           MOV     A,R1
   \   000003   A2E7         MOV     C,0xE0 /* A   */.7
   \   000005   5004         JNC     ??SPI_WriteData_1
    507                LCD_SDA_SET;//输出数据
   \   000007   D293         SETB    0x90.3
   \   000009   8002         SJMP    ??SPI_WriteData_2
    508              else 
    509                LCD_SDA_CLR;
   \                     ??SPI_WriteData_1:
   \   00000B   C293         CLR     0x90.3
    510              
    511              LCD_SCL_CLR;       
   \                     ??SPI_WriteData_2:
   \   00000D   C292         CLR     0x90.2
    512              LCD_SCL_SET;
   \   00000F   D292         SETB    0x90.2
    513              Data<<=1; 
   \   000011   C3           CLR     C
   \   000012   33           RLC     A
   \   000013   F9           MOV     R1,A
    514            }
   \   000014   18           DEC     R0
   \   000015   E8           MOV     A,R0
   \   000016   70EA         JNZ     ??SPI_WriteData_0
    515          }
   \   000018   02....       LJMP    ?BRET
   \   00001B                REQUIRE _A_P1
    516          
    517          //向液晶屏写一个8位指令

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ??SPI_WriteData?relay
   \   000003                REQUIRE ??Subroutine43_0
   \   000003                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    518          void LCD_WrCmd(unsigned char Index)
   \                     LCD_WrCmd:
    519          { 
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    520            //LCD_CS_CLR;  //ALD del  SPI写命令时序开始
    521            LCD_DC_CLR;
   \   000005   C280         CLR     0x80.0
    522            SPI_WriteData(Index);
   \   000007                ; Setup parameters for call to function SPI_WriteData
   \   000007   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   00000A                REQUIRE _A_P0
    523            //LCD_CS_SET;  //ALD del
    524          }
    525          
    526          //向液晶屏写一个8位数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    527          void LCD_WrDat(unsigned char Data)
   \                     LCD_WrDat:
    528          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    529            //LCD_CS_CLR;  //ALD del
    530            LCD_DC_SET;
   \   000005   D280         SETB    0x80.0
    531            SPI_WriteData(Data);
   \   000007                ; Setup parameters for call to function SPI_WriteData
   \   000007   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   00000A                REQUIRE _A_P0
    532            //LCD_CS_SET;  //ALD del 
    533          }
    534          
    535          //向液晶屏写一个16位数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    536          void LCD_WriteData_16Bit(unsigned short Data)
   \                     LCD_WriteData_16Bit:
    537          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
    538            //LCD_CS_CLR;  //ALD del
    539            LCD_DC_SET;
   \   000008   D280         SETB    0x80.0
    540            SPI_WriteData(Data>>8); //写入高8位数据
   \   00000A                ; Setup parameters for call to function SPI_WriteData
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??SPI_WriteData?relay
    541            SPI_WriteData(Data); 	  //写入低8位数据
   \   00000E                ; Setup parameters for call to function SPI_WriteData
   \   00000E   EE           MOV     A,R6
   \   00000F   F9           MOV     R1,A
   \   000010   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   000013                REQUIRE _A_P0
    542            //LCD_CS_SET;  //ALD del 
    543          }
    544          
    545          /****************************************************************************
    546          * 名    称: LCD_write_byte()
    547          * 功    能: 数据到LCD 
    548          * 入口参数: data    ―写入的数据
    549          *           command ―写数据/命令选择  
    550          * 出口参数: 无 
    551          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          static void LCD_write_byte(unsigned char data, unsigned char command)
   \                     LCD_write_byte:
    553          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    554            ////LCD_CS_CLR ;// 使能LCD
    555            if (command == 0)
   \   000006   7005         JNZ     ??LCD_write_byte_0
    556              LCD_WrCmd(data); // 传送命令
   \   000008                ; Setup parameters for call to function LCD_WrCmd
   \   000008   12....       LCALL   ??LCD_WrCmd?relay
   \   00000B   8003         SJMP    ??LCD_write_byte_1
    557            else
    558              LCD_WrDat(data) ; // 传送数据
   \                     ??LCD_write_byte_0:
   \   00000D                ; Setup parameters for call to function LCD_WrDat
   \   00000D   12....       LCALL   ??LCD_WrDat?relay
    559            //SendByte(data);
    560            //LCD_CS_SET; // 关闭LCD
    561            //LCD_DC_SET;	
    562          }
   \                     ??LCD_write_byte_1:
   \   000010   02....       LJMP    ??Subroutine43_0 & 0xFFFF
    563          
    564          // 复位lcd

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    565          void Lcd_Reset(void)
   \                     Lcd_Reset:
    566          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    567            LCD_RST_CLR;
   \   000004   C297         CLR     0x90.7
    568            DelayMS(110);
   \   000006                ; Setup parameters for call to function DelayMS
   \   000006   7A6E         MOV     R2,#0x6e
   \   000008   7B00         MOV     R3,#0x0
   \   00000A   12....       LCALL   ??DelayMS?relay
    569            LCD_RST_SET;
   \   00000D   D297         SETB    0x90.7
    570            DelayMS(50);
   \   00000F                ; Setup parameters for call to function DelayMS
   \   00000F   7A32         MOV     R2,#0x32
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??DelayMS?relay
    571          }
   \   000016   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000019                REQUIRE _A_P1
    572          
    573          /****************************************************************************
    574          * 名    称: LCD_set_window()
    575          * 功    能: 设置显示窗口
    576          * 入口参数: X - 显示窗口左上角横坐标      Y ―显示窗口左上角纵坐标
    577          *           Width ―显示窗口宽度          Height ―显示窗口高度
    578          * 出口参数: 无
    579          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          static void LCD_set_window(unsigned int X    , unsigned int Y, 
   \                     LCD_set_window:
    581                                     unsigned int Width, unsigned int Height)
    582          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000015   7410         MOV     A,#0x10
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine9 & 0xFFFF
    583            LCD_write_byte(0x2A,LCD_COMMAND);         //列地址设置命令
   \                     ??CrossCallReturnLabel_11:
   \   00001D                ; Setup parameters for call to function LCD_write_byte
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   792A         MOV     R1,#0x2a
   \   000021   12....       LCALL   ??Subroutine49_0 & 0xFFFF
    584            LCD_write_byte(X>>8,LCD_DATA) ;           //设置显示窗口左上角横坐标高位
   \                     ??CrossCallReturnLabel_86:
   \   000024   A9..         MOV     R1,?V0 + 1
   \   000026   12....       LCALL   ??Subroutine49_0 & 0xFFFF
    585            LCD_write_byte((X+2)&0xFF,LCD_DATA);      //设置显示窗口左上角横坐标低位 	
   \                     ??CrossCallReturnLabel_87:
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   2402         ADD     A,#0x2
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??Subroutine49_0 & 0xFFFF
    586            LCD_write_byte((X+Width+1)>>8,LCD_DATA);  //设置宽度高位 	
   \                     ??CrossCallReturnLabel_88:
   \   000031   E5..         MOV     A,?V0 + 0
   \   000033   25..         ADD     A,?V0 + 4
   \   000035   F8           MOV     R0,A
   \   000036   E5..         MOV     A,?V0 + 1
   \   000038   35..         ADDC    A,?V0 + 5
   \   00003A   F9           MOV     R1,A
   \   00003B   E8           MOV     A,R0
   \   00003C   2401         ADD     A,#0x1
   \   00003E   12....       LCALL   ?Subroutine15 & 0xFFFF
    587            LCD_write_byte((X+Width+1)&0xFF,LCD_DATA);// 设置宽度低位 	
   \                     ??CrossCallReturnLabel_22:
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   25..         ADD     A,?V0 + 4
   \   000045   04           INC     A
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    588            
    589            LCD_write_byte(0x2B,LCD_COMMAND);         //行地址设置命令
   \                     ??CrossCallReturnLabel_134:
   \   00004A   792B         MOV     R1,#0x2b
   \   00004C   12....       LCALL   ??Subroutine49_0 & 0xFFFF
    590            LCD_write_byte(Y>>8,LCD_DATA) ;           //设置显示窗口左上角纵坐标高位
   \                     ??CrossCallReturnLabel_89:
   \   00004F   EF           MOV     A,R7
   \   000050   12....       LCALL   ?Subroutine24 & 0xFFFF
    591            LCD_write_byte((Y+3)&0xFF,LCD_DATA);      //设置显示窗口左上角纵坐标低位 
   \                     ??CrossCallReturnLabel_41:
   \   000053   2403         ADD     A,#0x3
   \   000055   12....       LCALL   ?Subroutine24 & 0xFFFF
    592            LCD_write_byte((Y+Height+2)>>8,LCD_DATA); // 设置显示窗口高度高位 	
   \                     ??CrossCallReturnLabel_42:
   \   000058   25..         ADD     A,?V0 + 2
   \   00005A   F8           MOV     R0,A
   \   00005B   EF           MOV     A,R7
   \   00005C   35..         ADDC    A,?V0 + 3
   \   00005E   F9           MOV     R1,A
   \   00005F   E8           MOV     A,R0
   \   000060   2402         ADD     A,#0x2
   \   000062   12....       LCALL   ?Subroutine15 & 0xFFFF
    593            LCD_write_byte((Y+Height+2)&0xFF,LCD_DATA);// 设置显示窗口高度低位 	  
   \                     ??CrossCallReturnLabel_23:
   \   000065   EE           MOV     A,R6
   \   000066   25..         ADD     A,?V0 + 2
   \   000068   2402         ADD     A,#0x2
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    594            LCD_write_byte(0x2C,LCD_COMMAND) ;
   \                     ??CrossCallReturnLabel_135:
   \   00006E   792C         MOV     R1,#0x2c
   \   000070   12....       LCALL   ??LCD_write_byte?relay
    595          }
   \   000073   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E9           MOV     A,R1
   \   000001   3400         ADDC    A,#0x0
   \   000003   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F9           MOV     R1,A
   \   000001                REQUIRE ??Subroutine47_0
   \   000001                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ??LCD_write_byte?relay
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function DelayMS
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003   7A01         MOV     R2,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL   ??LCD_write_byte?relay
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003                ; Setup parameters for call to function LCD_write_byte
   \   000003   7A00         MOV     R2,#0x0
   \   000005   22           RET
    596          
    597          /****************************************************************************
    598          * 名    称: DrawPixel()
    599          * 功    能: 在指定位置以指定颜色显示像素
    600          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          void DrawPixel(unsigned int x, unsigned int y, unsigned int color)
   \                     DrawPixel:
    602          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7409         MOV     A,#0x9
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
    603            //LCD_set_XY(x,y);  //设定显示位置 andy
    604            LCD_write_byte(color>>8,LCD_DATA);  //发送显示颜色数据高位字节
   \   00000E                ; Setup parameters for call to function LCD_write_byte
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   12....       LCALL   ?Subroutine24 & 0xFFFF
    605            LCD_write_byte(color&0xFF,LCD_DATA);//发送显示颜色数据低位字节
   \                     ??CrossCallReturnLabel_43:
   \   000013   F9           MOV     R1,A
   \   000014   12....       LCALL   ??LCD_write_byte?relay
    606          }
   \   000017   02....       LJMP    ??Subroutine43_0 & 0xFFFF
    607          
    608          /****************************************************************************
    609          * 名    称: DrawVerticalLine()
    610          * 功    能: 在指定位置以指定颜色画垂直线
    611          * 入口参数: X - 垂直线起始位置横坐标      Y ―垂直线起始位置纵坐标
    612          *           Length ―垂直线长度           Color ―垂直线颜色
    613          * 出口参数: 无
    614          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    615          void DrawVerticalLine(unsigned int x, unsigned int y, 
   \                     DrawVerticalLine:
    616                                unsigned int Length,unsigned int Color)               
    617          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   740E         MOV     A,#0xe
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine12 & 0xFFFF
    618            register int  index = 0;
    619            register char ch,cl;
    620            
    621            ch = (unsigned char)(Color>>8);
    622            cl = (unsigned char)(Color);
    623            LCD_set_window(x,y,1,Length);
   \                     ??CrossCallReturnLabel_18:
   \   000013                ; Setup parameters for call to function LCD_set_window
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75..01       MOV     ?V0 + 4,#0x1
   \   00001B   75..00       MOV     ?V0 + 5,#0x0
   \   00001E   78..         MOV     R0,#?V0 + 4
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
    624            for(index=0;index<Length;index++)
   \   000029   7E00         MOV     R6,#0x0
   \   00002B   7F00         MOV     R7,#0x0
   \   00002D   8003         SJMP    ??CrossCallReturnLabel_35
    625            {
    626            LCD_write_byte(ch,LCD_DATA) ;
   \                     ??DrawVerticalLine_0:
   \   00002F                ; Setup parameters for call to function LCD_write_byte
   \   00002F   12....       LCALL   ?Subroutine21 & 0xFFFF
    627            LCD_write_byte(cl,LCD_DATA) ;
    628            }
   \                     ??CrossCallReturnLabel_35:
   \   000032   C3           CLR     C
   \   000033   EE           MOV     A,R6
   \   000034   95..         SUBB    A,?V0 + 0
   \   000036   EF           MOV     A,R7
   \   000037   95..         SUBB    A,?V0 + 1
   \   000039   40F4         JC      ??DrawVerticalLine_0
    629          }
   \   00003B   80..         SJMP    ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7A01         MOV     R2,#0x1
   \   000002   A9..         MOV     R1,?V0 + 2
   \   000004   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000007   A9..         MOV     R1,?V0 + 3
   \   000009   12....       LCALL   ??LCD_write_byte?relay
   \   00000C   EE           MOV     A,R6
   \   00000D   2401         ADD     A,#0x1
   \   00000F   0E           INC     R6
   \   000010   EF           MOV     A,R7
   \   000011   3400         ADDC    A,#0x0
   \   000013   FF           MOV     R7,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   7410         MOV     A,#0x10
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   EE           MOV     A,R6
   \   000007   F5..         MOV     ?V0 + 3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL   ??LCD_set_window?relay
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET
    630          
    631          /****************************************************************************
    632          * 名    称: DrawHorizonLine()
    633          * 功    能: 在指定位置以指定颜色画水平线
    634          * 入口参数: X - 水平线起始位置横坐标      Y ―水平线起始位置纵坐标
    635          *           Length ―水平线长度           Color ―水平线颜色
    636          * 出口参数: 无
    637          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    638          void DrawHorizonLine(unsigned int x, unsigned int y, 
   \                     DrawHorizonLine:
    639                               unsigned int Length,unsigned int Color)               
    640          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   740E         MOV     A,#0xe
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine12 & 0xFFFF
    641            register int  index = 0;
    642            register char ch,cl;
    643            
    644            ch = (unsigned char)(Color>>8);
    645            cl = (unsigned char)(Color);
    646            LCD_set_window(x,y,Length,1);
   \                     ??CrossCallReturnLabel_19:
   \   000013                ; Setup parameters for call to function LCD_set_window
   \   000013   75..01       MOV     ?V0 + 4,#0x1
   \   000016   75..00       MOV     ?V0 + 5,#0x0
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
    647            for(index=0;index<Length;index++)
   \   000029   7E00         MOV     R6,#0x0
   \   00002B   7F00         MOV     R7,#0x0
   \   00002D   8003         SJMP    ??CrossCallReturnLabel_36
    648            {
    649              LCD_write_byte(ch,LCD_DATA);
   \                     ??DrawHorizonLine_0:
   \   00002F                ; Setup parameters for call to function LCD_write_byte
   \   00002F   12....       LCALL   ?Subroutine21 & 0xFFFF
    650              LCD_write_byte(cl,LCD_DATA);
    651            }
   \                     ??CrossCallReturnLabel_36:
   \   000032   C3           CLR     C
   \   000033   EE           MOV     A,R6
   \   000034   95..         SUBB    A,?V0 + 0
   \   000036   EF           MOV     A,R7
   \   000037   95..         SUBB    A,?V0 + 1
   \   000039   40F4         JC      ??DrawHorizonLine_0
    652          }
   \   00003B                REQUIRE ?Subroutine4
   \   00003B                ; // Fall through to label ?Subroutine4
    653          
    654          /****************************************************************************
    655          * 名    称: DrawRect()
    656          * 功    能: 在指定位置以指定颜色画矩形
    657          * 入口参数: X - 矩形起始位置横坐标      Y ―矩形起始位置纵坐标
    658          *           Width  ―矩形宽度           Height ―矩形高度                   
    659          *           Color  ―矩形颜色             
    660          * 出口参数: 无
    661          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    662          void DrawRect(unsigned int Xpos, unsigned int Ypos, unsigned int Width, 
   \                     DrawRect:
    663                        unsigned int Height,unsigned Color)
    664          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 6,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 7,A
   \   000019   7412         MOV     A,#0x12
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000021   7414         MOV     A,#0x14
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine9 & 0xFFFF
    665            DrawHorizonLine(Xpos, Ypos, Width, Color) ;
   \                     ??CrossCallReturnLabel_12:
   \   000029                ; Setup parameters for call to function DrawHorizonLine
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 6
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   12....       LCALL   ??DrawHorizonLine?relay
   \   000036   7404         MOV     A,#0x4
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
    666            DrawHorizonLine(Xpos, (Ypos + Height), Width, Color) ;
   \   00003B                ; Setup parameters for call to function DrawHorizonLine
   \   00003B   78..         MOV     R0,#?V0 + 2
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   78..         MOV     R0,#?V0 + 6
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   E5..         MOV     A,?V0 + 0
   \   000047   25..         ADD     A,?V0 + 4
   \   000049   FC           MOV     R4,A
   \   00004A   E5..         MOV     A,?V0 + 1
   \   00004C   35..         ADDC    A,?V0 + 5
   \   00004E   FD           MOV     R5,A
   \   00004F   EE           MOV     A,R6
   \   000050   FA           MOV     R2,A
   \   000051   EF           MOV     A,R7
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   ??DrawHorizonLine?relay
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
    667            DrawVerticalLine(Xpos, Ypos, Height, Color) ;
   \   00005B                ; Setup parameters for call to function DrawVerticalLine
   \   00005B   78..         MOV     R0,#?V0 + 2
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   78..         MOV     R0,#?V0 + 4
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   AC..         MOV     R4,?V0 + 0
   \   000067   AD..         MOV     R5,?V0 + 1
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   EF           MOV     A,R7
   \   00006C   FB           MOV     R3,A
   \   00006D   12....       LCALL   ??DrawVerticalLine?relay
   \   000070   7404         MOV     A,#0x4
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
    668            DrawVerticalLine((Xpos+Width-1) ,Ypos, Height, Color);
   \   000075                ; Setup parameters for call to function DrawVerticalLine
   \   000075   78..         MOV     R0,#?V0 + 2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   78..         MOV     R0,#?V0 + 4
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007F   AC..         MOV     R4,?V0 + 0
   \   000081   AD..         MOV     R5,?V0 + 1
   \   000083   EE           MOV     A,R6
   \   000084   25..         ADD     A,?V0 + 6
   \   000086   F8           MOV     R0,A
   \   000087   EF           MOV     A,R7
   \   000088   35..         ADDC    A,?V0 + 7
   \   00008A   F9           MOV     R1,A
   \   00008B   E8           MOV     A,R0
   \   00008C   24FF         ADD     A,#-0x1
   \   00008E   FA           MOV     R2,A
   \   00008F   E9           MOV     A,R1
   \   000090   34FF         ADDC    A,#-0x1
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   ??DrawVerticalLine?relay
   \   000096   7404         MOV     A,#0x4
   \   000098   02....       LJMP    ?Subroutine1 & 0xFFFF
    669          }
    670          
    671          /****************************************************************************
    672          * 名    称: DrawRectFill()
    673          * 功    能: 在指定位置以指定颜色画矩形
    674          * 入口参数: X - 矩形起始位置横坐标      Y ―矩形起始位置纵坐标
    675          *           Width  ―矩形宽度           Height ―矩形高度                   
    676          *           Color  ―矩形填充颜色             
    677          * 出口参数: 无
    678          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    679          void DrawRectFill(unsigned int Xpos  , unsigned int Ypos, unsigned int Width, 
   \                     DrawRectFill:
    680                            unsigned int Height, unsigned Color                        )
    681          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV     A,#0x10
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000015   7414         MOV     A,#0x14
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 6,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 7,A
    682            register unsigned int i;
    683            register unsigned int index = Width*Height/16+1;
   \   000021   85....       MOV     ?V0 + 0,?V0 + 4
   \   000024   85....       MOV     ?V0 + 1,?V0 + 5
   \   000027   E5..         MOV     A,?V0 + 0
   \   000029   85..F0       MOV     B,?V0 + 2
   \   00002C   A4           MUL     AB
   \   00002D   C5..         XCH     A,?V0 + 0
   \   00002F   A8F0         MOV     R0,B
   \   000031   85..F0       MOV     B,?V0 + 3
   \   000034   A4           MUL     AB
   \   000035   28           ADD     A,R0
   \   000036   F8           MOV     R0,A
   \   000037   85..F0       MOV     B,?V0 + 2
   \   00003A   E5..         MOV     A,?V0 + 1
   \   00003C   A4           MUL     AB
   \   00003D   28           ADD     A,R0
   \   00003E   F5..         MOV     ?V0 + 1,A
   \   000040   7404         MOV     A,#0x4
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?US_SHR
   \   000047   E5..         MOV     A,?V0 + 0
   \   000049   2401         ADD     A,#0x1
   \   00004B   F5..         MOV     ?V0 + 0,A
   \   00004D   E5..         MOV     A,?V0 + 1
   \   00004F   3400         ADDC    A,#0x0
   \   000051   F5..         MOV     ?V0 + 1,A
    684            register char ch,cl;
    685            
    686            ch = (unsigned char)(Color>>8);
   \   000053   AE..         MOV     R6,?V0 + 7
    687            cl = (unsigned char)(Color);
   \   000055   AF..         MOV     R7,?V0 + 6
    688            LCD_set_window(Xpos,Ypos,Width,Height);
   \   000057                ; Setup parameters for call to function LCD_set_window
   \   000057   78..         MOV     R0,#?V0 + 2
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   78..         MOV     R0,#?V0 + 4
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    689            LCD_write_byte(0x2C,LCD_COMMAND);
   \   000067                ; Setup parameters for call to function LCD_write_byte
   \   000067   7A00         MOV     R2,#0x0
   \   000069   792C         MOV     R1,#0x2c
   \   00006B   12....       LCALL   ??LCD_write_byte?relay
    690            //LCD_CS_CLR ; andy
    691            LCD_DC_SET ;
   \   00006E   D280         SETB    0x80.0
    692            for(i=0;i<index;i++)
   \   000070   75..00       MOV     ?V0 + 2,#0x0
   \   000073   75..00       MOV     ?V0 + 3,#0x0
   \   000076   8012         SJMP    ??DrawRectFill_0
    693            {
    694                SendByte(ch);
   \                     ??DrawRectFill_1:
   \   000078                ; Setup parameters for call to function SendByte
   \   000078   12....       LCALL   ?Subroutine28 & 0xFFFF
    695                SendByte(cl);
    696                SendByte(ch);
    697                SendByte(cl); 
    698                SendByte(ch);
    699                SendByte(cl);      
    700                SendByte(ch);
    701                SendByte(cl);
    702                SendByte(ch);
    703                SendByte(cl);
    704                SendByte(ch);
    705                SendByte(cl);
    706                SendByte(ch);
    707                SendByte(cl);
    708                SendByte(ch);
    709                SendByte(cl);
    710                SendByte(ch);
   \                     ??CrossCallReturnLabel_46:
   \   00007B                ; Setup parameters for call to function SendByte
   \   00007B   12....       LCALL   ?Subroutine28 & 0xFFFF
    711                SendByte(cl);
    712                SendByte(ch);
    713                SendByte(cl);
    714                SendByte(ch);
    715                SendByte(cl);
    716                SendByte(ch);
    717                SendByte(cl);
    718                SendByte(ch);
    719                SendByte(cl);
    720                SendByte(ch);
    721                SendByte(cl);
    722                SendByte(ch);
    723                SendByte(cl);
    724                SendByte(ch);
    725                SendByte(cl);
    726            }    
   \                     ??CrossCallReturnLabel_47:
   \   00007E   E5..         MOV     A,?V0 + 2
   \   000080   2401         ADD     A,#0x1
   \   000082   F5..         MOV     ?V0 + 2,A
   \   000084   E5..         MOV     A,?V0 + 3
   \   000086   3400         ADDC    A,#0x0
   \   000088   F5..         MOV     ?V0 + 3,A
   \                     ??DrawRectFill_0:
   \   00008A   C3           CLR     C
   \   00008B   E5..         MOV     A,?V0 + 2
   \   00008D   95..         SUBB    A,?V0 + 0
   \   00008F   E5..         MOV     A,?V0 + 3
   \   000091   95..         SUBB    A,?V0 + 1
   \   000093   40E3         JC      ??DrawRectFill_1
    727          }
   \   000095   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   \   000098                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??SendByte?relay
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005   EF           MOV     A,R7
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??SendByte?relay
   \   00000A   22           RET
    728          
    729          /****************************************************************************
    730          * 名    称: LCD_clear()
    731          * 功    能: 以指定颜色清屏
    732          * 入口参数: color ―清屏颜色
    733          * 出口参数: 无
    734          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D280         SETB    0x80.0
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    735          void LCD_clear(unsigned int color)
   \                     LCD_clear:
    736          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    737            register unsigned int  i=0,j=0;
    738            register unsigned char ch;
    739            register unsigned char cl;
    740            
    741            LCD_set_window(0,0,X_MAX_PIXEL,Y_MAX_PIXEL);
   \   000009                ; Setup parameters for call to function LCD_set_window
   \   000009   75..80       MOV     ?V0 + 2,#-0x80
   \   00000C   75..00       MOV     ?V0 + 3,#0x0
   \   00000F   78..         MOV     R0,#?V0 + 2
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   78..         MOV     R0,#?V0 + 2
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   7C00         MOV     R4,#0x0
   \   00001B   7D00         MOV     R5,#0x0
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
    742            ch = color>>8;
   \   000025   AF..         MOV     R7,?V0 + 1
    743            cl = color&0xFF;
   \   000027   AE..         MOV     R6,?V0 + 0
    744            LCD_write_byte(0x2C,LCD_COMMAND);
   \   000029                ; Setup parameters for call to function LCD_write_byte
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   792C         MOV     R1,#0x2c
   \   00002D   12....       LCALL   ??LCD_write_byte?relay
    745            //LCD_CS_CLR;
    746            LCD_DC_SET;
   \   000030   D280         SETB    0x80.0
    747            for (i=0;i<Y_MAX_PIXEL;i++)
   \   000032   75..80       MOV     ?V0 + 1,#-0x80
    748              for (j=0;j<2;j++)
   \                     ??LCD_clear_0:
   \   000035   75..02       MOV     ?V0 + 0,#0x2
    749              {
    750                SendByte(ch);
   \                     ??LCD_clear_1:
   \   000038                ; Setup parameters for call to function SendByte
   \   000038   12....       LCALL   ?Subroutine27 & 0xFFFF
    751                SendByte(cl);
    752                SendByte(ch);
    753                SendByte(cl);
    754                SendByte(ch);
    755                SendByte(cl);
    756                SendByte(ch);
    757                SendByte(cl);
    758                SendByte(ch);
    759                SendByte(cl);
    760                SendByte(ch);
    761                SendByte(cl);
    762                SendByte(ch);
    763                SendByte(cl);
    764                SendByte(ch);
    765                SendByte(cl);
    766                SendByte(ch);
    767                SendByte(cl);
    768                SendByte(ch);
    769                SendByte(cl);
    770                SendByte(ch);
    771                SendByte(cl);
    772                SendByte(ch);
    773                SendByte(cl);
    774                SendByte(ch);
    775                SendByte(cl);
    776                SendByte(ch);
    777                SendByte(cl);
    778                SendByte(ch);
    779                SendByte(cl);
    780                SendByte(ch);
    781                SendByte(cl);
    782                SendByte(ch);
    783                SendByte(cl);
    784                SendByte(ch);
    785                SendByte(cl);
    786                SendByte(ch);
    787                SendByte(cl);
    788                SendByte(ch);
    789                SendByte(cl);
    790                SendByte(ch);
    791                SendByte(cl);
    792                SendByte(ch);
    793                SendByte(cl);
    794                SendByte(ch);
    795                SendByte(cl);
    796                SendByte(ch);
    797                SendByte(cl);
    798                SendByte(ch);
    799                SendByte(cl);
    800                SendByte(ch);
    801                SendByte(cl);
    802                SendByte(ch);
    803                SendByte(cl);
    804                SendByte(ch);
    805                SendByte(cl);
    806                SendByte(ch);
    807                SendByte(cl);
    808                SendByte(ch);
    809                SendByte(cl);
    810                SendByte(ch);
    811                SendByte(cl);
    812                SendByte(ch);
    813                SendByte(cl);      
    814                SendByte(ch);
   \                     ??CrossCallReturnLabel_44:
   \   00003B                ; Setup parameters for call to function SendByte
   \   00003B   12....       LCALL   ?Subroutine27 & 0xFFFF
    815                SendByte(cl);
    816                SendByte(ch);
    817                SendByte(cl);
    818                SendByte(ch);
    819                SendByte(cl);
    820                SendByte(ch);
    821                SendByte(cl);
    822                SendByte(ch);
    823                SendByte(cl);
    824                SendByte(ch);
    825                SendByte(cl);
    826                SendByte(ch);
    827                SendByte(cl);
    828                SendByte(ch);
    829                SendByte(cl);
    830                SendByte(ch);
    831                SendByte(cl);
    832                SendByte(ch);
    833                SendByte(cl);
    834                SendByte(ch);
    835                SendByte(cl);
    836                SendByte(ch);
    837                SendByte(cl);
    838                SendByte(ch);
    839                SendByte(cl);
    840                SendByte(ch);
    841                SendByte(cl);
    842                SendByte(ch);
    843                SendByte(cl);
    844                SendByte(ch);
    845                SendByte(cl);
    846                SendByte(ch);
    847                SendByte(cl);
    848                SendByte(ch);
    849                SendByte(cl);
    850                SendByte(ch);
    851                SendByte(cl);
    852                SendByte(ch);
    853                SendByte(cl);
    854                SendByte(ch);
    855                SendByte(cl);
    856                SendByte(ch);
    857                SendByte(cl);
    858                SendByte(ch);
    859                SendByte(cl);
    860                SendByte(ch);
    861                SendByte(cl);
    862                SendByte(ch);
    863                SendByte(cl);
    864                SendByte(ch);
    865                SendByte(cl);
    866                SendByte(ch);
    867                SendByte(cl);
    868                SendByte(ch);
    869                SendByte(cl);
    870                SendByte(ch);
    871                SendByte(cl);
    872                SendByte(ch);
    873                SendByte(cl);
    874                SendByte(ch);
    875                SendByte(cl);
    876                SendByte(ch);
    877                SendByte(cl);
    878              }
   \                     ??CrossCallReturnLabel_45:
   \   00003E   15..         DEC     ?V0 + 0
   \   000040   E5..         MOV     A,?V0 + 0
   \   000042   70F4         JNZ     ??LCD_clear_1
   \   000044   15..         DEC     ?V0 + 1
   \   000046   E5..         MOV     A,?V0 + 1
   \   000048   70EB         JNZ     ??LCD_clear_0
    879            LCD_DC_SET;
   \   00004A   02....       LJMP    ?Subroutine3 & 0xFFFF
   \   00004D                REQUIRE _A_P0
    880            //LCD_CS_SET;
    881          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003                ; Setup parameters for call to function SendByte
   \   000003   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EF           MOV     A,R7
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??SendByte?relay
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005                ; Setup parameters for call to function SendByte
   \   000005   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008                ; Setup parameters for call to function SendByte
   \   000008   EE           MOV     A,R6
   \   000009   F9           MOV     R1,A
   \   00000A   12....       LCALL   ??SendByte?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine48_0
   \   000002                ; // Fall through to label ??Subroutine48_0
    882          
    883          /****************************************************************************
    884          * 名    称: LCD_write_EN()
    885          * 功    能: 在指定位置显示 7 ×14 点阵ASCII字符 
    886          * 入口参数: X - 显示位置左上角横坐标      Y ―显示位置左上角纵坐标
    887          *           c ―显示字符                  
    888          * 出口参数: 无
    889          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    890          static void LCD_write_EN(unsigned int X, unsigned int Y, unsigned char c)
   \                     LCD_write_EN:
    891          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    892            unsigned char i,j,temp;
    893            
    894            LCD_set_window(X,Y,7,14);
   \   000007                ; Setup parameters for call to function LCD_set_window
   \   000007   75..0E       MOV     ?V0 + 0,#0xe
   \   00000A   75..00       MOV     ?V0 + 1,#0x0
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   75..07       MOV     ?V0 + 0,#0x7
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
    895            //LCD_CS_CLR ;
    896            LCD_DC_SET ;
   \   000020   D280         SETB    0x80.0
    897            for(i=0;i<14;i++)
   \   000022   7F00         MOV     R7,#0x0
    898            {
    899              temp = ASCII7x14[c-32][i];
   \                     ??LCD_write_EN_0:
   \   000024   EE           MOV     A,R6
   \   000025   75F00E       MOV     B,#0xe
   \   000028   A4           MUL     AB
   \   000029   FA           MOV     R2,A
   \   00002A   ABF0         MOV     R3,B
   \   00002C   8F..         MOV     ?V0 + 0,R7
   \   00002E   74..         MOV     A,#(ASCII7x14 + 64) & 0xff
   \   000030   25..         ADD     A,?V0 + 0
   \   000032   F8           MOV     R0,A
   \   000033   74..         MOV     A,#((ASCII7x14 - 448) >> 8) & 0xff
   \   000035   3400         ADDC    A,#0x0
   \   000037   F9           MOV     R1,A
   \   000038   E8           MOV     A,R0
   \   000039   2A           ADD     A,R2
   \   00003A   F582         MOV     DPL,A
   \   00003C   E9           MOV     A,R1
   \   00003D   3B           ADDC    A,R3
   \   00003E   F583         MOV     DPH,A
   \   000040   E4           CLR     A
   \   000041   93           MOVC    A,@A+DPTR
   \   000042   F5..         MOV     ?V0 + 1,A
    900              for(j=0;j<7;j++)
   \   000044   75..07       MOV     ?V0 + 0,#0x7
    901              {
    902                if(temp&0x80)
   \                     ??LCD_write_EN_1:
   \   000047   E5..         MOV     A,?V0 + 1
   \   000049   A2E7         MOV     C,0xE0 /* A   */.7
   \   00004B   5005         JNC     ??LCD_write_EN_2
    903                {
    904                  SendByte(Color>>8);  
   \   00004D                ; Setup parameters for call to function SendByte
   \   00004D   12....       LCALL   ?Subroutine5 & 0xFFFF
    905                  SendByte(Color) ;
    906                }
   \                     ??CrossCallReturnLabel_0:
   \   000050   8003         SJMP    ??CrossCallReturnLabel_3
    907                else
    908                {
    909                  SendByte(Color_BK>>8) ;  
   \                     ??LCD_write_EN_2:
   \   000052                ; Setup parameters for call to function SendByte
   \   000052   12....       LCALL   ?Subroutine6 & 0xFFFF
    910                  SendByte(Color_BK);
    911                }            
   \                     ??CrossCallReturnLabel_3:
   \   000055   12....       LCALL   ?Subroutine29 & 0xFFFF
    912                temp <<= 1 ;
   \                     ??CrossCallReturnLabel_48:
   \   000058   E5..         MOV     A,?V0 + 1
   \   00005A   C3           CLR     C
   \   00005B   33           RLC     A
   \   00005C   F5..         MOV     ?V0 + 1,A
    913              }
   \   00005E   15..         DEC     ?V0 + 0
   \   000060   E5..         MOV     A,?V0 + 0
   \   000062   70E3         JNZ     ??LCD_write_EN_1
    914            }
   \   000064   0F           INC     R7
   \   000065   EF           MOV     A,R7
   \   000066   C3           CLR     C
   \   000067   940E         SUBB    A,#0xe
   \   000069   40B9         JC      ??LCD_write_EN_0
    915            //LCD_CS_SET ; andy
    916            LCD_DC_SET ;
   \   00006B   D280         SETB    0x80.0
    917          }
   \   00006D   7F02         MOV     R7,#0x2
   \   00006F   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000072                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#Color_BK + 1
   \   000003   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000006                ; Setup parameters for call to function SendByte
   \   000006                ; Setup parameters for call to function SendByte
   \   000006                ; Setup parameters for call to function SendByte
   \   000006   90....       MOV     DPTR,#Color_BK
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??SendByte?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#Color + 1
   \   000003   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000006                ; Setup parameters for call to function SendByte
   \   000006                ; Setup parameters for call to function SendByte
   \   000006                ; Setup parameters for call to function SendByte
   \   000006   90....       MOV     DPTR,#Color
   \   000009   22           RET
    918          
    919          /****************************************************************************
    920          * 名    称: LCD_write_EN_string()
    921          * 功    能: 在指定位置显示 7 ×14 点阵ASCII字符串 
    922          * 入口参数: X - 显示位置左上角横坐标      Y ―显示位置左上角纵坐标
    923          *           s ―字符串指针                  
    924          * 出口参数: 无
    925          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    926          void LCD_write_EN_string(unsigned char X,unsigned char Y,uint8 *s)
   \                     LCD_write_EN_string:
    927          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 3,R1
   \   000007   8A..         MOV     ?V0 + 4,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    928            unsigned char i=0;
   \   00000D   75..00       MOV     ?V0 + 2,#0x0
    929            
    930            while (*s)
   \                     ??LCD_write_EN_string_0:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6030         JZ      ??LCD_write_EN_string_1
    931            {
    932              LCD_write_EN(X+i*7,Y,*s);
   \   000017                ; Setup parameters for call to function LCD_write_EN
   \   000017   F9           MOV     R1,A
   \   000018   85....       MOV     ?V0 + 0,?V0 + 4
   \   00001B   AC..         MOV     R4,?V0 + 0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   85....       MOV     ?V0 + 0,?V0 + 3
   \   000022   E5..         MOV     A,?V0 + 2
   \   000024   75F007       MOV     B,#0x7
   \   000027   A4           MUL     AB
   \   000028   FA           MOV     R2,A
   \   000029   ABF0         MOV     R3,B
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   2A           ADD     A,R2
   \   00002E   FA           MOV     R2,A
   \   00002F   E4           CLR     A
   \   000030   3B           ADDC    A,R3
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??LCD_write_EN?relay
    933              s++;
   \   000035   8E82         MOV     DPL,R6
   \   000037   8F83         MOV     DPH,R7
   \   000039   A3           INC     DPTR
   \   00003A   AE82         MOV     R6,DPL
   \   00003C   AF83         MOV     R7,DPH
    934              i++;
   \   00003E   05..         INC     ?V0 + 2
    935              if(i>=HAL_LCD_MAX_CHARS)return;
   \   000040   E5..         MOV     A,?V0 + 2
   \   000042   C3           CLR     C
   \   000043   9410         SUBB    A,#0x10
   \   000045   40C9         JC      ??LCD_write_EN_string_0
   \                     ??LCD_write_EN_string_1:
   \   000047   7F05         MOV     R7,#0x5
   \   000049   02....       LJMP    ?BANKED_LEAVE_XDATA
    936            }
    937            return;
    938          }
    939          
    940          /****************************************************************************
    941          * 名    称: LCD_write_CN()
    942          * 功    能: 在指定位置显示 14 ×14 点阵汉字字符  
    943          * 入口参数: X - 显示位置左上角横坐标      Y ―显示位置左上角纵坐标
    944          *           c ―显示字符指针                  
    945          * 出口参数: 无
    946          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          static void LCD_write_CN(unsigned int X, unsigned int Y, unsigned char c)
   \                     LCD_write_CN:
    948          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    949            unsigned char i,j,temp;
    950            
    951            LCD_set_window(X,Y,14,14);  //按字符点阵大小设置显示窗口
   \   000007                ; Setup parameters for call to function LCD_set_window
   \   000007   75..0E       MOV     ?V0 + 0,#0xe
   \   00000A   75..00       MOV     ?V0 + 1,#0x0
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   78..         MOV     R0,#?V0 + 0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000017   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00001A   12....       LCALL   ?DEALLOC_XSTACK8
    952            //LCD_CS_CLR;               //液晶SPI使能andy
    953            LCD_DC_SET;                 //发送数据信号使能
   \   00001D   D280         SETB    0x80.0
    954            for(i=0;i<28;i++)           // 14x14字符点阵数据大小为2x14=28字节
   \   00001F   75..00       MOV     ?V0 + 0,#0x0
    955            {
    956              temp = CN14x14[c][i] ;    //读字模数组
   \                     ??LCD_write_CN_0:
   \   000022   12....       LCALL   ?Subroutine10 & 0xFFFF
    957              for(j=0;j<8;j++)          // 按位显示
   \                     ??CrossCallReturnLabel_14:
   \   000025   75..08       MOV     ?V0 + 1,#0x8
    958              {
    959                if(temp&0x80)           //如果位值为1，显示字符色
   \                     ??LCD_write_CN_1:
   \   000028   EF           MOV     A,R7
   \   000029   A2E7         MOV     C,0xE0 /* A   */.7
   \   00002B   5005         JNC     ??LCD_write_CN_2
    960                {
    961                  SendByte(Color>>8);  
   \   00002D                ; Setup parameters for call to function SendByte
   \   00002D   12....       LCALL   ?Subroutine5 & 0xFFFF
    962                  SendByte(Color) ;
    963                }
   \                     ??CrossCallReturnLabel_1:
   \   000030   8003         SJMP    ??CrossCallReturnLabel_4
    964                else                    //如果位值为0，显示背景色
    965                {
    966                  SendByte(Color_BK>>8) ;  
   \                     ??LCD_write_CN_2:
   \   000032                ; Setup parameters for call to function SendByte
   \   000032   12....       LCALL   ?Subroutine6 & 0xFFFF
    967                  SendByte(Color_BK);
    968                }            
    969                temp <<= 1 ;
    970              }
   \                     ??CrossCallReturnLabel_4:
   \   000035   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000038   70EE         JNZ     ??LCD_write_CN_1
    971              i++ ;                     //指向下一字节
   \   00003A   05..         INC     ?V0 + 0
    972              temp = CN14x14[c][i];
   \   00003C   12....       LCALL   ?Subroutine10 & 0xFFFF
    973              for(j=0;j<6;j++)          // 按位显示，点阵横向为14像素，
   \                     ??CrossCallReturnLabel_15:
   \   00003F   75..06       MOV     ?V0 + 1,#0x6
    974              {                         // 所以每行第2字节最后2位抛弃
    975                if(temp&0x80)           // 如果位值为1，显示字符色
   \                     ??LCD_write_CN_3:
   \   000042   EF           MOV     A,R7
   \   000043   A2E7         MOV     C,0xE0 /* A   */.7
   \   000045   5005         JNC     ??LCD_write_CN_4
    976                {
    977                  SendByte(Color>>8);  
   \   000047                ; Setup parameters for call to function SendByte
   \   000047   12....       LCALL   ?Subroutine5 & 0xFFFF
    978                  SendByte(Color) ;
    979                }
   \                     ??CrossCallReturnLabel_2:
   \   00004A   8003         SJMP    ??CrossCallReturnLabel_5
    980                else                    // 如果位值为0，显示背景色
    981                {
    982                  SendByte(Color_BK>>8) ;  
   \                     ??LCD_write_CN_4:
   \   00004C                ; Setup parameters for call to function SendByte
   \   00004C   12....       LCALL   ?Subroutine6 & 0xFFFF
    983                  SendByte(Color_BK);
    984                }            
    985                temp <<= 1 ;
    986              }
    987            }
   \                     ??CrossCallReturnLabel_5:
   \   00004F   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000052   70EE         JNZ     ??LCD_write_CN_3
   \   000054   05..         INC     ?V0 + 0
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   C3           CLR     C
   \   000059   941C         SUBB    A,#0x1c
   \   00005B   40C5         JC      ??LCD_write_CN_0
    988            //LCD_CS_SET;               //液晶SPI禁止
    989            LCD_DC_SET;                 //数据控制信号禁止
   \   00005D   02....       LJMP    ?Subroutine3 & 0xFFFF
   \   000060                REQUIRE _A_P0
    990          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85....       MOV     ?V0 + 2,?V0 + 0
   \   000003   EE           MOV     A,R6
   \   000004   75F01C       MOV     B,#0x1c
   \   000007   A4           MUL     AB
   \   000008   F8           MOV     R0,A
   \   000009   A9F0         MOV     R1,B
   \   00000B   74..         MOV     A,#CN14x14 & 0xff
   \   00000D   28           ADD     A,R0
   \   00000E   F8           MOV     R0,A
   \   00000F   74..         MOV     A,#(CN14x14 >> 8) & 0xff
   \   000011   39           ADDC    A,R1
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   25..         ADD     A,?V0 + 2
   \   000016   F582         MOV     DPL,A
   \   000018   E9           MOV     A,R1
   \   000019   3400         ADDC    A,#0x0
   \   00001B   F583         MOV     DPH,A
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FF           MOV     R7,A
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   EF           MOV     A,R7
   \   000004   C3           CLR     C
   \   000005   33           RLC     A
   \   000006   FF           MOV     R7,A
   \   000007   15..         DEC     ?V0 + 1
   \   000009   E5..         MOV     A,?V0 + 1
   \   00000B   22           RET
    991          
    992          /****************************************************************************
    993          * 名    称: LCD_write_CN_string()
    994          * 功    能: 在指定位置显示 14 ×14 点阵中文字符串   
    995          * 入口参数: X - 显示位置左上角横坐标      Y ―显示位置左上角纵坐标
    996          *           s ―字符串指针                  
    997          * 出口参数: 无
    998          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    999          void LCD_write_CN_string(unsigned char X,unsigned char Y,uint8 *s)
   \                     LCD_write_CN_string:
   1000          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 1,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1001            unsigned char i=0;
   \   00000D   75..00       MOV     ?V0 + 0,#0x0
   1002            static unsigned char j=0;
   1003            
   1004            while (*s)
   \                     ??LCD_write_CN_string_0:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7003         JNZ     $+5
   \   000017   02....       LJMP    ??LCD_write_CN_string_1 & 0xFFFF
   1005            {
   1006              for(j=0;j<ALL_CNS;j++)                  //搜索点阵字模
   \   00001A   90....       MOV     DPTR,#??j
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
   1007              { 
   1008                if(  *s    ==CN14x14_Index[j*2]            
   1009                   &&*(s+1)==CN14x14_Index[j*2+1])    //汉字内码存在于字模索引数组中
   \                     ??LCD_write_CN_string_2:
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   90....       MOV     DPTR,#??j
   \   000028   E0           MOVX    A,@DPTR
   \   000029   C3           CLR     C
   \   00002A   33           RLC     A
   \   00002B   F8           MOV     R0,A
   \   00002C   E4           CLR     A
   \   00002D   33           RLC     A
   \   00002E   F9           MOV     R1,A
   \   00002F   74..         MOV     A,#CN14x14_Index & 0xff
   \   000031   28           ADD     A,R0
   \   000032   F582         MOV     DPL,A
   \   000034   74..         MOV     A,#(CN14x14_Index >> 8) & 0xff
   \   000036   39           ADDC    A,R1
   \   000037   F583         MOV     DPH,A
   \   000039   E4           CLR     A
   \   00003A   93           MOVC    A,@A+DPTR
   \   00003B   6A           XRL     A,R2
   \   00003C   703A         JNZ     ??LCD_write_CN_string_3
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FA           MOV     R2,A
   \   000045   74..         MOV     A,#(CN14x14_Index + 1) & 0xff
   \   000047   28           ADD     A,R0
   \   000048   F582         MOV     DPL,A
   \   00004A   74..         MOV     A,#((CN14x14_Index + 1) >> 8) & 0xff
   \   00004C   39           ADDC    A,R1
   \   00004D   F583         MOV     DPH,A
   \   00004F   E4           CLR     A
   \   000050   93           MOVC    A,@A+DPTR
   \   000051   6A           XRL     A,R2
   \   000052   7024         JNZ     ??LCD_write_CN_string_3
   1010                {
   1011                  LCD_write_CN(X+i*14,Y,j) ;          //显示汉字
   \   000054                ; Setup parameters for call to function LCD_write_CN
   \   000054   90....       MOV     DPTR,#??j
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   85....       MOV     ?V0 + 4,?V0 + 1
   \   00005C   AC..         MOV     R4,?V0 + 4
   \   00005E   7D00         MOV     R5,#0x0
   \   000060   85....       MOV     ?V0 + 4,?V0 + 2
   \   000063   E5..         MOV     A,?V0 + 0
   \   000065   75F00E       MOV     B,#0xe
   \   000068   A4           MUL     AB
   \   000069   FA           MOV     R2,A
   \   00006A   ABF0         MOV     R3,B
   \   00006C   E5..         MOV     A,?V0 + 4
   \   00006E   2A           ADD     A,R2
   \   00006F   FA           MOV     R2,A
   \   000070   E4           CLR     A
   \   000071   3B           ADDC    A,R3
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   ??LCD_write_CN?relay
   1012                  break; 
   \   000076   800B         SJMP    ??LCD_write_CN_string_4
   1013                }
   1014              }
   \                     ??LCD_write_CN_string_3:
   \   000078   90....       MOV     DPTR,#??j
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   04           INC     A
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   C3           CLR     C
   \   00007F   9480         SUBB    A,#-0x80
   \   000081   409C         JC      ??LCD_write_CN_string_2
   1015              if(j>=ALL_CNS)                          //无此字的点阵字模
   \                     ??LCD_write_CN_string_4:
   \   000083   90....       MOV     DPTR,#??j
   \   000086   E0           MOVX    A,@DPTR
   \   000087   C3           CLR     C
   \   000088   9480         SUBB    A,#-0x80
   \   00008A   4038         JC      ??LCD_write_CN_string_5
   1016              {
   1017                DrawRectFill(X+i*14,Y,14,14,Color_BK);//显示空格
   \   00008C                ; Setup parameters for call to function DrawRectFill
   \   00008C   90....       MOV     DPTR,#Color_BK
   \   00008F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000092   75..0E       MOV     ?V0 + 4,#0xe
   \   000095   75..00       MOV     ?V0 + 5,#0x0
   \   000098   78..         MOV     R0,#?V0 + 4
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   78..         MOV     R0,#?V0 + 4
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   85....       MOV     ?V0 + 4,?V0 + 1
   \   0000A5   AC..         MOV     R4,?V0 + 4
   \   0000A7   7D00         MOV     R5,#0x0
   \   0000A9   85....       MOV     ?V0 + 4,?V0 + 2
   \   0000AC   E5..         MOV     A,?V0 + 0
   \   0000AE   75F00E       MOV     B,#0xe
   \   0000B1   A4           MUL     AB
   \   0000B2   F8           MOV     R0,A
   \   0000B3   A9F0         MOV     R1,B
   \   0000B5   E5..         MOV     A,?V0 + 4
   \   0000B7   28           ADD     A,R0
   \   0000B8   FA           MOV     R2,A
   \   0000B9   E4           CLR     A
   \   0000BA   39           ADDC    A,R1
   \   0000BB   FB           MOV     R3,A
   \   0000BC   12....       LCALL   ??DrawRectFill?relay
   \   0000BF   7406         MOV     A,#0x6
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   1018              }
   1019              s++; s++ ;                              //字符指针移位
   \                     ??LCD_write_CN_string_5:
   \   0000C4   EE           MOV     A,R6
   \   0000C5   2402         ADD     A,#0x2
   \   0000C7   0E           INC     R6
   \   0000C8   0E           INC     R6
   \   0000C9   EF           MOV     A,R7
   \   0000CA   3400         ADDC    A,#0x0
   \   0000CC   FF           MOV     R7,A
   1020              i++;
   \   0000CD   05..         INC     ?V0 + 0
   1021              if(i>=HAL_LCD_MAX_CHARS/2)  
   \   0000CF   E5..         MOV     A,?V0 + 0
   \   0000D1   C3           CLR     C
   \   0000D2   9408         SUBB    A,#0x8
   \   0000D4   5003         JNC     $+5
   \   0000D6   02....       LJMP    ??LCD_write_CN_string_0 & 0xFFFF
   1022                return;                               //超过最大显示字符数，返回
   1023            }
   \                     ??LCD_write_CN_string_1:
   \   0000D9   02....       LJMP    ?Subroutine4 & 0xFFFF
   1024            return ;
   1025          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??j:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   1026          
   1027          /****************************************************************************
   1028          * 名    称: ShowImage()
   1029          * 功    能: 显示图片   
   1030          * 入口参数: p - 图片点阵数据  取模方式 水平扫描 从左到右 低位在前           
   1031          * 出口参数: 无
   1032          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          void ShowImage(const unsigned char *p) 
   \                     ShowImage:
   1034          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   1035            int i; 
   1036            unsigned char picH,picL;
   1037            
   1038            LCD_set_window(24,5,80,40); //坐标设置
   \   000009                ; Setup parameters for call to function LCD_set_window
   \   000009   75..28       MOV     ?V0 + 2,#0x28
   \   00000C   75..00       MOV     ?V0 + 3,#0x0
   \   00000F   78..         MOV     R0,#?V0 + 2
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   75..50       MOV     ?V0 + 2,#0x50
   \   000017   78..         MOV     R0,#?V0 + 2
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C05         MOV     R4,#0x5
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7A18         MOV     R2,#0x18
   \   000022   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   1039            for(i=0;i<80*40;i++)
   \   000028   7E00         MOV     R6,#0x0
   \   00002A   7F00         MOV     R7,#0x0
   1040            {	
   1041              picL=*(p+i*2);	//数据低位在前
   1042              picH=*(p+i*2+1);				
   1043              LCD_WriteData_16Bit(picH<<8|picL);  						
   \                     ??ShowImage_0:
   \   00002C   EE           MOV     A,R6
   \   00002D   F8           MOV     R0,A
   \   00002E   EF           MOV     A,R7
   \   00002F   F9           MOV     R1,A
   \   000030   E8           MOV     A,R0
   \   000031   C3           CLR     C
   \   000032   33           RLC     A
   \   000033   F8           MOV     R0,A
   \   000034   E9           MOV     A,R1
   \   000035   33           RLC     A
   \   000036   F9           MOV     R1,A
   \   000037   E5..         MOV     A,?V0 + 0
   \   000039   28           ADD     A,R0
   \   00003A   F8           MOV     R0,A
   \   00003B   E5..         MOV     A,?V0 + 1
   \   00003D   39           ADDC    A,R1
   \   00003E   F9           MOV     R1,A
   \   00003F                ; Setup parameters for call to function LCD_WriteData_16Bit
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FB           MOV     R3,A
   \   000046   8882         MOV     DPL,R0
   \   000048   8983         MOV     DPH,R1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   FA           MOV     R2,A
   \   00004C   12....       LCALL   ??LCD_WriteData_16Bit?relay
   1044            }	
   \   00004F   EE           MOV     A,R6
   \   000050   2401         ADD     A,#0x1
   \   000052   0E           INC     R6
   \   000053   EF           MOV     A,R7
   \   000054   3400         ADDC    A,#0x0
   \   000056   FF           MOV     R7,A
   \   000057   C3           CLR     C
   \   000058   EE           MOV     A,R6
   \   000059   9480         SUBB    A,#-0x80
   \   00005B   EF           MOV     A,R7
   \   00005C   940C         SUBB    A,#0xc
   \   00005E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000060   65D0         XRL     A,PSW
   \   000062   33           RLC     A
   \   000063   40C7         JC      ??ShowImage_0
   1045          }
   \   000065   02....       LJMP    ??Subroutine46_0 & 0xFFFF
   1046          
   1047          //初始化LCD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1048          void HalLcd_HW_Init(void)
   \                     HalLcd_HW_Init:
   1049          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1050            P0SEL &= 0xFE; //设置P00为普通IO口，
   \   000004   53F3FE       ANL     0xf3,#0xfe
   1051            P0DIR |= 0x01; //设置P00为输出
   \   000007   43FD01       ORL     0xfd,#0x1
   1052            P1SEL &= 0x73; //设置P12，P13,P17为普通IO口
   \   00000A   53F473       ANL     0xf4,#0x73
   1053            P1DIR |= 0x8c; //设置P12，P13,P17为输出 
   \   00000D   43FE8C       ORL     0xfe,#0x8c
   1054          
   1055            Lcd_Reset();
   \   000010                ; Setup parameters for call to function Lcd_Reset
   \   000010   12....       LCALL   ??Lcd_Reset?relay
   1056            
   1057          #ifdef HARDWARE_SPI                                         
   1058            P1DIR &= 0x9F;
   1059            SPI_Init();   //初始化SPI端口  
   1060          #endif
   1061           
   1062            LCD_write_byte(0x11,LCD_COMMAND); //退出睡眠模式
   \   000013                ; Setup parameters for call to function LCD_write_byte
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7911         MOV     R1,#0x11
   \   000017   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1063            DelayMS(1); 
   \                     ??CrossCallReturnLabel_90:
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??DelayMS?relay
   1064          
   1065            ///ST7735R Frame Rate
   1066            LCD_write_byte(0xB1,LCD_COMMAND); 
   \   00001F                ; Setup parameters for call to function LCD_write_byte
   \   00001F   7A00         MOV     R2,#0x0
   \   000021   79B1         MOV     R1,#-0x4f
   \   000023   12....       LCALL   ?Subroutine16 & 0xFFFF
   1067            LCD_write_byte(0x01,LCD_DATA); 
   1068            LCD_write_byte(0x2C,LCD_DATA); 
   1069            LCD_write_byte(0x2D,LCD_DATA); 
   1070            LCD_write_byte(0xB2,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_24:
   \   000026   79B2         MOV     R1,#-0x4e
   \   000028   12....       LCALL   ?Subroutine16 & 0xFFFF
   1071            LCD_write_byte(0x01,LCD_DATA); 
   1072            LCD_write_byte(0x2C,LCD_DATA); 
   1073            LCD_write_byte(0x2D,LCD_DATA); 
   1074            LCD_write_byte(0xB3,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_25:
   \   00002B   79B3         MOV     R1,#-0x4d
   \   00002D   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1075            LCD_write_byte(0x01,LCD_DATA); 
   \                     ??CrossCallReturnLabel_91:
   \   000030   7901         MOV     R1,#0x1
   \   000032   12....       LCALL   ?Subroutine22 & 0xFFFF
   1076            LCD_write_byte(0x2C,LCD_DATA); 
   1077            LCD_write_byte(0x2D,LCD_DATA); 
   \                     ??CrossCallReturnLabel_37:
   \   000035   792D         MOV     R1,#0x2d
   \   000037   12....       LCALL   ?Subroutine16 & 0xFFFF
   1078            LCD_write_byte(0x01,LCD_DATA); 
   1079            LCD_write_byte(0x2C,LCD_DATA); 
   1080            LCD_write_byte(0x2D,LCD_DATA); 
   1081          
   1082            LCD_write_byte(0xB4,LCD_COMMAND);//列对调
   \                     ??CrossCallReturnLabel_26:
   \   00003A   79B4         MOV     R1,#-0x4c
   \   00003C   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1083            LCD_write_byte(0x07,LCD_DATA); 
   \                     ??CrossCallReturnLabel_92:
   \   00003F   7907         MOV     R1,#0x7
   \   000041   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1084            //ST7735R加电序列
   1085            LCD_write_byte(0xC0,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_136:
   \   000044   79C0         MOV     R1,#-0x40
   \   000046   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1086            LCD_write_byte(0xA2,LCD_DATA); 
   \                     ??CrossCallReturnLabel_93:
   \   000049   79A2         MOV     R1,#-0x5e
   \   00004B   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1087            LCD_write_byte(0x02,LCD_DATA); 
   \                     ??CrossCallReturnLabel_94:
   \   00004E   12....       LCALL   ?Subroutine25 & 0xFFFF
   1088            LCD_write_byte(0x84,LCD_DATA); 
   \                     ??CrossCallReturnLabel_84:
   \   000051   7984         MOV     R1,#-0x7c
   \   000053   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1089            LCD_write_byte(0xC1,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_137:
   \   000056   79C1         MOV     R1,#-0x3f
   \   000058   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1090            LCD_write_byte(0xC5,LCD_DATA); 
   \                     ??CrossCallReturnLabel_95:
   \   00005B   79C5         MOV     R1,#-0x3b
   \   00005D   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1091            LCD_write_byte(0xC2,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_138:
   \   000060   79C2         MOV     R1,#-0x3e
   \   000062   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1092            LCD_write_byte(0x0A,LCD_DATA); 
   \                     ??CrossCallReturnLabel_96:
   \   000065   790A         MOV     R1,#0xa
   \   000067   12....       LCALL   ?Subroutine19 & 0xFFFF
   1093            LCD_write_byte(0x00,LCD_DATA); 
   1094            LCD_write_byte(0xC3,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_132:
   \   00006A   79C3         MOV     R1,#-0x3d
   \   00006C   12....       LCALL   ?Subroutine23 & 0xFFFF
   1095            LCD_write_byte(0x8A,LCD_DATA); 
   1096            LCD_write_byte(0x2A,LCD_DATA); 
   \                     ??CrossCallReturnLabel_39:
   \   00006F   792A         MOV     R1,#0x2a
   \   000071   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1097            LCD_write_byte(0xC4,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_139:
   \   000074   79C4         MOV     R1,#-0x3c
   \   000076   12....       LCALL   ?Subroutine23 & 0xFFFF
   1098            LCD_write_byte(0x8A,LCD_DATA); 
   1099            LCD_write_byte(0xEE,LCD_DATA); 
   \                     ??CrossCallReturnLabel_40:
   \   000079   79EE         MOV     R1,#-0x12
   \   00007B   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1100          
   1101            LCD_write_byte(0xC5,LCD_COMMAND); //加VCOM 
   \                     ??CrossCallReturnLabel_140:
   \   00007E   79C5         MOV     R1,#-0x3b
   \   000080   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1102            LCD_write_byte(0x0E,LCD_DATA); 
   \                     ??CrossCallReturnLabel_97:
   \   000083   790E         MOV     R1,#0xe
   \   000085   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1103          
   1104            LCD_write_byte(0x36,LCD_COMMAND); //RGB模式 
   \                     ??CrossCallReturnLabel_141:
   \   000088   7936         MOV     R1,#0x36
   \   00008A   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1105            LCD_write_byte(0xC8,LCD_DATA); 
   \                     ??CrossCallReturnLabel_98:
   \   00008D   79C8         MOV     R1,#-0x38
   \   00008F   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1106            
   1107            // ST7735R Gamma 校正序列
   1108            LCD_write_byte(0xe0,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_142:
   \   000092   79E0         MOV     R1,#-0x20
   \   000094   12....       LCALL   ?Subroutine17 & 0xFFFF
   1109            LCD_write_byte(0x0f,LCD_DATA); 
   1110            LCD_write_byte(0x1a,LCD_DATA); 
   \                     ??CrossCallReturnLabel_27:
   \   000097   791A         MOV     R1,#0x1a
   \   000099   12....       LCALL   ?Subroutine17 & 0xFFFF
   1111            LCD_write_byte(0x0f,LCD_DATA); 
   1112            LCD_write_byte(0x18,LCD_DATA); 
   \                     ??CrossCallReturnLabel_28:
   \   00009C   7918         MOV     R1,#0x18
   \   00009E   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1113            LCD_write_byte(0x2f,LCD_DATA); 
   \                     ??CrossCallReturnLabel_99:
   \   0000A1   792F         MOV     R1,#0x2f
   \   0000A3   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1114            LCD_write_byte(0x28,LCD_DATA); 
   \                     ??CrossCallReturnLabel_100:
   \   0000A6   7928         MOV     R1,#0x28
   \   0000A8   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1115            LCD_write_byte(0x20,LCD_DATA); 
   \                     ??CrossCallReturnLabel_101:
   \   0000AB   7920         MOV     R1,#0x20
   \   0000AD   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1116            LCD_write_byte(0x22,LCD_DATA); 
   \                     ??CrossCallReturnLabel_102:
   \   0000B0   7922         MOV     R1,#0x22
   \   0000B2   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1117            LCD_write_byte(0x1f,LCD_DATA); 
   \                     ??CrossCallReturnLabel_103:
   \   0000B5   791F         MOV     R1,#0x1f
   \   0000B7   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1118            LCD_write_byte(0x1b,LCD_DATA); 
   \                     ??CrossCallReturnLabel_104:
   \   0000BA   791B         MOV     R1,#0x1b
   \   0000BC   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1119            LCD_write_byte(0x23,LCD_DATA); 
   \                     ??CrossCallReturnLabel_105:
   \   0000BF   7923         MOV     R1,#0x23
   \   0000C1   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1120            LCD_write_byte(0x37,LCD_DATA); 
   \                     ??CrossCallReturnLabel_106:
   \   0000C4   7937         MOV     R1,#0x37
   \   0000C6   12....       LCALL   ?Subroutine20 & 0xFFFF
   1121            LCD_write_byte(0x00,LCD_DATA); 
   1122          
   1123            LCD_write_byte(0x07,LCD_DATA); 
   1124            LCD_write_byte(0x02,LCD_DATA); 
   \                     ??CrossCallReturnLabel_33:
   \   0000C9   12....       LCALL   ?Subroutine25 & 0xFFFF
   1125            LCD_write_byte(0x10,LCD_DATA); 
   \                     ??CrossCallReturnLabel_85:
   \   0000CC   7910         MOV     R1,#0x10
   \   0000CE   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1126            LCD_write_byte(0xe1,LCD_COMMAND); 
   \                     ??CrossCallReturnLabel_143:
   \   0000D1   79E1         MOV     R1,#-0x1f
   \   0000D3   12....       LCALL   ?Subroutine17 & 0xFFFF
   1127            LCD_write_byte(0x0f,LCD_DATA); 
   1128            LCD_write_byte(0x1b,LCD_DATA); 
   \                     ??CrossCallReturnLabel_29:
   \   0000D6   791B         MOV     R1,#0x1b
   \   0000D8   12....       LCALL   ?Subroutine17 & 0xFFFF
   1129            LCD_write_byte(0x0f,LCD_DATA); 
   1130            LCD_write_byte(0x17,LCD_DATA); 
   \                     ??CrossCallReturnLabel_30:
   \   0000DB   7917         MOV     R1,#0x17
   \   0000DD   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1131            LCD_write_byte(0x33,LCD_DATA); 
   \                     ??CrossCallReturnLabel_107:
   \   0000E0   7933         MOV     R1,#0x33
   \   0000E2   12....       LCALL   ?Subroutine22 & 0xFFFF
   1132            LCD_write_byte(0x2c,LCD_DATA); 
   1133            LCD_write_byte(0x29,LCD_DATA); 
   \                     ??CrossCallReturnLabel_38:
   \   0000E5   7929         MOV     R1,#0x29
   \   0000E7   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1134            LCD_write_byte(0x2e,LCD_DATA); 
   \                     ??CrossCallReturnLabel_108:
   \   0000EA   792E         MOV     R1,#0x2e
   \   0000EC   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1135            LCD_write_byte(0x30,LCD_DATA); 
   \                     ??CrossCallReturnLabel_109:
   \   0000EF   7930         MOV     R1,#0x30
   \   0000F1   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1136            LCD_write_byte(0x30,LCD_DATA); 
   \                     ??CrossCallReturnLabel_110:
   \   0000F4   7930         MOV     R1,#0x30
   \   0000F6   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1137            LCD_write_byte(0x39,LCD_DATA); 
   \                     ??CrossCallReturnLabel_111:
   \   0000F9   7939         MOV     R1,#0x39
   \   0000FB   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1138            LCD_write_byte(0x3f,LCD_DATA); 
   \                     ??CrossCallReturnLabel_112:
   \   0000FE   793F         MOV     R1,#0x3f
   \   000100   12....       LCALL   ?Subroutine20 & 0xFFFF
   1139            LCD_write_byte(0x00,LCD_DATA); 
   1140            LCD_write_byte(0x07,LCD_DATA); 
   1141            LCD_write_byte(0x03,LCD_DATA); 
   \                     ??CrossCallReturnLabel_34:
   \   000103   7903         MOV     R1,#0x3
   \   000105   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1142            LCD_write_byte(0x10,LCD_DATA);  
   \                     ??CrossCallReturnLabel_113:
   \   000108   7910         MOV     R1,#0x10
   \   00010A   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1143          
   1144            LCD_write_byte(0x2a,LCD_COMMAND);
   \                     ??CrossCallReturnLabel_144:
   \   00010D   792A         MOV     R1,#0x2a
   \   00010F   12....       LCALL   ?Subroutine18 & 0xFFFF
   1145            LCD_write_byte(0x00,LCD_DATA);
   1146            LCD_write_byte(0x00,LCD_DATA);
   1147            LCD_write_byte(0x00,LCD_DATA);
   1148            LCD_write_byte(0x7f,LCD_DATA);
   \                     ??CrossCallReturnLabel_31:
   \   000112   797F         MOV     R1,#0x7f
   \   000114   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1149            LCD_write_byte(0x2b,LCD_COMMAND);
   \                     ??CrossCallReturnLabel_145:
   \   000117   792B         MOV     R1,#0x2b
   \   000119   12....       LCALL   ?Subroutine18 & 0xFFFF
   1150            LCD_write_byte(0x00,LCD_DATA);
   1151            LCD_write_byte(0x00,LCD_DATA);
   1152            LCD_write_byte(0x00,LCD_DATA);
   1153            LCD_write_byte(0x9f,LCD_DATA);
   \                     ??CrossCallReturnLabel_32:
   \   00011C   799F         MOV     R1,#-0x61
   \   00011E   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1154          
   1155            LCD_write_byte(0xF0,LCD_COMMAND); //使能测试命令  
   \                     ??CrossCallReturnLabel_146:
   \   000121   79F0         MOV     R1,#-0x10
   \   000123   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1156            LCD_write_byte(0x01,LCD_DATA); 
   \                     ??CrossCallReturnLabel_114:
   \   000126   7901         MOV     R1,#0x1
   \   000128   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1157            LCD_write_byte(0xF6,LCD_COMMAND); //关闭ram省电模式 
   \                     ??CrossCallReturnLabel_147:
   \   00012B   79F6         MOV     R1,#-0xa
   \   00012D   12....       LCALL   ?Subroutine19 & 0xFFFF
   1158            LCD_write_byte(0x00,LCD_DATA); 
   1159          
   1160            LCD_write_byte(0x3A,LCD_COMMAND); //色深16bit 
   \                     ??CrossCallReturnLabel_133:
   \   000130   793A         MOV     R1,#0x3a
   \   000132   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1161            LCD_write_byte(0x05,LCD_DATA); 
   \                     ??CrossCallReturnLabel_115:
   \   000135   7905         MOV     R1,#0x5
   \   000137   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1162            
   1163            LCD_write_byte(0x29,LCD_COMMAND); //开显示  
   \                     ??CrossCallReturnLabel_148:
   \   00013A   7929         MOV     R1,#0x29
   \   00013C   12....       LCALL   ??LCD_write_byte?relay
   1164            LCD_clear(GREEN);                 //清屏 
   \   00013F                ; Setup parameters for call to function LCD_clear
   \   00013F   7AE0         MOV     R2,#-0x20
   \   000141   7B07         MOV     R3,#0x7
   \   000143   12....       LCALL   ??LCD_clear?relay
   1165          }
   \   000146   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000149                REQUIRE P0SEL
   \   000149                REQUIRE P0DIR
   \   000149                REQUIRE P1SEL
   \   000149                REQUIRE P1DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   7902         MOV     R1,#0x2
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   798A         MOV     R1,#-0x76
   \   000005   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   792C         MOV     R1,#0x2c
   \   000005   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   7907         MOV     R1,#0x7
   \   000005   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   7900         MOV     R1,#0x0
   \   000005                REQUIRE ??Subroutine50_0
   \   000005                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   7900         MOV     R1,#0x0
   \   000005   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   7900         MOV     R1,#0x0
   \   000005   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   790F         MOV     R1,#0xf
   \   000005   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   7901         MOV     R1,#0x1
   \   000005   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000008   792D         MOV     R1,#0x2d
   \   00000A   12....       LCALL   ??LCD_write_byte?relay
   \   00000D                ; Setup parameters for call to function LCD_write_byte
   \   00000D                ; Setup parameters for call to function LCD_write_byte
   \   00000D                ; Setup parameters for call to function LCD_write_byte
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Color>`:
   \   000000   1F00         DW 31

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Color_BK>`:
   \   000000   E007         DW 2016

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteScreen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteScreen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteStringValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteStringValueValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValueValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DelayMS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DelayMS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SPI_WriteData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SPI_WriteData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_WrCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WrCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_WrDat?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WrDat

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_WriteData_16Bit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WriteData_16Bit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_write_byte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_byte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Lcd_Reset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Lcd_Reset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_set_window?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_set_window

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DrawPixel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawPixel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DrawVerticalLine?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawVerticalLine

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DrawHorizonLine?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawHorizonLine

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DrawRect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawRect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DrawRectFill?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawRectFill

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_clear?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_clear

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_write_EN?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_EN

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_write_EN_string?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_EN_string

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_write_CN?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_CN

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_write_CN_string?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_CN_string

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ShowImage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ShowImage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_Init
   1166          #endif

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     DelayMS                         0      0      0
     DrawHorizonLine                 0      0     38
       -> LCD_set_window             0      0     36
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
     DrawPixel                       0      0     11
       -> LCD_write_byte             0      0     18
       -> LCD_write_byte             0      0     18
     DrawRect                        0      0     26
       -> DrawHorizonLine            0      0     40
       -> DrawHorizonLine            0      0     40
       -> DrawVerticalLine           0      0     40
       -> DrawVerticalLine           0      0     40
     DrawRectFill                    0      0     40
       -> LCD_set_window             0      0     40
       -> LCD_write_byte             0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
       -> SendByte                   0      0     32
     DrawVerticalLine                0      0     38
       -> LCD_set_window             0      0     36
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
     HalLcdInit                      2      0      0
       -> HalLcd_HW_Init             4      0      0
     HalLcdWriteScreen               0      0      9
       -> HalLcdWriteString          0      0     18
       -> HalLcdWriteString          0      0     18
     HalLcdWriteString               0      0     62
       -> DrawRectFill               0      0     36
       -> LCD_write_EN_string        0      0     24
     HalLcdWriteStringValue          0      0     47
       -> osal_strlen                0      0     86
       -> osal_memcpy                0      0     92
       -> _ltoa                      0      0     90
       -> HalLcdWriteString          0      0     86
     HalLcdWriteStringValueValue     0      0     51
       -> osal_strlen                0      0     88
       -> osal_memcpy                0      0     94
       -> _ltoa                      0      0     92
       -> osal_strlen                0      0     88
       -> _ltoa                      0      0     92
       -> HalLcdWriteString          0      0     88
     HalLcdWriteValue                0      0     44
       -> _ltoa                      0      0     86
       -> HalLcdWriteString          0      0     82
     HalLcd_HW_Init                  2      0      0
       -> Lcd_Reset                  4      0      0
       -> LCD_write_byte             4      0      0
       -> DelayMS                    4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_write_byte             4      0      0
       -> LCD_clear                  4      0      0
     LCD_WrCmd                       0      0     18
       -> SPI_WriteData              0      0     18
     LCD_WrDat                       0      0     18
       -> SPI_WriteData              0      0     18
     LCD_WriteData_16Bit             0      0     21
       -> SPI_WriteData              0      0     18
       -> SPI_WriteData              0      0     18
     LCD_clear                       0      0     16
       -> LCD_set_window             0      0     32
       -> LCD_write_byte             0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
     LCD_set_window                  0      0     34
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
       -> LCD_write_byte             0      0     28
     LCD_write_CN                    0      0     30
       -> LCD_set_window             0      0     32
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
       -> SendByte                   0      0     24
     LCD_write_CN_string             0      0     20
       -> LCD_write_CN               0      0     28
       -> DrawRectFill               0      0     40
     LCD_write_EN                    0      0     27
       -> LCD_set_window             0      0     28
       -> SendByte                   0      0     20
       -> SendByte                   0      0     20
       -> SendByte                   0      0     20
       -> SendByte                   0      0     20
     LCD_write_EN_string             0      0     25
       -> LCD_write_EN               0      0     26
     LCD_write_byte                  0      0     25
       -> LCD_WrCmd                  0      0     18
       -> LCD_WrDat                  0      0     18
     Lcd_Reset                       2      0      0
       -> DelayMS                    4      0      0
       -> DelayMS                    4      0      0
     SPI_WriteData                   0      0      9
     SendByte                        0      0     16
     ShowImage                       0      0     16
       -> LCD_set_window             0      0     32
       -> LCD_WriteData_16Bit        0      0     24


   Segment part sizes:

     Function/Label                      Bytes
     --------------                      -----
     _A_P0                                  1
     _A_P1                                  1
     P0SEL                                  1
     P1SEL                                  1
     P0DIR                                  1
     P1DIR                                  1
     Color                                  2
     Color_BK                               2
     CN14x14_Index                         69
     CN14x14                              952
     ASCII7x14                           1288
     HalLcdInit                             7
     ?Subroutine0                           7
     HalLcdWriteValue                      57
     ?Subroutine1                           3
     ??Subroutine42_0                       5
     ??Subroutine45_0                       6
     HalLcdWriteScreen                     25
     ??Subroutine43_0                       5
     HalLcdWriteStringValue               125
     ?Subroutine14                          4
     ??Subroutine44_0                       3
     HalLcdWriteStringValueValue          224
     ?Subroutine11                         19
     DelayMS                               34
     HalLcdWriteString                    101
     ??Subroutine46_0                       5
     SendByte                              27
     SPI_WriteData                         27
     ?Subroutine2                           3
     LCD_WrCmd                             10
     LCD_WrDat                             10
     LCD_WriteData_16Bit                   19
     LCD_write_byte                        19
     Lcd_Reset                             25
     LCD_set_window                       118
     ?Subroutine15                          7
     ?Subroutine32                          1
     ??Subroutine47_0                       4
     ?Subroutine24                          5
     ?Subroutine4                           5
     ?Subroutine9                           8
     ?Subroutine8                           8
     ??Subroutine49_0                       4
     ?Subroutine37                          6
     ??Subroutine50_0                       6
     DrawPixel                             26
     DrawVerticalLine                      61
     ?Subroutine21                         21
     ?Subroutine13                         10
     ?Subroutine12                         10
     ??Subroutine48_0                       6
     DrawHorizonLine                       59
     DrawRect                             155
     DrawRectFill                         152
     ?Subroutine28                          7
     ?Subroutine34                          7
     ?Subroutine36                          7
     ?Subroutine39                          4
     ?Subroutine41                         11
     ?Subroutine3                           2
     LCD_clear                             77
     ?Subroutine27                          7
     ?Subroutine33                          7
     ?Subroutine35                          7
     ?Subroutine38                          7
     ?Subroutine40                         14
     ?Subroutine26                          2
     LCD_write_EN                         114
     ?Subroutine6                          10
     ?Subroutine29                          6
     ?Subroutine5                          10
     LCD_write_EN_string                   76
     LCD_write_CN                          96
     ?Subroutine10                         32
     ?Subroutine7                          12
     LCD_write_CN_string                  220
     j                                      1
     ShowImage                            104
     HalLcd_HW_Init                       329
     ?Subroutine25                          2
     ?Subroutine23                          9
     ?Subroutine22                          4
     ?Subroutine31                          9
     ?Subroutine20                          9
     ?Subroutine19                          5
     ?Subroutine18                          9
     ?Subroutine30                          9
     ?Subroutine17                          9
     ?Subroutine16                         16
     ?<Initializer for Color>               2
     ?<Initializer for Color_BK>            2
     ??HalLcdInit?relay                     6
     ??HalLcdWriteValue?relay               6
     ??HalLcdWriteScreen?relay              6
     ??HalLcdWriteStringValue?relay         6
     ??HalLcdWriteStringValueValue?relay    6
     ??DelayMS?relay                        6
     ??HalLcdWriteString?relay              6
     ??SendByte?relay                       6
     ??SPI_WriteData?relay                  6
     ??LCD_WrCmd?relay                      6
     ??LCD_WrDat?relay                      6
     ??LCD_WriteData_16Bit?relay            6
     ??LCD_write_byte?relay                 6
     ??Lcd_Reset?relay                      6
     ??LCD_set_window?relay                 6
     ??DrawPixel?relay                      6
     ??DrawVerticalLine?relay               6
     ??DrawHorizonLine?relay                6
     ??DrawRect?relay                       6
     ??DrawRectFill?relay                   6
     ??LCD_clear?relay                      6
     ??LCD_write_EN?relay                   6
     ??LCD_write_EN_string?relay            6
     ??LCD_write_CN?relay                   6
     ??LCD_write_CN_string?relay            6
     ??ShowImage?relay                      6
     ??HalLcd_HW_Init?relay                 6

 
 2 691 bytes in segment BANKED_CODE
   162 bytes in segment BANK_RELAYS
 1 357 bytes in segment CODE_C
     6 bytes in segment SFR_AN
     4 bytes in segment XDATA_I
     4 bytes in segment XDATA_ID
   952 bytes in segment XDATA_ROM_C
     1 byte  in segment XDATA_Z
 
 4 214 bytes of CODE  memory
   952 bytes of CONST memory
     0 bytes of DATA  memory (+ 6 bytes shared)
     5 bytes of XDATA memory

Errors: none
Warnings: none
