###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         25/Nov/2019  20:56:05 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Com #
#                          ponents\services\saddr\saddr.c                     #
#    Command line       =  -f C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\ #
#                          Projects\zstack\Samples\GenericApp\CC2530DB\..\..\ #
#                          ..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ         #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\ #
#                          Projects\zstack\Samples\GenericApp\CC2530DB\..\..\ #
#                          ..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO       #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\6.ZS #
#                          tack-2.5.1a¹¤³ÌÄ£°å\Components\services\saddr\sadd #
#                          r.c -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D       #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\Coordinat #
#                          orEB\List\ -lA C:\Users\25814\Desktop\6.ZStack-2.5 #
#                          .1a¹¤³ÌÄ£°å\Projects\zstack\Samples\GenericApp\CC2 #
#                          530DB\CoordinatorEB\List\ --diag_suppress          #
#                          Pe001,Pa010 -o C:\Users\25814\Desktop\6.ZStack-2.5 #
#                          .1a¹¤³ÌÄ£°å\Projects\zstack\Samples\GenericApp\CC2 #
#                          530DB\CoordinatorEB\Obj\ -e --no_code_motion       #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\ #
#                          Projects\zstack\Samples\GenericApp\CC2530DB\ -I    #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\Source #
#                          \ -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£° #
#                          å\Projects\zstack\Samples\GenericApp\CC2530DB\..\. #
#                          .\..\ZMain\TI2530DB\ -I C:\Users\25814\Desktop\6.Z #
#                          Stack-2.5.1a¹¤³ÌÄ£°å\Projects\zstack\Samples\Gener #
#                          icApp\CC2530DB\..\..\..\..\..\Components\hal\inclu #
#                          de\ -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ #
#                          £°å\Projects\zstack\Samples\GenericApp\CC2530DB\.. #
#                          \..\..\..\..\Components\hal\target\CC2530EB\ -I    #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\mac\include\ -I                   #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\mac\high_level\ -I                #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\mac\low_level\srf04\ -I           #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\mac\low_level\srf04\single_chip\  #
#                          -I C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\ #
#                          Projects\zstack\Samples\GenericApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\mt\ -I                         #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\services\saddr\ -I                #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\services\sdata\ -I                #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\af\ -I                      #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\nwk\ -I                     #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sapi\ -I                    #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sys\ -I                     #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\zdo\ -I                     #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\zmac\ -I                          #
#                          C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\zmac\f8w\ -Ohz                    #
#    List file          =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\Coordinat #
#                          orEB\List\saddr.lst                                #
#    Object file        =  C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\Coordinat #
#                          orEB\Obj\saddr.r51                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\6.ZStack-2.5.1a¹¤³ÌÄ£°å\Components\services\saddr\saddr.c
      1          /****************************************************************************
      2            Filename:       saddr.c
      3            Revised:        $Date: 2009-12-10 08:32:15 -0800 (Thu, 10 Dec 2009) $
      4            Revision:       $Revision: 21311 $
      5          
      6            Description:    Zigbee and 802.15.4 device address utility functions.
      7          
      8          
      9            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ****************************************************************************/
     39          
     40          /****************************************************************************
     41           * INCLUDES
     42           */
     43          #include "hal_types.h"
     44          #include "OSAL.h"
     45          #include "saddr.h"
     46          
     47          /****************************************************************************
     48           * @fn          sAddrCmp
     49           *
     50           * @brief       Compare two device addresses.
     51           *
     52           * input parameters
     53           *
     54           * @param       pAddr1        - Pointer to first address.
     55           * @param       pAddr2        - Pointer to second address.
     56           *
     57           * output parameters
     58           *
     59           * @return      TRUE if addresses are equal, FALSE otherwise
     60           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     61          bool sAddrCmp(const sAddr_t *pAddr1, const sAddr_t *pAddr2)
   \                     sAddrCmp:
     62          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     63            if (pAddr1->addrMode != pAddr2->addrMode)
   \   000004   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000007   6004         JZ      ??sAddrCmp_0
     64            {
     65              return FALSE;
   \                     ??sAddrCmp_1:
   \   000009   7900         MOV     R1,#0x0
   \   00000B   8035         SJMP    ??sAddrCmp_2
     66            }
     67            else if (pAddr1->addrMode == SADDR_MODE_NONE)
   \                     ??sAddrCmp_0:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   60ED         JZ      ??sAddrCmp_1
     68            {
     69              return FALSE;
     70            }
     71            else if (pAddr1->addrMode == SADDR_MODE_SHORT)
   \   00001C   6402         XRL     A,#0x2
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   700E         JNZ     ??sAddrCmp_3
     72            {
     73              return (bool) (pAddr1->addr.shortAddr == pAddr2->addr.shortAddr);
   \   000024   12....       LCALL   ?Subroutine2 & 0xFFFF
     74            }
   \                     ??CrossCallReturnLabel_2:
   \   000027   7003         JNZ     ??sAddrCmp_4
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   69           XRL     A,R1
   \                     ??sAddrCmp_4:
   \   00002C   70DB         JNZ     ??sAddrCmp_1
   \   00002E   7901         MOV     R1,#0x1
   \   000030   8010         SJMP    ??sAddrCmp_2
     75            else if (pAddr1->addrMode == SADDR_MODE_EXT)
   \                     ??sAddrCmp_3:
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6403         XRL     A,#0x3
   \   00003D   70CA         JNZ     ??sAddrCmp_1
     76            {
     77              return (sAddrExtCmp(pAddr1->addr.extAddr, pAddr2->addr.extAddr));
   \   00003F                ; Setup parameters for call to function sAddrExtCmp
   \   00003F   12....       LCALL   ??sAddrExtCmp?relay
     78            }
   \                     ??sAddrCmp_2:
   \   000042                REQUIRE ?Subroutine0
   \   000042                ; // Fall through to label ?Subroutine0
     79            else
     80            {
     81              return FALSE;
     82            }
     83          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   68           XRL     A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   68           XRL     A,R0
   \   00001C   22           RET
     84          
     85          /****************************************************************************
     86           * @fn          sAddrIden
     87           *
     88           * @brief       Check if two device addresses are identical.
     89           *
     90           *              This routine is virtually the same as sAddrCmp, which is used
     91           *              to determine if two different addresses are the same. However,
     92           *              this routine can be used to determine if an address is the
     93           *              same as a previously stored address. The key difference is in
     94           *              the former case, if the address mode is "none", then the
     95           *              assumption is that the two addresses can not be the same. But
     96           *              in the latter case, the address mode itself is being compared.
     97           *              So two addresses can be identical even if the address mode is
     98           *              "none", as long as the address mode of both addresses being
     99           *              compared is "none".
    100           *
    101           * input parameters
    102           *
    103           * @param       pAddr1        - Pointer to first address.
    104           * @param       pAddr2        - Pointer to second address.
    105           *
    106           * output parameters
    107           *
    108           * @return      TRUE if addresses are identical, FALSE otherwise
    109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          bool sAddrIden(const sAddr_t *pAddr1, const sAddr_t *pAddr2)
   \                     sAddrIden:
    111          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    112            // first check if the address modes are the same
    113            if (pAddr1->addrMode != pAddr2->addrMode)
   \   000004   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000007   6004         JZ      ??sAddrIden_0
    114            {
    115              // no, so no point in comparing any further
    116              return FALSE;
   \                     ??sAddrIden_1:
   \   000009   7900         MOV     R1,#0x0
   \   00000B   8037         SJMP    ??sAddrIden_2
    117            }
    118            // the address modes are the same; check if there is no address
    119            else if (pAddr1->addrMode == SADDR_MODE_NONE)
   \                     ??sAddrIden_0:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7004         JNZ     ??sAddrIden_3
    120            {
    121              // no address, so no need to compare any further as both addresses have the
    122              // same address mode but no address, so they are identical
    123              return TRUE;
   \                     ??sAddrIden_4:
   \   00001C   7901         MOV     R1,#0x1
   \   00001E   8024         SJMP    ??sAddrIden_2
    124            }
    125            // there's an address; check if it is short
    126            else if (pAddr1->addrMode == SADDR_MODE_SHORT)
   \                     ??sAddrIden_3:
   \   000020   6402         XRL     A,#0x2
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   700C         JNZ     ??sAddrIden_5
    127            {
    128              // compare short addresses
    129              return (bool) (pAddr1->addr.shortAddr == pAddr2->addr.shortAddr);
   \   000028   12....       LCALL   ?Subroutine2 & 0xFFFF
    130            }
   \                     ??CrossCallReturnLabel_3:
   \   00002B   7003         JNZ     ??sAddrIden_6
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   69           XRL     A,R1
   \                     ??sAddrIden_6:
   \   000030   70D7         JNZ     ??sAddrIden_1
   \   000032   80E8         SJMP    ??sAddrIden_4
    131            // there's an address; check if it is extended
    132            else if (pAddr1->addrMode == SADDR_MODE_EXT)
   \                     ??sAddrIden_5:
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6403         XRL     A,#0x3
   \   00003F   70C8         JNZ     ??sAddrIden_1
    133            {
    134              // compare extended addresses
    135              return (sAddrExtCmp(pAddr1->addr.extAddr, pAddr2->addr.extAddr));
   \   000041                ; Setup parameters for call to function sAddrExtCmp
   \   000041   12....       LCALL   ??sAddrExtCmp?relay
    136            }
   \                     ??sAddrIden_2:
   \   000044   80..         SJMP    ?Subroutine0
    137            else // unknown error
    138            {
    139              return FALSE;
    140            }
    141          }
    142          
    143          /****************************************************************************
    144           * @fn          sAddrCpy
    145           *
    146           * @brief       Copy a device address.
    147           *
    148           * input parameters
    149           *
    150           * @param       pSrc         - Pointer to address to copy.
    151           *
    152           * output parameters
    153           *
    154           * @param       pDest        - Pointer to address of copy.
    155           *
    156           * @return      None.
    157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    158          void sAddrCpy(sAddr_t *pDest, const sAddr_t *pSrc)
   \                     sAddrCpy:
    159          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    160            pDest->addrMode = pSrc->addrMode;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F8           MOV     R0,A
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    161          
    162            if (pDest->addrMode == SADDR_MODE_EXT)
   \   00001F   7403         MOV     A,#0x3
   \   000021   68           XRL     A,R0
   \   000022   7005         JNZ     ??sAddrCpy_0
    163            {
    164              sAddrExtCpy(pDest->addr.extAddr, pSrc->addr.extAddr);
   \   000024                ; Setup parameters for call to function sAddrExtCpy
   \   000024   12....       LCALL   ??sAddrExtCpy?relay
   \   000027   8012         SJMP    ??sAddrCpy_1
    165            }
    166            else
    167            {
    168              pDest->addr.shortAddr = pSrc->addr.shortAddr;
   \                     ??sAddrCpy_0:
   \   000029   8C82         MOV     DPL,R4
   \   00002B   8D83         MOV     DPH,R5
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F9           MOV     R1,A
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   E8           MOV     A,R0
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   E9           MOV     A,R1
   \   00003A   F0           MOVX    @DPTR,A
    169            }
    170          }
   \                     ??sAddrCpy_1:
   \   00003B   02....       LJMP    ?Subroutine0 & 0xFFFF
    171          
    172          /****************************************************************************
    173           * @fn          sAddrExtCmp
    174           *
    175           * @brief       Compare two extended addresses.
    176           *
    177           * input parameters
    178           *
    179           * @param       pAddr1        - Pointer to first address.
    180           * @param       pAddr2        - Pointer to second address.
    181           *
    182           * output parameters
    183           *
    184           * @return      TRUE if addresses are equal, FALSE otherwise
    185           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    186          bool sAddrExtCmp(const uint8 * pAddr1, const uint8 * pAddr2)
   \                     sAddrExtCmp:
    187          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    188            uint8 i;
    189          
    190            for (i = SADDR_EXT_LEN; i != 0; i--)
   \   000005   75..08       MOV     ?V0 + 0,#0x8
    191            {
    192              if (*pAddr1++ != *pAddr2++)
   \                     ??sAddrExtCmp_0:
   \   000008   EA           MOV     A,R2
   \   000009   FE           MOV     R6,A
   \   00000A   EB           MOV     A,R3
   \   00000B   FF           MOV     R7,A
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   A3           INC     DPTR
   \   000011   AA82         MOV     R2,DPL
   \   000013   AB83         MOV     R3,DPH
   \   000015   EC           MOV     A,R4
   \   000016   F8           MOV     R0,A
   \   000017   ED           MOV     A,R5
   \   000018   F9           MOV     R1,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   A3           INC     DPTR
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FE           MOV     R6,A
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6E           XRL     A,R6
   \   00002E   6004         JZ      ??sAddrExtCmp_1
    193              {
    194                return FALSE;
   \   000030   7900         MOV     R1,#0x0
   \   000032   8008         SJMP    ??sAddrExtCmp_2
    195              }
    196            }
   \                     ??sAddrExtCmp_1:
   \   000034   15..         DEC     ?V0 + 0
   \   000036   E5..         MOV     A,?V0 + 0
   \   000038   70CE         JNZ     ??sAddrExtCmp_0
    197            return TRUE;
   \   00003A   7901         MOV     R1,#0x1
   \                     ??sAddrExtCmp_2:
   \   00003C   7F02         MOV     R7,#0x2
   \   00003E   02....       LJMP    ?BANKED_LEAVE_XDATA
    198          }
    199          
    200          /****************************************************************************
    201           * @fn          sAddrExtCpy
    202           *
    203           * @brief       Copy an extended address.
    204           *
    205           * input parameters
    206           *
    207           * @param       pSrc         - Pointer to address to copy.
    208           *
    209           * output parameters
    210           *
    211           * @param       pDest        - Pointer to address of copy.
    212           *
    213           * @return      pDest + SADDR_EXT_LEN.
    214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    215          void *sAddrExtCpy(uint8 * pDest, const uint8 * pSrc)
   \                     sAddrExtCpy:
    216          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    217            return osal_memcpy(pDest, pSrc, SADDR_EXT_LEN);
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   \   000009   75..00       MOV     ?V0 + 2,#0x0
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000011   7C08         MOV     R4,#0x8
   \   000013   7D00         MOV     R5,#0x0
   \   000015   12....       LCALL   ??osal_memcpy?relay
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001D   7F03         MOV     R7,#0x3
   \   00001F   02....       LJMP    ?BANKED_LEAVE_XDATA
    218          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sAddrCmp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrCmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sAddrIden?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrIden

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sAddrCpy?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrCpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sAddrExtCmp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrExtCmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sAddrExtCpy?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrExtCpy
    219          
    220          
    221          
    222          

   Maximum stack usage in bytes:

     Function         ISTACK PSTACK XSTACK
     --------         ------ ------ ------
     sAddrCmp             2      0      0
       -> sAddrExtCmp     4      0      0
     sAddrCpy             3      0      0
       -> sAddrExtCpy     4      0      0
     sAddrExtCmp          0      0     10
     sAddrExtCpy          0      0     14
       -> osal_memcpy     0      0     28
     sAddrIden            2      0      0
       -> sAddrExtCmp     4      0      0


   Segment part sizes:

     Function/Label      Bytes
     --------------      -----
     sAddrCmp              66
     ?Subroutine0           7
     ?Subroutine2          12
     ?Subroutine1          29
     sAddrIden             70
     sAddrCpy              62
     sAddrExtCmp           65
     sAddrExtCpy           34
     ??sAddrCmp?relay       6
     ??sAddrIden?relay      6
     ??sAddrCpy?relay       6
     ??sAddrExtCmp?relay    6
     ??sAddrExtCpy?relay    6

 
 345 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 
 375 bytes of CODE memory

Errors: none
Warnings: none
