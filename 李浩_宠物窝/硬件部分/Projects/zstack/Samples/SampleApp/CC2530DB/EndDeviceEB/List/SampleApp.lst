###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         30/Dec/2019  18:07:55 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\Source\Sample #
#                          App.c                                              #
#    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO     #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø∑÷\Projects\zstack\Samples\ #
#                          SampleApp\Source\SampleApp.c -D NWK_AUTO_POLL -D   #
#                          ZAPP_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC   #
#                          -D LCD_SUPPORTED=DEBUG -lC                         #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          eviceEB\List\ -lA C:\Users\25814\Desktop\2020±œ…Ë\ #
#                          ¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø∑÷\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB\List\ --diag_suppress    #
#                          Pe001,Pa010 -o C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫ #
#                          ∆_≥ËŒÔŒ—\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\EndDeviceEB\Obj\ -e --no_code_motion    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\  #
#                          -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\Source\ -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_ #
#                          ≥ËŒÔŒ—\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\ZMain\TI2530DB\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\hal\include\ -I              #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\hal\target\CC2530EB\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\include\ -I              #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\high_level\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\single_c #
#                          hip\ -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ #
#                          —\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mt\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\osal\include\ -I             #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\saddr\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\sdata\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\af\ -I                 #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\nwk\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sapi\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sec\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sys\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\zdo\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\ -I                     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\f8w\ -Ohz               #
#    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          eviceEB\List\SampleApp.lst                         #
#    Object file        =  C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          eviceEB\Obj\SampleApp.r51                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "hal_timer.h"
     75          #include "MT_UART.h"
     76          #include "MT_APP.h"
     77          #include "MT.h"
     78          
     79          #include <stdio.h>
     80          #include <string.h>
     81          
     82          //MY DEVICE
     83          #include "DHT11.h"
     84          #include "gy30.h"
     85          #include "HX711.h"
     86          /*********************************************************************
     87           * MACROS
     88           */
     89          
     90          
     91          #define GapValue 430
     92          #define MotorData P1  
     93          #define MAN P0_1
     94          #define A P1_1
     95          #define B P1_2
     96          #define C P1_3
     97          #define D P1_4
     98          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          long HX711_Buffer = 0;
   \                     HX711_Buffer:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          long Weight_Maopi = 0,Weight_Shiwu = 0;
   \                     Weight_Maopi:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     Weight_Shiwu:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          int current_round = 0;
   \                     current_round:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          byte make_up = 0;
   \                     make_up:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    103          uchar phasecw[4] ={0x10,0x08,0x04,0x02};//’˝◊™ µÁª˙µºÕ®œ‡–Ú D-C-B-A
   \                     phasecw:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for phasecw>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    104          uchar phaseccw[4]={0x02,0x04,0x08,0x10};//∑¥◊™ µÁª˙µºÕ®œ‡–Ú A-B-C-D
   \                     phaseccw:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for phaseccw>`
   \   000004                REQUIRE __INIT_XDATA_I
    105          //ªÒ»°√´∆§

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          void Get_Maopi()
   \                     Get_Maopi:
    107          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    108          	Weight_Maopi = HX711_Read();		
   \   000004                ; Setup parameters for call to function HX711_Read
   \   000004   12....       LCALL   ??HX711_Read?relay
   \   000007   90....       MOV     DPTR,#Weight_Maopi
   \   00000A   12....       LCALL   ?XSTORE_R2345
    109          }
   \   00000D   80..         SJMP    ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          long Get_Weight()
   \                     Get_Weight:
    111          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    112          	HX711_Buffer = HX711_Read();
   \   000005                ; Setup parameters for call to function HX711_Read
   \   000005   12....       LCALL   ??HX711_Read?relay
   \   000008   90....       MOV     DPTR,#HX711_Buffer
   \   00000B   12....       LCALL   ?XSTORE_R2345
    113          	Weight_Shiwu = HX711_Buffer;
    114          	Weight_Shiwu = Weight_Shiwu - Weight_Maopi;				//Ëé∑ÂèñÂÆûÁâ©ÁöÑADÈááÊ†∑Êï∞ÂÄº„Ä?	Weight_Shiwu = (long)((float)Weight_Shiwu/GapValue); 	
   \   00000E   90....       MOV     DPTR,#HX711_Buffer
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   12....       LCALL   ?L_MOV_X
   \   000016   90....       MOV     DPTR,#Weight_Maopi
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?L_SUB_X
   \   00001E   90....       MOV     DPTR,#Weight_Shiwu
   \   000021   78..         MOV     R0,#?V0 + 0
   \   000023   12....       LCALL   ?L_MOV_TO_X
    115          	return Weight_Shiwu;
   \   000026   90....       MOV     DPTR,#Weight_Shiwu
   \   000029   12....       LCALL   ?XLOAD_R2345
   \   00002C                REQUIRE ?Subroutine1
   \   00002C                ; // Fall through to label ?Subroutine1
    116          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          void MotorCW()
   \                     MotorCW:
    118          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    119           uchar i;
                        ^
Warning[Pe177]: variable "i" was declared but never referenced
    120           A=1;B=C=D=0;Delay_ms(4);
   \   000004   D291         SETB    0x90.1
   \   000006   C294         CLR     0x90.4
   \   000008   C293         CLR     0x90.3
   \   00000A   C292         CLR     0x90.2
   \   00000C                ; Setup parameters for call to function Delay_ms
   \   00000C   12....       LCALL   ?Subroutine3 & 0xFFFF
    121           B=1;A=C=D=0;Delay_ms(4);
    122           C=1;A=B=D=0;Delay_ms(4);
   \                     ??CrossCallReturnLabel_0:
   \   00000F   D293         SETB    0x90.3
   \   000011   C294         CLR     0x90.4
   \   000013   C292         CLR     0x90.2
   \   000015   C291         CLR     0x90.1
   \   000017                ; Setup parameters for call to function Delay_ms
   \   000017   7A04         MOV     R2,#0x4
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??Delay_ms?relay
    123           D=1;A=B=C=0;Delay_ms(4);
   \   00001E   D294         SETB    0x90.4
   \   000020   C293         CLR     0x90.3
   \   000022   C292         CLR     0x90.2
   \   000024   C291         CLR     0x90.1
   \   000026                ; Setup parameters for call to function Delay_ms
   \   000026                REQUIRE ?Subroutine0
   \   000026                REQUIRE _A_P1
   \   000026                ; // Fall through to label ?Subroutine0
    124          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7A04         MOV     R2,#0x4
   \   000002   7B00         MOV     R3,#0x0
   \   000004   12....       LCALL   ??Delay_ms?relay
   \   000007                REQUIRE ??Subroutine5_0
   \   000007                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7A04         MOV     R2,#0x4
   \   000002   7B00         MOV     R3,#0x0
   \   000004   12....       LCALL   ??Delay_ms?relay
   \   000007   D292         SETB    0x90.2
   \   000009   C294         CLR     0x90.4
   \   00000B   C293         CLR     0x90.3
   \   00000D   C291         CLR     0x90.1
   \   00000F                ; Setup parameters for call to function Delay_ms
   \   00000F                ; Setup parameters for call to function Delay_ms
   \   00000F   7A04         MOV     R2,#0x4
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??Delay_ms?relay
   \   000016   22           RET
    125          //ƒÊ ±’Î◊™∂Ø

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    126          void MotorCCW(void)
   \                     MotorCCW:
    127          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    128           uchar i;
                        ^
Warning[Pe177]: variable "i" was declared but never referenced
    129            D=1;A=B=C=0;Delay_ms(4);
   \   000004   D294         SETB    0x90.4
   \   000006   C293         CLR     0x90.3
   \   000008   C292         CLR     0x90.2
   \   00000A   C291         CLR     0x90.1
   \   00000C                ; Setup parameters for call to function Delay_ms
   \   00000C   7A04         MOV     R2,#0x4
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   12....       LCALL   ??Delay_ms?relay
    130            C=1;A=B=D=0;Delay_ms(4);
   \   000013   D293         SETB    0x90.3
   \   000015   C294         CLR     0x90.4
   \   000017   C292         CLR     0x90.2
   \   000019   C291         CLR     0x90.1
   \   00001B                ; Setup parameters for call to function Delay_ms
   \   00001B   12....       LCALL   ?Subroutine3 & 0xFFFF
    131            B=1;A=C=D=0;Delay_ms(4);
    132            A=1;B=C=D=0;Delay_ms(4);
   \                     ??CrossCallReturnLabel_1:
   \   00001E   D291         SETB    0x90.1
   \   000020   C294         CLR     0x90.4
   \   000022   C293         CLR     0x90.3
   \   000024   C292         CLR     0x90.2
   \   000026                ; Setup parameters for call to function Delay_ms
   \   000026   80..         SJMP    ?Subroutine0
   \   000028                REQUIRE _A_P1
    133            
    134           /*
    135           for(i=0;i<4;i++)
    136            {
    137             MotorData=phaseccw[i];
    138             Delay_ms(4);//◊™ÀŸµ˜Ω⁄
    139            }
    140           */
    141          }
    142          //Õ£÷π◊™∂Ø

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    143          void MotorStop(void)
   \                     MotorStop:
    144          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    145           MotorData=0x00;
   \   000000   759000       MOV     0x90,#0x0
    146          }
   \   000003   02....       LJMP    ?BRET
   \   000006                REQUIRE _A_P1
    147          /*********************************************************************
    148           * CONSTANTS
    149           */
    150          
    151          /*********************************************************************
    152           * TYPEDEFS
    153           */
    154          
    155          /*********************************************************************
    156           * GLOBAL VARIABLES
    157           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          uint8 AppTitle[] = "ALD2530 Example"; //”¶”√≥Ã–Ú√˚≥∆ 
   \                     AppTitle:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for AppTitle>`
   \   000010                REQUIRE __INIT_XDATA_I
    159           
    160          
    161           
    162          
    163          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    164          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    165          {
    166            SAMPLEAPP_PERIODIC_CLUSTERID,
    167            SAMPLEAPP_FLASH_CLUSTERID
    168          };
    169          

   \                                 In  segment XDATA_ROM_C, align 1
    170          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    171          {
    172            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    173            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    174            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    175            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    176            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    177            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    178            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    179            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    180            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    181          };
    182          
    183          // This is the Endpoint/Interface description.  It is defined here, but
    184          // filled-in in SampleApp_Init().  Another way to go would be to fill
    185          // in the structure here and make it a "const" (in code space).  The
    186          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    188          
    189          /*********************************************************************
    190           * EXTERNAL VARIABLES
    191           */
    192          
    193          /*********************************************************************
    194           * EXTERNAL FUNCTIONS
    195           */
    196          
    197          /*********************************************************************
    198           * LOCAL VARIABLES
    199           */
    200          
    201          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    203                                    // This variable will be received when
    204                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    206          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    208          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    210          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    211          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    212          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    213          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    216          
    217          /*********************************************************************
    218           * LOCAL FUNCTIONS
    219           */
    220          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    221          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    222          void SampleApp_SendPeriodicMessage( void );
    223          void SampleApp_SendFlashMessage( uint16 flashTime );
    224          void SampleApp_Send_P2P_Message(void);
    225          /*********************************************************************
    226           * NETWORK LAYER CALLBACKS
    227           */
    228          
    229          /*********************************************************************
    230           * PUBLIC FUNCTIONS
    231           */
    232           
    233          /*********************************************************************
    234           * @fn      SampleApp_Init
    235           *
    236           * @brief   Initialization function for the Generic App Task.
    237           *          This is called during initialization and should contain
    238           *          any application specific initialization (ie. hardware
    239           *          initialization/setup, table initialization, power up
    240           *          notificaiton ... ).
    241           *
    242           * @param   task_id - the ID assigned by OSAL.  This ID should be
    243           *                    used to send messages and set timers.
    244           *
    245           * @return  none
    246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    247          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    248          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    249            SampleApp_TaskID = task_id;   //osal∑÷≈‰µƒ»ŒŒÒIDÀÊ◊≈”√ªßÃÌº”»ŒŒÒµƒ‘ˆ∂‡∂¯∏ƒ±‰
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    250            SampleApp_NwkState = DEV_INIT;//…Ë±∏◊¥Ã¨…Ë∂®Œ™ZDO≤„÷–∂®“Âµƒ≥ı ºªØ◊¥Ã¨
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    251            SampleApp_TransID = 0;        //œ˚œ¢∑¢ÀÕID£®∂‡œ˚œ¢ ±”–À≥–Ú÷Æ∑÷£©
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    252          #ifndef ZDO_COORDINATOR
    253             LIGHT_INIT();//≥ı ºªØ  π‚’’ 
   \   000016   53F3E7       ANL     0xf3,#0xe7
   \   000019   43FD18       ORL     0xfd,#0x18
   \   00001C   D283         SETB    0x80.3
   \   00001E   D284         SETB    0x80.4
    254             P0DIR |=0x20;   //P05  SCK
   \   000020   43FD20       ORL     0xfd,#0x20
    255              
    256              P0SEL &=~0x41; //P06  DT  P01 ∫ÏÕ‚
   \   000023   53F3BE       ANL     0xf3,#0xbe
    257              P0DIR &=~0X41;
   \   000026   53FDBE       ANL     0xfd,#0xbe
    258              
    259              P2SEL &=~0X02;
   \   000029   53F5FD       ANL     0xf5,#0xfd
    260              P2DIR &=~0X02;//P21 ”ÍµŒ
   \   00002C   53FFFD       ANL     0xff,#0xfd
    261           
    262              
    263              P1DIR |=0xFE;//LED P15 16 17 µÁª˙
   \   00002F   E5FE         MOV     A,0xfe
   \   000031   A2E0         MOV     C,0xE0 /* A   */.0
   \   000033   E4           CLR     A
   \   000034   33           RLC     A
   \   000035   44FE         ORL     A,#0xfe
   \   000037   F5FE         MOV     0xfe,A
    264              //P1DIR |=0X1E;//µÁª˙
    265              
    266              //HalTimerConfig(HAL_TIMER_1,HAL_TIMER_MODE_NORMAL,HAL_TIMER_CHANNEL_SINGLE,HAL_TIMER_CH_MODE_OVERFLOW,1,MotorCW);
    267              
    268              Get_Maopi();  
   \   000039                ; Setup parameters for call to function HX711_Read
   \   000039   12....       LCALL   ??HX711_Read?relay
   \   00003C   90....       MOV     DPTR,#Weight_Maopi
   \   00003F   12....       LCALL   ?XSTORE_R2345
    269          
    270          #endif
    271            //¥Æø⁄≈‰÷√
    272            MT_UartInit();
   \   000042                ; Setup parameters for call to function MT_UartInit
   \   000042   12....       LCALL   ??MT_UartInit?relay
    273            MT_UartRegisterTaskID(task_id); 
   \   000045                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000045   EE           MOV     A,R6
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   ??MT_UartRegisterTaskID?relay
    274           
    275            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n")); 
   \   00004A                ; Setup parameters for call to function HalUARTWrite
   \   00004A   7C0D         MOV     R4,#0xd
   \   00004C   7D00         MOV     R5,#0x0
   \   00004E   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   000050   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   000052   7900         MOV     R1,#0x0
   \   000054   12....       LCALL   ??HalUARTWrite?relay
    276          
    277          
    278            //HalUARTWrite(0,"get", sizeof("get")); 
    279            // Device hardware initialization can be added here or in main() (Zmain.c).
    280            // If the hardware is application specific - add it here.
    281            // If the hardware is other parts of the device add it in main().
    282          
    283          #if defined ( BUILD_ALL_DEVICES )
    284            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    285            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    286            // together - if they are - we will start up a coordinator. Otherwise,
    287            // the device will start as a router.
    288            if ( readCoordinatorJumper() )
    289              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    290            else
    291              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    292          #endif // BUILD_ALL_DEVICES
    293          
    294          //∏√∂Œµƒ“‚Àº «£¨»Áπ˚…Ë÷√¡ÀHOLD_AUTO_START∫Í∂®“Â£¨Ω´ª·‘⁄∆Ù∂Ø–æ∆¨µƒ ±∫Úª·‘›Õ£∆Ù∂Ø
    295          //¡˜≥Ã£¨÷ª”–Õ‚≤ø¥•∑¢“‘∫Û≤≈ª·∆Ù∂Ø–æ∆¨°£∆‰ µæÕ «–Ë“™“ª∏ˆ∞¥≈•¥•∑¢À¸µƒ∆Ù∂Ø¡˜≥Ã°£  
    296          #if defined ( HOLD_AUTO_START )
    297            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    298            //  from starting the device and wait for the application to
    299            //  start the device.
    300            ZDOInitDevice(0);
    301          #endif
    302          
    303            // Setup for the periodic message's destination address …Ë÷√∑¢ÀÕ ˝æ›µƒ∑Ω Ω∫Õƒøµƒµÿ÷∑—∞÷∑ƒ£ Ω
    304            // Broadcast to everyone ∑¢ÀÕƒ£ Ω:π„≤•∑¢ÀÕ
    305            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//π„≤•
   \   000057   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00005A   740F         MOV     A,#0xf
   \   00005C   F0           MOVX    @DPTR,A
    306            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   00005D   A3           INC     DPTR
   \   00005E   7414         MOV     A,#0x14
   \   000060   F0           MOVX    @DPTR,A
    307            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//÷∏∂®ƒøµƒÕ¯¬Áµÿ÷∑Œ™π„≤•µÿ÷∑
   \   000061   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000064   74FF         MOV     A,#-0x1
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   F0           MOVX    @DPTR,A
    308          
    309            // Setup for the flash command's destination address - Group 1 ◊È≤•∑¢ÀÕ
    310            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //◊È—∞÷∑
   \   000069   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00006C   7401         MOV     A,#0x1
   \   00006E   F0           MOVX    @DPTR,A
    311            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   00006F   A3           INC     DPTR
   \   000070   7414         MOV     A,#0x14
   \   000072   F0           MOVX    @DPTR,A
    312            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//◊È∫≈0x0001
   \   000073   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000076   7401         MOV     A,#0x1
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   E4           CLR     A
   \   00007B   F0           MOVX    @DPTR,A
    313          
    314            // Fill out the endpoint description. ∂®“Â±æ…Ë±∏”√¿¥Õ®–≈µƒAPS≤„∂Àµ„√Ë ˆ∑˚
    315            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   00007C   90....       MOV     DPTR,#SampleApp_epDesc
   \   00007F   7414         MOV     A,#0x14
   \   000081   F0           MOVX    @DPTR,A
    316            SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp √Ë ˆ∑˚µƒ»ŒŒÒID
   \   000082   A3           INC     DPTR
   \   000083   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000089   F0           MOVX    @DPTR,A
    317            SampleApp_epDesc.simpleDesc
    318                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleAppºÚµ•√Ë ˆ∑˚
   \   00008A   A3           INC     DPTR
   \   00008B   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000091   F0           MOVX    @DPTR,A
    319            SampleApp_epDesc.latencyReq = noLatencyReqs;    //—” ±≤ﬂ¬‘
   \   000092   A3           INC     DPTR
   \   000093   E4           CLR     A
   \   000094   F0           MOVX    @DPTR,A
    320          
    321            // Register the endpoint description with the AF
    322            afRegister( &SampleApp_epDesc );    //œÚAF≤„µ«º«√Ë ˆ∑˚
   \   000095                ; Setup parameters for call to function afRegister
   \   000095   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000097   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000099   12....       LCALL   ??afRegister?relay
    323          
    324            // Register for all key events - This app will handle all key events
    325            RegisterForKeys( SampleApp_TaskID ); // µ«º«À˘”–µƒ∞¥º¸ ¬º˛
   \   00009C                ; Setup parameters for call to function RegisterForKeys
   \   00009C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F9           MOV     R1,A
   \   0000A1   12....       LCALL   ??RegisterForKeys?relay
    326          
    327            // By default, all devices start out in Group 1
    328            SampleApp_Group.ID = 0x0001;//◊È∫≈
   \   0000A4   90....       MOV     DPTR,#SampleApp_Group
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E4           CLR     A
   \   0000AC   F0           MOVX    @DPTR,A
    329            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//…Ë∂®◊È√˚
   \   0000AD                ; Setup parameters for call to function osal_memcpy
   \   0000AD   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000B0   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000B3   F5..         MOV     ?V0 + 2,A
   \   0000B5   78..         MOV     R0,#?V0 + 0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BA   7C07         MOV     R4,#0x7
   \   0000BC   7D00         MOV     R5,#0x0
   \   0000BE   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000C0   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000C2   12....       LCALL   ??osal_memcpy?relay
   \   0000C5   7403         MOV     A,#0x3
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
    330            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//∞—∏√◊Èµ«º«ÃÌº”µΩAPS÷–
   \   0000CA                ; Setup parameters for call to function aps_AddGroup
   \   0000CA   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000CC   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000CE   7914         MOV     R1,#0x14
   \   0000D0   12....       LCALL   ??aps_AddGroup?relay
    331          
    332          #if defined ( LCD_SUPPORTED )
    333            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //»Áπ˚÷ß≥÷LCD£¨œ‘ æÃ· æ–≈œ¢
   \   0000D3                ; Setup parameters for call to function HalLcdWriteString
   \   0000D3   7900         MOV     R1,#0x0
   \   0000D5   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000D7   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000D9   12....       LCALL   ??HalLcdWriteString?relay
    334          #endif
    335          }
   \   0000DC                REQUIRE ?Subroutine2
   \   0000DC                REQUIRE P0SEL
   \   0000DC                REQUIRE P0DIR
   \   0000DC                REQUIRE _A_P0
   \   0000DC                REQUIRE P2SEL
   \   0000DC                REQUIRE P2DIR
   \   0000DC                REQUIRE P1DIR
   \   0000DC                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    336          
    337          /*********************************************************************
    338           * @fn      SampleApp_ProcessEvent
    339           *
    340           * @brief   Generic Application Task event processor.  This function
    341           *          is called to process all events for the task.  Events
    342           *          include timers, messages and any other user defined events.
    343           *
    344           * @param   task_id  - The OSAL assigned task ID.
    345           * @param   events - events to process.  This is a bit map and can
    346           *                   contain more than one event.
    347           *
    348           * @return  none
    349           */
    350          //”√ªß”¶”√»ŒŒÒµƒ ¬º˛¥¶¿Ì∫Ø ˝

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    351          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    352          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    353            afIncomingMSGPacket_t *MSGpkt;
    354            (void)task_id;  // Intentionally unreferenced parameter
    355          
    356            if ( events & SYS_EVENT_MSG ) //Ω” ’œµÕ≥œ˚œ¢‘ŸΩ¯––≈–∂œ
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    357            {
    358              //Ω” ’ Ù”⁄±æ”¶”√»ŒŒÒSampleAppµƒœ˚œ¢£¨“‘SampleApp_TaskID±Íº«
    359              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    360              while ( MSGpkt )
    361              {
    362                switch ( MSGpkt->hdr.event )
    363                {
    364                  // Received when a key is pressed
    365                  case KEY_CHANGE://∞¥º¸ ¬º˛
    366                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    367                    break;
    368          
    369                  // Received when a messages is received (OTA) for this endpoint
    370                  case AF_INCOMING_MSG_CMD://Ω” ’ ˝æ› ¬º˛,µ˜”√∫Ø ˝AF_DataRequest()Ω” ’ ˝æ›
    371                    SampleApp_MessageMSGCB( MSGpkt );//µ˜”√ªÿµ˜∫Ø ˝∂‘ ’µΩµƒ ˝æ›Ω¯––¥¶¿Ì
    372                    break;
    373          
    374                  // Received whenever the device changes state in the network
    375                  case ZDO_STATE_CHANGE:
    376                    //÷ª“™Õ¯¬Á◊¥Ã¨∑¢…˙∏ƒ±‰£¨æÕÕ®π˝ZDO_STATE_CHANGE ¬º˛Õ®÷™À˘”–µƒ»ŒŒÒ°£
    377                    //Õ¨ ±ÕÍ≥…∂‘–≠µ˜∆˜£¨¬∑”…∆˜£¨÷’∂Àµƒ…Ë÷√
    378                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    379                    //if ( (SampleApp_NwkState == DEV_ZB_COORD)// µ—È÷––≠µ˜∆˜÷ªΩ” ’ ˝æ›À˘“‘»°œ˚∑¢ÀÕ ¬º˛
    380                    if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    381                    {
    382                      // Start sending the periodic message in a regular interval.
    383                      //’‚∏ˆ∂® ±∆˜÷ª «Œ™∑¢ÀÕ÷‹∆⁄–≈œ¢ø™∆Ùµƒ£¨…Ë±∏∆Ù∂Ø≥ı ºªØ∫Û¥”’‚¿Ôø™ º
    384                      //¥•∑¢µ⁄“ª∏ˆ÷‹∆⁄–≈œ¢µƒ∑¢ÀÕ£¨»ª∫Û÷‹∂¯∏¥ ºœ¬»•
    385                      osal_start_timerEx( SampleApp_TaskID,
    386                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    387                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CF4         MOV     R4,#-0xc
   \   000020   7D01         MOV     R5,#0x1
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    388                   /*
    389                      osal_start_timerEx( 0X1,
    390                                        PUMP_EVT,
    391                                        SAMPLEAPP_PUMP_TIMEOUT );
    392                     */
    393                    }
    394                    else
    395                    {
    396                        
    397                    }
    398                    break;
    399          
    400                  default:
    401                    break;
    402                }
    403          
    404                // Release the memory  ¬º˛¥¶¿ÌÕÍ¡À£¨ Õ∑≈œ˚œ¢’º”√µƒƒ⁄¥Ê
    405                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    406             
    407                // Next - if one is available ÷∏’Î÷∏œÚœ¬“ª∏ˆ∑≈‘⁄ª∫≥Â«¯µƒ¥˝¥¶¿Ìµƒ ¬º˛£¨
    408                //∑µªÿwhile ( MSGpkt )÷ÿ–¬¥¶¿Ì ¬º˛£¨÷±µΩª∫≥Â«¯√ª”–µ»¥˝¥¶¿Ì ¬º˛Œ™÷π
    409                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    410              }
    411          
    412              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    413              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    414            }
    415          
    416            // Send a message out - This event is generated by a timer
    417            //  (setup in SampleApp_Init()).
    418            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    419            {
    420              // Send the periodic message ¥¶¿Ì÷‹∆⁄–‘ ¬º˛£¨
    421              //¿˚”√SampleApp_SendPeriodicMessage()¥¶¿ÌÕÍµ±«∞µƒ÷‹∆⁄–‘ ¬º˛£¨»ª∫Û∆Ù∂Ø∂® ±∆˜
    422              //ø™∆Ùœ¬“ª∏ˆ÷‹∆⁄–‘ ¬«È£¨’‚—˘“ª÷÷—≠ª∑œ¬»•£¨“≤º¥ «…œ√ÊÀµµƒ÷‹∆⁄–‘ ¬º˛¡À£¨
    423              //ø…“‘◊ˆŒ™¥´∏–∆˜∂® ±≤…ºØ°¢…œ¥´»ŒŒÒ
    424              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    425              
    426              // Setup to send message again in normal period (+ a little jitter)
    427              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    428                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24F4         ADD     A,#-0xc
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3401         ADDC    A,#0x1
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    429          
    430              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    431              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    432            }
    433            /*
    434            else if(events & PUMP_EVT){
    435              MotorCW();
    436              
    437              osal_start_timerEx( 0X1, PUMP_EVT,
    438                  (SAMPLEAPP_PUMP_TIMEOUT + (osal_rand() & 0x00FF)) );
    439              
    440               return (events ^ PUMP_EVT);
    441            }
    442            */
    443            // Discard unknown events
    444            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   02....       LJMP    ?Subroutine1 & 0xFFFF
    445          }
    446          
    447          /*********************************************************************
    448           * Event Generation Functions
    449           */
    450          /*********************************************************************
    451           * @fn      SampleApp_HandleKeys
    452           *
    453           * @brief   Handles all key events for this device.
    454           *
    455           * @param   shift - true if in shift/alt.
    456           * @param   keys - bit field for key events. Valid entries:
    457           *                 HAL_KEY_SW_2
    458           *                 HAL_KEY_SW_1
    459           *
    460           * @return  none
    461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          void SampleApp_HandleKeys( uint8 shift, uint8 keys )  
   \                     SampleApp_HandleKeys:
    463          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    464            (void)shift;  // Intentionally unreferenced parameter
    465            
    466            if ( keys & HAL_KEY_SW_1 )
   \   000006   A2E0         MOV     C,0xE0 /* A   */.0
   \   000008   5007         JNC     ??SampleApp_HandleKeys_0
    467            {
    468              /* This key sends the Flash Command is sent to Group 1.
    469               * This device will not receive the Flash Command from this
    470               * device (even if it belongs to group 1).
    471               */
    472             SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000A                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000A   7AE8         MOV     R2,#-0x18
   \   00000C   7B03         MOV     R3,#0x3
   \   00000E   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    473           
    474              
    475            
    476            }
    477          
    478            if ( keys & HAL_KEY_SW_6 )
    479            {
    480              /* The Flashr Command is sent to Group 1.
    481               * This key toggles this device in and out of group 1.
    482               * If this device doesn't belong to group 1, this application
    483               * will not receive the Flash command sent to group 1.
    484               */
    485            
    486             /*
    487              aps_Group_t *grp;
    488              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    489              if ( grp )
    490              {
    491                // Remove from the group
    492                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    493              }
    494              else
    495              {
    496                // Add to the flash group
    497                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    498              }
    499             */
    500            }
    501          }
   \                     ??SampleApp_HandleKeys_0:
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
    502          
    503          /*********************************************************************
    504           * LOCAL FUNCTIONS
    505           */
    506          
    507          /*********************************************************************
    508           * @fn      SampleApp_MessageMSGCB
    509           *
    510           * @brief   Data message processor callback.  This function processes
    511           *          any incoming data - probably from other devices.  So, based
    512           *          on cluster ID, perform the intended action.
    513           *
    514           * @param   none
    515           *
    516           * @return  none
    517           */
    518          //Ω” ’ ˝æ›£¨≤Œ ˝Œ™Ω” ’µΩµƒ ˝æ›

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    519          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    520          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    521            uint16 flashTime;
    522            unsigned short len = 6+5+6+1;
    523            byte buf[6+5+6+1]; 
    524            
    525            switch ( pkt->clusterId ) //≈–∂œ¥ÿID
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 1,A
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000022   0100         DW        1
   \   000024   01           DB        1
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000027   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000029   ....         DW        ??SampleApp_MessageMSGCB_2
    526            {
    527              case SAMPLEAPP_PERIODIC_CLUSTERID: // ’µΩπ„≤• ˝æ›
    528                osal_memset(buf, 0 , len);
   \                     ??SampleApp_MessageMSGCB_1:
   \   00002B                ; Setup parameters for call to function osal_memset
   \   00002B   7C12         MOV     R4,#0x12
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7900         MOV     R1,#0x0
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   12....       LCALL   ??osal_memset?relay
    529                osal_memcpy(buf, pkt->cmd.Data, len); //∏¥÷∆ ˝æ›µΩª∫≥Â«¯÷–
   \   00003E                ; Setup parameters for call to function osal_memcpy
   \   00003E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000041   F5..         MOV     ?V0 + 0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0 + 1,A
   \   000047   75..00       MOV     ?V0 + 2,#0x0
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004F   7C12         MOV     R4,#0x12
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   AA82         MOV     R2,DPL
   \   00005A   AB83         MOV     R3,DPH
   \   00005C   12....       LCALL   ??osal_memcpy?relay
   \   00005F   7403         MOV     A,#0x3
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
    530                HalUARTWrite(0,buf, len);
   \   000064                ; Setup parameters for call to function HalUARTWrite
   \   000064   7C12         MOV     R4,#0x12
   \   000066   7D00         MOV     R5,#0x0
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   AA82         MOV     R2,DPL
   \   000070   AB83         MOV     R3,DPH
   \   000072   7900         MOV     R1,#0x0
   \   000074   12....       LCALL   ??HalUARTWrite?relay
    531             
    532                break;
   \   000077   8033         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   000079   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00007C   F8           MOV     R0,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080                ; Setup parameters for call to function HalLedBlink
   \   000080   8882         MOV     DPL,R0
   \   000082   8983         MOV     DPH,R1
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   FA           MOV     R2,A
   \   000087   8882         MOV     DPL,R0
   \   000089   8983         MOV     DPH,R1
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   EA           MOV     A,R2
   \   000090   2400         ADD     A,#0x0
   \   000092   F5..         MOV     ?V0 + 0,A
   \   000094   E4           CLR     A
   \   000095   39           ADDC    A,R1
   \   000096   F5..         MOV     ?V0 + 1,A
   \   000098   7402         MOV     A,#0x2
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?US_SHR
   \   00009F   AC..         MOV     R4,?V0 + 0
   \   0000A1   AD..         MOV     R5,?V0 + 1
   \   0000A3   7B32         MOV     R3,#0x32
   \   0000A5   7A04         MOV     R2,#0x4
   \   0000A7   7908         MOV     R1,#0x8
    533          
    534              case SAMPLEAPP_FLASH_CLUSTERID: // ’µΩ◊È≤• ˝æ›  
    535                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    536                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   0000A9   12....       LCALL   ??HalLedBlink?relay
    537                break;
    538            case SAMPLEAPP_P2P_CLUSTERID:
    539           
    540              break;
    541            }
    542          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000AC   7412         MOV     A,#0x12
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B1   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    543          
    544          /*********************************************************************
    545           * @fn      SampleApp_SendPeriodicMessage
    546           *
    547           * @brief   Send the periodic message.
    548           *
    549           * @param   none
    550           *
    551           * @return  none
    552           */
    553          //∑÷Œˆ∑¢ÀÕ÷‹∆⁄–≈œ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    555          { 
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    556           
    557            //ªÒµ√µƒ ˝æ›Õ®π˝¥Æø⁄ ‰≥ˆµΩµÁƒ‘œ‘ æ  
    558            char str[6+5+6+1]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   C082         PUSH    DPL
   \   00000F   7406         MOV     A,#0x6
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   D082         POP     DPL
   \   00001D   7412         MOV     A,#0x12
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    559            //ªÒ»°Œ¬ ™∂»
    560            unsigned char temp_humi[6]={0};
   \   000022   90....       MOV     DPTR,#`?<Constant {0}>_1`
   \   000025   C082         PUSH    DPL
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AC82         MOV     R4,DPL
   \   00002F   AD83         MOV     R5,DPH
   \   000031   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   000034   D082         POP     DPL
   \   000036   7406         MOV     A,#0x6
   \   000038   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    561            strcpy(temp_humi,DHT11());
                          ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

    strcpy(temp_humi,DHT11());
                     ^
"C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",561  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   00003B                ; Setup parameters for call to function strcpy
   \   00003B                ; Setup parameters for call to function DHT11
   \   00003B   12....       LCALL   ??DHT11?relay
   \   00003E   EA           MOV     A,R2
   \   00003F   FC           MOV     R4,A
   \   000040   EB           MOV     A,R3
   \   000041   FD           MOV     R5,A
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   12....       LCALL   ??strcpy?relay
    562            unsigned int lt = Light();//ªÒ»°π‚«ø
   \   00004F                ; Setup parameters for call to function Light
   \   00004F   12....       LCALL   ??Light?relay
   \   000052   8A..         MOV     ?V0 + 2,R2
   \   000054   8B..         MOV     ?V0 + 3,R3
    563            //ªÒ»°”ÍµŒ
    564            /*
    565            if(”–ÀÆ)
    566              º”»»C
    567            if(”–»À)
    568              º”»»
    569            if(Œ¬∂»π˝µÕ)
    570              º”»»
    571            if(—π¡¶)
    572              µÁª˙
    573            */
    574            byte man = MAN==1?1:0;
   \   000056   A281         MOV     C,0x80.1
   \   000058   E4           CLR     A
   \   000059   33           RLC     A
   \   00005A   FF           MOV     R7,A
    575            float w =0;
    576           
    577            w = HX711_Read();
   \   00005B                ; Setup parameters for call to function HX711_Read
   \   00005B   12....       LCALL   ??HX711_Read?relay
   \   00005E   8A..         MOV     ?V0 + 4,R2
   \   000060   8B..         MOV     ?V0 + 5,R3
   \   000062   8C..         MOV     ?V0 + 6,R4
   \   000064   8D..         MOV     ?V0 + 7,R5
    578            float true_weight = w-Weight_Maopi;
   \   000066   78..         MOV     R0,#?V0 + 4
   \   000068   12....       LCALL   ?UL_TO_FLT
   \   00006B   90....       MOV     DPTR,#Weight_Maopi
   \   00006E   78..         MOV     R0,#?V0 + 8
   \   000070   12....       LCALL   ?L_MOV_X
   \   000073   78..         MOV     R0,#?V0 + 8
   \   000075   12....       LCALL   ?L_TO_FLT
   \   000078   78..         MOV     R0,#?V0 + 4
   \   00007A   79..         MOV     R1,#?V0 + 8
   \   00007C   12....       LCALL   ?FLT_SUB
    579            if(true_weight<0)
   \   00007F   90....       MOV     DPTR,#__Constant_0
   \   000082   78..         MOV     R0,#?V0 + 8
   \   000084   12....       LCALL   ?L_MOV_X
   \   000087   78..         MOV     R0,#?V0 + 4
   \   000089   79..         MOV     R1,#?V0 + 8
   \   00008B   12....       LCALL   ?FLT_LT
   \   00008E   5008         JNC     ??SampleApp_SendPeriodicMessage_0
    580              true_weight=0;
   \   000090   90....       MOV     DPTR,#__Constant_0
   \   000093   78..         MOV     R0,#?V0 + 4
   \   000095   12....       LCALL   ?L_MOV_X
    581            uint8 rain = 0;
    582            rain = P2_1==1?0:1;
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   000098   A2A1         MOV     C,0xa0.1
   \   00009A   4004         JC      ??SampleApp_SendPeriodicMessage_1
   \   00009C   D2F0         SETB    B.0
   \   00009E   8002         SJMP    ??SampleApp_SendPeriodicMessage_2
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   0000A0   C2F0         CLR     B.0
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   0000A2   A2F0         MOV     C,B.0
   \   0000A4   E4           CLR     A
   \   0000A5   33           RLC     A
   \   0000A6   FE           MOV     R6,A
    583            sprintf(str,"%4.3f%5d%4s%d%d",(float)(true_weight)/1000,lt,temp_humi,man,rain);
   \   0000A7                ; Setup parameters for call to function sprintf
   \   0000A7   8E..         MOV     ?V0 + 0,R6
   \   0000A9   75..00       MOV     ?V0 + 1,#0x0
   \   0000AC   78..         MOV     R0,#?V0 + 0
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   8F..         MOV     ?V0 + 0,R7
   \   0000B3   78..         MOV     R0,#?V0 + 0
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   7404         MOV     A,#0x4
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   8582..       MOV     ?V0 + 0,DPL
   \   0000C0   8583..       MOV     ?V0 + 1,DPH
   \   0000C3   78..         MOV     R0,#?V0 + 0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C8   78..         MOV     R0,#?V0 + 2
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CD   85....       MOV     ?V0 + 0,?V0 + 4
   \   0000D0   85....       MOV     ?V0 + 1,?V0 + 5
   \   0000D3   85....       MOV     ?V0 + 2,?V0 + 6
   \   0000D6   85....       MOV     ?V0 + 3,?V0 + 7
   \   0000D9   90....       MOV     DPTR,#__Constant_447a0000
   \   0000DC   78..         MOV     R0,#?V0 + 8
   \   0000DE   12....       LCALL   ?L_MOV_X
   \   0000E1   78..         MOV     R0,#?V0 + 0
   \   0000E3   79..         MOV     R1,#?V0 + 8
   \   0000E5   12....       LCALL   ?FLT_DIV
   \   0000E8   78..         MOV     R0,#?V0 + 0
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000ED   7C..         MOV     R4,#`?<Constant "%4.3f%5d%4s%d%d">` & 0xff
   \   0000EF   7D..         MOV     R5,#(`?<Constant "%4.3f%5d%4s%d%d">` >> 8) & 0xff
   \   0000F1   7412         MOV     A,#0x12
   \   0000F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F6   AA82         MOV     R2,DPL
   \   0000F8   AB83         MOV     R3,DPH
   \   0000FA   12....       LCALL   ??sprintf?relay
   \   0000FD   740C         MOV     A,#0xc
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
    584            
    585          
    586            HalUARTWrite(0,str,sizeof(str));
                                  ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000102                ; Setup parameters for call to function HalUARTWrite
   \   000102   7C12         MOV     R4,#0x12
   \   000104   7D00         MOV     R5,#0x0
   \   000106   7406         MOV     A,#0x6
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   AA82         MOV     R2,DPL
   \   00010D   AB83         MOV     R3,DPH
   \   00010F   7900         MOV     R1,#0x0
   \   000111   12....       LCALL   ??HalUARTWrite?relay
    587             // µ˜”√AF_DataRequestΩ´ ˝æ›Œﬁœﬂπ„≤•≥ˆ»•
    588            if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    589                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    590                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    591                                 sizeof(str),       //∑¢ÀÕ ˝æ›≥§∂»
    592                                 (uchar*)str,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    593                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    594                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    595                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
   \   000114                ; Setup parameters for call to function AF_DataRequest
   \   000114   75..1E       MOV     ?V0 + 0,#0x1e
   \   000117   78..         MOV     R0,#?V0 + 0
   \   000119   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00011F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000122   78..         MOV     R0,#?V0 + 0
   \   000124   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000127   7409         MOV     A,#0x9
   \   000129   12....       LCALL   ?XSTACK_DISP0_8
   \   00012C   8582..       MOV     ?V0 + 0,DPL
   \   00012F   8583..       MOV     ?V0 + 1,DPH
   \   000132   78..         MOV     R0,#?V0 + 0
   \   000134   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000137   75..12       MOV     ?V0 + 0,#0x12
   \   00013A   75..00       MOV     ?V0 + 1,#0x0
   \   00013D   78..         MOV     R0,#?V0 + 0
   \   00013F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000142   75..01       MOV     ?V0 + 0,#0x1
   \   000145   78..         MOV     R0,#?V0 + 0
   \   000147   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014A   7920         MOV     R1,#0x20
   \   00014C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00014E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000150   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000152   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000154   12....       LCALL   ??AF_DataRequest?relay
   \   000157   7409         MOV     A,#0x9
   \   000159   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015C   E9           MOV     A,R1
   \   00015D   6007         JZ      ??SampleApp_SendPeriodicMessage_3
    596            {
    597            }
    598            else
    599            {
    600              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   00015F                ; Setup parameters for call to function HalLedSet
   \   00015F   7A01         MOV     R2,#0x1
   \   000161   7901         MOV     R1,#0x1
   \   000163   12....       LCALL   ??HalLedSet?relay
    601              // Error occurred in request to send.
    602            }
    603            //—π¡¶–°”⁄50«“–°”⁄300
    604            if(true_weight<50&&make_up==0)
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   000166   90....       MOV     DPTR,#__Constant_42480000
   \   000169   78..         MOV     R0,#?V0 + 0
   \   00016B   12....       LCALL   ?L_MOV_X
   \   00016E   78..         MOV     R0,#?V0 + 4
   \   000170   79..         MOV     R1,#?V0 + 0
   \   000172   12....       LCALL   ?FLT_LT
   \   000175   500B         JNC     ??SampleApp_SendPeriodicMessage_4
   \   000177   90....       MOV     DPTR,#make_up
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   7005         JNZ     ??SampleApp_SendPeriodicMessage_4
    605              make_up =1;
   \   00017D   7401         MOV     A,#0x1
   \   00017F   F0           MOVX    @DPTR,A
   \   000180   8006         SJMP    ??SampleApp_SendPeriodicMessage_5
    606            if(make_up&&true_weight<300)
   \                     ??SampleApp_SendPeriodicMessage_4:
   \   000182   90....       MOV     DPTR,#make_up
   \   000185   E0           MOVX    A,@DPTR
   \   000186   6029         JZ      ??SampleApp_SendPeriodicMessage_6
   \                     ??SampleApp_SendPeriodicMessage_5:
   \   000188   90....       MOV     DPTR,#__Constant_43960000
   \   00018B   78..         MOV     R0,#?V0 + 0
   \   00018D   12....       LCALL   ?L_MOV_X
   \   000190   78..         MOV     R0,#?V0 + 4
   \   000192   79..         MOV     R1,#?V0 + 0
   \   000194   12....       LCALL   ?FLT_LT
   \   000197   5018         JNC     ??SampleApp_SendPeriodicMessage_6
    607            {
    608              for(int i = 0;i<10;i++)  //160ms
   \   000199   75..0A       MOV     ?V0 + 0,#0xa
    609                 MotorCW();
   \                     ??SampleApp_SendPeriodicMessage_7:
   \   00019C                ; Setup parameters for call to function MotorCW
   \   00019C   12....       LCALL   ??MotorCW?relay
   \   00019F   15..         DEC     ?V0 + 0
   \   0001A1   E5..         MOV     A,?V0 + 0
   \   0001A3   70F7         JNZ     ??SampleApp_SendPeriodicMessage_7
    610              current_round+=10;
   \   0001A5   90....       MOV     DPTR,#current_round
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   240A         ADD     A,#0xa
   \   0001AB   F0           MOVX    @DPTR,A
   \   0001AC   A3           INC     DPTR
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   3400         ADDC    A,#0x0
   \   0001B0   F0           MOVX    @DPTR,A
    611            }
    612            if(true_weight>300){
   \                     ??SampleApp_SendPeriodicMessage_6:
   \   0001B1   90....       MOV     DPTR,#__Constant_43960001
   \   0001B4   78..         MOV     R0,#?V0 + 0
   \   0001B6   12....       LCALL   ?L_MOV_X
   \   0001B9   78..         MOV     R0,#?V0 + 4
   \   0001BB   79..         MOV     R1,#?V0 + 0
   \   0001BD   12....       LCALL   ?FLT_GE
   \   0001C0   502F         JNC     ??SampleApp_SendPeriodicMessage_8
    613              if(current_round>0){
   \   0001C2   90....       MOV     DPTR,#current_round
   \   0001C5   C3           CLR     C
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   9401         SUBB    A,#0x1
   \   0001C9   A3           INC     DPTR
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   9400         SUBB    A,#0x0
   \   0001CD   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0001CF   65D0         XRL     A,PSW
   \   0001D1   33           RLC     A
   \   0001D2   4018         JC      ??SampleApp_SendPeriodicMessage_9
    614                for(int i = 0;i<10;i++)  //160ms
   \   0001D4   75..0A       MOV     ?V0 + 0,#0xa
    615                   MotorCCW();    
   \                     ??SampleApp_SendPeriodicMessage_10:
   \   0001D7                ; Setup parameters for call to function MotorCCW
   \   0001D7   12....       LCALL   ??MotorCCW?relay
   \   0001DA   15..         DEC     ?V0 + 0
   \   0001DC   E5..         MOV     A,?V0 + 0
   \   0001DE   70F7         JNZ     ??SampleApp_SendPeriodicMessage_10
    616                current_round-=10;
   \   0001E0   90....       MOV     DPTR,#current_round
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   24F6         ADD     A,#-0xa
   \   0001E6   F0           MOVX    @DPTR,A
   \   0001E7   A3           INC     DPTR
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   34FF         ADDC    A,#-0x1
   \   0001EB   F0           MOVX    @DPTR,A
    617              }
    618              make_up = 0;
   \                     ??SampleApp_SendPeriodicMessage_9:
   \   0001EC   90....       MOV     DPTR,#make_up
   \   0001EF   E4           CLR     A
   \   0001F0   F0           MOVX    @DPTR,A
    619            }
    620           
    621          
    622            //º‡≤‚µΩ»ÀÃÂ,P15¡¡
    623            
    624            if(man)
   \                     ??SampleApp_SendPeriodicMessage_8:
   \   0001F1   EF           MOV     A,R7
   \   0001F2   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001F4   5004         JNC     ??SampleApp_SendPeriodicMessage_11
    625              P1_5 = 1;
   \   0001F6   D295         SETB    0x90.5
   \   0001F8   8002         SJMP    ??SampleApp_SendPeriodicMessage_12
    626            else
    627              P1_5 = 0;
   \                     ??SampleApp_SendPeriodicMessage_11:
   \   0001FA   C295         CLR     0x90.5
    628            //Œ¬∂»–°”⁄25∂»£¨P17¡¡
    629            if(temp_humi[0]<'2'||(temp_humi[0]==2&&temp_humi[1]<'5'))
   \                     ??SampleApp_SendPeriodicMessage_12:
   \   0001FC   85..82       MOV     DPL,?XSP + 0
   \   0001FF   85..83       MOV     DPH,?XSP + 1
   \   000202   E0           MOVX    A,@DPTR
   \   000203   C3           CLR     C
   \   000204   9432         SUBB    A,#0x32
   \   000206   5004         JNC     ??SampleApp_SendPeriodicMessage_13
    630              P1_7=1;
   \   000208   D297         SETB    0x90.7
   \   00020A   8002         SJMP    ??SampleApp_SendPeriodicMessage_14
    631            else
    632              P1_7 = 0;
   \                     ??SampleApp_SendPeriodicMessage_13:
   \   00020C   C297         CLR     0x90.7
    633            if(rain)//º‡≤‚µΩ”ÍµŒ
   \                     ??SampleApp_SendPeriodicMessage_14:
   \   00020E   EE           MOV     A,R6
   \   00020F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000211   5004         JNC     ??SampleApp_SendPeriodicMessage_15
    634              P1_6 = 1;
   \   000213   D296         SETB    0x90.6
   \   000215   8002         SJMP    ??SampleApp_SendPeriodicMessage_16
    635            else
    636              P1_6=0;
   \                     ??SampleApp_SendPeriodicMessage_15:
   \   000217   C296         CLR     0x90.6
    637          }
   \                     ??SampleApp_SendPeriodicMessage_16:
   \   000219   7418         MOV     A,#0x18
   \   00021B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00021E   7F0C         MOV     R7,#0xc
   \   000220   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000223                REQUIRE _A_P0
   \   000223                REQUIRE _A_P2
   \   000223                REQUIRE _A_P1
    638          
    639          /*********************************************************************
    640           * @fn      SampleApp_SendFlashMessage
    641           *
    642           * @brief   Send the flash message to group 1.
    643           *
    644           * @param   flashTime - in milliseconds
    645           *
    646           * @return  none
    647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    648          void SampleApp_SendFlashMessage( uint16 flashTime )  
   \                     SampleApp_SendFlashMessage:
    649          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    650            uint8 buffer[3];
    651            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    652            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    653            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    654          
    655            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    656                                 SAMPLEAPP_FLASH_CLUSTERID,
    657                                 3,
    658                                 buffer,
    659                                 &SampleApp_TransID,
    660                                 AF_DISCV_ROUTE,
    661                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    662            {
    663            }
    664            else
    665            {
    666              // Error occurred in request to send.
    667            }
    668          }
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   7F02         MOV     R7,#0x2
   \   000078   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    669          void SampleApp_Send_P2P_Message(void){
   \                     SampleApp_Send_P2P_Message:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    670            
    671          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for phasecw>`:
   \   000000   10           DB 16
   \   000001   08           DB 8
   \   000002   04           DB 4
   \   000003   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for phaseccw>`:
   \   000000   02           DB 2
   \   000001   04           DB 4
   \   000002   08           DB 8
   \   000003   10           DB 16

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 Example"
   \            35333020
   \            4578616D
   \            706C6500

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Get_Maopi?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Get_Maopi

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Get_Weight?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Get_Weight

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MotorCW?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MotorCW

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MotorCCW?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MotorCCW

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MotorStop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MotorStop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%4.3f%5d%4s%d%d">`:
   \   000000   25342E33     DB "%4.3f%5d%4s%d%d"
   \            66253564
   \            25347325
   \            64256400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_447a0000:
   \   000000   00007A44     DD 447A0000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42480000:
   \   000000   00004842     DD 42480000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_43960000:
   \   000000   00009643     DD 43960000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_43960001:
   \   000000   01009643     DD 43960001H
    672          /*********************************************************************
    673          *********************************************************************/
    674           

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     Get_Maopi                          2      0      0
       -> HX711_Read                    4      0      0
     Get_Weight                         0      0     12
       -> HX711_Read                    0      0     24
     MotorCCW                           2      0     44
       -> Delay_ms                      4      0      0
       -> Delay_ms                      4      0      0
       -> Delay_ms                      4      0      0
       -> Delay_ms                      4      0      0
     MotorCW                            2      0     44
       -> Delay_ms                      4      0      0
       -> Delay_ms                      4      0      0
       -> Delay_ms                      4      0      0
       -> Delay_ms                      4      0      0
     MotorStop                          0      0      0
     SampleApp_HandleKeys               0      0     21
       -> SampleApp_SendFlashMessage
                                        0      0     18
     SampleApp_Init                     0      0     14
       -> HX711_Read                    0      0     22
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     44
       -> osal_memset                   0      0     58
       -> osal_memcpy                   0      0     64
       -> HalUARTWrite                  0      0     58
       -> HalLedBlink                   0      0     58
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     31
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     68
       -> DHT11                         0      0     88
       -> strcpy                        0      0     88
       -> Light                         0      0     88
       -> HX711_Read                    0      0     88
       -> sprintf                       0      0    112
       -> HalUARTWrite                  0      0     88
       -> AF_DataRequest                0      0    106
       -> HalLedSet                     0      0     88
       -> MotorCW                       0      0     88
       -> MotorCCW                      0      0     88
     SampleApp_Send_P2P_Message         0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_P1                                    1
     _A_P2                                    1
     P0SEL                                    1
     P2SEL                                    1
     P0DIR                                    1
     P1DIR                                    1
     P2DIR                                    1
     HX711_Buffer                             4
     Weight_Maopi                             4
     Weight_Shiwu                             4
     current_round                            2
     make_up                                  1
     phasecw                                  4
     phaseccw                                 4
     Get_Maopi                               15
     ??Subroutine5_0                          7
     Get_Weight                              44
     ?Subroutine1                             5
     MotorCW                                 38
     ?Subroutine0                             7
     ?Subroutine3                            23
     MotorCCW                                40
     MotorStop                                6
     AppTitle                                16
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         220
     ?Subroutine2                             5
     SampleApp_ProcessEvent                 174
     SampleApp_HandleKeys                    22
     SampleApp_MessageMSGCB                 180
     ?Subroutine4                            12
     SampleApp_SendPeriodicMessage          547
     SampleApp_SendFlashMessage             123
     SampleApp_Send_P2P_Message               3
     ?<Initializer for phasecw>               4
     ?<Initializer for phaseccw>              4
     ?<Initializer for AppTitle>             16
     ??Get_Maopi?relay                        6
     ??Get_Weight?relay                       6
     ??MotorCW?relay                          6
     ??MotorCCW?relay                         6
     ??MotorStop?relay                        6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ?<Constant "UartInit OK\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant {0}>                         18
     ?<Constant {0}>_1                        6
     ?<Constant "%4.3f%5d%4s%d%d">           16
     __Constant_0                             4
     __Constant_447a0000                      4
     __Constant_42480000                      4
     __Constant_43960000                      4
     __Constant_43960001                      4

 
 1 471 bytes in segment BANKED_CODE
    72 bytes in segment BANK_RELAYS
     8 bytes in segment SFR_AN
    24 bytes in segment XDATA_I
    24 bytes in segment XDATA_ID
   107 bytes in segment XDATA_ROM_C
    68 bytes in segment XDATA_Z
 
 1 567 bytes of CODE  memory
    87 bytes of CONST memory (+ 20 bytes shared)
     0 bytes of DATA  memory (+  8 bytes shared)
    92 bytes of XDATA memory

Errors: none
Warnings: 5
