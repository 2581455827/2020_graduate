///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        19/Dec/2019  18:57:04 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Components\mac\low_level\srf04\mac_autopend.c /
//    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤ /
//                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wEndev.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f C:\Users\25814\Desktop\202 /
//                          0±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø∑÷\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wC /
//                          onfig.cfg (-DZIGBEEPRO -DSECURE=0                 /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\202 /
//                          0±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø∑÷\Components\mac\low_lev /
//                          el\srf04\mac_autopend.c -D NWK_AUTO_POLL -D       /
//                          ZAPP_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  /
//                          -D LCD_SUPPORTED=DEBUG -lC                        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\En /
//                          dDeviceEB\List\ -lA C:\Users\25814\Desktop\2020±œ /
//                          …Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø∑÷\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\EndDeviceEB\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\En /
//                          dDeviceEB\Obj\ -e --no_code_motion --debug        /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\   /
//                          -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤ /
//                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\Source\ -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó /
//                          ∫∆_≥ËŒÔŒ—\”≤º˛≤ø∑÷\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\include\ -I           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\include\ -I           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\high_level\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\ -I   /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\singl /
//                          e_chip\ -I C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ /
//                          ËŒÔŒ—\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\mt\ -I         /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\osal\include\ -I          /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\saddr\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\sdata\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\af\ -I              /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\nwk\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sapi\ -I            /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sec\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sys\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\zdo\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\ -I                  /
//                          C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\f8w\ -Ohz            /
//    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\En /
//                          dDeviceEB\List\mac_autopend.s51                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME mac_autopend

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_AND
        EXTERN ?L_IOR
        EXTERN ?L_NOT
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??MAC_SrcMatchAckAllPending?relay
        FUNCTION ??MAC_SrcMatchAckAllPending?relay,0203H
        PUBLIC ??MAC_SrcMatchAddEntry?relay
        FUNCTION ??MAC_SrcMatchAddEntry?relay,0203H
        PUBLIC ??MAC_SrcMatchCheckAllPending?relay
        FUNCTION ??MAC_SrcMatchCheckAllPending?relay,0203H
        PUBLIC ??MAC_SrcMatchCheckResult?relay
        FUNCTION ??MAC_SrcMatchCheckResult?relay,0203H
        PUBLIC ??MAC_SrcMatchDeleteEntry?relay
        FUNCTION ??MAC_SrcMatchDeleteEntry?relay,0203H
        PUBLIC ??MAC_SrcMatchEnable?relay
        FUNCTION ??MAC_SrcMatchEnable?relay,0203H
        FUNCTION ??macSrcMatchCheckSrcAddr?relay,0203H
        FUNCTION ??macSrcMatchGetEnableBit?relay,0203H
        FUNCTION ??macSrcMatchSetEnableBit?relay,0203H
        PUBLIC MAC_SrcMatchAckAllPending
        FUNCTION MAC_SrcMatchAckAllPending,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MAC_SrcMatchAddEntry
        FUNCTION MAC_SrcMatchAddEntry,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC MAC_SrcMatchCheckAllPending
        FUNCTION MAC_SrcMatchCheckAllPending,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MAC_SrcMatchCheckResult
        FUNCTION MAC_SrcMatchCheckResult,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MAC_SrcMatchDeleteEntry
        FUNCTION MAC_SrcMatchDeleteEntry,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MAC_SrcMatchEnable
        FUNCTION MAC_SrcMatchEnable,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macSrcMatchAddrMode
        FUNCTION macSrcMatchCheckSrcAddr,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        FUNCTION macSrcMatchGetEnableBit,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 3, STACK
        PUBLIC macSrcMatchIsAckAllPending
        PUBLIC macSrcMatchIsEnabled
        PUBLIC macSrcMatchMaxNumEntries
        FUNCTION macSrcMatchSetEnableBit,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
macMemWriteRam      SYMBOL "macMemWriteRam"
macMemReadRam       SYMBOL "macMemReadRam"
osal_build_uint32   SYMBOL "osal_build_uint32"
osal_buffer_uint24  SYMBOL "osal_buffer_uint24"
osal_memcmp         SYMBOL "osal_memcmp"
??macMemReadRam?relay SYMBOL "?relay", macMemReadRam
??macMemWriteRam?relay SYMBOL "?relay", macMemWriteRam
??osal_buffer_uint24?relay SYMBOL "?relay", osal_buffer_uint24
??osal_build_uint32?relay SYMBOL "?relay", osal_build_uint32
??osal_memcmp?relay SYMBOL "?relay", osal_memcmp
MAC_SrcMatchAckAllPending SYMBOL "MAC_SrcMatchAckAllPending"
??MAC_SrcMatchAckAllPending?relay SYMBOL "?relay", MAC_SrcMatchAckAllPending
MAC_SrcMatchAddEntry SYMBOL "MAC_SrcMatchAddEntry"
??MAC_SrcMatchAddEntry?relay SYMBOL "?relay", MAC_SrcMatchAddEntry
MAC_SrcMatchCheckAllPending SYMBOL "MAC_SrcMatchCheckAllPending"
??MAC_SrcMatchCheckAllPending?relay SYMBOL "?relay", MAC_SrcMatchCheckAllPending
MAC_SrcMatchCheckResult SYMBOL "MAC_SrcMatchCheckResult"
??MAC_SrcMatchCheckResult?relay SYMBOL "?relay", MAC_SrcMatchCheckResult
MAC_SrcMatchDeleteEntry SYMBOL "MAC_SrcMatchDeleteEntry"
??MAC_SrcMatchDeleteEntry?relay SYMBOL "?relay", MAC_SrcMatchDeleteEntry
MAC_SrcMatchEnable  SYMBOL "MAC_SrcMatchEnable"
??MAC_SrcMatchEnable?relay SYMBOL "?relay", MAC_SrcMatchEnable

        EXTERN macMemWriteRam
        FUNCTION macMemWriteRam,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMemReadRam
        FUNCTION macMemReadRam,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint24
        FUNCTION osal_buffer_uint24,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??macMemReadRam?relay
        FUNCTION ??macMemReadRam?relay,00H
        EXTERN ??macMemWriteRam?relay
        FUNCTION ??macMemWriteRam?relay,00H
        EXTERN ??osal_buffer_uint24?relay
        FUNCTION ??osal_buffer_uint24?relay,00H
        EXTERN ??osal_build_uint32?relay
        FUNCTION ??osal_build_uint32?relay,00H
        EXTERN ??osal_memcmp?relay
        FUNCTION ??osal_memcmp?relay,00H

// C:\Users\25814\Desktop\2020±œ…Ë\¿Ó∫∆_≥ËŒÔŒ—\”≤º˛≤ø∑÷\Components\mac\low_level\srf04\mac_autopend.c
//    1 /**************************************************************************************************
//    2   Filename:       mac_autopend.c
//    3   Revised:        $Date: 2009-08-28 09:29:33 -0700 (Fri, 28 Aug 2009) $
//    4   Revision:       $Revision: 20674 $
//    5 
//    6   Description:    This file implements the TIMAC Autopend feature.
//    7 
//    8 
//    9   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /* low-level */
//   41 #include "mac_api.h"
//   42 #include "mac_radio_defs.h"
//   43 
//   44 /* osal */
//   45 #include "OSAL.h"
//   46 #include "saddr.h"
//   47 #include "ZComDef.h"
//   48 
//   49 #include "mac_autopend.h"
//   50 
//   51 /* ------------------------------------------------------------------------------------------------
//   52  *                                           Defines
//   53  * ------------------------------------------------------------------------------------------------
//   54  */
//   55 #define MAC_SRCMATCH_INVALID_INDEX           0xFF
//   56 
//   57 #define MAC_SRCMATCH_SHORT_ENTRY_SIZE        4
//   58 #define MAC_SRCMATCH_EXT_ENTRY_SIZE          Z_EXTADDR_LEN
//   59 
//   60 #define MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES   24
//   61 #define MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES     12
//   62 
//   63 #define MAC_SRCMATCH_ENABLE_BITMAP_LEN       3
//   64           
//   65 /* ------------------------------------------------------------------------------------------------
//   66  *                                      Global Variables
//   67  * ------------------------------------------------------------------------------------------------
//   68  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   69 bool macSrcMatchIsEnabled = FALSE; 
macSrcMatchIsEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   70 
//   71 /* ------------------------------------------------------------------------------------------------
//   72  *                                         Local Variables
//   73  * ------------------------------------------------------------------------------------------------
//   74  */
//   75 
//   76 /* 
//   77  The following local Varables are only set in MAC_SrcMatchEnable()  
//   78  They are read only to the rest of the module.
//   79  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   80 uint8 macSrcMatchMaxNumEntries = 0;   
macSrcMatchMaxNumEntries:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   81 uint8 macSrcMatchAddrMode = SADDR_MODE_SHORT;  
macSrcMatchAddrMode:
        DATA8
        DS 1
        REQUIRE `?<Initializer for macSrcMatchAddrMode>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   82 bool macSrcMatchIsAckAllPending = FALSE;
macSrcMatchIsAckAllPending:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   83 
//   84 /* ------------------------------------------------------------------------------------------------
//   85  *                                         Local Functions
//   86  * ------------------------------------------------------------------------------------------------
//   87  */
//   88 static uint8 macSrcMatchFindEmptyEntry( void );
//   89 static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  );
//   90 static void macSrcMatchSetPendEnBit( uint8 index );
//   91 static void macSrcMatchSetEnableBit( uint8 index, bool option );
//   92 static bool macSrcMatchCheckEnableBit( uint8 index );
//   93 static uint24 macSrcMatchGetEnableBit( void );
//   94 static uint24 macSrcMatchGetPendEnBit( void );
//   95 
//   96 /*********************************************************************
//   97  * @fn          MAC_SrcMatchEnable
//   98  *
//   99  * @brief      Enabled AUTOPEND and source address matching. If number of source
//  100  *             address table entries asked for is more than the hardware
//  101  *             supports. It will allocate maximum number of entries and return 
//  102  *             MAC_INVALID_PARAMETER. This function shall be not be called from 
//  103  *             ISR. It is not thread safe.
//  104  *
//  105  * @param      addressType - address type that the application uses
//  106  *                           SADDR_MODE_SHORT or SADDR_MODE_EXT
//  107  * @param      num - number of source address table entries to be used
//  108  *
//  109  * @return     MAC_SUCCESS or MAC_INVALID_PARAMETER
//  110  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  111 uint8 MAC_SrcMatchEnable ( uint8 addrType, uint8 num  )
MAC_SrcMatchEnable:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MAC_SrcMatchEnable
        CODE
//  112 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  113   uint8 rtn;
//  114   uint8 maxNum;
//  115     
//  116   /* Verify the address type */
//  117   if( addrType != SADDR_MODE_SHORT && addrType != SADDR_MODE_EXT )
        MOV     A,#0x2
        XRL     A,R0
        JZ      ??MAC_SrcMatchEnable_0
        MOV     A,#0x3
        XRL     A,R0
        JZ      ??MAC_SrcMatchEnable_1
//  118   {
//  119     return MAC_INVALID_PARAMETER;
        MOV     R1,#-0x18
        SJMP    ??MAC_SrcMatchEnable_2
//  120   }
??MAC_SrcMatchEnable_0:
        MOV     R3,#0x18
        SJMP    ??MAC_SrcMatchEnable_3
??MAC_SrcMatchEnable_1:
        MOV     R3,#0xc
//  121   
//  122   maxNum = ( addrType == SADDR_MODE_SHORT ) ? 
//  123            MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES : MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES;
//  124            
//  125   if( num > maxNum )
??MAC_SrcMatchEnable_3:
        MOV     A,R3
        CLR     C
        SUBB    A,R2
        JNC     ??MAC_SrcMatchEnable_4
//  126   {
//  127     rtn = MAC_INVALID_PARAMETER;
        MOV     R1,#-0x18
//  128     num = maxNum;
        MOV     A,R3
        MOV     R2,A
        SJMP    ??MAC_SrcMatchEnable_5
//  129   }
//  130   else
//  131   {
//  132     rtn = MAC_SUCCESS;
??MAC_SrcMatchEnable_4:
        MOV     R1,#0x0
//  133   }
//  134     
//  135   /* Turn on Frame Filter (TIMAC enables frame filter by default), TBD */
//  136   MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
??MAC_SrcMatchEnable_5:
        MOV     DPTR,#0x6180
        CLR     A
        MOVX    @DPTR,A
        MOVX    A,@DPTR
        ORL     A,#0x5
        MOVX    @DPTR,A
//  137   
//  138   /* Turn on Auto ACK (TIMAC turn on Auto ACK by default), TBD */
//  139   MAC_RADIO_TURN_ON_AUTO_ACK();
        MOV     DPTR,#0x6189
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
        MOVX    @DPTR,A
//  140   
//  141   /* Turn on Autopend: set SRCMATCH.AUTOPEND and SRCMATCH.SRC_MATCH_EN */
//  142   MAC_RADIO_TURN_ON_SRC_MATCH();
        MOV     DPTR,#0x6182
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//  143  
//  144   /* Set SRCMATCH.AUTOPEND */
//  145   MAC_RADIO_TURN_ON_AUTOPEND();
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//  146   
//  147   /* Configure all the globals */
//  148   macSrcMatchIsEnabled = TRUE;
        MOV     DPTR,#macSrcMatchIsEnabled
        MOV     A,#0x1
        MOVX    @DPTR,A
//  149   macSrcMatchMaxNumEntries = num;
        MOV     A,R2
        MOV     DPTR,#macSrcMatchMaxNumEntries
        MOVX    @DPTR,A
//  150   macSrcMatchAddrMode = addrType;           
        MOV     A,R0
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    @DPTR,A
//  151 
//  152   return rtn;
??MAC_SrcMatchEnable_2:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  153 }
//  154 
//  155 /*********************************************************************
//  156  * @fn          MAC_SrcMatchAddEntry
//  157  *
//  158  * @brief       Add a short or extended address to source address table. This 
//  159  *              function shall be not be called from ISR. It is not thread safe.
//  160  *
//  161  * @param       addr - a pointer to sAddr_t which contains addrMode 
//  162  *                     and a union of a short 16-bit MAC address or an extended 
//  163  *                     64-bit MAC address to be added to the source address table. 
//  164  * @param       panID - the device PAN ID. It is only used when the addr is 
//  165  *                      using short address 
//  166 
//  167  * @return      MAC_SUCCESS or MAC_NO_RESOURCES (source address table full) 
//  168  *              or MAC_DUPLICATED_ENTRY (the entry added is duplicated),
//  169  *              or MAC_INVALID_PARAMETER if the input parameters are invalid.
//  170  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  171 uint8 MAC_SrcMatchAddEntry ( sAddr_t *addr, uint16 panID )
MAC_SrcMatchAddEntry:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function MAC_SrcMatchAddEntry
        CODE
//  172 {
        FUNCALL MAC_SrcMatchAddEntry, macSrcMatchCheckSrcAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macSrcMatchGetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemWriteRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemWriteRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemReadRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemReadRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemWriteRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemWriteRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macSrcMatchSetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 14,R2
        MOV     ?V0 + 15,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  173   uint8 index;
//  174   uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];
//  175   
//  176   /* Check if the input parameters are valid */
//  177   if ( addr == NULL || addr->addrMode != macSrcMatchAddrMode )
        MOV     A,R2
        ORL     A,?V0 + 15
        JZ      ??MAC_SrcMatchAddEntry_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??MAC_SrcMatchAddEntry_1
//  178   {
//  179     return MAC_INVALID_PARAMETER;  
??MAC_SrcMatchAddEntry_0:
        MOV     R1,#-0x18
        LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
//  180   }
//  181   
//  182   /* Check if the entry already exists. Do not add duplicated entry */
//  183   if ( macSrcMatchCheckSrcAddr( addr, panID ) != MAC_SRCMATCH_INVALID_INDEX )
??MAC_SrcMatchAddEntry_1:
        ; Setup parameters for call to function macSrcMatchCheckSrcAddr
        LCALL   ??macSrcMatchCheckSrcAddr?relay
        MOV     A,R1
        CPL     A
        JZ      ??MAC_SrcMatchAddEntry_3
//  184   {
//  185     return MAC_DUPLICATED_ENTRY; 
        MOV     R1,#0x1e
        LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
//  186   }
//  187   
//  188   /* If not duplicated, write to the radio RAM and enable the control bit */
//  189   
//  190   /* Find the first empty entry */
//  191   index = macSrcMatchFindEmptyEntry();
??MAC_SrcMatchAddEntry_3:
        ; Setup parameters for call to function macSrcMatchGetEnableBit
        LCALL   ??macSrcMatchGetEnableBit?relay
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     ?V0 + 12,#0x0
        JNZ     ??MAC_SrcMatchAddEntry_4
??MAC_SrcMatchAddEntry_5:
        MOV     DPTR,#macSrcMatchMaxNumEntries
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 12
        CLR     C
        SUBB    A,R0
        JNC     ??MAC_SrcMatchAddEntry_6
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     A,?V0 + 12
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_AND
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??MAC_SrcMatchAddEntry_7
        INC     ?V0 + 12
        SJMP    ??MAC_SrcMatchAddEntry_5
??MAC_SrcMatchAddEntry_8:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     A,?V0 + 12
        CLR     C
        RLC     A
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_AND
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??MAC_SrcMatchAddEntry_9
        INC     ?V0 + 12
??MAC_SrcMatchAddEntry_4:
        MOV     DPTR,#macSrcMatchMaxNumEntries
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 12
        CLR     C
        SUBB    A,R0
        JC      ??MAC_SrcMatchAddEntry_8
//  192   if ( index == macSrcMatchMaxNumEntries )
??MAC_SrcMatchAddEntry_6:
        MOVX    A,@DPTR
        XRL     A,?V0 + 12
        JNZ     ??MAC_SrcMatchAddEntry_10
//  193   {
//  194     return MAC_NO_RESOURCES;   /* Table is full */
        MOV     R1,#0x1a
        LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
//  195   }
//  196   
//  197   if ( macSrcMatchAddrMode == SADDR_MODE_SHORT )
??MAC_SrcMatchAddEntry_10:
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??MAC_SrcMatchAddEntry_9
//  198   {
//  199     /* Write the PanID and short address */
//  200     entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
??MAC_SrcMatchAddEntry_7:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  201     entry[1] = HI_UINT16( panID );
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R7
        MOVX    @DPTR,A
//  202     entry[2] = LO_UINT16( addr->addr.shortAddr );
        MOV     DPL,?V0 + 14
        MOV     DPH,?V0 + 15
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  203     entry[3] = HI_UINT16( addr->addr.shortAddr );
        MOV     DPL,?V0 + 14
        MOV     DPH,?V0 + 15
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  204     MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_SHORT_ENTRY_SIZE ), 
//  205                    entry, MAC_SRCMATCH_SHORT_ENTRY_SIZE );
        ; Setup parameters for call to function macMemWriteRam
        MOV     R1,#0x4
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 0,?V0 + 12
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        SJMP    ??MAC_SrcMatchAddEntry_11
//  206   }
//  207   else
//  208   {
//  209     /* Write the extended address */
//  210     MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_EXT_ENTRY_SIZE ), 
//  211                    addr->addr.extAddr, MAC_SRCMATCH_EXT_ENTRY_SIZE ); 
??MAC_SrcMatchAddEntry_9:
        ; Setup parameters for call to function macMemWriteRam
        MOV     R1,#0x8
        MOV     R4,?V0 + 14
        MOV     R5,?V0 + 15
        MOV     ?V0 + 0,?V0 + 12
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x3
??MAC_SrcMatchAddEntry_11:
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        ADD     A,?V0 + 0
        MOV     R2,A
        MOV     A,#0x61
        ADDC    A,?V0 + 1
        MOV     R3,A
        LCALL   ??macMemWriteRam?relay
//  212   }
//  213   
//  214   /* Set the Autopend enable bits */
//  215   macSrcMatchSetPendEnBit( index );
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     R1,#0x3
        JNZ     ??MAC_SrcMatchAddEntry_12
        ; Setup parameters for call to function macMemReadRam
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x67
        SJMP    ??MAC_SrcMatchAddEntry_13
??MAC_SrcMatchAddEntry_12:
        ; Setup parameters for call to function macMemReadRam
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x64
??MAC_SrcMatchAddEntry_13:
        MOV     R3,#0x61
        LCALL   ??macMemReadRam?relay
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x3
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_build_uint32?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#macSrcMatchAddrMode
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        JNZ     ??MAC_SrcMatchAddEntry_14
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     A,?V0 + 12
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_buffer_uint24?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        ; Setup parameters for call to function macMemWriteRam
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x67
        SJMP    ??MAC_SrcMatchAddEntry_15
??MAC_SrcMatchAddEntry_14:
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     A,?V0 + 12
        CLR     C
        RLC     A
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_buffer_uint24?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        ; Setup parameters for call to function macMemWriteRam
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x64
??MAC_SrcMatchAddEntry_15:
        MOV     R3,#0x61
        LCALL   ??macMemWriteRam?relay
//  216   
//  217   /* Set the Src Match enable bits */
//  218   macSrcMatchSetEnableBit( index, TRUE );
        ; Setup parameters for call to function macSrcMatchSetEnableBit
        MOV     R2,#0x1
        MOV     R1,?V0 + 12
        LCALL   ??macSrcMatchSetEnableBit?relay
//  219   
//  220   return MAC_SUCCESS;
        MOV     R1,#0x0
??MAC_SrcMatchAddEntry_2:
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  221 }
//  222 
//  223 /*********************************************************************
//  224  * @fn         MAC_SrcMatchDeleteEntry
//  225  *
//  226  * @brief      Delete a short or extended address from source address table. 
//  227  *             This function shall be not be called from ISR. It is not thread safe.
//  228  *
//  229  * @param      addr - a pointer to sAddr_t which contains addrMode 
//  230  *                    and a union of a short 16-bit MAC address or an extended 
//  231  *                    64-bit MAC address to be deleted from the source address table. 
//  232  * @param      panID - the device PAN ID. It is only used when the addr is 
//  233  *                     using short address  
//  234  *
//  235  * @return     MAC_SUCCESS or MAC_INVALID_PARAMETER (address to be deleted 
//  236  *                  cannot be found in the source address table).
//  237  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  238 uint8 MAC_SrcMatchDeleteEntry ( sAddr_t *addr, uint16 panID  )
MAC_SrcMatchDeleteEntry:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function MAC_SrcMatchDeleteEntry
        CODE
//  239 {
        FUNCALL MAC_SrcMatchDeleteEntry, macSrcMatchCheckSrcAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchDeleteEntry, macSrcMatchSetEnableBit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  240   uint8 index;
//  241   
//  242   if ( addr == NULL || addr->addrMode != macSrcMatchAddrMode )
        MOV     A,R2
        ORL     A,R3
        JZ      ??MAC_SrcMatchDeleteEntry_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??MAC_SrcMatchDeleteEntry_1
//  243   {
//  244     return MAC_INVALID_PARAMETER;  
??MAC_SrcMatchDeleteEntry_0:
        MOV     R1,#-0x18
        SJMP    ??MAC_SrcMatchDeleteEntry_2
//  245   }
//  246   
//  247   /* Look up the source address table and find the entry. */
//  248   index = macSrcMatchCheckSrcAddr( addr, panID );
??MAC_SrcMatchDeleteEntry_1:
        ; Setup parameters for call to function macSrcMatchCheckSrcAddr
        LCALL   ??macSrcMatchCheckSrcAddr?relay
//  249 
//  250   if( index == MAC_SRCMATCH_INVALID_INDEX )
        MOV     A,#-0x1
        XRL     A,R1
        JZ      ??MAC_SrcMatchDeleteEntry_0
//  251   {
//  252     return MAC_INVALID_PARAMETER; 
//  253   }
//  254   
//  255   /* Clear Src Match enable bits */
//  256   macSrcMatchSetEnableBit( index, FALSE );
        ; Setup parameters for call to function macSrcMatchSetEnableBit
        MOV     R2,#0x0
        LCALL   ??macSrcMatchSetEnableBit?relay
//  257 
//  258   return MAC_SUCCESS;
        MOV     R1,#0x0
??MAC_SrcMatchDeleteEntry_2:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock2
//  259 }
//  260                   
//  261 /*********************************************************************
//  262  * @fn          MAC_SrcMatchAckAllPending
//  263  *
//  264  * @brief       Enabled/disable acknowledging all packets with pending bit set
//  265  *              The application normally enables it when adding new entries to 
//  266  *              the source address table fails due to the table is full, or 
//  267  *              disables it when more entries are deleted and the table has
//  268  *              empty slots.
//  269  *
//  270  * @param       option - TRUE (acknowledging all packets with pending field set)
//  271  *                       FALSE (acknowledging all packets with pending field cleared) 
//  272  *
//  273  * @return      none
//  274  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  275 void MAC_SrcMatchAckAllPending ( uint8 option  ) 
MAC_SrcMatchAckAllPending:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function MAC_SrcMatchAckAllPending
        CODE
//  276 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  277   if( option == TRUE )
        MOV     A,#0x1
        XRL     A,R1
        MOV     DPTR,#macSrcMatchIsAckAllPending
        JNZ     ??MAC_SrcMatchAckAllPending_0
//  278   {
//  279     macSrcMatchIsAckAllPending = TRUE;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  280     
//  281     /* Set the PENDING_OR register */
//  282     MAC_RADIO_TURN_ON_PENDING_OR();
        MOV     DPTR,#0x618a
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.2
        SJMP    ??MAC_SrcMatchAckAllPending_1
//  283   }
//  284   else
//  285   {
//  286     macSrcMatchIsAckAllPending = FALSE;
??MAC_SrcMatchAckAllPending_0:
        CLR     A
        MOVX    @DPTR,A
//  287     
//  288     /* Clear the PENDING_OR register */
//  289     MAC_RADIO_TURN_OFF_PENDING_OR();
        MOV     DPTR,#0x618a
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
??MAC_SrcMatchAckAllPending_1:
        MOVX    @DPTR,A
//  290   }
//  291 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock3
//  292 
//  293 /*********************************************************************
//  294  * @fn          MAC_SrcMatchCheckAllPending
//  295  *
//  296  * @brief       Check if acknowledging all packets with pending bit set
//  297  *              is enabled. 
//  298  *
//  299  * @param       none 
//  300  *
//  301  * @return      MAC_AUTOACK_PENDING_ALL_ON or MAC_AUTOACK_PENDING_ALL_OFF
//  302  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  303 uint8 MAC_SrcMatchCheckAllPending ( void )
MAC_SrcMatchCheckAllPending:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function MAC_SrcMatchCheckAllPending
        CODE
//  304 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  305   if( macSrcMatchIsAckAllPending == TRUE )
        MOV     DPTR,#macSrcMatchIsAckAllPending
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??MAC_SrcMatchCheckAllPending_0
//  306   {
//  307     return MAC_AUTOACK_PENDING_ALL_ON; 
        MOV     R1,#-0x2
        SJMP    ??MAC_SrcMatchCheckAllPending_1
//  308   }
//  309   
//  310   return MAC_AUTOACK_PENDING_ALL_OFF;
??MAC_SrcMatchCheckAllPending_0:
        MOV     R1,#-0x1
        CFI EndBlock cfiBlock4
??MAC_SrcMatchCheckAllPending_1:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  311 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
//  312 
//  313 /*********************************************************************
//  314  * @fn          MAC_SrcMatchCheckResult
//  315  *
//  316  * @brief       Check the result of source matching
//  317  *
//  318  * @param       index - index of the entry in the source address table
//  319  *
//  320  * @return      TRUE or FALSE
//  321  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  322 MAC_INTERNAL_API bool MAC_SrcMatchCheckResult( void )
MAC_SrcMatchCheckResult:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function MAC_SrcMatchCheckResult
        CODE
//  323 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  324   uint8 resIndex;
//  325   
//  326   if ( macSrcMatchIsAckAllPending )
        MOV     DPTR,#macSrcMatchIsAckAllPending
        MOVX    A,@DPTR
        JZ      ??MAC_SrcMatchCheckResult_0
//  327   {
//  328     return (TRUE);
        MOV     R1,#0x1
        SJMP    ??MAC_SrcMatchCheckResult_1
//  329   }
//  330   
//  331   MAC_RADIO_SRC_MATCH_RESINDEX( resIndex );
??MAC_SrcMatchCheckResult_0:
        MOV     DPTR,#0x6163
        MOVX    A,@DPTR
        MOV     R0,A
//  332   
//  333   return ( resIndex & AUTOPEND_RES );
        MOV     A,#0x40
        ANL     A,R0
        MOV     R1,A
??MAC_SrcMatchCheckResult_1:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock6
//  334 }
//  335 
//  336 /*********************************************************************
//  337  * @fn          macSrcMatchFindEmptyEntry
//  338  *
//  339  * @brief       return index of the first empty entry found
//  340  *
//  341  * @param       none
//  342  *
//  343  * @return      uint8 - return index of the first empty entry found
//  344  */
//  345 static uint8 macSrcMatchFindEmptyEntry( void )
//  346 {
//  347   uint8  index;
//  348   uint24 enable;
//  349      
//  350   enable = MAC_RADIO_SRC_MATCH_GET_EN();
//  351         
//  352   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
//  353   {
//  354     for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
//  355     {  
//  356       if( ( enable & ( (uint24)0x01 << index ) ) == 0 )
//  357       {
//  358         return index;
//  359       }
//  360     }
//  361   }
//  362   else
//  363   {
//  364     for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
//  365     {  
//  366       if( ( enable & ( (uint24)0x01 << ( index * 2 ) ) ) == 0 )
//  367       {
//  368         return index;
//  369       }
//  370     }
//  371   }
//  372   
//  373   /* 
//  374    The value of index shall be macSrcMatchMaxNumEntries when it executes
//  375    here. The table is full.
//  376   */
//  377   return index;
//  378 }
//  379 
//  380 /*********************************************************************
//  381  * @fn         macSrcMatchCheckSrcAddr
//  382  *
//  383  * @brief      Check if a short or extended address is in the source address table.
//  384  *             This function shall not be called from ISR. It is not thread safe.
//  385  *
//  386  * @param      addr - a pointer to sAddr_t which contains addrMode 
//  387  *                    and a union of a short 16-bit MAC address or an extended 
//  388  *                    64-bit MAC address to be checked in the source address table. 
//  389  * @param      panID - the device PAN ID. It is only used when the addr is 
//  390  *                     using short address 
//  391 
//  392  * @return     uint8 - index of the entry in the table. Return 
//  393  *                     MAC_SRCMATCH_INVALID_INDEX (0xFF) if address not found.
//  394  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  395 static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  )
macSrcMatchCheckSrcAddr:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function macSrcMatchCheckSrcAddr
        CODE
//  396 {
        FUNCALL macSrcMatchCheckSrcAddr, macSrcMatchGetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchCheckSrcAddr, macMemReadRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchCheckSrcAddr, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  397   uint8 index;     
//  398   uint8 *pAddr;
//  399   uint8 entrySize;
//  400   uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];  
//  401   uint8 ramEntry[MAC_SRCMATCH_EXT_ENTRY_SIZE];
//  402       
//  403   /*
//  404    Currently, shadow memory is not supported to optimize SPI traffic.
//  405   */
//  406   
//  407   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??macSrcMatchCheckSrcAddr_0
//  408   {
//  409     entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
        MOV     A,R4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  410     entry[1] = HI_UINT16( panID );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R5
        MOVX    @DPTR,A
//  411     entry[2] = LO_UINT16( addr->addr.shortAddr );
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  412     entry[3] = HI_UINT16( addr->addr.shortAddr );
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  413     pAddr = entry;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 10,DPL
        MOV     ?V0 + 11,DPH
//  414     entrySize = MAC_SRCMATCH_SHORT_ENTRY_SIZE;
        MOV     R7,#0x4
        SJMP    ??macSrcMatchCheckSrcAddr_1
//  415   }
//  416   else
//  417   {
//  418     pAddr = addr->addr.extAddr;
??macSrcMatchCheckSrcAddr_0:
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
//  419     entrySize = MAC_SRCMATCH_EXT_ENTRY_SIZE;
        MOV     R7,#0x8
//  420   }
//  421   
//  422   for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
??macSrcMatchCheckSrcAddr_1:
        MOV     R6,#0x0
        SJMP    ??macSrcMatchCheckSrcAddr_2
??macSrcMatchCheckSrcAddr_3:
        INC     R6
??macSrcMatchCheckSrcAddr_2:
        MOV     DPTR,#macSrcMatchMaxNumEntries
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??macSrcMatchCheckSrcAddr_4 & 0xFFFF
//  423   {
//  424     /* Check if the entry is enabled */
//  425     if( macSrcMatchCheckEnableBit( index ) == FALSE )
        MOV     ?V0 + 8,R6
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??macSrcMatchCheckSrcAddr_5
        MOV     A,?V0 + 8
        CLR     C
        RLC     A
        MOV     ?V0 + 8,A
??macSrcMatchCheckSrcAddr_5:
        ; Setup parameters for call to function macSrcMatchGetEnableBit
        LCALL   ??macSrcMatchGetEnableBit?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 8
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_AND
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        ORL     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??macSrcMatchCheckSrcAddr_3
//  426     {
//  427       continue; 
//  428     }
//  429       
//  430     /* Compare the short address and pan ID */
//  431     MAC_RADIO_SRC_MATCH_TABLE_READ( ( index * entrySize ), ramEntry, entrySize );
        ; Setup parameters for call to function macMemReadRam
        MOV     A,R7
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     B,R1
        MUL     AB
        MOV     R2,A
        MOV     R0,B
        CLR     A
        ADD     A,R0
        MOV     R3,A
        MOV     A,#0x61
        ADDC    A,R3
        MOV     R3,A
        LCALL   ??macMemReadRam?relay
//  432      
//  433     if( osal_memcmp( pAddr, ramEntry, entrySize ) == TRUE )
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,R7
        MOV     R4,?V0 + 0
        MOV     R5,#0x0
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   ??osal_memcmp?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??macSrcMatchCheckSrcAddr_3 & 0xFFFF
//  434     {
//  435       /* Match found */
//  436       return index;
        MOV     A,R6
        MOV     R1,A
        SJMP    ??macSrcMatchCheckSrcAddr_6
//  437     }
//  438   }
//  439   
//  440   return MAC_SRCMATCH_INVALID_INDEX;
??macSrcMatchCheckSrcAddr_4:
        MOV     R1,#-0x1
??macSrcMatchCheckSrcAddr_6:
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
//  441 }
//  442 
//  443 /*********************************************************************
//  444  * @fn          macSrcMatchSetPendEnBit
//  445  *
//  446  * @brief       Set the enable bit in the source address table
//  447  *
//  448  * @param       index - index of the entry in the source address table
//  449  *
//  450  * @return      none
//  451  */
//  452 static void macSrcMatchSetPendEnBit( uint8 index )
//  453 {
//  454   uint24 enable;
//  455   uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
//  456        
//  457   enable = MAC_RADIO_SRC_MATCH_GET_PENDEN(); 
//  458       
//  459   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
//  460   {
//  461     enable |= ( (uint24)0x01 << index );
//  462     osal_buffer_uint24( buf, enable );
//  463     MAC_RADIO_SRC_MATCH_SET_SHORTPENDEN( buf );
//  464   }
//  465   else
//  466   {
//  467     enable |= ( (uint24)0x01 << ( index * 2 ) );
//  468     osal_buffer_uint24( buf, enable );
//  469     MAC_RADIO_SRC_MATCH_SET_EXTPENDEN( buf );
//  470   }
//  471 }
//  472 
//  473 /*********************************************************************
//  474  * @fn          macSrcMatchSetEnableBit
//  475  *
//  476  * @brief       Set or clear the enable bit in the SRCMATCH EN register
//  477  *
//  478  * @param       index - index of the entry in the source address table
//  479  * @param       option - true (set the enable bit), or false (clear the enable bit)
//  480  *
//  481  * @return      none
//  482  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  483 static void macSrcMatchSetEnableBit( uint8 index, bool option )
macSrcMatchSetEnableBit:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function macSrcMatchSetEnableBit
        CODE
//  484 {
        FUNCALL macSrcMatchSetEnableBit, macSrcMatchGetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchSetEnableBit, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchSetEnableBit, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchSetEnableBit, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchSetEnableBit, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  485   uint24 enable;  
//  486   
//  487   enable = MAC_RADIO_SRC_MATCH_GET_EN(); 
        ; Setup parameters for call to function macSrcMatchGetEnableBit
        LCALL   ??macSrcMatchGetEnableBit?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  488       
//  489   if( option == TRUE )
        MOV     A,#0x1
        XRL     A,R7
        MOV     DPTR,#macSrcMatchAddrMode
        JNZ     ??macSrcMatchSetEnableBit_0
//  490   {
//  491     if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        JNZ     ??macSrcMatchSetEnableBit_1
//  492     {
//  493       enable |= ( (uint24)0x01 << index );
//  494       MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     A,R6
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
??macSrcMatchSetEnableBit_2:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#-0x7d
        SJMP    ??macSrcMatchSetEnableBit_3
        CFI CFA_XSP16 add(XSP16, 16)
//  495     }
//  496     else
//  497     {
//  498       enable |= ( (uint24)0x01 << ( index * 2 ) );
//  499       MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
??macSrcMatchSetEnableBit_1:
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        SJMP    ??macSrcMatchSetEnableBit_4
//  500     }
//  501   }
//  502   else
//  503   {
//  504     if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
??macSrcMatchSetEnableBit_0:
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        JNZ     ??macSrcMatchSetEnableBit_5
//  505     {
//  506       enable &= ~( (uint24)0x01 << index );
//  507       MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     A,R6
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 4
        LCALL   ?L_NOT
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_AND
        SJMP    ??macSrcMatchSetEnableBit_2
//  508     }
//  509     else
//  510     {
//  511       enable &= ~( (uint24)0x01 << ( index * 2 ) );
//  512       MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
??macSrcMatchSetEnableBit_5:
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 4
        LCALL   ?L_NOT
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_AND
??macSrcMatchSetEnableBit_4:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#-0x7a
??macSrcMatchSetEnableBit_3:
        MOV     R3,#0x61
        LCALL   ??osal_buffer_uint24?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  513     }
//  514   }
//  515 }
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  516 
//  517 /*********************************************************************
//  518  * @fn          macSrcMatchCheckEnableBit
//  519  *
//  520  * @brief       Check the enable bit in the source address table
//  521  *
//  522  * @param       index - index of the entry in the source address table
//  523  *
//  524  * @return      TRUE or FALSE
//  525  */
//  526 static bool macSrcMatchCheckEnableBit( uint8 index )
//  527 {
//  528   uint24 enable;
//  529   
//  530   if( macSrcMatchAddrMode == SADDR_MODE_EXT )
//  531   {
//  532     index *= 2;
//  533   }
//  534   
//  535   enable = MAC_RADIO_SRC_MATCH_GET_EN();
//  536      
//  537   if( enable & ( (uint24)0x01 << index ) )
//  538   {
//  539     return TRUE;
//  540   }
//  541 
//  542   return FALSE; 
//  543 }
//  544  
//  545 /*********************************************************************
//  546  * @fn          macSrcMatchGetEnableBit
//  547  *
//  548  * @brief       Return the SRCMATCH enable bitmap
//  549  *
//  550  * @param       none
//  551  *
//  552  * @return      uint24 - 24 bits bitmap
//  553  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  554 static uint24 macSrcMatchGetEnableBit( void )
macSrcMatchGetEnableBit:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function macSrcMatchGetEnableBit
        CODE
//  555 { 
        FUNCALL macSrcMatchGetEnableBit, macMemReadRam
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchGetEnableBit, macMemReadRam
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchGetEnableBit, osal_build_uint32
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 3)
//  556   uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
//  557   
//  558   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        JNZ     ??macSrcMatchGetEnableBit_0
//  559   {
//  560     MAC_RADIO_GET_SRC_SHORTEN( buf );
        ; Setup parameters for call to function macMemReadRam
        MOV     R2,#-0x7d
        SJMP    ??macSrcMatchGetEnableBit_1
//  561   }
//  562   else
//  563   {
//  564     MAC_RADIO_GET_SRC_EXTEN( buf );
??macSrcMatchGetEnableBit_0:
        ; Setup parameters for call to function macMemReadRam
        MOV     R2,#-0x7a
??macSrcMatchGetEnableBit_1:
        MOV     R3,#0x61
        LCALL   ??macMemReadRam?relay
//  565   }
//  566   
//  567   return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_build_uint32?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock13
//  568 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for macSrcMatchAddrMode>`:
        DATA8
        DB 2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchEnable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchAddEntry?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchDeleteEntry?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchDeleteEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchAckAllPending?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchAckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchCheckAllPending?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchCheckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchCheckResult?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchCheckResult

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macSrcMatchCheckSrcAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macSrcMatchCheckSrcAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macSrcMatchSetEnableBit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macSrcMatchSetEnableBit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macSrcMatchGetEnableBit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macSrcMatchGetEnableBit

        END
//  569 
//  570 /*********************************************************************
//  571  * @fn          macSrcMatchGetPendEnBit
//  572  *
//  573  * @brief       Return the SRCMATCH Pend enable bitmap
//  574  *
//  575  * @param       none
//  576  *
//  577  * @return      uint24 - 24 bits bitmap
//  578  */
//  579 static uint24 macSrcMatchGetPendEnBit( void )
//  580 {
//  581   uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
//  582 
//  583   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
//  584   {
//  585     MAC_RADIO_GET_SRC_SHORTPENDEN( buf );
//  586   }
//  587   else
//  588   {
//  589     MAC_RADIO_GET_SRC_EXTENPEND( buf );
//  590   }
//  591   
//  592   return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
//  593 }
//  594 
//  595 
// 
// 1 211 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//     3 bytes in segment XDATA_Z
// 
// 1 266 bytes of CODE  memory
//     4 bytes of XDATA memory
//
//Errors: none
//Warnings: none
