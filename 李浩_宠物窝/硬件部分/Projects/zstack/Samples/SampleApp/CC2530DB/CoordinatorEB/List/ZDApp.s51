///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        04/Dec/2019  15:20:25 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Components\stack\zdo\ZDApp.c                  /
//    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤ /
//                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wCoord.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤ /
//                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg            /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\202 /
//                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\stack\zdo\Z /
//                          DApp.c -D ZAPP_P1 -D MT_TASK -D MT_SYS_FUNC -D    /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinatorEB\List\ -lA C:\Users\25814\Desktop\2020 /
//                          ±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\CoordinatorEB\List\           /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinatorEB\Obj\ -e --no_code_motion --debug      /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\   /
//                          -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤ /
//                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\Source\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı /
//                          –¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\include\ -I           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\include\ -I           /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\high_level\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\ -I   /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\singl /
//                          e_chip\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô /
//                          _—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\mt\ -I         /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\osal\include\ -I          /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\saddr\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\sdata\ -I        /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\af\ -I              /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\nwk\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sapi\ -I            /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sec\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sys\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\zdo\ -I             /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\ -I                  /
//                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\f8w\ -Ohz            /
//    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ /
//                          ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinatorEB\List\ZDApp.s51                        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??AddrMgrWriteNVRequest?relay
        FUNCTION ??AddrMgrWriteNVRequest?relay,0203H
        PUBLIC ??ZDAppCheckForHoldKey?relay
        FUNCTION ??ZDAppCheckForHoldKey?relay,0203H
        PUBLIC ??ZDAppDetermineDeviceType?relay
        FUNCTION ??ZDAppDetermineDeviceType?relay,0203H
        PUBLIC ??ZDApp_AnnounceNewAddress?relay
        FUNCTION ??ZDApp_AnnounceNewAddress?relay,0203H
        PUBLIC ??ZDApp_ChangeMatchDescRespPermission?relay
        FUNCTION ??ZDApp_ChangeMatchDescRespPermission?relay,0203H
        PUBLIC ??ZDApp_CoordStartPANIDConflictCB?relay
        FUNCTION ??ZDApp_CoordStartPANIDConflictCB?relay,0203H
        PUBLIC ??ZDApp_DeviceAuthEvt?relay
        FUNCTION ??ZDApp_DeviceAuthEvt?relay,0203H
        PUBLIC ??ZDApp_DeviceConfigured?relay
        FUNCTION ??ZDApp_DeviceConfigured?relay,0203H
        PUBLIC ??ZDApp_InMsgCB?relay
        FUNCTION ??ZDApp_InMsgCB?relay,0203H
        PUBLIC ??ZDApp_Init?relay
        FUNCTION ??ZDApp_Init?relay,0203H
        PUBLIC ??ZDApp_InitUserDesc?relay
        FUNCTION ??ZDApp_InitUserDesc?relay,0203H
        PUBLIC ??ZDApp_InitZdoCBFunc?relay
        FUNCTION ??ZDApp_InitZdoCBFunc?relay,0203H
        PUBLIC ??ZDApp_JoinReq?relay
        FUNCTION ??ZDApp_JoinReq?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlBypass?relay
        FUNCTION ??ZDApp_LeaveCtrlBypass?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlInit?relay
        FUNCTION ??ZDApp_LeaveCtrlInit?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlReset?relay
        FUNCTION ??ZDApp_LeaveCtrlReset?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlSet?relay
        FUNCTION ??ZDApp_LeaveCtrlSet?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlStartup?relay
        FUNCTION ??ZDApp_LeaveCtrlStartup?relay,0203H
        PUBLIC ??ZDApp_LeaveReset?relay
        FUNCTION ??ZDApp_LeaveReset?relay,0203H
        PUBLIC ??ZDApp_LeaveUpdate?relay
        FUNCTION ??ZDApp_LeaveUpdate?relay,0203H
        PUBLIC ??ZDApp_NVUpdate?relay
        FUNCTION ??ZDApp_NVUpdate?relay,0203H
        PUBLIC ??ZDApp_NetworkDiscoveryReq?relay
        FUNCTION ??ZDApp_NetworkDiscoveryReq?relay,0203H
        PUBLIC ??ZDApp_NetworkInit?relay
        FUNCTION ??ZDApp_NetworkInit?relay,0203H
        PUBLIC ??ZDApp_NetworkStartEvt?relay
        FUNCTION ??ZDApp_NetworkStartEvt?relay,0203H
        PUBLIC ??ZDApp_NodeProfileSync?relay
        FUNCTION ??ZDApp_NodeProfileSync?relay,0203H
        PUBLIC ??ZDApp_NwkDescListProcessing?relay
        FUNCTION ??ZDApp_NwkDescListProcessing?relay,0203H
        PUBLIC ??ZDApp_NwkStateUpdateCB?relay
        FUNCTION ??ZDApp_NwkStateUpdateCB?relay,0203H
        PUBLIC ??ZDApp_ProcessMsgCBs?relay
        FUNCTION ??ZDApp_ProcessMsgCBs?relay,0203H
        PUBLIC ??ZDApp_ProcessNetworkJoin?relay
        FUNCTION ??ZDApp_ProcessNetworkJoin?relay,0203H
        PUBLIC ??ZDApp_ProcessOSALMsg?relay
        FUNCTION ??ZDApp_ProcessOSALMsg?relay,0203H
        PUBLIC ??ZDApp_ProcessSecEvent?relay
        FUNCTION ??ZDApp_ProcessSecEvent?relay,0203H
        PUBLIC ??ZDApp_ProcessSecMsg?relay
        FUNCTION ??ZDApp_ProcessSecMsg?relay,0203H
        PUBLIC ??ZDApp_ReadNetworkRestoreState?relay
        FUNCTION ??ZDApp_ReadNetworkRestoreState?relay,0203H
        PUBLIC ??ZDApp_RegisterCBs?relay
        FUNCTION ??ZDApp_RegisterCBs?relay,0203H
        PUBLIC ??ZDApp_ResetNwkKey?relay
        FUNCTION ??ZDApp_ResetNwkKey?relay,0203H
        PUBLIC ??ZDApp_ResetTimerCancel?relay
        FUNCTION ??ZDApp_ResetTimerCancel?relay,0203H
        PUBLIC ??ZDApp_ResetTimerStart?relay
        FUNCTION ??ZDApp_ResetTimerStart?relay,0203H
        PUBLIC ??ZDApp_RestoreNetworkState?relay
        FUNCTION ??ZDApp_RestoreNetworkState?relay,0203H
        PUBLIC ??ZDApp_RestoreNwkKey?relay
        FUNCTION ??ZDApp_RestoreNwkKey?relay,0203H
        PUBLIC ??ZDApp_SaveNetworkStateEvt?relay
        FUNCTION ??ZDApp_SaveNetworkStateEvt?relay,0203H
        PUBLIC ??ZDApp_SaveNwkKey?relay
        FUNCTION ??ZDApp_SaveNwkKey?relay,0203H
        PUBLIC ??ZDApp_SecInit?relay
        FUNCTION ??ZDApp_SecInit?relay,0203H
        PUBLIC ??ZDApp_SendEventMsg?relay
        FUNCTION ??ZDApp_SendEventMsg?relay,0203H
        PUBLIC ??ZDApp_SendMsg?relay
        FUNCTION ??ZDApp_SendMsg?relay,0203H
        PUBLIC ??ZDApp_StartJoiningCycle?relay
        FUNCTION ??ZDApp_StartJoiningCycle?relay,0203H
        PUBLIC ??ZDApp_StopJoiningCycle?relay
        FUNCTION ??ZDApp_StopJoiningCycle?relay,0203H
        PUBLIC ??ZDApp_event_loop?relay
        FUNCTION ??ZDApp_event_loop?relay,0203H
        PUBLIC ??ZDOInitDevice?relay
        FUNCTION ??ZDOInitDevice?relay,0203H
        PUBLIC ??ZDO_AddrChangeIndicationCB?relay
        FUNCTION ??ZDO_AddrChangeIndicationCB?relay,0203H
        PUBLIC ??ZDO_ConcentratorIndicationCB?relay
        FUNCTION ??ZDO_ConcentratorIndicationCB?relay,0203H
        PUBLIC ??ZDO_DeregisterForZdoCB?relay
        FUNCTION ??ZDO_DeregisterForZdoCB?relay,0203H
        PUBLIC ??ZDO_JoinConfirmCB?relay
        FUNCTION ??ZDO_JoinConfirmCB?relay,0203H
        PUBLIC ??ZDO_JoinIndicationCB?relay
        FUNCTION ??ZDO_JoinIndicationCB?relay,0203H
        PUBLIC ??ZDO_LeaveCnf?relay
        FUNCTION ??ZDO_LeaveCnf?relay,0203H
        PUBLIC ??ZDO_LeaveInd?relay
        FUNCTION ??ZDO_LeaveInd?relay,0203H
        PUBLIC ??ZDO_ManytoOneFailureIndicationCB?relay
        FUNCTION ??ZDO_ManytoOneFailureIndicationCB?relay,0203H
        PUBLIC ??ZDO_NetworkDiscoveryConfirmCB?relay
        FUNCTION ??ZDO_NetworkDiscoveryConfirmCB?relay,0203H
        PUBLIC ??ZDO_NetworkFormationConfirmCB?relay
        FUNCTION ??ZDO_NetworkFormationConfirmCB?relay,0203H
        PUBLIC ??ZDO_PollConfirmCB?relay
        FUNCTION ??ZDO_PollConfirmCB?relay,0203H
        PUBLIC ??ZDO_RegisterForZdoCB?relay
        FUNCTION ??ZDO_RegisterForZdoCB?relay,0203H
        PUBLIC ??ZDO_SrcRtgIndCB?relay
        FUNCTION ??ZDO_SrcRtgIndCB?relay,0203H
        PUBLIC ??ZDO_StartRouterConfirmCB?relay
        FUNCTION ??ZDO_StartRouterConfirmCB?relay,0203H
        PUBLIC ??ZDO_SyncIndicationCB?relay
        FUNCTION ??ZDO_SyncIndicationCB?relay,0203H
        PUBLIC ??ZDO_UpdateDeviceIndication?relay
        FUNCTION ??ZDO_UpdateDeviceIndication?relay,0203H
        PUBLIC ??ZDO_beaconNotifyIndCB?relay
        FUNCTION ??ZDO_beaconNotifyIndCB?relay,0203H
        PUBLIC AddrMgrWriteNVRequest
        FUNCTION AddrMgrWriteNVRequest,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MatchRsps
        PUBLIC ZDAppCheckForHoldKey
        FUNCTION ZDAppCheckForHoldKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppDetermineDeviceType
        FUNCTION ZDAppDetermineDeviceType,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppNwkAddr
        PUBLIC ZDAppTaskID
        PUBLIC ZDApp_AnnounceNewAddress
        FUNCTION ZDApp_AnnounceNewAddress,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDApp_AutoFindMode_epDesc
        PUBLIC ZDApp_ChangeMatchDescRespPermission
        FUNCTION ZDApp_ChangeMatchDescRespPermission,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_CoordStartPANIDConflictCB
        FUNCTION ZDApp_CoordStartPANIDConflictCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_DeviceAuthEvt
        FUNCTION ZDApp_DeviceAuthEvt,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_DeviceConfigured
        FUNCTION ZDApp_DeviceConfigured,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_Init
        FUNCTION ZDApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_InitUserDesc
        FUNCTION ZDApp_InitUserDesc,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_InitZdoCBFunc
        FUNCTION ZDApp_InitZdoCBFunc,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_JoinReq
        FUNCTION ZDApp_JoinReq,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDApp_LeaveCtrl
        PUBLIC ZDApp_LeaveCtrlBypass
        FUNCTION ZDApp_LeaveCtrlBypass,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveCtrlInit
        FUNCTION ZDApp_LeaveCtrlInit,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlReset
        FUNCTION ZDApp_LeaveCtrlReset,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlSet
        FUNCTION ZDApp_LeaveCtrlSet,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlStartup
        FUNCTION ZDApp_LeaveCtrlStartup,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_LeaveUpdate
        FUNCTION ZDApp_LeaveUpdate,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_NetworkDiscoveryReq
        FUNCTION ZDApp_NetworkDiscoveryReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NetworkStartEvt
        FUNCTION ZDApp_NetworkStartEvt,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_NwkDescListProcessing
        FUNCTION ZDApp_NwkDescListProcessing,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessMsgCBs
        FUNCTION ZDApp_ProcessMsgCBs,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 54, STACK
        PUBLIC ZDApp_ProcessNetworkJoin
        FUNCTION ZDApp_ProcessNetworkJoin,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_ProcessOSALMsg
        FUNCTION ZDApp_ProcessOSALMsg,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessSecEvent
        FUNCTION ZDApp_ProcessSecEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_ProcessSecMsg
        FUNCTION ZDApp_ProcessSecMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RegisterCBs
        FUNCTION ZDApp_RegisterCBs,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetNwkKey
        FUNCTION ZDApp_ResetNwkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_ResetTimerCancel
        FUNCTION ZDApp_ResetTimerCancel,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_RestoreNetworkState
        FUNCTION ZDApp_RestoreNetworkState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZDApp_SaveNetworkStateEvt
        FUNCTION ZDApp_SaveNetworkStateEvt,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_SaveNwkKey
        FUNCTION ZDApp_SaveNwkKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZDApp_SavedPollRate
        PUBLIC ZDApp_SecInit
        FUNCTION ZDApp_SecInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_SendEventMsg
        FUNCTION ZDApp_SendEventMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_SendMsg
        FUNCTION ZDApp_SendMsg,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDApp_StartJoiningCycle
        FUNCTION ZDApp_StartJoiningCycle,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopJoiningCycle
        FUNCTION ZDApp_StopJoiningCycle,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_epDesc
        PUBLIC ZDApp_event_loop
        FUNCTION ZDApp_event_loop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDOInitDevice
        FUNCTION ZDOInitDevice,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_AddrChangeIndicationCB
        FUNCTION ZDO_AddrChangeIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_ConcentratorIndicationCB
        FUNCTION ZDO_ConcentratorIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_DeregisterForZdoCB
        FUNCTION ZDO_DeregisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_JoinConfirmCB
        FUNCTION ZDO_JoinConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_JoinIndicationCB
        FUNCTION ZDO_JoinIndicationCB,0203H
        ARGFRAME XSTACK, 1, STACK
        PUBLIC ZDO_LeaveCnf
        FUNCTION ZDO_LeaveCnf,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDO_LeaveInd
        FUNCTION ZDO_LeaveInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_ManytoOneFailureIndicationCB
        FUNCTION ZDO_ManytoOneFailureIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_NetworkDiscoveryConfirmCB
        FUNCTION ZDO_NetworkDiscoveryConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 3, STACK
        PUBLIC ZDO_NetworkFormationConfirmCB
        FUNCTION ZDO_NetworkFormationConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_PollConfirmCB
        FUNCTION ZDO_PollConfirmCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SrcRtgIndCB
        FUNCTION ZDO_SrcRtgIndCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_StartRouterConfirmCB
        FUNCTION ZDO_StartRouterConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_SyncIndicationCB
        FUNCTION ZDO_SyncIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_UpdateDeviceIndication
        FUNCTION ZDO_UpdateDeviceIndication,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UseExtendedPANID
        PUBLIC ZDO_beaconNotifyIndCB
        FUNCTION ZDO_beaconNotifyIndCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBWEAK __Constant_1
        PUBWEAK __Constant_3e8
        PUBLIC _tmpRejoinState
        PUBLIC continueJoining
        PUBLIC devStartMode
        PUBLIC devState
        PUBLIC nwkFrameCounterChanges
        PUBLIC nwkStatus
        PUBLIC retryCnt
        PUBLIC zdappMgmtNwkDiscReqInProgress
        PUBLIC zdappMgmtNwkDiscRspAddr
        PUBLIC zdappMgmtNwkDiscRspTransSeq
        PUBLIC zdappMgmtNwkDiscStartIndex
        PUBLIC zdappMgmtSavedNwkState
        PUBLIC zdoCBFunc
        PUBLIC zdoDiscCounter
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
ZDO_Init            SYMBOL "ZDO_Init"
afRegister          SYMBOL "afRegister"
HalLedBlink         SYMBOL "HalLedBlink"
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
osal_set_event      SYMBOL "osal_set_event"
ZDO_StartDevice     SYMBOL "ZDO_StartDevice"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_pwrmgr_device  SYMBOL "osal_pwrmgr_device"
ZDO_UpdateNwkStatus SYMBOL "ZDO_UpdateNwkStatus"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
zgInitItems         SYMBOL "zgInitItems"
ZDConfig_InitDescriptors SYMBOL "ZDConfig_InitDescriptors"
osal_rand           SYMBOL "osal_rand"
NLME_SetBroadcastFilter SYMBOL "NLME_SetBroadcastFilter"
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
NLME_GetEnergyThreshold SYMBOL "NLME_GetEnergyThreshold"
NLME_SetEnergyThreshold SYMBOL "NLME_SetEnergyThreshold"
NLME_StartRouterRequest SYMBOL "NLME_StartRouterRequest"
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
NLME_InitNV         SYMBOL "NLME_InitNV"
NLME_RestoreFromNV  SYMBOL "NLME_RestoreFromNV"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
osal_memset         SYMBOL "osal_memset"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_read        SYMBOL "osal_nv_read"
HalKeyRead          SYMBOL "HalKeyRead"
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
ZDO_UpdateAddrManager SYMBOL "ZDO_UpdateAddrManager"
osal_mem_free       SYMBOL "osal_mem_free"
ZDO_ParseBindUnbindReq SYMBOL "ZDO_ParseBindUnbindReq"
ZDO_ProcessBindUnbindReq SYMBOL "ZDO_ProcessBindUnbindReq"
ZDMatchSendState    SYMBOL "ZDMatchSendState"
ZDO_ParseEndDeviceBindReq SYMBOL "ZDO_ParseEndDeviceBindReq"
ZDO_MatchEndDeviceBind SYMBOL "ZDO_MatchEndDeviceBind"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
ZMacSetReq          SYMBOL "ZMacSetReq"
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
SSP_ReadNwkActiveKey SYMBOL "SSP_ReadNwkActiveKey"
osal_nv_write       SYMBOL "osal_nv_write"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
osal_memcpy         SYMBOL "osal_memcpy"
NLME_RemoveChild    SYMBOL "NLME_RemoveChild"
RTG_RemoveRtgEntry  SYMBOL "RTG_RemoveRtgEntry"
nwkNeighborRemove   SYMBOL "nwkNeighborRemove"
NLME_NetworkDiscoveryRequest SYMBOL "NLME_NetworkDiscoveryRequest"
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_msg_send       SYMBOL "osal_msg_send"
nwk_getNwkDescList  SYMBOL "nwk_getNwkDescList"
sAddrExtCmp         SYMBOL "sAddrExtCmp"
HalLedSet           SYMBOL "HalLedSet"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
NLME_LeaveRsp       SYMBOL "NLME_LeaveRsp"
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
RTG_MTORouteReq     SYMBOL "RTG_MTORouteReq"
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
afSetMatch          SYMBOL "afSetMatch"
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
APSME_HoldDataRequests SYMBOL "APSME_HoldDataRequests"
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
??APSME_HoldDataRequests?relay SYMBOL "?relay", APSME_HoldDataRequests
??HalKeyRead?relay  SYMBOL "?relay", HalKeyRead
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
??NLME_GetEnergyThreshold?relay SYMBOL "?relay", NLME_GetEnergyThreshold
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??NLME_InitNV?relay SYMBOL "?relay", NLME_InitNV
??NLME_JoinRequest?relay SYMBOL "?relay", NLME_JoinRequest
??NLME_LeaveRsp?relay SYMBOL "?relay", NLME_LeaveRsp
??NLME_NetworkDiscoveryRequest?relay SYMBOL "?relay", NLME_NetworkDiscoveryRequest
??NLME_NwkDiscTerm?relay SYMBOL "?relay", NLME_NwkDiscTerm
??NLME_RemoveChild?relay SYMBOL "?relay", NLME_RemoveChild
??NLME_RestoreFromNV?relay SYMBOL "?relay", NLME_RestoreFromNV
??NLME_SetBroadcastFilter?relay SYMBOL "?relay", NLME_SetBroadcastFilter
??NLME_SetEnergyThreshold?relay SYMBOL "?relay", NLME_SetEnergyThreshold
??NLME_SetPollRate?relay SYMBOL "?relay", NLME_SetPollRate
??NLME_SetQueuedPollRate?relay SYMBOL "?relay", NLME_SetQueuedPollRate
??NLME_SetResponseRate?relay SYMBOL "?relay", NLME_SetResponseRate
??NLME_StartRouterRequest?relay SYMBOL "?relay", NLME_StartRouterRequest
??RTG_MTORouteReq?relay SYMBOL "?relay", RTG_MTORouteReq
??RTG_RemoveRtgEntry?relay SYMBOL "?relay", RTG_RemoveRtgEntry
??SSP_ReadNwkActiveKey?relay SYMBOL "?relay", SSP_ReadNwkActiveKey
??ZDConfig_InitDescriptors?relay SYMBOL "?relay", ZDConfig_InitDescriptors
??ZDMatchSendState?relay SYMBOL "?relay", ZDMatchSendState
??ZDO_Init?relay    SYMBOL "?relay", ZDO_Init
??ZDO_MatchEndDeviceBind?relay SYMBOL "?relay", ZDO_MatchEndDeviceBind
??ZDO_ParseAddrRsp?relay SYMBOL "?relay", ZDO_ParseAddrRsp
??ZDO_ParseBindUnbindReq?relay SYMBOL "?relay", ZDO_ParseBindUnbindReq
??ZDO_ParseEndDeviceBindReq?relay SYMBOL "?relay", ZDO_ParseEndDeviceBindReq
??ZDO_ProcessBindUnbindReq?relay SYMBOL "?relay", ZDO_ProcessBindUnbindReq
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDO_StartDevice?relay SYMBOL "?relay", ZDO_StartDevice
??ZDO_UpdateAddrManager?relay SYMBOL "?relay", ZDO_UpdateAddrManager
??ZDO_UpdateNwkStatus?relay SYMBOL "?relay", ZDO_UpdateNwkStatus
??ZDP_DeviceAnnce?relay SYMBOL "?relay", ZDP_DeviceAnnce
??ZDP_GenericRsp?relay SYMBOL "?relay", ZDP_GenericRsp
??ZDP_IncomingData?relay SYMBOL "?relay", ZDP_IncomingData
??ZDSecMgrAddrClear?relay SYMBOL "?relay", ZDSecMgrAddrClear
??ZDSecMgrDeviceRemoveByExtAddr?relay SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
??ZDSecMgrInit?relay SYMBOL "?relay", ZDSecMgrInit
??ZDSecMgrNewDeviceEvent?relay SYMBOL "?relay", ZDSecMgrNewDeviceEvent
??ZDSecMgrSaveTCLinkKey?relay SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
??ZDSecMgrUpdateDeviceInd?relay SYMBOL "?relay", ZDSecMgrUpdateDeviceInd
??ZMacSetReq?relay  SYMBOL "?relay", ZMacSetReq
??afRegister?relay  SYMBOL "?relay", afRegister
??afSetMatch?relay  SYMBOL "?relay", afSetMatch
??nwkNeighborInitTable?relay SYMBOL "?relay", nwkNeighborInitTable
??nwkNeighborRemove?relay SYMBOL "?relay", nwkNeighborRemove
??nwk_ExtPANIDValid?relay SYMBOL "?relay", nwk_ExtPANIDValid
??nwk_getNwkDescList?relay SYMBOL "?relay", nwk_getNwkDescList
??osal_get_timeoutEx?relay SYMBOL "?relay", osal_get_timeoutEx
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_pwrmgr_device?relay SYMBOL "?relay", osal_pwrmgr_device
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??sAddrExtCmp?relay SYMBOL "?relay", sAddrExtCmp
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
??zgInitItems?relay SYMBOL "?relay", zgInitItems
??zgReadStartupOptions?relay SYMBOL "?relay", zgReadStartupOptions
??zgWriteStartupOptions?relay SYMBOL "?relay", zgWriteStartupOptions
AddrMgrWriteNVRequest SYMBOL "AddrMgrWriteNVRequest"
??AddrMgrWriteNVRequest?relay SYMBOL "?relay", AddrMgrWriteNVRequest
ZDAppCheckForHoldKey SYMBOL "ZDAppCheckForHoldKey"
??ZDAppCheckForHoldKey?relay SYMBOL "?relay", ZDAppCheckForHoldKey
ZDAppDetermineDeviceType SYMBOL "ZDAppDetermineDeviceType"
??ZDAppDetermineDeviceType?relay SYMBOL "?relay", ZDAppDetermineDeviceType
ZDApp_AnnounceNewAddress SYMBOL "ZDApp_AnnounceNewAddress"
??ZDApp_AnnounceNewAddress?relay SYMBOL "?relay", ZDApp_AnnounceNewAddress
ZDApp_ChangeMatchDescRespPermission SYMBOL "ZDApp_ChangeMatchDescRespPermission"
??ZDApp_ChangeMatchDescRespPermission?relay SYMBOL "?relay", ZDApp_ChangeMatchDescRespPermission
ZDApp_CoordStartPANIDConflictCB SYMBOL "ZDApp_CoordStartPANIDConflictCB"
??ZDApp_CoordStartPANIDConflictCB?relay SYMBOL "?relay", ZDApp_CoordStartPANIDConflictCB
ZDApp_DeviceAuthEvt SYMBOL "ZDApp_DeviceAuthEvt"
??ZDApp_DeviceAuthEvt?relay SYMBOL "?relay", ZDApp_DeviceAuthEvt
ZDApp_DeviceConfigured SYMBOL "ZDApp_DeviceConfigured"
??ZDApp_DeviceConfigured?relay SYMBOL "?relay", ZDApp_DeviceConfigured
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
??ZDApp_InMsgCB?relay SYMBOL "?relay", ZDApp_InMsgCB
ZDApp_Init          SYMBOL "ZDApp_Init"
??ZDApp_Init?relay  SYMBOL "?relay", ZDApp_Init
ZDApp_InitUserDesc  SYMBOL "ZDApp_InitUserDesc"
??ZDApp_InitUserDesc?relay SYMBOL "?relay", ZDApp_InitUserDesc
ZDApp_InitZdoCBFunc SYMBOL "ZDApp_InitZdoCBFunc"
??ZDApp_InitZdoCBFunc?relay SYMBOL "?relay", ZDApp_InitZdoCBFunc
ZDApp_JoinReq       SYMBOL "ZDApp_JoinReq"
??ZDApp_JoinReq?relay SYMBOL "?relay", ZDApp_JoinReq
ZDApp_LeaveCtrlBypass SYMBOL "ZDApp_LeaveCtrlBypass"
??ZDApp_LeaveCtrlBypass?relay SYMBOL "?relay", ZDApp_LeaveCtrlBypass
ZDApp_LeaveCtrlInit SYMBOL "ZDApp_LeaveCtrlInit"
??ZDApp_LeaveCtrlInit?relay SYMBOL "?relay", ZDApp_LeaveCtrlInit
ZDApp_LeaveCtrlReset SYMBOL "ZDApp_LeaveCtrlReset"
??ZDApp_LeaveCtrlReset?relay SYMBOL "?relay", ZDApp_LeaveCtrlReset
ZDApp_LeaveCtrlSet  SYMBOL "ZDApp_LeaveCtrlSet"
??ZDApp_LeaveCtrlSet?relay SYMBOL "?relay", ZDApp_LeaveCtrlSet
ZDApp_LeaveCtrlStartup SYMBOL "ZDApp_LeaveCtrlStartup"
??ZDApp_LeaveCtrlStartup?relay SYMBOL "?relay", ZDApp_LeaveCtrlStartup
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
??ZDApp_LeaveReset?relay SYMBOL "?relay", ZDApp_LeaveReset
ZDApp_LeaveUpdate   SYMBOL "ZDApp_LeaveUpdate"
??ZDApp_LeaveUpdate?relay SYMBOL "?relay", ZDApp_LeaveUpdate
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
??ZDApp_NVUpdate?relay SYMBOL "?relay", ZDApp_NVUpdate
ZDApp_NetworkDiscoveryReq SYMBOL "ZDApp_NetworkDiscoveryReq"
??ZDApp_NetworkDiscoveryReq?relay SYMBOL "?relay", ZDApp_NetworkDiscoveryReq
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
??ZDApp_NetworkInit?relay SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NetworkStartEvt SYMBOL "ZDApp_NetworkStartEvt"
??ZDApp_NetworkStartEvt?relay SYMBOL "?relay", ZDApp_NetworkStartEvt
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
??ZDApp_NodeProfileSync?relay SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_NwkDescListProcessing SYMBOL "ZDApp_NwkDescListProcessing"
??ZDApp_NwkDescListProcessing?relay SYMBOL "?relay", ZDApp_NwkDescListProcessing
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
??ZDApp_NwkStateUpdateCB?relay SYMBOL "?relay", ZDApp_NwkStateUpdateCB
ZDApp_ProcessMsgCBs SYMBOL "ZDApp_ProcessMsgCBs"
??ZDApp_ProcessMsgCBs?relay SYMBOL "?relay", ZDApp_ProcessMsgCBs
ZDApp_ProcessNetworkJoin SYMBOL "ZDApp_ProcessNetworkJoin"
??ZDApp_ProcessNetworkJoin?relay SYMBOL "?relay", ZDApp_ProcessNetworkJoin
ZDApp_ProcessOSALMsg SYMBOL "ZDApp_ProcessOSALMsg"
??ZDApp_ProcessOSALMsg?relay SYMBOL "?relay", ZDApp_ProcessOSALMsg
ZDApp_ProcessSecEvent SYMBOL "ZDApp_ProcessSecEvent"
??ZDApp_ProcessSecEvent?relay SYMBOL "?relay", ZDApp_ProcessSecEvent
ZDApp_ProcessSecMsg SYMBOL "ZDApp_ProcessSecMsg"
??ZDApp_ProcessSecMsg?relay SYMBOL "?relay", ZDApp_ProcessSecMsg
ZDApp_ReadNetworkRestoreState SYMBOL "ZDApp_ReadNetworkRestoreState"
??ZDApp_ReadNetworkRestoreState?relay SYMBOL "?relay", ZDApp_ReadNetworkRestoreState
ZDApp_RegisterCBs   SYMBOL "ZDApp_RegisterCBs"
??ZDApp_RegisterCBs?relay SYMBOL "?relay", ZDApp_RegisterCBs
ZDApp_ResetNwkKey   SYMBOL "ZDApp_ResetNwkKey"
??ZDApp_ResetNwkKey?relay SYMBOL "?relay", ZDApp_ResetNwkKey
ZDApp_ResetTimerCancel SYMBOL "ZDApp_ResetTimerCancel"
??ZDApp_ResetTimerCancel?relay SYMBOL "?relay", ZDApp_ResetTimerCancel
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
??ZDApp_ResetTimerStart?relay SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNetworkState SYMBOL "ZDApp_RestoreNetworkState"
??ZDApp_RestoreNetworkState?relay SYMBOL "?relay", ZDApp_RestoreNetworkState
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
??ZDApp_RestoreNwkKey?relay SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_SaveNetworkStateEvt SYMBOL "ZDApp_SaveNetworkStateEvt"
??ZDApp_SaveNetworkStateEvt?relay SYMBOL "?relay", ZDApp_SaveNetworkStateEvt
ZDApp_SaveNwkKey    SYMBOL "ZDApp_SaveNwkKey"
??ZDApp_SaveNwkKey?relay SYMBOL "?relay", ZDApp_SaveNwkKey
ZDApp_SecInit       SYMBOL "ZDApp_SecInit"
??ZDApp_SecInit?relay SYMBOL "?relay", ZDApp_SecInit
ZDApp_SendEventMsg  SYMBOL "ZDApp_SendEventMsg"
??ZDApp_SendEventMsg?relay SYMBOL "?relay", ZDApp_SendEventMsg
ZDApp_SendMsg       SYMBOL "ZDApp_SendMsg"
??ZDApp_SendMsg?relay SYMBOL "?relay", ZDApp_SendMsg
ZDApp_StartJoiningCycle SYMBOL "ZDApp_StartJoiningCycle"
??ZDApp_StartJoiningCycle?relay SYMBOL "?relay", ZDApp_StartJoiningCycle
ZDApp_StopJoiningCycle SYMBOL "ZDApp_StopJoiningCycle"
??ZDApp_StopJoiningCycle?relay SYMBOL "?relay", ZDApp_StopJoiningCycle
ZDApp_event_loop    SYMBOL "ZDApp_event_loop"
??ZDApp_event_loop?relay SYMBOL "?relay", ZDApp_event_loop
ZDOInitDevice       SYMBOL "ZDOInitDevice"
??ZDOInitDevice?relay SYMBOL "?relay", ZDOInitDevice
ZDO_AddrChangeIndicationCB SYMBOL "ZDO_AddrChangeIndicationCB"
??ZDO_AddrChangeIndicationCB?relay SYMBOL "?relay", ZDO_AddrChangeIndicationCB
ZDO_ConcentratorIndicationCB SYMBOL "ZDO_ConcentratorIndicationCB"
??ZDO_ConcentratorIndicationCB?relay SYMBOL "?relay", ZDO_ConcentratorIndicationCB
ZDO_DeregisterForZdoCB SYMBOL "ZDO_DeregisterForZdoCB"
??ZDO_DeregisterForZdoCB?relay SYMBOL "?relay", ZDO_DeregisterForZdoCB
ZDO_JoinConfirmCB   SYMBOL "ZDO_JoinConfirmCB"
??ZDO_JoinConfirmCB?relay SYMBOL "?relay", ZDO_JoinConfirmCB
ZDO_JoinIndicationCB SYMBOL "ZDO_JoinIndicationCB"
??ZDO_JoinIndicationCB?relay SYMBOL "?relay", ZDO_JoinIndicationCB
ZDO_LeaveCnf        SYMBOL "ZDO_LeaveCnf"
??ZDO_LeaveCnf?relay SYMBOL "?relay", ZDO_LeaveCnf
ZDO_LeaveInd        SYMBOL "ZDO_LeaveInd"
??ZDO_LeaveInd?relay SYMBOL "?relay", ZDO_LeaveInd
ZDO_ManytoOneFailureIndicationCB SYMBOL "ZDO_ManytoOneFailureIndicationCB"
??ZDO_ManytoOneFailureIndicationCB?relay SYMBOL "?relay", ZDO_ManytoOneFailureIndicationCB
ZDO_NetworkDiscoveryConfirmCB SYMBOL "ZDO_NetworkDiscoveryConfirmCB"
??ZDO_NetworkDiscoveryConfirmCB?relay SYMBOL "?relay", ZDO_NetworkDiscoveryConfirmCB
ZDO_NetworkFormationConfirmCB SYMBOL "ZDO_NetworkFormationConfirmCB"
??ZDO_NetworkFormationConfirmCB?relay SYMBOL "?relay", ZDO_NetworkFormationConfirmCB
ZDO_PollConfirmCB   SYMBOL "ZDO_PollConfirmCB"
??ZDO_PollConfirmCB?relay SYMBOL "?relay", ZDO_PollConfirmCB
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
??ZDO_RegisterForZdoCB?relay SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_SrcRtgIndCB     SYMBOL "ZDO_SrcRtgIndCB"
??ZDO_SrcRtgIndCB?relay SYMBOL "?relay", ZDO_SrcRtgIndCB
ZDO_StartRouterConfirmCB SYMBOL "ZDO_StartRouterConfirmCB"
??ZDO_StartRouterConfirmCB?relay SYMBOL "?relay", ZDO_StartRouterConfirmCB
ZDO_SyncIndicationCB SYMBOL "ZDO_SyncIndicationCB"
??ZDO_SyncIndicationCB?relay SYMBOL "?relay", ZDO_SyncIndicationCB
ZDO_UpdateDeviceIndication SYMBOL "ZDO_UpdateDeviceIndication"
??ZDO_UpdateDeviceIndication?relay SYMBOL "?relay", ZDO_UpdateDeviceIndication
ZDO_beaconNotifyIndCB SYMBOL "ZDO_beaconNotifyIndCB"
??ZDO_beaconNotifyIndCB?relay SYMBOL "?relay", ZDO_beaconNotifyIndCB

        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Init
        FUNCTION ZDO_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgInitItems
        FUNCTION zgInitItems,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDConfig_InitDescriptors
        FUNCTION ZDConfig_InitDescriptors,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetBroadcastFilter
        FUNCTION NLME_SetBroadcastFilter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetEnergyThreshold
        FUNCTION NLME_GetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetEnergyThreshold
        FUNCTION NLME_SetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_StartRouterRequest
        FUNCTION NLME_StartRouterRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_InitNV
        FUNCTION NLME_InitNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RestoreFromNV
        FUNCTION NLME_RestoreFromNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalKeyRead
        FUNCTION HalKeyRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateAddrManager
        FUNCTION ZDO_UpdateAddrManager,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseBindUnbindReq
        FUNCTION ZDO_ParseBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ProcessBindUnbindReq
        FUNCTION ZDO_ProcessBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDMatchSendState
        FUNCTION ZDMatchSendState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEndDeviceBindReq
        FUNCTION ZDO_ParseEndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_MatchEndDeviceBind
        FUNCTION ZDO_MatchEndDeviceBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_ReadNwkActiveKey
        FUNCTION SSP_ReadNwkActiveKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RemoveChild
        FUNCTION NLME_RemoveChild,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_RemoveRtgEntry
        FUNCTION RTG_RemoveRtgEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborRemove
        FUNCTION nwkNeighborRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NetworkDiscoveryRequest
        FUNCTION NLME_NetworkDiscoveryRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNwkDescList
        FUNCTION nwk_getNwkDescList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveRsp
        FUNCTION NLME_LeaveRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_MTORouteReq
        FUNCTION RTG_MTORouteReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_HoldDataRequests
        FUNCTION APSME_HoldDataRequests,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??APSME_HoldDataRequests?relay
        FUNCTION ??APSME_HoldDataRequests?relay,00H
        EXTERN ??HalKeyRead?relay
        FUNCTION ??HalKeyRead?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetEnergyThreshold?relay
        FUNCTION ??NLME_GetEnergyThreshold?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_InitNV?relay
        FUNCTION ??NLME_InitNV?relay,00H
        EXTERN ??NLME_JoinRequest?relay
        FUNCTION ??NLME_JoinRequest?relay,00H
        EXTERN ??NLME_LeaveRsp?relay
        FUNCTION ??NLME_LeaveRsp?relay,00H
        EXTERN ??NLME_NetworkDiscoveryRequest?relay
        FUNCTION ??NLME_NetworkDiscoveryRequest?relay,00H
        EXTERN ??NLME_NwkDiscTerm?relay
        FUNCTION ??NLME_NwkDiscTerm?relay,00H
        EXTERN ??NLME_RemoveChild?relay
        FUNCTION ??NLME_RemoveChild?relay,00H
        EXTERN ??NLME_RestoreFromNV?relay
        FUNCTION ??NLME_RestoreFromNV?relay,00H
        EXTERN ??NLME_SetBroadcastFilter?relay
        FUNCTION ??NLME_SetBroadcastFilter?relay,00H
        EXTERN ??NLME_SetEnergyThreshold?relay
        FUNCTION ??NLME_SetEnergyThreshold?relay,00H
        EXTERN ??NLME_SetPollRate?relay
        FUNCTION ??NLME_SetPollRate?relay,00H
        EXTERN ??NLME_SetQueuedPollRate?relay
        FUNCTION ??NLME_SetQueuedPollRate?relay,00H
        EXTERN ??NLME_SetResponseRate?relay
        FUNCTION ??NLME_SetResponseRate?relay,00H
        EXTERN ??NLME_StartRouterRequest?relay
        FUNCTION ??NLME_StartRouterRequest?relay,00H
        EXTERN ??RTG_MTORouteReq?relay
        FUNCTION ??RTG_MTORouteReq?relay,00H
        EXTERN ??RTG_RemoveRtgEntry?relay
        FUNCTION ??RTG_RemoveRtgEntry?relay,00H
        EXTERN ??SSP_ReadNwkActiveKey?relay
        FUNCTION ??SSP_ReadNwkActiveKey?relay,00H
        EXTERN ??ZDConfig_InitDescriptors?relay
        FUNCTION ??ZDConfig_InitDescriptors?relay,00H
        EXTERN ??ZDMatchSendState?relay
        FUNCTION ??ZDMatchSendState?relay,00H
        EXTERN ??ZDO_Init?relay
        FUNCTION ??ZDO_Init?relay,00H
        EXTERN ??ZDO_MatchEndDeviceBind?relay
        FUNCTION ??ZDO_MatchEndDeviceBind?relay,00H
        EXTERN ??ZDO_ParseAddrRsp?relay
        FUNCTION ??ZDO_ParseAddrRsp?relay,00H
        EXTERN ??ZDO_ParseBindUnbindReq?relay
        FUNCTION ??ZDO_ParseBindUnbindReq?relay,00H
        EXTERN ??ZDO_ParseEndDeviceBindReq?relay
        FUNCTION ??ZDO_ParseEndDeviceBindReq?relay,00H
        EXTERN ??ZDO_ProcessBindUnbindReq?relay
        FUNCTION ??ZDO_ProcessBindUnbindReq?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDO_StartDevice?relay
        FUNCTION ??ZDO_StartDevice?relay,00H
        EXTERN ??ZDO_UpdateAddrManager?relay
        FUNCTION ??ZDO_UpdateAddrManager?relay,00H
        EXTERN ??ZDO_UpdateNwkStatus?relay
        FUNCTION ??ZDO_UpdateNwkStatus?relay,00H
        EXTERN ??ZDP_DeviceAnnce?relay
        FUNCTION ??ZDP_DeviceAnnce?relay,00H
        EXTERN ??ZDP_GenericRsp?relay
        FUNCTION ??ZDP_GenericRsp?relay,00H
        EXTERN ??ZDP_IncomingData?relay
        FUNCTION ??ZDP_IncomingData?relay,00H
        EXTERN ??ZDSecMgrAddrClear?relay
        FUNCTION ??ZDSecMgrAddrClear?relay,00H
        EXTERN ??ZDSecMgrDeviceRemoveByExtAddr?relay
        FUNCTION ??ZDSecMgrDeviceRemoveByExtAddr?relay,00H
        EXTERN ??ZDSecMgrInit?relay
        FUNCTION ??ZDSecMgrInit?relay,00H
        EXTERN ??ZDSecMgrNewDeviceEvent?relay
        FUNCTION ??ZDSecMgrNewDeviceEvent?relay,00H
        EXTERN ??ZDSecMgrSaveTCLinkKey?relay
        FUNCTION ??ZDSecMgrSaveTCLinkKey?relay,00H
        EXTERN ??ZDSecMgrUpdateDeviceInd?relay
        FUNCTION ??ZDSecMgrUpdateDeviceInd?relay,00H
        EXTERN ??ZMacSetReq?relay
        FUNCTION ??ZMacSetReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??afSetMatch?relay
        FUNCTION ??afSetMatch?relay,00H
        EXTERN ??nwkNeighborInitTable?relay
        FUNCTION ??nwkNeighborInitTable?relay,00H
        EXTERN ??nwkNeighborRemove?relay
        FUNCTION ??nwkNeighborRemove?relay,00H
        EXTERN ??nwk_ExtPANIDValid?relay
        FUNCTION ??nwk_ExtPANIDValid?relay,00H
        EXTERN ??nwk_getNwkDescList?relay
        FUNCTION ??nwk_getNwkDescList?relay,00H
        EXTERN ??osal_get_timeoutEx?relay
        FUNCTION ??osal_get_timeoutEx?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_pwrmgr_device?relay
        FUNCTION ??osal_pwrmgr_device?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??sAddrExtCmp?relay
        FUNCTION ??sAddrExtCmp?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN ??zgInitItems?relay
        FUNCTION ??zgInitItems?relay,00H
        EXTERN ??zgReadStartupOptions?relay
        FUNCTION ??zgReadStartupOptions?relay,00H
        EXTERN ??zgWriteStartupOptions?relay
        FUNCTION ??zgWriteStartupOptions?relay,00H
        EXTERN AIB_apsUseExtendedPANID
        EXTERN AIB_apsUseInsecureJoin
        EXTERN NWK_TaskID
        EXTERN NwkDescList
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN _NIB
        EXTERN epList
        EXTERN gMIN_TREE_LINK_COST
        EXTERN matchED
        EXTERN nwkFrameCounter
        EXTERN pZDNwkMgr_ProcessDataConfirm
        EXTERN pbindRemoveDev
        EXTERN zgConcentratorEnable
        EXTERN zgConfigPANID
        EXTERN zgDeviceLogicalType
        EXTERN zgStackProfile

// C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\stack\zdo\ZDApp.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDApp.c
//    3   Revised:        $Date: 2012-02-16 16:04:32 -0800 (Thu, 16 Feb 2012) $
//    4   Revision:       $Revision: 29348 $
//    5 
//    6   Description:    This file contains the interface to the Zigbee Device Application. This is the
//    7                   Application part that the user can change. This also contains the Task functions.
//    8 
//    9 
//   10   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 
//   45 #include "ZComDef.h"
//   46 #include "ZMac.h"
//   47 #include "OSAL.h"
//   48 #include "OSAL_Tasks.h"
//   49 #include "OSAL_PwrMgr.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AF.h"
//   52 #include "APSMEDE.h"
//   53 #include "NLMEDE.h"
//   54 #include "AddrMgr.h"
//   55 #include "ZDProfile.h"
//   56 #include "ZDObject.h"
//   57 #include "ZDConfig.h"
//   58 #include "ZDSecMgr.h"
//   59 #include "ZDApp.h"
//   60 #include "DebugTrace.h"
//   61 #include "nwk_util.h"
//   62 #include "OnBoard.h"
//   63 #include "ZGlobals.h"
//   64 #include "ZDNwkMgr.h"
//   65 #include "rtg.h"
//   66 
//   67 #include "ssp.h"
//   68 
//   69 /* HAL */
//   70 #include "hal_led.h"
//   71 #include "hal_lcd.h"
//   72 #include "hal_key.h"
//   73 
//   74 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   75   #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
//   76 #endif
//   77 
//   78 /*********************************************************************
//   79  * CONSTANTS
//   80  */
//   81 
//   82 #if !defined( NWK_START_DELAY )
//   83   #define NWK_START_DELAY             100   // in milliseconds
//   84 #endif
//   85 
//   86 #if !defined( LEAVE_RESET_DELAY )
//   87   #define LEAVE_RESET_DELAY           5000  // in milliseconds
//   88 #endif
//   89 
//   90 // Init ZDO, but hold and wait for application to start the joining or
//   91 // forming network
//   92 #define ZDO_INIT_HOLD_NWK_START       0xFFFF
//   93 
//   94 #if !defined( EXTENDED_JOINING_RANDOM_MASK )
//   95   #define EXTENDED_JOINING_RANDOM_MASK 0x007F
//   96 #endif
//   97 
//   98 #if !defined( BEACON_REQUEST_DELAY )
//   99   #define BEACON_REQUEST_DELAY        100   // in milliseconds
//  100 #endif
//  101 
//  102 #if !defined( BEACON_REQ_DELAY_MASK )
//  103   #define BEACON_REQ_DELAY_MASK       0x007F
//  104 #endif
//  105 
//  106 #define MAX_RESUME_RETRY            3
//  107 
//  108 #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
//  109 
//  110 // Beacon Order Settings (see NLMEDE.h)
//  111 #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
//  112 #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
//  113 
//  114 #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
//  115   // The number of times the frame counter can change before
//  116   // saving to NV
//  117   #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
//  118 #endif
//  119 
//  120 // Leave control bits
//  121 #define ZDAPP_LEAVE_CTRL_INIT 0
//  122 #define ZDAPP_LEAVE_CTRL_SET  1
//  123 #define ZDAPP_LEAVE_CTRL_RA   2
//  124 
//  125 // Address Manager Stub Implementation
//  126 #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
//  127 
//  128 
//  129 #if !defined ZDO_NV_SAVE_RFDs
//  130 #define ZDO_NV_SAVE_RFDs  TRUE
//  131 #endif
//  132 
//  133 // Delay time before updating NWK NV data to force fewer writes during high activity.
//  134 #if ZDO_NV_SAVE_RFDs
//  135 #define ZDAPP_UPDATE_NWK_NV_TIME 700
//  136 #else
//  137 #define ZDAPP_UPDATE_NWK_NV_TIME 65000
//  138 #endif
//  139 
//  140 /*********************************************************************
//  141  * GLOBAL VARIABLES
//  142  */
//  143 
//  144 #if defined( LCD_SUPPORTED )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145   uint8 MatchRsps = 0;
MatchRsps:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  146 #endif
//  147 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  148 uint8 zdoDiscCounter = 1;
zdoDiscCounter:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zdoDiscCounter>`
        REQUIRE __INIT_XDATA_I
//  149 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 zAddrType_t ZDAppNwkAddr;
ZDAppNwkAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  151 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  152 uint8 zdappMgmtNwkDiscRspTransSeq;
zdappMgmtNwkDiscRspTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  153 uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
zdappMgmtNwkDiscReqInProgress:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  154 zAddrType_t zdappMgmtNwkDiscRspAddr;
zdappMgmtNwkDiscRspAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  155 uint8 zdappMgmtNwkDiscStartIndex;
zdappMgmtNwkDiscStartIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  156 uint8 zdappMgmtSavedNwkState;
zdappMgmtSavedNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  157 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  158 uint16 nwkFrameCounterChanges = 0;
nwkFrameCounterChanges:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  159 uint8 continueJoining = TRUE;
continueJoining:
        DATA8
        DS 1
        REQUIRE `?<Initializer for continueJoining>`
        REQUIRE __INIT_XDATA_I
//  160 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  161 uint8  _tmpRejoinState;
_tmpRejoinState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  162 
//  163 // The extended PanID used in ZDO layer for rejoin.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  164 uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
ZDO_UseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  165 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  166 pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
zdoCBFunc:
        DS 14
        REQUIRE __INIT_XDATA_Z
//  167 
//  168 /*********************************************************************
//  169  * EXTERNAL VARIABLES
//  170  */
//  171 
//  172 /*********************************************************************
//  173  * EXTERNAL FUNCTIONS
//  174  */
//  175 
//  176 /*********************************************************************
//  177  * LOCAL FUNCTIONS
//  178  */
//  179 
//  180 void ZDApp_NetworkStartEvt( void );
//  181 void ZDApp_DeviceAuthEvt( void );
//  182 void ZDApp_SaveNetworkStateEvt( void );
//  183 
//  184 uint8 ZDApp_ReadNetworkRestoreState( void );
//  185 uint8 ZDApp_RestoreNetworkState( void );
//  186 void ZDAppDetermineDeviceType( void );
//  187 void ZDApp_InitUserDesc( void );
//  188 void ZDAppCheckForHoldKey( void );
//  189 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
//  190 void ZDApp_ProcessNetworkJoin( void );
//  191 void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
//  192 uint8 ZDApp_RestoreNwkKey( void );
//  193 networkDesc_t* ZDApp_NwkDescListProcessing(void);
//  194 
//  195 void ZDApp_SecInit( uint8 state );
//  196 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
//  197 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
//  198 
//  199 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
//  200 
//  201 void ZDApp_ResetTimerStart( uint16 delay );
//  202 void ZDApp_ResetTimerCancel( void );
//  203 void ZDApp_LeaveCtrlInit( void );
//  204 void ZDApp_LeaveCtrlSet( uint8 ra );
//  205 uint8 ZDApp_LeaveCtrlBypass( void );
//  206 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
//  207 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
//  208                         uint8 removeChildren );
//  209 void ZDApp_NodeProfileSync( uint8 stackProfile );
//  210 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  211 void ZDApp_RegisterCBs( void );
//  212 void ZDApp_InitZdoCBFunc(void);
//  213 
//  214 /*********************************************************************
//  215  * LOCAL VARIABLES
//  216  */
//  217 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  218 uint8 ZDAppTaskID;
ZDAppTaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  219 uint8 nwkStatus;
nwkStatus:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  220 endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
ZDApp_AutoFindMode_epDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  221 uint8 ZDApp_LeaveCtrl;
ZDApp_LeaveCtrl:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  222 
//  223 #if defined( HOLD_AUTO_START )
//  224   devStates_t devState = DEV_HOLD;
//  225 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
//  226   devStates_t devState = DEV_INIT;
devState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for devState>`
        REQUIRE __INIT_XDATA_I
//  227 #endif
//  228 
//  229 #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )
//  230   devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
//  231   //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
//  232                         // to parent. Set to make the device do an Orphan scan.
//  233 #else
//  234   // Set the default to coodinator

        RSEG XDATA_I:XDATA:NOROOT(0)
//  235   devStartModes_t devStartMode = MODE_HARD;
devStartMode:
        DATA8
        DS 1
        REQUIRE `?<Initializer for devStartMode>`
        REQUIRE __INIT_XDATA_I
//  236 #endif
//  237 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  238 uint8 retryCnt;
retryCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  239 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  240 endPointDesc_t ZDApp_epDesc =
ZDApp_epDesc:
        DATA8
        DS 6
        REQUIRE `?<Initializer for ZDApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//  241 {
//  242   ZDO_EP,
//  243   &ZDAppTaskID,
//  244   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
//  245   (afNetworkLatencyReq_t)0            // No Network Latency req
//  246 };
//  247 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  248 uint16 ZDApp_SavedPollRate = POLL_RATE;
ZDApp_SavedPollRate:
        DATA16
        DS 2
        REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
        REQUIRE __INIT_XDATA_I
//  249 
//  250 /*********************************************************************
//  251  * @fn      ZDApp_Init
//  252  *
//  253  * @brief   ZDApp Initialization function.
//  254  *
//  255  * @param   task_id - ZDApp Task ID
//  256  *
//  257  * @return  None
//  258  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  259 void ZDApp_Init( uint8 task_id )
ZDApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDApp_Init
        CODE
//  260 {
        FUNCALL ZDApp_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDAppCheckForHoldKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDO_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitUserDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitZdoCBFunc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_RegisterCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  261   // Save the task ID
//  262   ZDAppTaskID = task_id;
        MOV     DPTR,#ZDAppTaskID
        MOVX    @DPTR,A
//  263 
//  264   // Initialize the ZDO global device short address storage
//  265   ZDAppNwkAddr.addrMode = Addr16Bit;
        MOV     DPTR,#ZDAppNwkAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  266   ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV     DPTR,#ZDAppNwkAddr
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  267   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
//  268 
//  269   // Check for manual "Hold Auto Start"
//  270   ZDAppCheckForHoldKey();
        ; Setup parameters for call to function ZDAppCheckForHoldKey
        LCALL   ??ZDAppCheckForHoldKey?relay
//  271 
//  272   // Initialize ZDO items and setup the device - type of device to create.
//  273   ZDO_Init();
        ; Setup parameters for call to function ZDO_Init
        LCALL   ??ZDO_Init?relay
//  274 
//  275   // Register the endpoint description with the AF
//  276   // This task doesn't have a Simple description, but we still need
//  277   // to register the endpoint.
//  278   afRegister( (endPointDesc_t *)&ZDApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#ZDApp_epDesc & 0xff
        MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  279 
//  280 #if defined( ZDO_USERDESC_RESPONSE )
//  281   ZDApp_InitUserDesc();
        ; Setup parameters for call to function ZDApp_InitUserDesc
        LCALL   ??ZDApp_InitUserDesc?relay
//  282 #endif // ZDO_USERDESC_RESPONSE
//  283 
//  284   // Start the device?
//  285   if ( devState != DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JZ      ??ZDApp_Init_0
//  286   {
//  287     ZDOInitDevice( 0 );
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDOInitDevice?relay
        SJMP    ??ZDApp_Init_1
//  288   }
//  289   else
//  290   {
//  291     ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
??ZDApp_Init_0:
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LCALL   ??ZDOInitDevice?relay
//  292     // Blink LED to indicate HOLD_START
//  293     HalLedBlink ( HAL_LED_4, 0, 50, 500 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedBlink?relay
//  294   }
//  295 
//  296   // Initialize the ZDO callback function pointers zdoCBFunc[]
//  297   ZDApp_InitZdoCBFunc();
??ZDApp_Init_1:
        ; Setup parameters for call to function ZDApp_InitZdoCBFunc
        LCALL   ??ZDApp_InitZdoCBFunc?relay
//  298 
//  299   ZDApp_RegisterCBs();
        ; Setup parameters for call to function ZDApp_RegisterCBs
        LCALL   ??ZDApp_RegisterCBs?relay
//  300 } /* ZDApp_Init() */
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  301 
//  302 /*********************************************************************
//  303  * @fn          ZDApp_SecInit
//  304  *
//  305  * @brief       ZDApp initialize security.
//  306  *
//  307  * @param       state - device initialization state
//  308  *
//  309  * @return      none
//  310  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  311 void ZDApp_SecInit( uint8 state )
ZDApp_SecInit:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ZDApp_SecInit
        CODE
//  312 {
        FUNCALL ZDApp_SecInit, ZDSecMgrInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  313   uint8 zgPreConfigKey[SEC_KEY_LEN];
//  314 
//  315   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  316   {
//  317     // Set the Trust Center bit
//  318     ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
//  319   }
//  320 
//  321   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
//  322   {
//  323     ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
//  324   }
//  325 
//  326   // Initialize ZigBee Device Security Manager
//  327   ZDSecMgrInit(state);
        ; Setup parameters for call to function ZDSecMgrInit
        LCALL   ??ZDSecMgrInit?relay
//  328 
//  329   if ( ZG_SECURE_ENABLED )
//  330   {
//  331     if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  332     {
//  333       nwkFrameCounter = 0;
//  334 
//  335       if( _NIB.nwkKeyLoaded == FALSE )
//  336       {
//  337         if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
//  338              ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
//  339         {
//  340             ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
//  341             SSP_UpdateNwkKey( zgPreConfigKey, 0);
//  342             SSP_SwitchNwkKey( 0 );
//  343 
//  344             // clear local copy of key
//  345             osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
//  346         }
//  347       }
//  348     }
//  349   }
//  350 }
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock1
//  351 
//  352 /*********************************************************************
//  353  * @fn      ZDApp_event_loop()
//  354  *
//  355  * @brief   Main event loop for Zigbee device objects task. This function
//  356  *          should be called at periodic intervals.
//  357  *
//  358  * @param   task_id - Task ID
//  359  * @param   events  - Bitmap of events
//  360  *
//  361  * @return  none
//  362  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  363 UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
ZDApp_event_loop:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ZDApp_event_loop
        CODE
//  364 {
        FUNCALL ZDApp_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_StartDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_NetworkStartEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_pwrmgr_device
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_UpdateNwkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  365   uint8 *msg_ptr;
//  366 
//  367   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??ZDApp_event_loop_0
//  368   {
//  369     while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
//  370     {
//  371       ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
//  372 
//  373       // Release the memory
//  374       osal_msg_deallocate( msg_ptr );
//  375     }
//  376 
//  377     // Return unprocessed events
//  378     return (events ^ SYS_EVENT_MSG);
//  379   }
//  380 
//  381   if ( events & ZDO_NETWORK_INIT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_event_loop_1
//  382   {
//  383     // Initialize apps and start the network
//  384     devState = DEV_INIT;
        MOV     DPTR,#devState
        MOV     A,#0x1
        LCALL   ??Subroutine38_0 & 0xFFFF
//  385     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
//  386 
//  387     ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
//  388                      DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
??CrossCallReturnLabel_63:
        ; Setup parameters for call to function ZDO_StartDevice
        MOV     R4,#0xf
        MOV     R3,#0xf
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R1,A
        LCALL   ??ZDO_StartDevice?relay
//  389 
//  390     // Return unprocessed events
//  391     return (events ^ ZDO_NETWORK_INIT);
        MOV     A,R6
        XRL     A,#0x1
??ZDApp_event_loop_2:
        MOV     R2,A
        MOV     A,R7
??ZDApp_event_loop_3:
        MOV     R3,A
        LJMP    ??ZDApp_event_loop_4 & 0xFFFF
//  392   }
??ZDApp_event_loop_5:
        ; Setup parameters for call to function ZDApp_ProcessOSALMsg
        LCALL   ??ZDApp_ProcessOSALMsg?relay
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??ZDApp_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R1,?V0 + 1
        MOV     A,R2
        ORL     A,R1
        JNZ     ??ZDApp_event_loop_5
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??ZDApp_event_loop_3
//  393 
//  394   if ( ZSTACK_ROUTER_BUILD )
//  395   {
//  396     if ( events & ZDO_NETWORK_START )
??ZDApp_event_loop_1:
        ANL     A,#0x2
        JZ      ??ZDApp_event_loop_6
//  397     {
//  398       ZDApp_NetworkStartEvt();
        ; Setup parameters for call to function ZDApp_NetworkStartEvt
        LCALL   ??ZDApp_NetworkStartEvt?relay
//  399 
//  400       // Return unprocessed events
//  401       return (events ^ ZDO_NETWORK_START);
        MOV     A,R6
        XRL     A,#0x2
??ZDApp_event_loop_7:
        SJMP    ??ZDApp_event_loop_2
//  402     }
//  403 
//  404     if ( events & ZDO_ROUTER_START )
??ZDApp_event_loop_6:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??ZDApp_event_loop_8
//  405     {
//  406       if ( nwkStatus == ZSuccess )
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_event_loop_9
//  407       {
//  408         if ( devState == DEV_END_DEVICE )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??ZDApp_event_loop_10
//  409           devState = DEV_ROUTER;
        MOV     A,#0x7
        MOVX    @DPTR,A
//  410 
//  411         osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_event_loop_10:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV     R1,#0x0
        LCALL   ??osal_pwrmgr_device?relay
//  412       }
//  413       else
//  414       {
//  415         // remain as end device!!
//  416       }
//  417       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_event_loop_9:
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine14 & 0xFFFF
//  418 
//  419       // Return unprocessed events
//  420       return (events ^ ZDO_ROUTER_START);
??CrossCallReturnLabel_53:
        MOV     A,R6
        XRL     A,#0x20
        SJMP    ??ZDApp_event_loop_2
//  421     }
//  422   }
//  423 
//  424   if ( events & ZDO_STATE_CHANGE_EVT )
??ZDApp_event_loop_8:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??ZDApp_event_loop_11
//  425   {
//  426     ZDO_UpdateNwkStatus( devState );
        ; Setup parameters for call to function ZDO_UpdateNwkStatus
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_UpdateNwkStatus?relay
//  427 
//  428     // At start up, do one MTO route discovery if the device is a concentrator
//  429     if ( zgConcentratorEnable == TRUE )
        MOV     DPTR,#zgConcentratorEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_78
//  430     {
//  431       // Start next event
//  432       osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#NWK_TaskID
        LCALL   ??Subroutine41_0 & 0xFFFF
//  433     }
//  434 
//  435     // Return unprocessed events
//  436     return (events ^ ZDO_STATE_CHANGE_EVT);
??CrossCallReturnLabel_78:
        MOV     A,R6
        XRL     A,#0x10
        SJMP    ??ZDApp_event_loop_2
//  437   }
//  438 
//  439   if ( events & ZDO_COMMAND_CNF )
??ZDApp_event_loop_11:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??ZDApp_event_loop_12
//  440   {
//  441     // User defined logic
//  442 
//  443     // Return unprocessed events
//  444     return (events ^ ZDO_COMMAND_CNF);
        MOV     A,R6
        XRL     A,#0x8
        MOV     R2,A
        SJMP    ??ZDApp_event_loop_4
//  445   }
//  446 
//  447   if ( events & ZDO_NWK_UPDATE_NV )
??ZDApp_event_loop_12:
        MOV     A,R7
        ANL     A,#0x2
        JZ      ??ZDApp_event_loop_13
//  448   {
//  449     ZDApp_SaveNetworkStateEvt();
//  450 
//  451     // Return unprocessed events
//  452     return (events ^ ZDO_NWK_UPDATE_NV);
        MOV     A,R7
        XRL     A,#0x2
        LJMP    ??ZDApp_event_loop_3 & 0xFFFF
//  453   }
//  454 
//  455   if ( events & ZDO_DEVICE_RESET )
??ZDApp_event_loop_13:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??ZDApp_event_loop_14
//  456   {
//  457 #ifdef ZBA_FALLBACK_NWKKEY
//  458     if ( devState == DEV_END_DEVICE_UNAUTH )
//  459     {
//  460       ZDSecMgrFallbackNwkKey();
//  461     }
//  462     else
//  463 #endif
//  464     {
//  465       // Set the NV startup option to force a "new" join.
//  466       zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   ??zgWriteStartupOptions?relay
//  467 
//  468       // The device has been in the UNAUTH state, so reset
//  469       // Note: there will be no return from this call
//  470       SystemResetSoft();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  471     }
//  472   }
//  473 
//  474   if ( ZG_SECURE_ENABLED )
//  475   {
//  476     return ( ZDApp_ProcessSecEvent( task_id, events ) );
//  477   }
//  478   else
//  479   {
//  480     // Discard or make more handlers
//  481     return 0;
??ZDApp_event_loop_14:
        MOV     R2,#0x0
        MOV     R3,#0x0
//  482   }
??ZDApp_event_loop_4:
        LJMP    ??Subroutine45_0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  483 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOV     R2,#0x10
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond12) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond12) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond12) CFA_SP SP+-5
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  484 
//  485 /*********************************************************************
//  486  * @fn      ZDApp_ProcessSecEvent()
//  487  *
//  488  * @brief   Process incoming security events.
//  489  *
//  490  * @param   task_id - Task ID
//  491  * @param   events  - Bitmap of events
//  492  *
//  493  * @return  none
//  494  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  495 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
ZDApp_ProcessSecEvent:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function ZDApp_ProcessSecEvent
        CODE
//  496 {
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrNewDeviceEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_DeviceAuthEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrSaveTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  497   (void)task_id;  // Intentionally unreferenced parameter
//  498 
//  499   if ( ZSTACK_ROUTER_BUILD )
//  500   {
//  501     if ( events & ZDO_NEW_DEVICE )
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??ZDApp_ProcessSecEvent_0
//  502     {
//  503       // process the new device event
//  504       if ( ZDSecMgrNewDeviceEvent() == TRUE )
        ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
        LCALL   ??ZDSecMgrNewDeviceEvent?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_75
//  505       {
//  506         osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x40
        LCALL   ?Subroutine22 & 0xFFFF
//  507       }
//  508 
//  509       // Return unprocessed events
//  510       return (events ^ ZDO_NEW_DEVICE);
??CrossCallReturnLabel_75:
        MOV     A,R6
        XRL     A,#0x40
??ZDApp_ProcessSecEvent_1:
        MOV     R2,A
        MOV     A,R7
??ZDApp_ProcessSecEvent_2:
        MOV     R3,A
        SJMP    ??ZDApp_ProcessSecEvent_3
//  511     }
//  512   }
//  513 
//  514   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
//  515       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
//  516   {
//  517     if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  518     {
//  519       if ( events & ZDO_SECMGR_EVENT )
//  520       {
//  521         ZDSecMgrEvent();
//  522 
//  523         // Return unprocessed events
//  524         return (events ^ ZDO_SECMGR_EVENT);
//  525       }
//  526     }
//  527   }
//  528 
//  529   if ( events & ZDO_DEVICE_AUTH )
??ZDApp_ProcessSecEvent_0:
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??ZDApp_ProcessSecEvent_4
//  530   {
//  531     ZDApp_DeviceAuthEvt();
        ; Setup parameters for call to function ZDApp_DeviceAuthEvt
        LCALL   ??ZDApp_DeviceAuthEvt?relay
//  532 
//  533     // Return unprocessed events
//  534     return (events ^ ZDO_DEVICE_AUTH);
        MOV     A,R6
        XRL     A,#0x80
        SJMP    ??ZDApp_ProcessSecEvent_1
//  535   }
//  536 
//  537   if ( events & ZDO_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_4:
        MOV     A,R7
        ANL     A,#0x4
        JZ      ??ZDApp_ProcessSecEvent_5
//  538   {
//  539     if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
        MOV     DPTR,#nwkFrameCounterChanges
        LCALL   ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV     A,R0
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPTR,#nwkFrameCounterChanges
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_123:
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x17
        MOV     A,R1
        SUBB    A,#0x3
        JC      ??ZDApp_ProcessSecEvent_6
//  540     {
//  541       ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   ??ZDApp_SaveNwkKey?relay
//  542     }
//  543 
//  544     // Return unprocessed events
//  545     return (events ^ ZDO_FRAMECOUNTER_CHANGE);
??ZDApp_ProcessSecEvent_6:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x4
??ZDApp_ProcessSecEvent_7:
        MOV     R3,A
        SJMP    ??ZDApp_ProcessSecEvent_3
//  546   }
//  547 
//  548   if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_5:
        MOV     A,R7
        ANL     A,#0x10
        JZ      ??ZDApp_ProcessSecEvent_8
//  549   {
//  550 #if defined (NV_RESTORE)
//  551     ZDSecMgrSaveApsLinkKey();
//  552 #endif // (NV_RESTORE)
//  553 
//  554     // Return unprocessed events
//  555     return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
        MOV     A,R7
        XRL     A,#0x10
        SJMP    ??ZDApp_ProcessSecEvent_2
//  556   }
//  557 
//  558   if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_8:
        MOV     A,R7
        ANL     A,#0x8
        JZ      ??ZDApp_ProcessSecEvent_9
//  559   {
//  560     ZDSecMgrSaveTCLinkKey();
        ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
        LCALL   ??ZDSecMgrSaveTCLinkKey?relay
//  561 
//  562     // Return unprocessed events
//  563     return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x8
        SJMP    ??ZDApp_ProcessSecEvent_7
//  564   }
//  565 
//  566   // Discard or make more handlers
//  567   return 0;
??ZDApp_ProcessSecEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDApp_ProcessSecEvent_3:
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock19
//  568 }
//  569 
//  570 /*********************************************************************
//  571  * Application Functions
//  572  */
//  573 
//  574 /*********************************************************************
//  575  * @fn      ZDOInitDevice
//  576  *
//  577  * @brief   Start the device in the network.  This function will read
//  578  *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
//  579  *   restore the network state of the device.
//  580  *
//  581  * @param   startDelay - timeDelay to start device (in milliseconds).
//  582  *                       There is a jitter added to this delay:
//  583  *                       ((NWK_START_DELAY + startDelay)
//  584  *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
//  585  *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
//  586  *                       this function will hold the network init. Application
//  587  *                       can start the device.
//  588  *
//  589  * NOTE:    If the application would like to force a "new" join, the
//  590  *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  591  *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
//  592  *          this function. "new" join means to not restore the network
//  593  *          state of the device. Use zgWriteStartupOptions() to set these
//  594  *          options.
//  595  *
//  596  * @return
//  597  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  598  *          restored.
//  599  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
//  600  *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
//  601  *          it could mean that there was no network state to restore.
//  602  *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
//  603  *          with the rejoin option set to TRUE.  So, the device was not
//  604  *          started in the network (one time only).  The next time this
//  605  *          function is called it will start.
//  606  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  607 uint8 ZDOInitDevice( uint16 startDelay )
ZDOInitDevice:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function ZDOInitDevice
        CODE
//  608 {
        FUNCALL ZDOInitDevice, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDConfig_InitDescriptors
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDAppDetermineDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDSecMgrInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlStartup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine11 & 0xFFFF
//  609   uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  610   uint16 extendedDelay = 0;
//  611 
//  612   if ( devState == DEV_HOLD )
??CrossCallReturnLabel_127:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDOInitDevice_0
//  613   {
//  614     // Initialize the RAM items table, in case an NV item has been updated.
//  615     zgInitItems( FALSE );
        ; Setup parameters for call to function zgInitItems
        MOV     R1,#0x0
        LCALL   ??zgInitItems?relay
//  616   }
//  617 
//  618   ZDConfig_InitDescriptors();
??ZDOInitDevice_0:
        ; Setup parameters for call to function ZDConfig_InitDescriptors
        LCALL   ??ZDConfig_InitDescriptors?relay
//  619   //devtag.071807.todo - fix this temporary solution
//  620   _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 14
        MOVX    @DPTR,A
//  621 
//  622 #if defined ( NV_RESTORE )
//  623   // Get Keypad directly to see if a reset nv is needed.
//  624   // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
//  625   // while booting to skip past NV Restore.
//  626   if ( HalKeyRead() == SW_BYPASS_NV )
//  627     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  628   else
//  629   {
//  630     // Determine if NV should be restored
//  631     networkStateNV = ZDApp_ReadNetworkRestoreState();
//  632   }
//  633 
//  634   if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  635   {
//  636     networkStateNV = ZDApp_RestoreNetworkState();
//  637   }
//  638   else
//  639   {
//  640     // Wipe out the network state in NV
//  641     NLME_InitNV();
//  642     NLME_SetDefaultNV();
//  643     // clear NWK key values
//  644     ZDSecMgrClearNVKeyValues();
//  645   }
//  646 #endif
//  647 
//  648   if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
//  649   {
//  650     ZDAppDetermineDeviceType();
        ; Setup parameters for call to function ZDAppDetermineDeviceType
        LCALL   ??ZDAppDetermineDeviceType?relay
//  651 
//  652     // Only delay if joining network - not restoring network state
//  653     extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
//  654               + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        ANL     A,#0x7f
        MOV     R0,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x64
        MOV     R6,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R7,A
//  655   }
//  656 
//  657   // Initialize the security for type of device
//  658   ZDApp_SecInit( networkStateNV );
        ; Setup parameters for call to function ZDSecMgrInit
        MOV     R1,#0x1
        LCALL   ??ZDSecMgrInit?relay
//  659 
//  660   if( ZDO_INIT_HOLD_NWK_START != startDelay )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDOInitDevice_1
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDOInitDevice_1:
        JZ      ??ZDOInitDevice_2
//  661   {
//  662     devState = DEV_INIT;    // Remove the Hold state
        MOV     DPTR,#devState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  663 
//  664     // Initialize leave control logic
//  665     ZDApp_LeaveCtrlInit();
        ; Setup parameters for call to function ZDApp_LeaveCtrlInit
        LCALL   ??ZDApp_LeaveCtrlInit?relay
//  666 
//  667     // Check leave control reset settings
//  668     ZDApp_LeaveCtrlStartup( &devState, &startDelay );
        ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#devState & 0xff
        MOV     R3,#(devState >> 8) & 0xff
        LCALL   ??ZDApp_LeaveCtrlStartup?relay
//  669 
//  670     // Leave may make the hold state come back
//  671     if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDOInitDevice_3
//  672     {
//  673       // Set the NV startup option to force a "new" join.
//  674       zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   ??zgWriteStartupOptions?relay
//  675 
//  676       // Notify the applications
//  677       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine14 & 0xFFFF
//  678 
//  679       return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
??CrossCallReturnLabel_54:
        MOV     R1,#0x2
        SJMP    ??ZDOInitDevice_4
//  680     }
//  681 
//  682     // Trigger the network start
//  683     ZDApp_NetworkInit( extendedDelay );
??ZDOInitDevice_3:
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDApp_NetworkInit?relay
//  684   }
//  685 
//  686   // set broadcast address mask to support broadcast filtering
//  687   NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
??ZDOInitDevice_2:
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??NLME_SetBroadcastFilter?relay
//  688 
//  689   return ( networkStateNV );
        MOV     R1,#0x1
??ZDOInitDevice_4:
        LJMP    ?Subroutine7 & 0xFFFF
        CFI EndBlock cfiBlock20
//  690 }
//  691 
//  692 /*********************************************************************
//  693  * @fn      ZDApp_ReadNetworkRestoreState
//  694  *
//  695  * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
//  696  *          or not to restore the network state.
//  697  *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  698  *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
//  699  *
//  700  * @param   none
//  701  *
//  702  * @return  ZDO_INITDEV_NEW_NETWORK_STATE
//  703  *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
//  704  *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
//  705  *          ZCD_NV_STARTUP_OPTION
//  706  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  707 uint8 ZDApp_ReadNetworkRestoreState( void )
ZDApp_ReadNetworkRestoreState:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function ZDApp_ReadNetworkRestoreState
        CODE
//  708 {
        FUNCALL ZDApp_ReadNetworkRestoreState, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  709   uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
        MOV     R6,#0x0
//  710 
//  711   // Look for the New Network State option.
//  712   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL   ??zgReadStartupOptions?relay
        MOV     A,R1
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_ReadNetworkRestoreState_0
//  713   {
//  714     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        INC     R6
//  715   }
//  716 
//  717   return ( networkStateNV );
??ZDApp_ReadNetworkRestoreState_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock21
//  718 }
//  719 
//  720 /*********************************************************************
//  721  * @fn      ZDAppDetermineDeviceType()
//  722  *
//  723  * @brief   Determines the type of device to start.
//  724  *
//  725  *          Looks at zgDeviceLogicalType and determines what type of
//  726  *          device to start.  The types are:
//  727  *            ZG_DEVICETYPE_COORDINATOR
//  728  *            ZG_DEVICETYPE_ROUTER
//  729  *            ZG_DEVICETYPE_ENDDEVICE
//  730  *
//  731  * @param   none
//  732  *
//  733  * @return  none
//  734  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  735 void ZDAppDetermineDeviceType( void )
ZDAppDetermineDeviceType:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function ZDAppDetermineDeviceType
        CODE
//  736 {
        FUNCALL ZDAppDetermineDeviceType, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  737   if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JNZ     ??ZDAppDetermineDeviceType_0
//  738   {
//  739     devStartMode = MODE_HARD;     // Start as a coordinator
        MOV     DPTR,#devStartMode
        MOV     A,#0x2
        MOVX    @DPTR,A
//  740     ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        SJMP    ??ZDAppDetermineDeviceType_1
//  741   }
//  742   else
//  743   {
//  744     if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
??ZDAppDetermineDeviceType_0:
        XRL     A,#0x1
        JNZ     ??ZDAppDetermineDeviceType_2
//  745       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,#0x1
        SJMP    ??ZDAppDetermineDeviceType_3
//  746     else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
??ZDAppDetermineDeviceType_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDAppDetermineDeviceType_4
//  747       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,#0x2
??ZDAppDetermineDeviceType_3:
        MOVX    @DPTR,A
//  748 
//  749     // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
//  750     // The device shall do rejoin the network. Otherwise, do normal join
//  751     if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
??ZDAppDetermineDeviceType_4:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#AIB_apsUseExtendedPANID & 0xff
        MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
        LCALL   ??nwk_ExtPANIDValid?relay
        MOV     A,R1
        MOV     DPTR,#devStartMode
        JNZ     ??ZDAppDetermineDeviceType_5
//  752     {
//  753       devStartMode = MODE_JOIN;     // Assume joining
        CLR     A
        SJMP    ??ZDAppDetermineDeviceType_1
//  754     }
//  755     else
//  756     {
//  757       devStartMode = MODE_REJOIN;
??ZDAppDetermineDeviceType_5:
        MOV     A,#0x3
??ZDAppDetermineDeviceType_1:
        MOVX    @DPTR,A
//  758     }
//  759   }
//  760 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock22
//  761 
//  762 /*********************************************************************
//  763  * @fn      ZDApp_NetworkStartEvt()
//  764  *
//  765  * @brief   Process the Network Start Event
//  766  *
//  767  * @param   none
//  768  *
//  769  * @return  none
//  770  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  771 void ZDApp_NetworkStartEvt( void )
ZDApp_NetworkStartEvt:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function ZDApp_NetworkStartEvt
        CODE
//  772 {
        FUNCALL ZDApp_NetworkStartEvt, osal_pwrmgr_device
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_SetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  773   if ( nwkStatus == ZSuccess )
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_NetworkStartEvt_0
//  774   {
//  775     // Successfully started a ZigBee network
//  776     if ( devState == DEV_COORD_STARTING )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??ZDApp_NetworkStartEvt_1
//  777     {
//  778       devState = DEV_ZB_COORD;
        MOV     A,#0x9
        MOVX    @DPTR,A
//  779     }
//  780 
//  781     osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_NetworkStartEvt_1:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV     R1,#0x0
        LCALL   ??osal_pwrmgr_device?relay
//  782     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        SJMP    ??ZDApp_NetworkStartEvt_2
//  783   }
//  784   else
//  785   {
//  786     // Try again with a higher energy threshold !!
//  787     if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
??ZDApp_NetworkStartEvt_0:
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   ??NLME_GetEnergyThreshold?relay
        MOV     A,R1
        ADD     A,#0x10
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        CLR     C
        XRL     A,PSW
        RLC     A
        JNC     ??ZDApp_NetworkStartEvt_3
//  788     {
//  789       NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
        ; Setup parameters for call to function NLME_SetEnergyThreshold
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   ??NLME_GetEnergyThreshold?relay
        MOV     A,R1
        ADD     A,#0x10
        MOV     R1,A
        LCALL   ??NLME_SetEnergyThreshold?relay
//  790       osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        SJMP    ??ZDApp_NetworkStartEvt_4
//  791     }
//  792     else
//  793     {
//  794       // Failed to start network. Enter a dormant state (until user intervenes)
//  795       devState = DEV_INIT;
??ZDApp_NetworkStartEvt_3:
        MOV     DPTR,#devState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  796       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
??ZDApp_NetworkStartEvt_2:
        MOV     R2,#0x10
//  797     }
//  798   }
??ZDApp_NetworkStartEvt_4:
        LCALL   ??Subroutine37_0 & 0xFFFF
//  799 }
??CrossCallReturnLabel_58:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock23
//  800 
//  801 /*********************************************************************
//  802  * @fn      ZDApp_DeviceAuthEvt()
//  803  *
//  804  * @brief   Process the Device Authentic Event
//  805  *
//  806  * @param   none
//  807  *
//  808  * @return  none
//  809  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  810 void ZDApp_DeviceAuthEvt( void )
ZDApp_DeviceAuthEvt:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function ZDApp_DeviceAuthEvt
        CODE
//  811 {
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ResetTimerCancel
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_StartRouterRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_SetPollRate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  812   // received authentication from trust center
//  813   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDApp_DeviceAuthEvt_0
//  814   {
//  815     // Stop the reset timer so it doesn't reset
//  816     ZDApp_ResetTimerCancel();
        ; Setup parameters for call to function ZDApp_ResetTimerCancel
        LCALL   ??ZDApp_ResetTimerCancel?relay
//  817 
//  818     devState = DEV_END_DEVICE;
        LCALL   ?Subroutine8 & 0xFFFF
//  819     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
//  820 
//  821     // Set the Power Manager Device
//  822 #if defined ( POWER_SAVING )
//  823     osal_pwrmgr_device( PWRMGR_BATTERY );
//  824 #endif
//  825 
//  826     if ( ZSTACK_ROUTER_BUILD )
//  827     {
//  828       if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??CrossCallReturnLabel_61:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_20:
        JZ      ??ZDApp_DeviceAuthEvt_1
//  829       {
//  830         // NOTE: first two parameters are not used, see NLMEDE.h for details
//  831         NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??NLME_StartRouterRequest?relay
//  832       }
//  833     }
//  834 
//  835     // Notify to save info into NV
//  836     ZDApp_NVUpdate();
//  837 
//  838     // Save off the security
//  839     ZDApp_SaveNwkKey();
??ZDApp_DeviceAuthEvt_1:
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   ??ZDApp_SaveNwkKey?relay
//  840 
//  841     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
//  842 
//  843     if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JC      ??ZDApp_DeviceAuthEvt_0
//  844     {
//  845       NLME_SetPollRate( ZDApp_SavedPollRate );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#ZDApp_SavedPollRate
        LCALL   ??Subroutine39_0 & 0xFFFF
//  846     }
//  847   }
??CrossCallReturnLabel_64:
        LCALL   ??NLME_SetPollRate?relay
//  848   else
//  849   {
//  850     ZDApp_NVUpdate();
//  851   }
//  852 }
??ZDApp_DeviceAuthEvt_0:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV     DPTR,#devState
        MOV     A,#0x6
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond29) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond29) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond29) CFA_SP SP+-5
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_set_event
        ; Setup parameters for call to function osal_set_event
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31
//  853 
//  854 /*********************************************************************
//  855  * @fn      ZDApp_SaveNetworkStateEvt()
//  856  *
//  857  * @brief   Process the Save the Network State Event
//  858  *
//  859  * @param   none
//  860  *
//  861  * @return  none
//  862  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  863 void ZDApp_SaveNetworkStateEvt( void )
ZDApp_SaveNetworkStateEvt:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function ZDApp_SaveNetworkStateEvt
        CODE
//  864 {
        ; Saved register size: 0
        ; Auto size: 0
//  865 #if defined ( NV_RESTORE )
//  866  #if defined ( NV_TURN_OFF_RADIO )
//  867   // Turn off the radio's receiver during an NV update
//  868   uint8 RxOnIdle;
//  869   uint8 x = false;
//  870   ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
//  871   ZMacSetReq( ZMacRxOnIdle, &x );
//  872  #endif
//  873 
//  874   // Update the Network State in NV
//  875   NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
//  876                  NWK_NV_DEVICELIST_ENABLE |
//  877                  NWK_NV_BINDING_ENABLE    |
//  878                  NWK_NV_ADDRMGR_ENABLE );
//  879 
//  880   // Reset the NV startup option to resume from NV by
//  881   // clearing the "New" join option.
//  882   zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
//  883 
//  884  #if defined ( NV_TURN_OFF_RADIO )
//  885   ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
//  886  #endif
//  887 #endif  // NV_RESTORE
//  888 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock32
//  889 
//  890 /*********************************************************************
//  891  * @fn      ZDApp_RestoreNetworkState()
//  892  *
//  893  * @brief   This function will restore the network state of the
//  894  *          device if the network state is stored in NV.
//  895  *
//  896  * @param   none
//  897  *
//  898  * @return
//  899  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  900  *          restored.
//  901  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
//  902  *          This could mean that zgStartupOption said to not restore, or
//  903  *          it could mean that there was no network state to restore.
//  904  *
//  905  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  906 uint8 ZDApp_RestoreNetworkState( void )
ZDApp_RestoreNetworkState:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function ZDApp_RestoreNetworkState
        CODE
//  907 {
        FUNCALL ZDApp_RestoreNetworkState, NLME_InitNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_RestoreFromNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  908   uint8 nvStat;
//  909 
//  910   // Initialize NWK NV items
//  911   nvStat = NLME_InitNV();
        ; Setup parameters for call to function NLME_InitNV
        LCALL   ??NLME_InitNV?relay
        MOV     A,R1
        MOV     R6,A
//  912 
//  913   if ( nvStat != NV_OPER_FAILED )
        MOV     A,#0xa
        XRL     A,R6
        JZ      ??ZDApp_RestoreNetworkState_0
//  914   {
//  915     if ( NLME_RestoreFromNV() )
        ; Setup parameters for call to function NLME_RestoreFromNV
        LCALL   ??NLME_RestoreFromNV?relay
        MOV     A,R1
        JZ      ??ZDApp_RestoreNetworkState_0
//  916     {
//  917       // Are we a coordinator
//  918       ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ??Subroutine54_0 & 0xFFFF
//  919       if ( ZDAppNwkAddr.addr.shortAddr == 0 )
??CrossCallReturnLabel_124:
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_4:
        JNZ     ??ZDApp_RestoreNetworkState_1
//  920         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
//  921       devStartMode = MODE_RESUME;
??ZDApp_RestoreNetworkState_1:
        MOV     DPTR,#devStartMode
        MOV     A,#0x1
        MOVX    @DPTR,A
//  922       osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#(_NIB + 53) & 0xff
        MOV     R5,#((_NIB + 53) >> 8) & 0xff
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   ??sAddrExtCpy?relay
//  923     }
//  924     else
//  925       nvStat = NV_ITEM_UNINIT;
//  926 
//  927     if ( ZG_SECURE_ENABLED )
//  928     {
//  929       nwkFrameCounterChanges = 0;
//  930 
//  931       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  932       {
//  933         ZDApp_RestoreNwkKey();
//  934       }
//  935     }
//  936 
//  937     // The default for RxOnWhenIdle is true for Routers and false for end devices
//  938     // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
//  939     // other than default.
//  940   }
//  941 
//  942   if ( nvStat == ZSUCCESS )
        MOV     A,R6
        JNZ     ??ZDApp_RestoreNetworkState_0
//  943     return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
        MOV     R1,#0x0
        SJMP    ??ZDApp_RestoreNetworkState_2
//  944   else
//  945     return ( ZDO_INITDEV_NEW_NETWORK_STATE );
??ZDApp_RestoreNetworkState_0:
        MOV     R1,#0x1
??ZDApp_RestoreNetworkState_2:
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock33
//  946 }
//  947 
//  948 /*********************************************************************
//  949  * @fn      ZDApp_InitUserDesc()
//  950  *
//  951  * @brief   Initialize the User Descriptor, the descriptor is read from NV
//  952  *          when needed.  If you want to initialize the User descriptor to
//  953  *          something other than all zero, do it here.
//  954  *
//  955  * @param   none
//  956  *
//  957  * @return  none
//  958  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  959 void ZDApp_InitUserDesc( void )
ZDApp_InitUserDesc:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function ZDApp_InitUserDesc
        CODE
//  960 {
        FUNCALL ZDApp_InitUserDesc, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  961   UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
//  962 
//  963   // Initialize the User Descriptor, the descriptor is read from NV
//  964   // when needed.  If you want to initialize the User descriptor to something
//  965   // other than all zero, do it here.
//  966   osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        LCALL   ?Subroutine26 & 0xFFFF
//  967   if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
//  968          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
??CrossCallReturnLabel_31:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
//  969   {
//  970     if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
//  971          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x11
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
//  972     {
//  973       if ( ZDO_DefaultUserDescriptor.len != 0 )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??ZDApp_InitUserDesc_0
//  974       {
//  975         ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.4
        MOVX    @DPTR,A
//  976       }
//  977     }
//  978   }
//  979 }
??ZDApp_InitUserDesc_0:
        MOV     A,#0x11
        LJMP    ??Subroutine44_0 & 0xFFFF
        CFI EndBlock cfiBlock34
//  980 
//  981 /*********************************************************************
//  982  * @fn      ZDAppCheckForHoldKey()
//  983  *
//  984  * @brief   Check for key to set the device into Hold Auto Start
//  985  *
//  986  * @param   none
//  987  *
//  988  * @return  none
//  989  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  990 void ZDAppCheckForHoldKey( void )
ZDAppCheckForHoldKey:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function ZDAppCheckForHoldKey
        CODE
//  991 {
        FUNCALL ZDAppCheckForHoldKey, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  992 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  993   // Get Keypad directly to see if a HOLD_START is needed.
//  994   // Hold down the SW_BYPASS_START key (see OnBoard.h)
//  995   // while booting to avoid starting up the device.
//  996   if ( HalKeyRead () == SW_BYPASS_START)
        ; Setup parameters for call to function HalKeyRead
        LCALL   ??HalKeyRead?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDAppCheckForHoldKey_0
//  997   {
//  998     // Change the device state to HOLD on start up
//  999     devState = DEV_HOLD;
        MOV     DPTR,#devState
        CLR     A
        MOVX    @DPTR,A
// 1000   }
// 1001 #endif // HAL_KEY
// 1002 }
??ZDAppCheckForHoldKey_0:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock35
// 1003 
// 1004 /*********************************************************************
// 1005  * @fn      ZDApp_ProcessOSALMsg()
// 1006  *
// 1007  * @brief   Process the incoming task message.
// 1008  *
// 1009  * @param   msgPtr - message to process
// 1010  *
// 1011  * @return  none
// 1012  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1013 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessOSALMsg:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function ZDApp_ProcessOSALMsg
        CODE
// 1014 {
        FUNCALL ZDApp_ProcessOSALMsg, ZDP_IncomingData
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessMsgCBs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1015   // Data Confirmation message fields
// 1016   uint8 sentEP;       // This should always be 0
// 1017   uint8 sentStatus;
// 1018   afDataConfirm_t *afDataConfirm;
// 1019   uint8 tmp;
// 1020 
// 1021   switch ( msgPtr->event )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??ZDApp_ProcessOSALMsg_0
        ADD     A,#0x47
        JZ      ??ZDApp_ProcessOSALMsg_1
        ADD     A,#-0x2a
        JZ      ??ZDApp_ProcessOSALMsg_2
        SJMP    ??ZDApp_ProcessOSALMsg_3
// 1022   {
// 1023     // Incoming ZDO Message
// 1024     case AF_INCOMING_MSG_CMD:
// 1025       ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
??ZDApp_ProcessOSALMsg_0:
        ; Setup parameters for call to function ZDP_IncomingData
        LCALL   ??ZDP_IncomingData?relay
// 1026       break;
        SJMP    ??ZDApp_ProcessOSALMsg_3
// 1027 
// 1028     case ZDO_CB_MSG:
// 1029       ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
??ZDApp_ProcessOSALMsg_1:
        ; Setup parameters for call to function ZDApp_ProcessMsgCBs
        LCALL   ??ZDApp_ProcessMsgCBs?relay
// 1030       break;
        SJMP    ??ZDApp_ProcessOSALMsg_3
// 1031 
// 1032     case AF_DATA_CONFIRM_CMD:
// 1033       // This message is received as a confirmation of a data packet sent.
// 1034       // The status is of ZStatus_t type [defined in NLMEDE.h]
// 1035       // The message fields are defined in AF.h
// 1036       afDataConfirm = (afDataConfirm_t *)msgPtr;
// 1037       sentEP = afDataConfirm->endpoint;
// 1038       sentStatus = afDataConfirm->hdr.status;
// 1039 
// 1040       // Action taken when confirmation is received.
// 1041 #if defined ( ZIGBEE_FREQ_AGILITY )
// 1042       if ( pZDNwkMgr_ProcessDataConfirm )
??ZDApp_ProcessOSALMsg_2:
        MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ      ??ZDApp_ProcessOSALMsg_3
// 1043         pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
        ; Setup parameters for indirect call
        LCALL   ??Subroutine49_0 & 0xFFFF
// 1044 #endif
// 1045       (void)sentEP;
// 1046       (void)sentStatus;
// 1047       break;
// 1048 
// 1049     case ZDO_NWK_DISC_CNF:
// 1050       if (devState != DEV_NWK_DISC)
// 1051         break;
// 1052 
// 1053       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1054       {
// 1055         // Process the network discovery scan results and choose a parent
// 1056         // device to join/rejoin itself
// 1057         networkDesc_t *pChosenNwk;
// 1058         if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
// 1059         {
// 1060           if ( devStartMode == MODE_JOIN )
// 1061           {
// 1062             devState = DEV_NWK_JOINING;
// 1063 
// 1064             ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
// 1065 
// 1066             if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
// 1067                                   pChosenNwk->logicalChannel,
// 1068                                   ZDO_Config_Node_Descriptor.CapabilityFlags,
// 1069                                   pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
// 1070             {
// 1071               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1072                                           + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1073             }
// 1074           } // if ( devStartMode == MODE_JOIN )
// 1075           else if ( devStartMode == MODE_REJOIN )
// 1076           {
// 1077             devState = DEV_NWK_REJOIN;
// 1078 
// 1079             // Before trying to do rejoin, check if the device has a valid short address
// 1080             // If not, generate a random short address for itself
// 1081             if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
// 1082             {
// 1083               _NIB.nwkDevAddress = osal_rand();
// 1084               ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
// 1085             }
// 1086 
// 1087             if ( ZG_SECURE_ENABLED )
// 1088             {
// 1089               ZDApp_RestoreNwkKey();
// 1090             }
// 1091 
// 1092             // Check if the device has a valid PanID, if not, set it to the discovered Pan
// 1093             if ( _NIB.nwkPanId == INVALID_PAN_ID )
// 1094             {
// 1095               _NIB.nwkPanId = pChosenNwk->panId;
// 1096               ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
// 1097             }
// 1098 
// 1099             tmp = true;
// 1100             ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
// 1101             if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel) != ZSuccess )
// 1102             {
// 1103               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1104                                           + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1105             }
// 1106           } // else if ( devStartMode == MODE_REJOIN )
// 1107 
// 1108           if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
// 1109           {
// 1110             // The receiver is on, turn network layer polling off.
// 1111             NLME_SetPollRate( 0 );
// 1112             NLME_SetQueuedPollRate( 0 );
// 1113             NLME_SetResponseRate( 0 );
// 1114           }
// 1115           else
// 1116           {
// 1117             if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
// 1118             {
// 1119               ZDApp_SavedPollRate = zgPollRate;
// 1120               NLME_SetPollRate( zgRejoinPollRate );
// 1121             }
// 1122           }
// 1123         }
// 1124         else
// 1125         {
// 1126           if ( continueJoining )
// 1127           {
// 1128     #if defined ( MANAGED_SCAN )
// 1129             ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
// 1130     #else
// 1131             zdoDiscCounter++;
// 1132             ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
// 1133                   + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
// 1134     #endif
// 1135           }
// 1136         }
// 1137       }
// 1138       break;
// 1139 
// 1140     case ZDO_NWK_JOIN_IND:
// 1141       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1142       {
// 1143         ZDApp_ProcessNetworkJoin();
// 1144       }
// 1145       break;
// 1146 
// 1147     case ZDO_NWK_JOIN_REQ:
// 1148       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1149       {
// 1150         retryCnt = 0;
// 1151         devStartMode = MODE_RESUME;
// 1152         _tmpRejoinState = true;
// 1153         osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
// 1154         zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
// 1155         ZDApp_NetworkInit( 0 );
// 1156       }
// 1157       break;
// 1158 
// 1159     default:
// 1160       if ( ZG_SECURE_ENABLED )
// 1161         ZDApp_ProcessSecMsg( msgPtr );
// 1162       break;
// 1163   }
??CrossCallReturnLabel_94:
        LCALL   ?CALL_IND
// 1164 
// 1165 }
??ZDApp_ProcessOSALMsg_3:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock36
// 1166 
// 1167 /*********************************************************************
// 1168  * @fn      ZDApp_ProcessMsgCBs()
// 1169  *
// 1170  * @brief   Process response messages
// 1171  *
// 1172  * @param   none
// 1173  *
// 1174  * @return  none
// 1175  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1176 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
ZDApp_ProcessMsgCBs:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI Function ZDApp_ProcessMsgCBs
        CODE
// 1177 {
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_UpdateAddrManager
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ProcessBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDMatchSendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseEndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_MatchEndDeviceBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 44
        MOV     A,#-0x2c
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 54)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1178   switch ( inMsg->clusterID )
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        33
        DATA
        DATA16
        DATA
        DATA16
        DW        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32768
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32801
        DATA
        DATA16
        DATA
        DATA16
        DW        32802
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_4
        CODE
// 1179   {
// 1180 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1181     case NWK_addr_rsp:
// 1182     case IEEE_addr_rsp:
// 1183       {
// 1184         ZDO_NwkIEEEAddrResp_t *pAddrRsp;
// 1185         pAddrRsp = ZDO_ParseAddrRsp( inMsg );
??ZDApp_ProcessMsgCBs_1:
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        LCALL   ??ZDO_ParseAddrRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
// 1186         if ( pAddrRsp )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
// 1187         {
// 1188           if ( pAddrRsp->status == ZSuccess )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessMsgCBs_5
// 1189           {
// 1190             ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDO_UpdateAddrManager
        MOV     A,R6
        ADD     A,#0x3
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        LCALL   ?Subroutine25 & 0xFFFF
// 1191           }
??CrossCallReturnLabel_66:
        LCALL   ??ZDO_UpdateAddrManager?relay
// 1192           osal_mem_free( pAddrRsp );
??ZDApp_ProcessMsgCBs_5:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        LJMP    ??ZDApp_ProcessMsgCBs_6 & 0xFFFF
// 1193         }
// 1194       }
// 1195       break;
// 1196 #endif
// 1197 
// 1198 #if defined ( REFLECTOR )
// 1199     case Bind_req:
// 1200     case Unbind_req:
// 1201       {
// 1202         ZDO_BindUnbindReq_t bindReq;
// 1203         ZDO_ParseBindUnbindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_0:
        ; Setup parameters for call to function ZDO_ParseBindUnbindReq
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseBindUnbindReq?relay
// 1204         ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
        ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDO_ProcessBindUnbindReq?relay
// 1205       }
// 1206       break;
        SJMP    ??ZDApp_ProcessMsgCBs_4
// 1207 #endif
// 1208 
// 1209 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1210     case Bind_rsp:
// 1211     case Unbind_rsp:
// 1212       if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
??ZDApp_ProcessMsgCBs_2:
        MOV     DPTR,#matchED
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_6:
        JZ      ??ZDApp_ProcessMsgCBs_4
// 1213       {
// 1214         ZDMatchSendState(
// 1215              (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
// 1216              ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
        MOV     A,R6
        ADD     A,#0xc
        LCALL   ??Subroutine52_0 & 0xFFFF
// 1217       }
??CrossCallReturnLabel_114:
        XRL     A,#0x21
        JNZ     ??ZDApp_ProcessMsgCBs_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x80
??ZDApp_ProcessMsgCBs_7:
        JNZ     ??ZDApp_ProcessMsgCBs_8
        MOV     R1,#0x3
        SJMP    ??ZDApp_ProcessMsgCBs_9
??ZDApp_ProcessMsgCBs_8:
        MOV     R1,#0x2
??ZDApp_ProcessMsgCBs_9:
        ; Setup parameters for call to function ZDMatchSendState
        MOV     A,R6
        ADD     A,#0xf
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_115:
        MOV     R3,A
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_109:
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV     R2,A
        LCALL   ??ZDMatchSendState?relay
        SJMP    ??ZDApp_ProcessMsgCBs_4
// 1218       break;
// 1219 
// 1220     case End_Device_Bind_req:
// 1221       if (ZG_DEVICE_COORDINATOR_TYPE)
// 1222       {
// 1223         ZDEndDeviceBind_t bindReq;
// 1224         ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_3:
        ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseEndDeviceBindReq?relay
// 1225         ZDO_MatchEndDeviceBind( &bindReq );
        ; Setup parameters for call to function ZDO_MatchEndDeviceBind
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDO_MatchEndDeviceBind?relay
// 1226 
// 1227         // Freeing the cluster lists - if allocated.
// 1228         if ( bindReq.numInClusters )
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessMsgCBs_10
// 1229           osal_mem_free( bindReq.inClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL   ??osal_mem_free?relay
// 1230         if ( bindReq.numOutClusters )
??ZDApp_ProcessMsgCBs_10:
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessMsgCBs_4
// 1231           osal_mem_free( bindReq.outClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_ProcessMsgCBs_6:
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
// 1232       }
// 1233       break;
// 1234 #endif
// 1235   }
// 1236 }
??ZDApp_ProcessMsgCBs_4:
        MOV     A,#0x2c
        LJMP    ??Subroutine44_0 & 0xFFFF
        CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        INC     DPTR
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45
// 1237 
// 1238 /*********************************************************************
// 1239  * @fn      ZDApp_RegisterCBs()
// 1240  *
// 1241  * @brief   Process response messages
// 1242  *
// 1243  * @param   none
// 1244  *
// 1245  * @return  none
// 1246  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1247 void ZDApp_RegisterCBs( void )
ZDApp_RegisterCBs:
        CFI Block cfiBlock46 Using cfiCommon0
        CFI Function ZDApp_RegisterCBs
        CODE
// 1248 {
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1249 #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1250   ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x1
        LCALL   ?Subroutine15 & 0xFFFF
// 1251 #endif
// 1252 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
// 1253   ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
??CrossCallReturnLabel_68:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x0
        LCALL   ?Subroutine15 & 0xFFFF
// 1254 #endif
// 1255 #if ZG_BUILD_COORDINATOR_TYPE
// 1256   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
??CrossCallReturnLabel_69:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x21
        LCALL   ?Subroutine15 & 0xFFFF
// 1257   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
??CrossCallReturnLabel_70:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x22
        LCALL   ?Subroutine15 & 0xFFFF
// 1258   ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
??CrossCallReturnLabel_71:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#0x0
        LCALL   ??Subroutine40_0 & 0xFFFF
// 1259 #endif
// 1260 #if defined ( REFLECTOR )
// 1261   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
??CrossCallReturnLabel_72:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x21
        MOV     R3,#0x0
        LCALL   ??Subroutine40_0 & 0xFFFF
// 1262   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
??CrossCallReturnLabel_73:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x22
        MOV     R3,#0x0
        LCALL   ??Subroutine40_0 & 0xFFFF
// 1263 #endif
// 1264 }
??CrossCallReturnLabel_74:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond48) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond48) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond48) CFA_SP SP+-5
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond49) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond49) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond49) CFA_SP SP+-5
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond50) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond50) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond50) CFA_SP SP+-5
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        MOV     R3,#-0x80
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond53) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond53) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond53) CFA_SP SP+-5
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond54) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond54) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond54) CFA_SP SP+-5
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond55) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond55) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond55) CFA_SP SP+-5
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond56) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond56) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond56) CFA_SP SP+-5
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond57) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond57) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond57) CFA_SP SP+-5
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond58) CFA_SP SP+-5
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
        RET
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
// 1265 
// 1266 /*********************************************************************
// 1267  * @fn      ZDApp_ProcessSecMsg()
// 1268  *
// 1269  * @brief   Process the incoming security message.
// 1270  *
// 1271  * @param   msgPtr - message to process
// 1272  *
// 1273  * @return  none
// 1274  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1275 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessSecMsg:
        CFI Block cfiBlock60 Using cfiCommon0
        CFI Function ZDApp_ProcessSecMsg
        CODE
// 1276 {
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrUpdateDeviceInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1277   switch ( msgPtr->event )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??ZDApp_ProcessSecMsg_0
// 1278   {
// 1279     case ZDO_ESTABLISH_KEY_CFM:
// 1280       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1281       {
// 1282         ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
// 1283       }
// 1284       break;
// 1285 
// 1286     case ZDO_ESTABLISH_KEY_IND:
// 1287       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1288       {
// 1289         if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1290         {
// 1291           ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
// 1292         }
// 1293       }
// 1294       break;
// 1295 
// 1296     case ZDO_TRANSPORT_KEY_IND:
// 1297       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1298       {
// 1299         ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
// 1300       }
// 1301       break;
// 1302 
// 1303     case ZDO_UPDATE_DEVICE_IND:
// 1304       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1305       {
// 1306         ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
        ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
        LCALL   ??ZDSecMgrUpdateDeviceInd?relay
// 1307       }
// 1308       break;
// 1309 
// 1310     case ZDO_REMOVE_DEVICE_IND:
// 1311       if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
// 1312       {
// 1313         ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
// 1314       }
// 1315       break;
// 1316 
// 1317     case ZDO_REQUEST_KEY_IND:
// 1318       if (( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH ) ||
// 1319           ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ))
// 1320       {
// 1321         if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1322         {
// 1323           ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
// 1324         }
// 1325       }
// 1326       break;
// 1327 
// 1328     case ZDO_SWITCH_KEY_IND:
// 1329       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1330       {
// 1331         ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
// 1332       }
// 1333       break;
// 1334 
// 1335     case ZDO_AUTHENTICATE_IND:
// 1336       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1337       {
// 1338         ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
// 1339       }
// 1340       break;
// 1341 
// 1342     case ZDO_AUTHENTICATE_CFM:
// 1343       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1344       {
// 1345         ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
// 1346       }
// 1347       break;
// 1348 
// 1349     default:
// 1350       // Unsupported messages
// 1351       break;
// 1352   }
// 1353 }
??ZDApp_ProcessSecMsg_0:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock60
// 1354 
// 1355 /*********************************************************************
// 1356  * @fn      ZDApp_ProcessNetworkJoin()
// 1357  *
// 1358  * @brief
// 1359  *
// 1360  *   Save off the Network key information.
// 1361  *
// 1362  * @param   none
// 1363  *
// 1364  * @return  none
// 1365  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1366 void ZDApp_ProcessNetworkJoin( void )
ZDApp_ProcessNetworkJoin:
        CFI Block cfiBlock61 Using cfiCommon0
        CFI Function ZDApp_ProcessNetworkJoin
        CODE
// 1367 {
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1368   if ( (devState == DEV_NWK_JOINING) ||
// 1369       ((devState == DEV_NWK_ORPHAN)  &&
// 1370        (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??ZDApp_ProcessNetworkJoin_0
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
// 1371   {
// 1372     // Result of a Join attempt by this device.
// 1373     if ( nwkStatus == ZSuccess )
??ZDApp_ProcessNetworkJoin_0:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_3
// 1374     {
// 1375       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine14 & 0xFFFF
// 1376 
// 1377 #if defined ( POWER_SAVING )
// 1378       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1379 #endif
// 1380 
// 1381       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
// 1382       {
// 1383         // wait for auth from trust center!!
// 1384         devState = DEV_END_DEVICE_UNAUTH;
// 1385 
// 1386         // Start the reset timer for MAX UNAUTH time
// 1387         ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
// 1388       }
// 1389       else
// 1390       {
// 1391         if ( ZSTACK_ROUTER_BUILD )
// 1392         {
// 1393           if ( devState == DEV_NWK_ORPHAN
// 1394             && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??CrossCallReturnLabel_55:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0xa
        JNZ     ??ZDApp_ProcessNetworkJoin_4
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_21:
        JZ      ??ZDApp_ProcessNetworkJoin_5
// 1395           {
// 1396             // Change NIB state to router for restore
// 1397             _NIB.nwkState = NWK_ROUTER;
        MOV     DPTR,#_NIB + 35
        MOV     A,#0x8
        MOVX    @DPTR,A
        SJMP    ??ZDApp_ProcessNetworkJoin_5
// 1398           }
// 1399         }
// 1400 
// 1401         if ( devState == DEV_NWK_JOINING )
??ZDApp_ProcessNetworkJoin_4:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDApp_ProcessNetworkJoin_5
// 1402         {
// 1403           ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
// 1404         }
// 1405 
// 1406         devState = DEV_END_DEVICE;
??ZDApp_ProcessNetworkJoin_5:
        MOV     DPTR,#devState
        MOV     A,#0x6
        MOVX    @DPTR,A
// 1407         if ( ZSTACK_ROUTER_BUILD )
// 1408         {
// 1409           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1410           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_22:
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_56 & 0xFFFF
// 1411           {
// 1412             NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??NLME_StartRouterRequest?relay
        LJMP    ??CrossCallReturnLabel_56 & 0xFFFF
// 1413           }
// 1414         }
// 1415       }
// 1416     }
// 1417     else
// 1418     {
// 1419       if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
??ZDApp_ProcessNetworkJoin_3:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_6
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDApp_ProcessNetworkJoin_6
// 1420       {
// 1421         if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDApp_ProcessNetworkJoin_7
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_7:
        JZ      ??ZDApp_ProcessNetworkJoin_8
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessNetworkJoin_9
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_9:
        JNZ     ??ZDApp_ProcessNetworkJoin_10
// 1422           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_8:
        MOV     DPTR,#devStartMode
        CLR     A
        SJMP    ??ZDApp_ProcessNetworkJoin_11
// 1423         else
// 1424         {
// 1425           devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_10:
        MOV     DPTR,#devStartMode
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1426           _tmpRejoinState = true;
        MOV     DPTR,#_tmpRejoinState
        MOV     A,#0x1
??ZDApp_ProcessNetworkJoin_11:
        MOVX    @DPTR,A
// 1427         }
// 1428       }
// 1429 
// 1430       if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 1431            (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
??ZDApp_ProcessNetworkJoin_6:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#-0x2
        XRL     A,?V0 + 0
        JNZ     ??ZDApp_ProcessNetworkJoin_12
        MOV     A,#-0x1
        XRL     A,?V0 + 1
??ZDApp_ProcessNetworkJoin_12:
        JNZ     ??ZDApp_ProcessNetworkJoin_13
        MOV     DPTR,#_NIB + 20
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessNetworkJoin_14
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_14:
        JZ      ??ZDApp_ProcessNetworkJoin_15
// 1432       {
// 1433         uint16 addr = INVALID_NODE_ADDR;
??ZDApp_ProcessNetworkJoin_13:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
// 1434         // Invalidate nwk addr so end device does not use in its data reqs.
// 1435         _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV     DPTR,#_NIB + 20
        DEC     A
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        LCALL   ?Subroutine9 & 0xFFFF
// 1436         ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
// 1437       }
??CrossCallReturnLabel_0:
        MOV     R1,#0x53
        LCALL   ??ZMacSetReq?relay
// 1438 
// 1439       // Clear the neighbor Table and network discovery tables.
// 1440       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_15:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   ??nwkNeighborInitTable?relay
// 1441       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   ??NLME_NwkDiscTerm?relay
// 1442 
// 1443       zdoDiscCounter = 1;
        MOV     DPTR,#zdoDiscCounter
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1444 
// 1445 //      ZDApp_NetworkInit( (uint16)
// 1446 //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
// 1447 //                          (NWK_START_DELAY * 5)) );
// 1448       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1449            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
??ZDApp_ProcessNetworkJoin_16:
        LCALL   ??osal_rand?relay
        MOV     A,R2
        ANL     A,#0x7f
        ADD     A,#0x64
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??ZDApp_NetworkInit?relay
        LJMP    ??CrossCallReturnLabel_56 & 0xFFFF
// 1450     }
// 1451   }
// 1452   else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
??ZDApp_ProcessNetworkJoin_1:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_17 & 0xFFFF
// 1453   {
// 1454     // results of an orphaning attempt by this device
// 1455     if (nwkStatus == ZSuccess)
??ZDApp_ProcessNetworkJoin_2:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_18
// 1456     {
// 1457       if ( ZG_SECURE_ENABLED )
// 1458       {
// 1459         ZDApp_RestoreNwkKey();
// 1460       }
// 1461 
// 1462       devState = DEV_END_DEVICE;
        LCALL   ?Subroutine8 & 0xFFFF
// 1463       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
// 1464       // setup Power Manager Device
// 1465 #if defined ( POWER_SAVING )
// 1466       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1467 #endif
// 1468 
// 1469       if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
??CrossCallReturnLabel_62:
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDApp_ProcessNetworkJoin_19
// 1470       {
// 1471         // The receiver is on, turn network layer polling off.
// 1472         NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_SetPollRate?relay
// 1473         NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_SetQueuedPollRate?relay
// 1474         NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_SetResponseRate?relay
// 1475       }
// 1476 
// 1477       if ( ZSTACK_ROUTER_BUILD )
// 1478       {
// 1479         // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1480         if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_19:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_23:
        JZ      ??ZDApp_ProcessNetworkJoin_20
// 1481         {
// 1482           NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??NLME_StartRouterRequest?relay
// 1483         }
// 1484       }
// 1485 
// 1486       ZDApp_AnnounceNewAddress();
??ZDApp_ProcessNetworkJoin_20:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
        SJMP    ??CrossCallReturnLabel_56
// 1487     }
// 1488     else
// 1489     {
// 1490       if ( devStartMode == MODE_RESUME )
??ZDApp_ProcessNetworkJoin_18:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_21
// 1491       {
// 1492         if ( ++retryCnt <= MAX_RESUME_RETRY )
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDApp_ProcessNetworkJoin_22
// 1493         {
// 1494           if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDApp_ProcessNetworkJoin_23
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_23:
        JZ      ??ZDApp_ProcessNetworkJoin_24
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessNetworkJoin_25
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_25:
        JNZ     ??ZDApp_ProcessNetworkJoin_26
// 1495             devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_24:
        MOV     DPTR,#devStartMode
        CLR     A
??ZDApp_ProcessNetworkJoin_27:
        MOVX    @DPTR,A
        SJMP    ??ZDApp_ProcessNetworkJoin_21
// 1496           else
// 1497           {
// 1498             devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_26:
        MOV     DPTR,#devStartMode
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1499             _tmpRejoinState = true;
        MOV     DPTR,#_tmpRejoinState
        MOV     A,#0x1
        SJMP    ??ZDApp_ProcessNetworkJoin_27
// 1500           }
// 1501         }
// 1502         // Do a normal join to the network after certain times of rejoin retries
// 1503         else if( AIB_apsUseInsecureJoin == true )
??ZDApp_ProcessNetworkJoin_22:
        MOV     DPTR,#AIB_apsUseInsecureJoin
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessNetworkJoin_24
// 1504         {
// 1505           devStartMode = MODE_JOIN;
// 1506         }
// 1507       }
// 1508 
// 1509       // Clear the neighbor Table and network discovery tables.
// 1510       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_21:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   ??nwkNeighborInitTable?relay
// 1511       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   ??NLME_NwkDiscTerm?relay
// 1512 
// 1513       // setup a retry for later...
// 1514       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1515            + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        LJMP    ??ZDApp_ProcessNetworkJoin_16 & 0xFFFF
// 1516     }
// 1517   }
// 1518 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
// 1519   else
// 1520   {
// 1521     // Assume from address conflict
// 1522     if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
??ZDApp_ProcessNetworkJoin_17:
        MOV     DPTR,#_NIB + 96
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??CrossCallReturnLabel_56
// 1523     {
// 1524       // Notify the network
// 1525       ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
// 1526 
// 1527       // Notify apps
// 1528       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine14 & 0xFFFF
// 1529     }
// 1530   }
// 1531 #endif
// 1532 }
??CrossCallReturnLabel_56:
        LJMP    ?Subroutine7 & 0xFFFF
        CFI EndBlock cfiBlock61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker67 Using cfiCommon1
        CFI (cfiPicker67) NoFunction
        CFI (cfiPicker67) Picker
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x2
        RET
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiPicker67
// 1533 
// 1534 /*********************************************************************
// 1535  * @fn      ZDApp_SaveNwkKey()
// 1536  *
// 1537  * @brief   Save off the Network key information.
// 1538  *
// 1539  * @param   none
// 1540  *
// 1541  * @return  none
// 1542  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1543 void ZDApp_SaveNwkKey( void )
ZDApp_SaveNwkKey:
        CFI Block cfiBlock68 Using cfiCommon0
        CFI Function ZDApp_SaveNwkKey
        CODE
// 1544 {
        FUNCALL ZDApp_SaveNwkKey, SSP_ReadNwkActiveKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1545   nwkActiveKeyItems keyItems;
// 1546 
// 1547   SSP_ReadNwkActiveKey( &keyItems );
        ; Setup parameters for call to function SSP_ReadNwkActiveKey
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SSP_ReadNwkActiveKey?relay
// 1548   keyItems.frameCounter++;
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
// 1549 
// 1550   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1551                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1552 
// 1553   nwkFrameCounterChanges = 0;
        MOV     DPTR,#nwkFrameCounterChanges
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1554 
// 1555   // Clear copy in RAM before return.
// 1556   osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,A
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 1557 
// 1558 }
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock68
// 1559 
// 1560 /*********************************************************************
// 1561  * @fn      ZDApp_ResetNwkKey()
// 1562  *
// 1563  * @brief   Reset the Network key information in NV.
// 1564  *
// 1565  * @param   none
// 1566  *
// 1567  * @return  none
// 1568  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1569 void ZDApp_ResetNwkKey( void )
ZDApp_ResetNwkKey:
        CFI Block cfiBlock69 Using cfiCommon0
        CFI Function ZDApp_ResetNwkKey
        CODE
// 1570 {
        FUNCALL ZDApp_ResetNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1571   nwkActiveKeyItems keyItems;
// 1572 
// 1573   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        LCALL   ?Subroutine26 & 0xFFFF
// 1574   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1575                 (void *)&keyItems );
??CrossCallReturnLabel_32:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1576 }
        MOV     A,#0x15
        LJMP    ??Subroutine44_0 & 0xFFFF
        CFI EndBlock cfiBlock69

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72
// 1577 
// 1578 /*********************************************************************
// 1579  * @fn      ZDApp_RestoreNwkKey()
// 1580  *
// 1581  * @brief
// 1582  *
// 1583  *   Save off the Network key information.
// 1584  *
// 1585  * @param   none
// 1586  *
// 1587  * @return  true if restored from NV, false if not
// 1588  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1589 uint8 ZDApp_RestoreNwkKey( void )
ZDApp_RestoreNwkKey:
        CFI Block cfiBlock73 Using cfiCommon0
        CFI Function ZDApp_RestoreNwkKey
        CODE
// 1590 {
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1591   nwkActiveKeyItems keyItems;
// 1592   uint8 ret = false;
        MOV     R6,#0x0
// 1593 
// 1594   if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
// 1595       == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,R6
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        JNZ     ??ZDApp_RestoreNwkKey_0
// 1596   {
// 1597     if ( keyItems.frameCounter > 0 )
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??ZDApp_RestoreNwkKey_1
// 1598     {
// 1599       // Restore the key information
// 1600       keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
// 1601       nwkFrameCounter = keyItems.frameCounter;
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#nwkFrameCounter
        LCALL   ?XSTORE_R2345
// 1602       ret = true;
        INC     R6
// 1603     }
// 1604 
// 1605     // Force a save for the first frame counter increment
// 1606     nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
??ZDApp_RestoreNwkKey_1:
        MOV     DPTR,#nwkFrameCounterChanges
        MOV     A,#-0x17
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1607   }
// 1608   // Clear copy in RAM before return.
// 1609   osal_memset( &keyItems, 0x00, sizeof(keyItems) );
??ZDApp_RestoreNwkKey_0:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 1610 
// 1611   return ( ret );
        MOV     A,R6
        MOV     R1,A
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock73
// 1612 }
// 1613 
// 1614 /*********************************************************************
// 1615  * @fn      ZDApp_ResetTimerStart
// 1616  *
// 1617  * @brief   Start the reset timer.
// 1618  *
// 1619  * @param   delay - delay time(ms) before reset
// 1620  *
// 1621  * @return  none
// 1622  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1623 void ZDApp_ResetTimerStart( uint16 delay )
ZDApp_ResetTimerStart:
        CFI Block cfiBlock74 Using cfiCommon0
        CFI Function ZDApp_ResetTimerStart
        CODE
// 1624 {
        FUNCALL ZDApp_ResetTimerStart, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1625   // Start the rest timer
// 1626   osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x4
        LCALL   ?Subroutine22 & 0xFFFF
// 1627 }
??CrossCallReturnLabel_76:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond76) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond76) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond76) CFA_SP SP+-5
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond77) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond77) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond77) CFA_SP SP+-5
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
        CFI Block cfiCond79 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_78
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond81) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond81) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond81) CFA_SP SP+-5
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond82) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond82) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond82) CFA_SP SP+-5
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83
// 1628 
// 1629 /*********************************************************************
// 1630  * @fn      ZDApp_ResetTimerCancel
// 1631  *
// 1632  * @brief   Cancel the reset timer.
// 1633  *
// 1634  * @param   none
// 1635  *
// 1636  * @return  none
// 1637  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1638 void ZDApp_ResetTimerCancel( void )
ZDApp_ResetTimerCancel:
        CFI Block cfiBlock84 Using cfiCommon0
        CFI Function ZDApp_ResetTimerCancel
        CODE
// 1639 {
        FUNCALL ZDApp_ResetTimerCancel, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1640   // Cancel the reset timer
// 1641   osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
// 1642 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock84
// 1643 
// 1644 /*********************************************************************
// 1645  * @fn      ZDApp_LeaveCtrlInit
// 1646  *
// 1647  * @brief   Initialize the leave control logic.
// 1648  *
// 1649  * @param   none
// 1650  *
// 1651  * @return  none
// 1652  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1653 void ZDApp_LeaveCtrlInit( void )
ZDApp_LeaveCtrlInit:
        CFI Block cfiBlock85 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlInit
        CODE
// 1654 {
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1655   uint8 status;
// 1656 
// 1657 
// 1658   // Initialize control state
// 1659   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV     DPTR,#ZDApp_LeaveCtrl
        CLR     A
        MOVX    @DPTR,A
// 1660 
// 1661   status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
// 1662                               sizeof(ZDApp_LeaveCtrl),
// 1663                               &ZDApp_LeaveCtrl );
// 1664 
// 1665   if ( status == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_item_init
        MOV     ?V0 + 0,#ZDApp_LeaveCtrl & 0xff
        MOV     ?V0 + 1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JNZ     ??ZDApp_LeaveCtrlInit_0
// 1666   {
// 1667     // Read saved control
// 1668     osal_nv_read( ZCD_NV_LEAVE_CTRL,
// 1669                   0,
// 1670                   sizeof( uint8 ),
// 1671                   &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        LCALL   ?Subroutine31 & 0xFFFF
// 1672   }
??CrossCallReturnLabel_39:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1673 }
??ZDApp_LeaveCtrlInit_0:
        LJMP    ??Subroutine45_0 & 0xFFFF
        CFI EndBlock cfiBlock85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker90 Using cfiCommon1
        CFI (cfiPicker90) NoFunction
        CFI (cfiPicker90) Picker
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiPicker90
// 1674 
// 1675 /*********************************************************************
// 1676  * @fn      ZDApp_LeaveCtrlSet
// 1677  *
// 1678  * @brief   Set the leave control logic.
// 1679  *
// 1680  * @param   ra - reassociate flag
// 1681  *
// 1682  * @return  none
// 1683  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1684 void ZDApp_LeaveCtrlSet( uint8 ra )
ZDApp_LeaveCtrlSet:
        CFI Block cfiBlock91 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlSet
        CODE
// 1685 {
        FUNCALL ZDApp_LeaveCtrlSet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1686   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1687 
// 1688   if ( ra == TRUE )
        XRL     A,R6
        JNZ     ??ZDApp_LeaveCtrlSet_0
// 1689   {
// 1690     ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1691   }
// 1692 
// 1693   // Write the leave control
// 1694   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1695                  0,
// 1696                  sizeof( uint8 ),
// 1697                  &ZDApp_LeaveCtrl);
??ZDApp_LeaveCtrlSet_0:
        ; Setup parameters for call to function osal_nv_write
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock91
// 1698 }
// 1699 
// 1700 /*********************************************************************
// 1701  * @fn      ZDApp_LeaveCtrlReset
// 1702  *
// 1703  * @brief   Re-initialize the leave control logic.
// 1704  *
// 1705  * @param   none
// 1706  *
// 1707  * @return  none
// 1708  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1709 void ZDApp_LeaveCtrlReset( void )
ZDApp_LeaveCtrlReset:
        CFI Block cfiBlock92 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlReset
        CODE
// 1710 {
        FUNCALL ZDApp_LeaveCtrlReset, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1711   // Set leave control to initialized state
// 1712   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV     DPTR,#ZDApp_LeaveCtrl
        CLR     A
        MOVX    @DPTR,A
// 1713 
// 1714   // Write initialized control
// 1715   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1716                 0,
// 1717                 sizeof( uint8 ),
// 1718                 &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_write
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock92
// 1719 }
// 1720 
// 1721 /*********************************************************************
// 1722  * @fn      ZDApp_LeaveCtrlBypass
// 1723  *
// 1724  * @brief   Check if NV restore should be skipped during a leave reset.
// 1725  *
// 1726  * @param   none
// 1727  *
// 1728  * @return  uint8 - (TRUE bypass:FALSE do not bypass)
// 1729  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1730 uint8 ZDApp_LeaveCtrlBypass( void )
ZDApp_LeaveCtrlBypass:
        CFI Block cfiBlock93 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlBypass
        CODE
// 1731 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1732   uint8 bypass;
// 1733 
// 1734   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
// 1735   {
// 1736     bypass = TRUE;
// 1737   }
// 1738   else
// 1739   {
// 1740     bypass = FALSE;
// 1741   }
// 1742 
// 1743   return bypass;
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        RLC     A
        MOV     R1,A
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock93
// 1744 }
// 1745 
// 1746 /*********************************************************************
// 1747  * @fn      ZDApp_LeaveCtrlStartup
// 1748  *
// 1749  * @brief   Check for startup conditions during a leave reset.
// 1750  *
// 1751  * @param   state      - devState_t determined by leave control logic
// 1752  * @param   startDelay - startup delay
// 1753  *
// 1754  * @return  none
// 1755  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1756 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
ZDApp_LeaveCtrlStartup:
        CFI Block cfiBlock94 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlStartup
        CODE
// 1757 {
        FUNCALL ZDApp_LeaveCtrlStartup, ZDApp_LeaveCtrlReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1758   *startDelay = 0;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1759 
// 1760   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_LeaveCtrlStartup_0
// 1761   {
// 1762     if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_LeaveCtrlStartup_1
// 1763     {
// 1764       *startDelay = LEAVE_RESET_DELAY;
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x78
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x13
        SJMP    ??ZDApp_LeaveCtrlStartup_2
// 1765     }
// 1766     else
// 1767     {
// 1768       *state = DEV_HOLD;
??ZDApp_LeaveCtrlStartup_1:
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
??ZDApp_LeaveCtrlStartup_2:
        MOVX    @DPTR,A
// 1769     }
// 1770 
// 1771     // Reset leave control logic
// 1772     ZDApp_LeaveCtrlReset();
        ; Setup parameters for call to function ZDApp_LeaveCtrlReset
        LCALL   ??ZDApp_LeaveCtrlReset?relay
        CFI EndBlock cfiBlock94
// 1773   }
// 1774 }
??ZDApp_LeaveCtrlStartup_0:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock95 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock95
// 1775 
// 1776 /*********************************************************************
// 1777  * @fn      ZDApp_LeaveReset
// 1778  *
// 1779  * @brief   Setup a device reset due to a leave indication/confirm.
// 1780  *
// 1781  * @param   ra - reassociate flag
// 1782  *
// 1783  * @return  none
// 1784  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1785 void ZDApp_LeaveReset( uint8 ra )
ZDApp_LeaveReset:
        CFI Block cfiBlock96 Using cfiCommon0
        CFI Function ZDApp_LeaveReset
        CODE
// 1786 {
        FUNCALL ZDApp_LeaveReset, ZDApp_LeaveCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1787   ZDApp_LeaveCtrlSet( ra );
        ; Setup parameters for call to function ZDApp_LeaveCtrlSet
        LCALL   ??ZDApp_LeaveCtrlSet?relay
// 1788 
// 1789   ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??ZDApp_ResetTimerStart?relay
// 1790 }
        SJMP    ??Subroutine42_0
        CFI EndBlock cfiBlock96

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock97 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ??Subroutine37_0 & 0xFFFF
        CFI EndBlock cfiBlock97
??CrossCallReturnLabel_59:
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
        CFI Block cfiBlock98 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock98
// 1791 
// 1792 /*********************************************************************
// 1793  * @fn      ZDApp_LeaveUpdate
// 1794  *
// 1795  * @brief   Update local device data related to leaving device.
// 1796  *
// 1797  * @param   nwkAddr        - NWK address of leaving device
// 1798  * @param   extAddr        - EXT address of leaving device
// 1799  * @param   removeChildren - remove children of leaving device
// 1800  *
// 1801  * @return  none
// 1802  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1803 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
ZDApp_LeaveUpdate:
        CFI Block cfiBlock99 Using cfiCommon0
        CFI Function ZDApp_LeaveUpdate
        CODE
// 1804                         uint8 removeChildren )
// 1805 {
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrDeviceRemoveByExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, NLME_RemoveChild
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, RTG_RemoveRtgEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, nwkNeighborRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V0 + 2,R1
// 1806   // Remove Apps Key for leaving device
// 1807   ZDSecMgrDeviceRemoveByExtAddr(extAddr);
        ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrDeviceRemoveByExtAddr?relay
// 1808 
// 1809   // Clear SECURITY bit from Address Manager
// 1810   ZDSecMgrAddrClear( extAddr );
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrAddrClear?relay
// 1811 
// 1812   if ( pbindRemoveDev )
        MOV     DPTR,#pbindRemoveDev
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_7:
        JZ      ??ZDApp_LeaveUpdate_0
// 1813   {
// 1814     zAddrType_t devAddr;
// 1815 
// 1816     // Remove bind entry and all related data
// 1817     devAddr.addrMode = Addr64Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1818     osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1819 
// 1820     pbindRemoveDev(&devAddr);
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#pbindRemoveDev
        LCALL   ?Subroutine18 & 0xFFFF
// 1821   }
??CrossCallReturnLabel_101:
        LCALL   ?CALL_IND
// 1822 
// 1823   // Remove if child
// 1824   if ( ZSTACK_ROUTER_BUILD )
// 1825   {
// 1826     NLME_RemoveChild( extAddr, removeChildren );
??ZDApp_LeaveUpdate_0:
        ; Setup parameters for call to function NLME_RemoveChild
        MOV     R1,?V0 + 2
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??NLME_RemoveChild?relay
// 1827   }
// 1828 
// 1829   // Remove Routing table related entry
// 1830   RTG_RemoveRtgEntry( nwkAddr, 0 );
        ; Setup parameters for call to function RTG_RemoveRtgEntry
        MOV     R1,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??RTG_RemoveRtgEntry?relay
// 1831 
// 1832   // Remove entry from neighborTable
// 1833   nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
        ; Setup parameters for call to function nwkNeighborRemove
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??nwkNeighborRemove?relay
// 1834 
// 1835   // Schedule to save data to NV
// 1836   ZDApp_NwkWriteNVRequest();
// 1837 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock99
// 1838 
// 1839 /*********************************************************************
// 1840  * @fn      ZDApp_NetworkDiscoveryReq
// 1841  *
// 1842  * @brief   Request a network discovery.
// 1843  *
// 1844  * @param  scanChannels -
// 1845  * @param  scanDuration -
// 1846  *
// 1847  * @return  ZStatus_t
// 1848  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1849 ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
ZDApp_NetworkDiscoveryReq:
        CFI Block cfiBlock100 Using cfiCommon0
        CFI Function ZDApp_NetworkDiscoveryReq
        CODE
// 1850 {
        FUNCALL ZDApp_NetworkDiscoveryReq, NLME_NetworkDiscoveryRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 1851   // Setup optional filters - tbd
// 1852 
// 1853   // Request NLME network discovery
// 1854   return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
        ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
        LCALL   ??NLME_NetworkDiscoveryRequest?relay
        SJMP    ??Subroutine43_0
        CFI EndBlock cfiBlock100
// 1855 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock101 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x15
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock101
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
        CFI Block cfiBlock102 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock102
// 1856 
// 1857 /*********************************************************************
// 1858  * @fn      ZDApp_JoinReq
// 1859  *
// 1860  * @brief   Request the device to join a parent in a network.
// 1861  *
// 1862  * @param   channel -
// 1863  * @param   panID -
// 1864  *
// 1865  * @return  ZStatus_t
// 1866  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1867 ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
ZDApp_JoinReq:
        CFI Block cfiBlock103 Using cfiCommon0
        CFI Function ZDApp_JoinReq
        CODE
// 1868                          uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
// 1869 {
        FUNCALL ZDApp_JoinReq, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_JoinReq, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
// 1870   // Sync up the node with the stack profile (In the case where a pro device
// 1871   // joins a non-pro network, or verse versa)
// 1872   ZDApp_NodeProfileSync( stackProfile);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        LCALL   ??ZDApp_NodeProfileSync?relay
// 1873 
// 1874   // Request NLME Join Request
// 1875   return NLME_JoinRequest(extendedPanID, panID,channel,
// 1876                           ZDO_Config_Node_Descriptor.CapabilityFlags,
// 1877                           chosenParent, parentDepth);
        ; Setup parameters for call to function NLME_JoinRequest
        MOV     R0,#?V0 + 5
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R1,?V0 + 4
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??NLME_JoinRequest?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock103
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
// 1878 
// 1879 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock104 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock104
// 1880 
// 1881 /*********************************************************************
// 1882  * @fn      ZDApp_DeviceConfigured
// 1883  *
// 1884  * @brief   Check to see if the local device is configured (i.e., part
// 1885  *          of a network).
// 1886  *
// 1887  * @param   none
// 1888  *
// 1889  * @return  TRUE if configured. FALSE, otherwise.
// 1890  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1891 uint8 ZDApp_DeviceConfigured( void )
ZDApp_DeviceConfigured:
        CFI Block cfiBlock105 Using cfiCommon0
        CFI Function ZDApp_DeviceConfigured
        CODE
// 1892 {
        FUNCALL ZDApp_DeviceConfigured, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1893   uint16 nwkAddr = INVALID_NODE_ADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
// 1894 
// 1895   osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
// 1896                 sizeof( uint16), &nwkAddr );
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,#0x21
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1897 
// 1898   // Does the NIB have anything more than default?
// 1899   return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_DeviceConfigured_0
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_DeviceConfigured_0:
        JNZ     ??ZDApp_DeviceConfigured_1
        MOV     R1,#0x0
        SJMP    ??ZDApp_DeviceConfigured_2
??ZDApp_DeviceConfigured_1:
        MOV     R1,#0x1
        CFI EndBlock cfiBlock105
??ZDApp_DeviceConfigured_2:
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7
// 1900 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiBlock106 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        SJMP    ??Subroutine44_0
        CFI EndBlock cfiBlock106

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock107 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     ?V0 + 0,#ZDApp_LeaveCtrl & 0xff
        MOV     ?V0 + 1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        CFI EndBlock cfiBlock107
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
        CFI Block cfiBlock108 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock108
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine45_0:
        CFI Block cfiBlock109 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock109
// 1901 
// 1902 /*********************************************************************
// 1903  * CALLBACK FUNCTIONS
// 1904  */
// 1905 
// 1906 
// 1907 /*********************************************************************
// 1908  * @fn      ZDApp_SendEventMsg()
// 1909  *
// 1910  * @brief
// 1911  *
// 1912  *   Sends a Network Join message
// 1913  *
// 1914  * @param  cmd - command ID
// 1915  * @param  len - length (in bytes) of the buf field
// 1916  * @param  buf - buffer for the rest of the message.
// 1917  *
// 1918  * @return  none
// 1919  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1920 void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendEventMsg:
        CFI Block cfiBlock110 Using cfiCommon0
        CFI Function ZDApp_SendEventMsg
        CODE
// 1921 {
        FUNCALL ZDApp_SendEventMsg, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
// 1922   ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R3,A
        MOV     A,R6
        MOV     R2,A
        LCALL   ?Subroutine23 & 0xFFFF
// 1923 }
??CrossCallReturnLabel_25:
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock110
// 1924 
// 1925 /*********************************************************************
// 1926  * @fn      ZDApp_SendMsg()
// 1927  *
// 1928  * @brief   Sends a OSAL message
// 1929  *
// 1930  * @param  taskID - Where to send the message
// 1931  * @param  cmd - command ID
// 1932  * @param  len - length (in bytes) of the buf field
// 1933  * @param  buf - buffer for the rest of the message.
// 1934  *
// 1935  * @return  none
// 1936  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1937 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendMsg:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function ZDApp_SendMsg
        CODE
// 1938 {
        FUNCALL ZDApp_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 3,R1
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
// 1939   osal_event_hdr_t *msgPtr;
// 1940 
// 1941   // Send the address to the task
// 1942   msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     ?V0 + 6,R3
        MOV     R2,?V0 + 6
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R6,?V0 + 6
        MOV     R7,?V0 + 7
// 1943   if ( msgPtr )
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDApp_SendMsg_0
// 1944   {
// 1945     if ( (len > 0) && (buf != NULL) )
        MOV     A,?V0 + 5
        JZ      ??ZDApp_SendMsg_1
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??ZDApp_SendMsg_1
// 1946       osal_memcpy( msgPtr, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,?V0 + 5
        MOV     R4,?V0 + 0
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 1947 
// 1948     msgPtr->event = cmd;
??ZDApp_SendMsg_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
// 1949     osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 3
        LCALL   ??osal_msg_send?relay
// 1950   }
// 1951 }
??ZDApp_SendMsg_0:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock111
// 1952 
// 1953 /*********************************************************************
// 1954  * Call Back Functions from NWK  - API
// 1955  */
// 1956 
// 1957 /*********************************************************************
// 1958  * @fn          ZDO_NetworkDiscoveryConfirmCB
// 1959  *
// 1960  * @brief       This function returns a choice of PAN to join.
// 1961  *
// 1962  * @param       status - return status of the nwk discovery confirm
// 1963  *
// 1964  * @return      ZStatus_t
// 1965  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1966 ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
ZDO_NetworkDiscoveryConfirmCB:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI Function ZDO_NetworkDiscoveryConfirmCB
        CODE
// 1967 {
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 3)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1968   osal_event_hdr_t msg;
// 1969 
// 1970   // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
// 1971   // Send ZDO_MGMT_NWK_DISC_RSP back
// 1972 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 1973   if ( zdappMgmtNwkDiscReqInProgress )
// 1974   {
// 1975     zdappMgmtNwkDiscReqInProgress = false;
// 1976     ZDO_FinishProcessingMgmtNwkDiscReq();
// 1977   }
// 1978   else
// 1979 #endif
// 1980   {
// 1981     // Pass the confirm to another task if it registers the callback
// 1982     // Otherwise, pass the confirm to ZDApp.
// 1983     if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 4
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_8:
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
// 1984     {
// 1985       zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#zdoCBFunc + 5
        LCALL   ??Subroutine49_0 & 0xFFFF
// 1986     }
??CrossCallReturnLabel_95:
        LCALL   ?CALL_IND
        SJMP    ??CrossCallReturnLabel_26
// 1987     else
// 1988     {
// 1989       // Otherwise, send scan confirm to ZDApp task to proceed
// 1990       msg.status = ZDO_SUCCESS;
??ZDO_NetworkDiscoveryConfirmCB_0:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1991       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
        ; Setup parameters for call to function ZDApp_SendMsg
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x2
        MOV     R2,#0x1
        LCALL   ?Subroutine23 & 0xFFFF
// 1992     }
// 1993   }
// 1994   return (ZSuccess);
??CrossCallReturnLabel_26:
        MOV     R1,#0x0
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock112
// 1995 }  // ZDO_NetworkDiscoveryConfirmCB
// 1996 
// 1997 /*********************************************************************
// 1998  * @fn          ZDApp_NwkDescListProcessing
// 1999  *
// 2000  * @brief       This function process the network discovery result and select
// 2001  *              a parent device to join itself.
// 2002  *
// 2003  * @param       none
// 2004  *
// 2005  * @return      ZStatus_t
// 2006  */
// 2007 #define STACK_PROFILE_MAX 2

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2008 networkDesc_t* ZDApp_NwkDescListProcessing(void)
ZDApp_NwkDescListProcessing:
        CFI Block cfiBlock113 Using cfiCommon0
        CFI Function ZDApp_NwkDescListProcessing
        CODE
// 2009 {
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 2010   networkDesc_t *pNwkDesc;
// 2011   uint8 i, ResultCount = 0;
        MOV     ?V0 + 0,#0x0
// 2012   uint8 stackProfile;
// 2013   uint8 stackProfilePro;
// 2014   uint8 selected;
// 2015 
// 2016   // Count the number of nwk descriptors in the list
// 2017   pNwkDesc = nwk_getNwkDescList();
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL   ??nwk_getNwkDescList?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        SJMP    ??CrossCallReturnLabel_88
// 2018   while (pNwkDesc)
// 2019   {
// 2020     ResultCount++;
??ZDApp_NwkDescListProcessing_0:
        INC     ?V0 + 0
// 2021     pNwkDesc = pNwkDesc->nextDesc;
        LCALL   ?Subroutine21 & 0xFFFF
// 2022   }
??CrossCallReturnLabel_88:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDApp_NwkDescListProcessing_0
// 2023 
// 2024   // process discovery results
// 2025   stackProfilePro = FALSE;
        MOV     ?V0 + 3,#0x0
// 2026   selected = FALSE;
// 2027 
// 2028 
// 2029   for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
        MOV     ?V0 + 1,#0x0
// 2030   {
// 2031     pNwkDesc = nwk_getNwkDescList();
??ZDApp_NwkDescListProcessing_1:
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL   ??nwk_getNwkDescList?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
// 2032     for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV     ?V0 + 2,#0x0
        SJMP    ??CrossCallReturnLabel_89
// 2033     {
// 2034       if ( zgConfigPANID != 0xFFFF )
// 2035       {
// 2036         // PAN Id is preconfigured. check if it matches
// 2037         if ( pNwkDesc->panId != zgConfigPANID )
// 2038           continue;
// 2039       }
// 2040 
// 2041       if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true )
// 2042       {
// 2043         // If the extended Pan ID is commissioned to a non zero value
// 2044         // Only join the Pan that has match EPID
// 2045         if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 2046           continue;
// 2047 
// 2048       }
// 2049 
// 2050       // check that network is allowing joining
// 2051       if ( ZSTACK_ROUTER_BUILD )
// 2052       {
// 2053         if ( stackProfilePro == FALSE )
// 2054         {
// 2055           if ( !pNwkDesc->routerCapacity )
// 2056           {
// 2057             continue;
// 2058           }
// 2059         }
// 2060         else
// 2061         {
// 2062           if ( !pNwkDesc->deviceCapacity )
// 2063           {
// 2064             continue;
// 2065           }
// 2066         }
// 2067       }
// 2068       else if ( ZSTACK_END_DEVICE_BUILD )
// 2069       {
// 2070         if ( !pNwkDesc->deviceCapacity )
// 2071         {
// 2072           continue;
// 2073         }
// 2074       }
// 2075 
// 2076       // check version of zigbee protocol
// 2077       if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 2078         continue;
// 2079 
// 2080       // check version of stack profile
// 2081       if ( pNwkDesc->stackProfile != zgStackProfile  )
// 2082       {
// 2083         if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 2084             || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
??ZDApp_NwkDescListProcessing_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_NwkDescListProcessing_3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_NwkDescListProcessing_3
// 2085         {
// 2086           stackProfilePro = TRUE;
??ZDApp_NwkDescListProcessing_4:
        MOV     ?V0 + 3,#0x1
// 2087         }
// 2088 
// 2089         if ( stackProfile == 0 )
??ZDApp_NwkDescListProcessing_3:
        MOV     A,?V0 + 1
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
??ZDApp_NwkDescListProcessing_6:
        INC     ?V0 + 2
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 0
        JC      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDApp_NwkDescListProcessing_8
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_NwkDescListProcessing_8:
        JZ      ??ZDApp_NwkDescListProcessing_9
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDApp_NwkDescListProcessing_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDApp_NwkDescListProcessing_10:
        JNZ     ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_9:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   ??nwk_ExtPANIDValid?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDApp_NwkDescListProcessing_11
        ; Setup parameters for call to function sAddrExtCmp
        MOV     A,R6
        ADD     A,#0xb
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   ??sAddrExtCmp?relay
        MOV     A,R1
        JZ      ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_11:
        MOV     A,?V0 + 3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JNZ     ??ZDApp_NwkDescListProcessing_12
        MOVX    A,@DPTR
        JNZ     ??ZDApp_NwkDescListProcessing_13
        SJMP    ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_12:
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_13:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#_NIB + 17
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDApp_NwkDescListProcessing_6
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??ZDApp_NwkDescListProcessing_5
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
        LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
// 2090         {
// 2091           continue;
// 2092         }
// 2093       }
// 2094 
// 2095       break;
// 2096     }
// 2097 
// 2098     if (i < ResultCount)
// 2099     {
// 2100      selected = TRUE;
// 2101       break;
// 2102     }
// 2103 
// 2104     // break if selected or stack profile pro wasn't found
// 2105     if ( (selected == TRUE) || (stackProfilePro == FALSE) )
??ZDApp_NwkDescListProcessing_7:
        MOV     A,?V0 + 3
        JZ      ??ZDApp_NwkDescListProcessing_14
// 2106     {
// 2107       break;
// 2108     }
// 2109   }
        INC     ?V0 + 1
        MOV     A,?V0 + 1
        CLR     C
        SUBB    A,#0x2
        JNC     $+5
        LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
// 2110 
// 2111   if ( i == ResultCount )
??ZDApp_NwkDescListProcessing_14:
        MOV     A,?V0 + 0
        XRL     A,?V0 + 2
        JNZ     ??ZDApp_NwkDescListProcessing_5
// 2112   {
// 2113     return (NULL);   // couldn't find appropriate PAN to join !
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??ZDApp_NwkDescListProcessing_15
// 2114   }
// 2115   else
// 2116   {
// 2117     return (pNwkDesc);
??ZDApp_NwkDescListProcessing_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
// 2118   }
??ZDApp_NwkDescListProcessing_15:
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock113
// 2119 }// ZDApp_NwkDescListProcessing()
// 2120 
// 2121 /*********************************************************************
// 2122  * @fn          ZDO_NetworkFormationConfirmCB
// 2123  *
// 2124  * @brief       This function reports the results of the request to
// 2125  *              initialize a coordinator in a network.
// 2126  *
// 2127  * @param       Status - Result of NLME_NetworkFormationRequest()
// 2128  *
// 2129  * @return      none
// 2130  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2131 void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
ZDO_NetworkFormationConfirmCB:
        CFI Block cfiBlock114 Using cfiCommon0
        CFI Function ZDO_NetworkFormationConfirmCB
        CODE
// 2132 {
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 2133   nwkStatus = (byte)Status;
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2134 
// 2135   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_NetworkFormationConfirmCB_0
// 2136   {
// 2137     // LED on shows Coordinator started
// 2138     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine33 & 0xFFFF
// 2139 
// 2140     // LED off forgets HOLD_AUTO_START
// 2141     HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
// 2142 
// 2143 #if defined ( ZBIT )
// 2144     SIM_SetColor(0xd0ffd0);
// 2145 #endif
// 2146 
// 2147     if ( devState == DEV_HOLD )
??CrossCallReturnLabel_44:
        JNZ     ??ZDO_NetworkFormationConfirmCB_1
// 2148     {
// 2149       // Began with HOLD_AUTO_START
// 2150       devState = DEV_COORD_STARTING;
        MOV     A,#0x8
        MOVX    @DPTR,A
        SJMP    ??ZDO_NetworkFormationConfirmCB_1
// 2151     }
// 2152   }
// 2153 #if defined(BLINK_LEDS)
// 2154   else
// 2155   {
// 2156     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_NetworkFormationConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
// 2157   }
// 2158 #endif
// 2159 
// 2160   osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
??ZDO_NetworkFormationConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock114
// 2161 }
// 2162 
// 2163 /****************************************************************************
// 2164  * @fn          ZDApp_beaconIndProcessing
// 2165  *
// 2166  * @brief       This function processes the incoming beacon indication.
// 2167  *
// 2168  *              When another task (MT or App) is registered to process
// 2169  *              beacon indication themselves, this function will parse the
// 2170  *              beacon payload and pass the beacon descriptor to that task
// 2171  *              If no other tasks registered, this function will process
// 2172  *              the beacon payload and generate the network descriptor link
// 2173  *              list.
// 2174  *
// 2175  * @param
// 2176  *
// 2177  * @return      none
// 2178  *
// 2179  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2180 void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
ZDO_beaconNotifyIndCB:
        CFI Block cfiBlock115 Using cfiCommon0
        CFI Function ZDO_beaconNotifyIndCB
        CODE
// 2181 {
        FUNCALL ZDO_beaconNotifyIndCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 2182   // Pass the beacon Indication to another task if it registers the callback
// 2183   // Otherwise, process the beacon notification here.
// 2184   if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 6
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_9:
        JZ      ??ZDO_beaconNotifyIndCB_0
// 2185   {
// 2186     zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
        ; Setup parameters for indirect call
        LCALL   ??Subroutine49_0 & 0xFFFF
// 2187   }
??CrossCallReturnLabel_96:
        LCALL   ?CALL_IND
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2188   else
// 2189   {
// 2190     networkDesc_t *pNwkDesc;
// 2191     networkDesc_t *pLastNwkDesc;
// 2192     uint8 found = false;
// 2193 
// 2194     // Add the network to the Network Descriptor List
// 2195     pNwkDesc = NwkDescList;
??ZDO_beaconNotifyIndCB_0:
        MOV     DPTR,#NwkDescList
        LCALL   ??Subroutine47_0 & 0xFFFF
// 2196     pLastNwkDesc = NwkDescList;
??CrossCallReturnLabel_86:
        MOV     DPTR,#NwkDescList
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        SJMP    ??CrossCallReturnLabel_90
// 2197     while (pNwkDesc)
// 2198     {
// 2199       if ((pNwkDesc->panId == pBeacon->panID) &&
// 2200           (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
??ZDO_beaconNotifyIndCB_2:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_beaconNotifyIndCB_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_beaconNotifyIndCB_3:
        JNZ     ??ZDO_beaconNotifyIndCB_4
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??ZDO_beaconNotifyIndCB_5
// 2201       {
// 2202         found = true;
// 2203         break;
// 2204       }
// 2205       pLastNwkDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_4:
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
// 2206       pNwkDesc = pNwkDesc->nextDesc;
        LCALL   ?Subroutine21 & 0xFFFF
// 2207     }
??CrossCallReturnLabel_90:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDO_beaconNotifyIndCB_2
// 2208 
// 2209     // If no existing descriptor found, make a new one and add to the list
// 2210     if (found == false)
// 2211     {
// 2212       pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x16
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
// 2213       if ( !pNwkDesc )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2214       {
// 2215         // Memory alloc failed, discard this beacon
// 2216         return;
// 2217       }
// 2218 
// 2219       // Clear the network descriptor
// 2220       osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x16
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??osal_memset?relay
// 2221 
// 2222       // Initialize the descriptor
// 2223       pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
// 2224       pNwkDesc->chosenRouterDepth = 0xFF;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 2225 
// 2226       // Save new entry into the descriptor list
// 2227       if ( !NwkDescList )
        MOV     DPTR,#NwkDescList
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_10:
        JNZ     ??ZDO_beaconNotifyIndCB_6
// 2228       {
// 2229         NwkDescList = pNwkDesc;
        MOV     DPTR,#NwkDescList
        SJMP    ??CrossCallReturnLabel_104
// 2230       }
// 2231       else
// 2232       {
// 2233         pLastNwkDesc->nextDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_6:
        MOV     A,?V0 + 2
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 3
        LCALL   ??Subroutine51_0 & 0xFFFF
// 2234       }
// 2235     }
??CrossCallReturnLabel_104:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 2236 
// 2237     // Update the descriptor with the incoming beacon
// 2238     pNwkDesc->stackProfile   = pBeacon->stackProfile;
??ZDO_beaconNotifyIndCB_5:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_29:
        INC     DPTR
        MOVX    @DPTR,A
// 2239     pNwkDesc->version        = pBeacon->protocolVersion;
        MOV     A,?V0 + 0
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   ?Subroutine10 & 0xFFFF
// 2240     pNwkDesc->logicalChannel = pBeacon->logicalChannel;
??CrossCallReturnLabel_2:
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine34 & 0xFFFF
// 2241     pNwkDesc->panId          = pBeacon->panID;
??CrossCallReturnLabel_47:
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine54_0 & 0xFFFF
// 2242     pNwkDesc->updateId       = pBeacon->updateID;
??CrossCallReturnLabel_125:
        MOV     A,?V0 + 0
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_111:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_110:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2243 
// 2244     // Save the extended PAN ID from the beacon payload only if 1.1 version network
// 2245     if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDO_beaconNotifyIndCB_7
// 2246     {
// 2247       osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,?V0 + 0
        ADD     A,#0xd
        MOV     R4,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0xb
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??ZDO_beaconNotifyIndCB_8
// 2248     }
// 2249     else
// 2250     {
// 2251       osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
??ZDO_beaconNotifyIndCB_7:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     A,R6
        ADD     A,#0xb
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memset?relay
// 2252     }
// 2253 
// 2254     // check if this device is a better choice to join...
// 2255     // ...dont bother checking assocPermit flag is doing a rejoin
// 2256     if ( ( pBeacon->LQI > gMIN_TREE_LINK_COST ) &&
// 2257         ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
??ZDO_beaconNotifyIndCB_8:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#gMIN_TREE_LINK_COST
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDO_beaconNotifyIndCB_9
        MOV     DPTR,#_tmpRejoinState
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2258     {
// 2259       uint8 selected = FALSE;
??ZDO_beaconNotifyIndCB_9:
        MOV     R1,#0x0
// 2260       uint8 capacity = FALSE;
// 2261 
// 2262       if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
        MOV     DPTR,#_NIB + 96
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDO_beaconNotifyIndCB_10
// 2263       {
// 2264         if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
// 2265               (pBeacon->depth < MAX_NODE_DEPTH)) ||
// 2266             ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
// 2267              (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JNC     ??ZDO_beaconNotifyIndCB_11
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_112:
        CLR     C
        SUBB    A,#0x14
        JC      ??ZDO_beaconNotifyIndCB_12
        SJMP    ??ZDO_beaconNotifyIndCB_13
??ZDO_beaconNotifyIndCB_11:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_beaconNotifyIndCB_13
??ZDO_beaconNotifyIndCB_10:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_113:
        CLR     C
        SUBB    A,R0
        JNC     ??ZDO_beaconNotifyIndCB_13
// 2268         {
// 2269           selected = TRUE;
??ZDO_beaconNotifyIndCB_12:
        INC     R1
// 2270         }
// 2271       }
// 2272       else
// 2273       {
// 2274         if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
// 2275         {
// 2276           selected = TRUE;
// 2277         }
// 2278       }
// 2279 
// 2280       if ( ZSTACK_ROUTER_BUILD )
// 2281       {
// 2282         capacity = pBeacon->routerCapacity;
// 2283       }
// 2284       else if ( ZSTACK_END_DEVICE_BUILD )
// 2285       {
// 2286         capacity = pBeacon->deviceCapacity;
// 2287       }
// 2288 
// 2289       if ( (capacity) && (selected) )
??ZDO_beaconNotifyIndCB_13:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_beaconNotifyIndCB_14
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDO_beaconNotifyIndCB_14
// 2290       {
// 2291         // this is the new chosen router for joining...
// 2292         pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine10 & 0xFFFF
// 2293         pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
??CrossCallReturnLabel_3:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_18:
        MOVX    @DPTR,A
// 2294         pNwkDesc->chosenRouterDepth       = pBeacon->depth;
        LCALL   ?Subroutine32 & 0xFFFF
// 2295       }
??CrossCallReturnLabel_43:
        LCALL   ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_105:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_19:
        INC     DPTR
        MOVX    @DPTR,A
// 2296 
// 2297       if ( pBeacon->deviceCapacity )
??ZDO_beaconNotifyIndCB_14:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_beaconNotifyIndCB_15
// 2298         pNwkDesc->deviceCapacity = 1;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2299 
// 2300       if ( pBeacon->routerCapacity )
??ZDO_beaconNotifyIndCB_15:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_beaconNotifyIndCB_1
// 2301         pNwkDesc->routerCapacity = 1;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2302     }
// 2303   }
??ZDO_beaconNotifyIndCB_1:
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock115
// 2304 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker119 Using cfiCommon1
        CFI (cfiPicker119) NoFunction
        CFI (cfiPicker119) Picker
        MOV     A,?V0 + 0
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,?V0 + 1
        RET
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiPicker119

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond120 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker122 Using cfiCommon1
        CFI (cfiPicker122) NoFunction
        CFI (cfiPicker122) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_50:
        RET
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiPicker122

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond123 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_30
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_18
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_19
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker127 Using cfiCommon1
        CFI (cfiPicker127) NoFunction
        CFI (cfiPicker127) Picker
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond128 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker130 Using cfiCommon1
        CFI (cfiPicker130) NoFunction
        CFI (cfiPicker130) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_49:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiPicker130

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond131 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond132) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond132) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond132) CFA_SP SP+-5
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond135) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond135) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond135) CFA_SP SP+-5
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 3)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker143 Using cfiCommon1
        CFI (cfiPicker143) NoFunction
        CFI (cfiPicker143) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond144 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker146 Using cfiCommon1
        CFI (cfiPicker146) NoFunction
        CFI (cfiPicker146) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_48:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiPicker146

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond147 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_2
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_3
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker150 Using cfiCommon1
        CFI (cfiPicker150) NoFunction
        CFI (cfiPicker150) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        RET
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiPicker150
// 2305 
// 2306 /*********************************************************************
// 2307  * @fn          ZDO_StartRouterConfirmCB
// 2308  *
// 2309  * @brief       This function reports the results of the request to
// 2310  *              start functioning as a router in a network.
// 2311  *
// 2312  * @param       Status - Result of NLME_StartRouterRequest()
// 2313  *
// 2314  * @return      none
// 2315  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2316 void ZDO_StartRouterConfirmCB( ZStatus_t Status )
ZDO_StartRouterConfirmCB:
        CFI Block cfiBlock151 Using cfiCommon0
        CFI Function ZDO_StartRouterConfirmCB
        CODE
// 2317 {
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 2318   nwkStatus = (byte)Status;
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2319 
// 2320   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_StartRouterConfirmCB_0
// 2321   {
// 2322     // LED on shows Router started
// 2323     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine33 & 0xFFFF
// 2324     // LED off forgets HOLD_AUTO_START
// 2325     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 2326     if ( devState == DEV_HOLD )
??CrossCallReturnLabel_45:
        JNZ     ??ZDO_StartRouterConfirmCB_1
// 2327     {
// 2328       // Began with HOLD_AUTO_START
// 2329       devState = DEV_END_DEVICE;
        MOV     A,#0x6
        MOVX    @DPTR,A
        SJMP    ??ZDO_StartRouterConfirmCB_1
// 2330     }
// 2331   }
// 2332 #if defined(BLINK_LEDS)
// 2333   else
// 2334   {
// 2335     HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_StartRouterConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
// 2336   }
// 2337 #endif
// 2338 
// 2339   osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
??ZDO_StartRouterConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock151
// 2340 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond152 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker155 Using cfiCommon1
        CFI (cfiPicker155) NoFunction
        CFI (cfiPicker155) Picker
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiPicker155
// 2341 
// 2342 /*********************************************************************
// 2343  * @fn          ZDO_JoinConfirmCB
// 2344  *
// 2345  * @brief       This function allows the next hight layer to be notified
// 2346  *              of the results of its request to join itself or another
// 2347  *              device to a network.
// 2348  *
// 2349  * @param       Status - Result of NLME_JoinRequest()
// 2350  *
// 2351  * @return      none
// 2352  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2353 void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
ZDO_JoinConfirmCB:
        CFI Block cfiBlock156 Using cfiCommon0
        CFI Function ZDO_JoinConfirmCB
        CODE
// 2354 {
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        MOV     R6,A
// 2355   (void)PanId;  // remove if this parameter is used.
// 2356 
// 2357   nwkStatus = (byte)Status;
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2358 
// 2359   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_JoinConfirmCB_0
// 2360   {
// 2361     // LED on shows device joined
// 2362     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine33 & 0xFFFF
// 2363     // LED off forgets HOLD_AUTO_START
// 2364     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 2365     if ( (devState == DEV_HOLD) )
??CrossCallReturnLabel_46:
        JNZ     ??ZDO_JoinConfirmCB_1
// 2366     {
// 2367       // Began with HOLD_AUTO_START
// 2368       devState = DEV_NWK_JOINING;
        MOV     A,#0x3
        MOVX    @DPTR,A
        SJMP    ??ZDO_JoinConfirmCB_1
// 2369     }
// 2370 
// 2371     if ( !ZG_SECURE_ENABLED )
// 2372     {
// 2373       // Notify to save info into NV
// 2374       ZDApp_NVUpdate();
// 2375     }
// 2376   }
// 2377   else
// 2378   {
// 2379 #if defined(BLINK_LEDS)
// 2380     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_JoinConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
// 2381 #endif
// 2382   }
// 2383 
// 2384   // Pass the join confirm to higher layer if callback registered
// 2385   if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
??ZDO_JoinConfirmCB_1:
        MOV     DPTR,#zdoCBFunc + 8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_11:
        JZ      ??ZDO_JoinConfirmCB_2
// 2386   {
// 2387     zdoJoinCnf_t joinCnf;
// 2388 
// 2389     joinCnf.status = Status;
        MOV     A,R6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2390     joinCnf.deviceAddr = _NIB.nwkDevAddress;
        MOV     DPTR,#_NIB + 20
        LCALL   ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2391     joinCnf.parentAddr = _NIB.nwkCoordAddress;
        MOV     DPTR,#_NIB + 23
        LCALL   ??Subroutine46_0 & 0xFFFF
// 2392 
// 2393     zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
// 2394   }
??CrossCallReturnLabel_82:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     DPTR,#zdoCBFunc + 8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL   ?CALL_IND
// 2395 
// 2396   // Notify ZDApp
// 2397   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
??ZDO_JoinConfirmCB_2:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x2
        LCALL   ?Subroutine23 & 0xFFFF
        CFI EndBlock cfiBlock156
// 2398 
// 2399 }
??CrossCallReturnLabel_27:
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock157 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock157

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond158 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond159) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond159) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond159) CFA_SP SP+-5
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 3)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker162 Using cfiCommon1
        CFI (cfiPicker162) NoFunction
        CFI (cfiPicker162) Picker
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDApp_SendMsg?relay
        RET
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiPicker162

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond163 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_83
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker166 Using cfiCommon1
        CFI (cfiPicker166) NoFunction
        CFI (cfiPicker166) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiPicker166
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine46_0:
        CFI Block cfiCond167 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_79
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker174 Using cfiCommon1
        CFI (cfiPicker174) NoFunction
        CFI (cfiPicker174) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiPicker174

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond175 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker177 Using cfiCommon1
        CFI (cfiPicker177) NoFunction
        CFI (cfiPicker177) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZMacSetReq
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiPicker177
// 2400 
// 2401 /*********************************************************************
// 2402  * @fn          ZDO_AddrChangeIndicationCB
// 2403  *
// 2404  * @brief       This function notifies the application that this
// 2405  *              device's address has changed.  Could happen in
// 2406  *              a network with stochastic addressing (PRO).
// 2407  *
// 2408  * @param       newAddr - the new address
// 2409  *
// 2410  * @return      none
// 2411  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2412 void ZDO_AddrChangeIndicationCB( uint16 newAddr )
ZDO_AddrChangeIndicationCB:
        CFI Block cfiBlock178 Using cfiCommon0
        CFI Function ZDO_AddrChangeIndicationCB
        CODE
// 2413 {
        FUNCALL ZDO_AddrChangeIndicationCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 2414   ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
// 2415   epList_t *pItem = epList;
        MOV     DPTR,#epList
        LCALL   ??Subroutine47_0 & 0xFFFF
// 2416 
// 2417   // Notify to save info into NV
// 2418   ZDApp_NVUpdate();
// 2419 
// 2420   // Notify the applications
// 2421   osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??CrossCallReturnLabel_87:
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_57:
        SJMP    ??ZDO_AddrChangeIndicationCB_0
// 2422 
// 2423   while (pItem != NULL)
// 2424   {
// 2425     if (pItem->epDesc->endPoint != ZDO_EP)
??ZDO_AddrChangeIndicationCB_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_92:
        JZ      ??ZDO_AddrChangeIndicationCB_2
// 2426     {
// 2427       pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
// 2428       if (pZDOAddrChangeMsg != NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDO_AddrChangeIndicationCB_2
// 2429       {
// 2430         pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2a
        MOVX    @DPTR,A
// 2431         pZDOAddrChangeMsg->shortAddr = newAddr;
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
// 2432         osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
        ; Setup parameters for call to function osal_msg_send
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine18 & 0xFFFF
// 2433       }
// 2434     }
??CrossCallReturnLabel_103:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
// 2435     pItem = pItem->nextDesc;
??ZDO_AddrChangeIndicationCB_2:
        LCALL   ?Subroutine16 & 0xFFFF
// 2436   }
??CrossCallReturnLabel_85:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
??ZDO_AddrChangeIndicationCB_0:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDO_AddrChangeIndicationCB_1
// 2437 
// 2438   // Send out a device announce
// 2439   ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
// 2440 }
        LJMP    ??Subroutine43_0 & 0xFFFF
        CFI EndBlock cfiBlock178

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond179 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_88
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker182 Using cfiCommon1
        CFI (cfiPicker182) NoFunction
        CFI (cfiPicker182) Picker
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiPicker182
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine47_0:
        CFI Block cfiCond183 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_86
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+0
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker188 Using cfiCommon1
        CFI (cfiPicker188) NoFunction
        CFI (cfiPicker188) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiPicker188

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond189 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_92
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker191 Using cfiCommon1
        CFI (cfiPicker191) NoFunction
        CFI (cfiPicker191) Picker
        INC     DPTR
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiPicker191
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine48_0:
        CFI Block cfiCond192 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+0
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker195 Using cfiCommon1
        CFI (cfiPicker195) NoFunction
        CFI (cfiPicker195) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiPicker195
// 2441 
// 2442 /*********************************************************************
// 2443  * @fn          ZDO_JoinIndicationCB
// 2444  *
// 2445  * @brief       This function allows the next higher layer of a
// 2446  *              coordinator to be notified of a remote join request.
// 2447  *
// 2448  * @param       ShortAddress - 16-bit address
// 2449  * @param       ExtendedAddress - IEEE (64-bit) address
// 2450  * @param       CapabilityFlags - Association Capability Flags
// 2451  * @param       type - of joining -
// 2452  *                          NWK_ASSOC_JOIN
// 2453  *                          NWK_ASSOC_REJOIN_UNSECURE
// 2454  *                          NWK_ASSOC_REJOIN_SECURE
// 2455  *
// 2456  * @return      ZStatus_t
// 2457  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2458 ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
ZDO_JoinIndicationCB:
        CODE
// 2459                                 uint8 CapabilityFlags, uint8 type)
// 2460 {
        ; Saved register size: 0
        ; Auto size: 0
// 2461   (void)ShortAddress;
// 2462   (void)ExtendedAddress;
// 2463 #if ZDO_NV_SAVE_RFDs
// 2464   (void)CapabilityFlags;
// 2465 
// 2466 #else  // if !ZDO_NV_SAVE_RFDs
// 2467   if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
// 2468 #endif
// 2469   {
// 2470     ZDApp_NVUpdate();  // Notify to save info into NV.
// 2471   }
// 2472 
// 2473   if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
// 2474   {
// 2475     if (type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE)
// 2476     {
// 2477       osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
// 2478     }
// 2479   }
// 2480 
// 2481   return ZSuccess;
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock196 Using cfiCommon0
        CFI NoFunction
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock196
// 2482 }
// 2483 
// 2484 /*********************************************************************
// 2485  * @fn          ZDO_ConcentratorIndicationCB
// 2486  *
// 2487  * @brief       This function allows the next higher layer of a
// 2488  *              device to be notified of existence of the concentrator.
// 2489  *
// 2490  * @param       nwkAddr - 16-bit NWK address of the concentrator
// 2491  * @param       extAddr - pointer to extended Address
// 2492  *                        NULL if not available
// 2493  * @param       pktCost - PktCost from RREQ
// 2494  *
// 2495  * @return      void
// 2496  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2497 void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
ZDO_ConcentratorIndicationCB:
        CFI Block cfiBlock197 Using cfiCommon0
        CFI Function ZDO_ConcentratorIndicationCB
        CODE
// 2498 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
// 2499   zdoConcentratorInd_t conInd;
// 2500 
// 2501   conInd.nwkAddr = nwkAddr;
        LCALL   ?Subroutine11 & 0xFFFF
// 2502   conInd.extAddr = extAddr;
??CrossCallReturnLabel_128:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 2503   conInd.pktCost = pktCost;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 2504 
// 2505   if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 2
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_12:
        JZ      ??ZDO_ConcentratorIndicationCB_0
// 2506   {
// 2507     zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#zdoCBFunc + 3
        LCALL   ??Subroutine49_0 & 0xFFFF
// 2508   }
??CrossCallReturnLabel_97:
        LCALL   ?CALL_IND
// 2509 }
??ZDO_ConcentratorIndicationCB_0:
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock197
// 2510 
// 2511 /*********************************************************************
// 2512  * @fn          ZDO_LeaveCnf
// 2513  *
// 2514  * @brief       This function allows the next higher layer to be
// 2515  *              notified of the results of its request for this or
// 2516  *              a child device to leave the network.
// 2517  *
// 2518  * @param       cnf - NLME_LeaveCnf_t
// 2519  *
// 2520  * @return      none
// 2521  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2522 void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
ZDO_LeaveCnf:
        CFI Block cfiBlock198 Using cfiCommon0
        CFI Function ZDO_LeaveCnf
        CODE
// 2523 {
        FUNCALL ZDO_LeaveCnf, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2524   // Check for this device
// 2525   if ( osal_ExtAddrEqual( cnf->extAddr,
// 2526                           NLME_GetExtAddr() ) == TRUE )
        ; Setup parameters for call to function sAddrExtCmp
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??sAddrExtCmp?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveCnf_0
// 2527   {
// 2528     // Pass the leave confirm to higher layer if callback registered
// 2529     if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
// 2530          ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
        MOV     DPTR,#zdoCBFunc + 10
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ      ??ZDO_LeaveCnf_1
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_98:
        LCALL   ?CALL_IND
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??CrossCallReturnLabel_16
// 2531     {
// 2532       // Prepare to leave with reset
// 2533       ZDApp_LeaveReset( cnf->rejoin );
??ZDO_LeaveCnf_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        LCALL   ?Subroutine29 & 0xFFFF
// 2534     }
// 2535   }
??CrossCallReturnLabel_119:
        MOV     R1,A
        LCALL   ??ZDApp_LeaveReset?relay
        SJMP    ??CrossCallReturnLabel_16
// 2536   else if ( ZSTACK_ROUTER_BUILD )
// 2537   {
// 2538     // Remove device address(optionally descendents) from data
// 2539     ZDApp_LeaveUpdate( cnf->dstAddr,
// 2540                        cnf->extAddr,
// 2541                        cnf->removeChildren );
??ZDO_LeaveCnf_0:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine13 & 0xFFFF
// 2542   }
// 2543 }
??CrossCallReturnLabel_16:
        LJMP    ??Subroutine45_0 & 0xFFFF
        CFI EndBlock cfiBlock198
// 2544 
// 2545 /*********************************************************************
// 2546  * @fn          ZDO_LeaveInd
// 2547  *
// 2548  * @brief       This function allows the next higher layer of a
// 2549  *              device to be notified of a remote leave request or
// 2550  *              indication.
// 2551  *
// 2552  * @param       ind - NLME_LeaveInd_t
// 2553  *
// 2554  * @return      none
// 2555  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2556 void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
ZDO_LeaveInd:
        CFI Block cfiBlock199 Using cfiCommon0
        CFI Function ZDO_LeaveInd
        CODE
// 2557 {
        FUNCALL ZDO_LeaveInd, NLME_LeaveRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2558   uint8 leave;
// 2559 
// 2560 
// 2561   // Parent is requesting the leave - NWK layer filters out illegal
// 2562   // requests
// 2563   if ( ind->request == TRUE )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveInd_0
// 2564   {
// 2565     // Notify network of leave
// 2566     if ( ZSTACK_ROUTER_BUILD )
// 2567     {
// 2568       NLME_LeaveRsp_t rsp;
// 2569       rsp.rejoin         = ind->rejoin;
        MOV     A,R6
        ADD     A,#0xc
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2570       rsp.removeChildren = ind->removeChildren;
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_120:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2571       NLME_LeaveRsp( &rsp );
        ; Setup parameters for call to function NLME_LeaveRsp
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??NLME_LeaveRsp?relay
// 2572     }
// 2573 
// 2574     // Prepare to leave with reset
// 2575     ZDApp_LeaveReset( ind->rejoin );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
??ZDO_LeaveInd_1:
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDApp_LeaveReset?relay
        SJMP    ??CrossCallReturnLabel_17
// 2576   }
// 2577   else
// 2578   {
// 2579     leave = FALSE;
// 2580 
// 2581     // Check if this device needs to leave as a child or descendent
// 2582     if ( ind->srcAddr == NLME_GetCoordShortAddr() )
??ZDO_LeaveInd_0:
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_LeaveInd_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_LeaveInd_2:
        JNZ     ??ZDO_LeaveInd_3
// 2583     {
// 2584       if ( ( ind->removeChildren == TRUE               ) ||
// 2585            ( ZDO_Config_Node_Descriptor.LogicalType ==
// 2586              NODETYPE_DEVICE                           )    )
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_121:
        XRL     A,#0x1
        JZ      ??ZDO_LeaveInd_4
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_24:
        JNZ     ??ZDO_LeaveInd_3
// 2587       {
// 2588         leave = TRUE;
// 2589       }
// 2590     }
// 2591     else if ( ind->removeChildren == TRUE )
// 2592     {
// 2593       // Check NWK address allocation algorithm
// 2594       //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
// 2595     }
// 2596 
// 2597     if ( leave == TRUE )
// 2598     {
// 2599       // Prepare to leave with reset
// 2600       ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_4:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     A,R6
        ADD     A,#0xc
        LCALL   ??Subroutine50_0 & 0xFFFF
// 2601     }
??CrossCallReturnLabel_106:
        SJMP    ??ZDO_LeaveInd_1
// 2602     else
// 2603     {
// 2604       // Remove device address(optionally descendents) from data
// 2605       ZDApp_LeaveUpdate( ind->srcAddr,
// 2606                          ind->extAddr,
// 2607                          ind->removeChildren );
??ZDO_LeaveInd_3:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV     A,R6
        ADD     A,#0xb
        LCALL   ??Subroutine50_0 & 0xFFFF
// 2608     }
// 2609   }
??CrossCallReturnLabel_107:
        LCALL   ?Subroutine13 & 0xFFFF
// 2610 
// 2611   // Pass the leave indication to higher layer if callback registered.
// 2612   if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
??CrossCallReturnLabel_17:
        MOV     DPTR,#zdoCBFunc + 12
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_14:
        JZ      ??ZDO_LeaveInd_5
// 2613   {
// 2614     (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??Subroutine49_0 & 0xFFFF
// 2615   }
??CrossCallReturnLabel_99:
        LCALL   ?CALL_IND
// 2616 }
??ZDO_LeaveInd_5:
        LJMP    ?Subroutine7 & 0xFFFF
        CFI EndBlock cfiBlock199

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond200 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_101
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker203 Using cfiCommon1
        CFI (cfiPicker203) NoFunction
        CFI (cfiPicker203) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiPicker203
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine49_0:
        CFI Block cfiCond204 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_94
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond205) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond205) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond205) CFA_SP SP+-5
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 3)
        CFI Block cfiCond206 Using cfiCommon0
        CFI (cfiCond206) NoFunction
        CFI (cfiCond206) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond206) CFA_SP SP+0
        CFI (cfiCond206) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_97
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond208) CFA_SP SP+0
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond209 Using cfiCommon0
        CFI (cfiCond209) NoFunction
        CFI (cfiCond209) Conditional ??CrossCallReturnLabel_99
        CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond209) CFA_SP SP+0
        CFI (cfiCond209) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond210 Using cfiCommon0
        CFI (cfiCond210) NoFunction
        CFI (cfiCond210) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond210) CFA_SP SP+0
        CFI (cfiCond210) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond211 Using cfiCommon0
        CFI (cfiCond211) NoFunction
        CFI (cfiCond211) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond211) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond211) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond211) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond211) CFA_SP SP+0
        CFI (cfiCond211) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond212 Using cfiCommon0
        CFI (cfiCond212) NoFunction
        CFI (cfiCond212) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond212) CFA_SP SP+0
        CFI (cfiCond212) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond213) CFA_SP SP+0
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker214 Using cfiCommon1
        CFI (cfiPicker214) NoFunction
        CFI (cfiPicker214) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiCond209
        CFI EndBlock cfiCond210
        CFI EndBlock cfiCond211
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiPicker214

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond215 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond216 Using cfiCommon0
        CFI (cfiCond216) NoFunction
        CFI (cfiCond216) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond216) CFA_SP SP+0
        CFI (cfiCond216) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker217 Using cfiCommon1
        CFI (cfiPicker217) NoFunction
        CFI (cfiPicker217) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ZDApp_LeaveUpdate?relay
        RET
        CFI EndBlock cfiCond215
        CFI EndBlock cfiCond216
        CFI EndBlock cfiPicker217
// 2617 
// 2618 /*********************************************************************
// 2619  * @fn          ZDO_SyncIndicationCB
// 2620  *
// 2621  * @brief       This function allows the next higher layer of a
// 2622  *              coordinator to be notified of a loss of synchronization
// 2623  *                          with the parent/child device.
// 2624  *
// 2625  * @param       type: 0 - child; 1 - parent
// 2626  *
// 2627  *
// 2628  * @return      none
// 2629  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2630 void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
ZDO_SyncIndicationCB:
        CFI Block cfiBlock218 Using cfiCommon0
        CFI Function ZDO_SyncIndicationCB
        CODE
// 2631 {
        FUNCALL ZDO_SyncIndicationCB, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SyncIndicationCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 2632   (void)shortAddr;  // Remove this line if this parameter is used.
// 2633 
// 2634   if ( ZSTACK_END_DEVICE_BUILD
// 2635     || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
        MOV     DPTR,#_NIB + 14
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JC      ??CrossCallReturnLabel_28
// 2636   {
// 2637     if ( type == 1 )
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??CrossCallReturnLabel_28
// 2638     {
// 2639       // We lost contact with our parent.  Clear the neighbor Table.
// 2640       nwkNeighborInitTable();
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   ??nwkNeighborInitTable?relay
// 2641 
// 2642       // Start the rejoin process.
// 2643       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x3
        LCALL   ?Subroutine23 & 0xFFFF
// 2644     }
// 2645   }
// 2646 }
??CrossCallReturnLabel_28:
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock218
// 2647 
// 2648 /*********************************************************************
// 2649  * @fn          ZDO_ManytoOneFailureIndicationCB
// 2650  *
// 2651  * @brief       This function allows the next higher layer of a
// 2652  *              concentrator to be notified of a many-to-one route
// 2653  *              failure.
// 2654  *
// 2655  * @param       none
// 2656  *
// 2657  *
// 2658  * @return      none
// 2659  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2660 void ZDO_ManytoOneFailureIndicationCB()
ZDO_ManytoOneFailureIndicationCB:
        CFI Block cfiBlock219 Using cfiCommon0
        CFI Function ZDO_ManytoOneFailureIndicationCB
        CODE
// 2661 {
        FUNCALL ZDO_ManytoOneFailureIndicationCB, RTG_MTORouteReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2662   // By default, the concentrator automatically redo many-to-one route
// 2663   // discovery to update all many-to-one routes in the network
// 2664   // If you want anything processing other than the default,
// 2665   // please replace the following code.
// 2666 
// 2667   RTG_MTORouteReq();
        ; Setup parameters for call to function RTG_MTORouteReq
        LCALL   ??RTG_MTORouteReq?relay
// 2668 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock219
// 2669 
// 2670 /*********************************************************************
// 2671  * @fn          ZDO_PollConfirmCB
// 2672  *
// 2673  * @brief       This function allows the next higher layer to be
// 2674  *              notified of a Poll Confirm.
// 2675  *
// 2676  * @param       none
// 2677  *
// 2678  * @return      none
// 2679  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2680 void ZDO_PollConfirmCB( uint8 status )
ZDO_PollConfirmCB:
        CFI Block cfiBlock220 Using cfiCommon0
        CFI Function ZDO_PollConfirmCB
        CODE
// 2681 {
        ; Saved register size: 0
        ; Auto size: 0
// 2682   (void)status;  // Remove this line if this parameter is used.
// 2683   return;
        LJMP    ?BRET
        CFI EndBlock cfiBlock220
// 2684 }
// 2685 
// 2686 /******************************************************************************
// 2687  * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
// 2688  *
// 2689  * @brief       Stub routine implemented by NHLE. NHLE should call
// 2690  *              <AddrMgrWriteNV> when appropriate.
// 2691  *
// 2692  * @param       none
// 2693  *
// 2694  * @return      none
// 2695  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2696 void ZDApp_NwkWriteNVRequest( void )
AddrMgrWriteNVRequest:
        CFI Block cfiBlock221 Using cfiCommon0
        CFI Function AddrMgrWriteNVRequest
        CODE
// 2697 {
        ; Saved register size: 0
        ; Auto size: 0
// 2698 #if defined ( NV_RESTORE )
// 2699   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
// 2700   {
// 2701     // Trigger to save info into NV
// 2702     ZDApp_NVUpdate();
// 2703   }
// 2704 #endif
// 2705 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock221
// 2706 
// 2707 /*********************************************************************
// 2708  * Call Back Functions from Security  - API
// 2709  */
// 2710 
// 2711  /*********************************************************************
// 2712  * @fn          ZDO_UpdateDeviceIndication
// 2713  *
// 2714  * @brief       This function notifies the "Trust Center" of a
// 2715  *              network when a device joins or leaves the network.
// 2716  *
// 2717  * @param       extAddr - pointer to 64 bit address of new device
// 2718  * @param       status  - 0 if a new device joined securely
// 2719  *                      - 1 if a new device joined un-securely
// 2720  *                      - 2 if a device left the network
// 2721  *
// 2722  * @return      true if newly joined device should be allowed to
// 2723  *                                              remain on network
// 2724  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2725 ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
ZDO_UpdateDeviceIndication:
        CFI Block cfiBlock222 Using cfiCommon0
        CFI Function ZDO_UpdateDeviceIndication
        CODE
// 2726 {
        ; Saved register size: 0
        ; Auto size: 0
// 2727   // can implement a network access policy based on the
// 2728   // IEEE address of newly joining devices...
// 2729   (void)extAddr;
// 2730   (void)status;
// 2731 
// 2732   return ZSuccess;
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock222
// 2733 }
// 2734 
// 2735 /*********************************************************************
// 2736  * @fn          ZDApp_InMsgCB
// 2737  *
// 2738  * @brief       This function is called to pass up any message that is
// 2739  *              not yet supported.  This allows for the developer to
// 2740  *              support features themselves..
// 2741  *
// 2742  * @return      none
// 2743  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2744 void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
ZDApp_InMsgCB:
        CFI Block cfiBlock223 Using cfiCommon0
        CFI Function ZDApp_InMsgCB
        CODE
// 2745 {
        FUNCALL ZDApp_InMsgCB, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2746   if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
        MOV     A,R6
        ADD     A,#0xc
        LCALL   ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_108:
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x80
        JNZ     ??ZDApp_InMsgCB_0
// 2747   {
// 2748     // Handle the response message
// 2749   }
// 2750   else
// 2751   {
// 2752     // Handle the request message by sending a generic "not supported".
// 2753     // Device Announce doesn't have a response.
// 2754     if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_122:
        JNZ     ??ZDApp_InMsgCB_0
        MOV     A,R6
        ADD     A,#0xc
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_116:
        XRL     A,#0x13
        JNZ     ??ZDApp_InMsgCB_1
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_InMsgCB_1:
        JZ      ??ZDApp_InMsgCB_0
// 2755     {
// 2756       ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
// 2757                       (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_GenericRsp
        LCALL   ?Subroutine28 & 0xFFFF
// 2758     }
// 2759   }
??CrossCallReturnLabel_36:
        ORL     A,#0x80
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        ADD     A,#0xe
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_117:
        MOV     R5,A
        MOV     R4,#-0x7c
        MOV     A,R6
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0xf
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_118:
        MOV     R1,A
        LCALL   ??ZDP_GenericRsp?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 2760 }
??ZDApp_InMsgCB_0:
        LJMP    ??Subroutine45_0 & 0xFFFF
        CFI EndBlock cfiBlock223

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond224 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_109
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond225 Using cfiCommon0
        CFI (cfiCond225) NoFunction
        CFI (cfiCond225) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond225) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond225) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond225) CFA_SP SP+-1
        CFI (cfiCond225) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker226 Using cfiCommon1
        CFI (cfiPicker226) NoFunction
        CFI (cfiPicker226) Picker
        MOV     A,R6
        ADD     A,#0x13
        CFI EndBlock cfiCond224
        CFI EndBlock cfiCond225
        CFI EndBlock cfiPicker226
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine50_0:
        CFI Block cfiCond227 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_106
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond228) CFA_SP SP+0
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond229 Using cfiCommon0
        CFI (cfiCond229) NoFunction
        CFI (cfiCond229) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond229) CFA_SP SP+0
        CFI (cfiCond229) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond231 Using cfiCommon0
        CFI (cfiCond231) NoFunction
        CFI (cfiCond231) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond231) CFA_SP SP+-1
        CFI (cfiCond231) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker232 Using cfiCommon1
        CFI (cfiPicker232) NoFunction
        CFI (cfiPicker232) Picker
        MOV     DPL,A
        MOV     A,R7
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiCond231
        CFI EndBlock cfiPicker232
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine51_0:
        CFI Block cfiCond233 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_104
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond234 Using cfiCommon0
        CFI (cfiCond234) NoFunction
        CFI (cfiCond234) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond234) CFA_SP SP+0
        CFI (cfiCond234) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond235 Using cfiCommon0
        CFI (cfiCond235) NoFunction
        CFI (cfiCond235) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond235) CFA_SP SP+0
        CFI (cfiCond235) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond236) CFA_SP SP+0
        CFI (cfiCond236) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+-1
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker240 Using cfiCommon1
        CFI (cfiPicker240) NoFunction
        CFI (cfiPicker240) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond233
        CFI EndBlock cfiCond234
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiPicker240

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond241 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_119
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_120
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond243 Using cfiCommon0
        CFI (cfiCond243) NoFunction
        CFI (cfiCond243) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond243) CFA_SP SP+0
        CFI (cfiCond243) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond244 Using cfiCommon0
        CFI (cfiCond244) NoFunction
        CFI (cfiCond244) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond244) CFA_SP SP+0
        CFI (cfiCond244) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker245 Using cfiCommon1
        CFI (cfiPicker245) NoFunction
        CFI (cfiPicker245) Picker
        MOV     A,R6
        ADD     A,#0xb
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiCond243
        CFI EndBlock cfiCond244
        CFI EndBlock cfiPicker245
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine52_0:
        CFI Block cfiCond246 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_114
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond247 Using cfiCommon0
        CFI (cfiCond247) NoFunction
        CFI (cfiCond247) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond247) CFA_SP SP+0
        CFI (cfiCond247) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond248 Using cfiCommon0
        CFI (cfiCond248) NoFunction
        CFI (cfiCond248) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond248) CFA_SP SP+0
        CFI (cfiCond248) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond249 Using cfiCommon0
        CFI (cfiCond249) NoFunction
        CFI (cfiCond249) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond249) CFA_SP SP+0
        CFI (cfiCond249) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond250 Using cfiCommon0
        CFI (cfiCond250) NoFunction
        CFI (cfiCond250) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond250) CFA_SP SP+0
        CFI (cfiCond250) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond251 Using cfiCommon0
        CFI (cfiCond251) NoFunction
        CFI (cfiCond251) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond251) CFA_SP SP+0
        CFI (cfiCond251) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond252 Using cfiCommon0
        CFI (cfiCond252) NoFunction
        CFI (cfiCond252) Conditional ??CrossCallReturnLabel_120
        CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond252) CFA_SP SP+0
        CFI (cfiCond252) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond253 Using cfiCommon0
        CFI (cfiCond253) NoFunction
        CFI (cfiCond253) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond253) CFA_SP SP+0
        CFI (cfiCond253) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond254 Using cfiCommon0
        CFI (cfiCond254) NoFunction
        CFI (cfiCond254) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond254) CFA_SP SP+0
        CFI (cfiCond254) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker255 Using cfiCommon1
        CFI (cfiPicker255) NoFunction
        CFI (cfiPicker255) Picker
        MOV     DPL,A
        MOV     A,R7
        CFI EndBlock cfiCond246
        CFI EndBlock cfiCond247
        CFI EndBlock cfiCond248
        CFI EndBlock cfiCond249
        CFI EndBlock cfiCond250
        CFI EndBlock cfiCond251
        CFI EndBlock cfiCond252
        CFI EndBlock cfiCond253
        CFI EndBlock cfiCond254
        CFI EndBlock cfiPicker255
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine53_0:
        CFI Block cfiCond256 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_111
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond257 Using cfiCommon0
        CFI (cfiCond257) NoFunction
        CFI (cfiCond257) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond257) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond257) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond257) CFA_SP SP+0
        CFI (cfiCond257) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond258 Using cfiCommon0
        CFI (cfiCond258) NoFunction
        CFI (cfiCond258) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond258) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond258) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond258) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond258) CFA_SP SP+0
        CFI (cfiCond258) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond259 Using cfiCommon0
        CFI (cfiCond259) NoFunction
        CFI (cfiCond259) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond259) CFA_SP SP+0
        CFI (cfiCond259) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond260 Using cfiCommon0
        CFI (cfiCond260) NoFunction
        CFI (cfiCond260) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond260) CFA_SP SP+0
        CFI (cfiCond260) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond261 Using cfiCommon0
        CFI (cfiCond261) NoFunction
        CFI (cfiCond261) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond261) CFA_SP SP+0
        CFI (cfiCond261) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond262 Using cfiCommon0
        CFI (cfiCond262) NoFunction
        CFI (cfiCond262) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond262) CFA_SP SP+0
        CFI (cfiCond262) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond263 Using cfiCommon0
        CFI (cfiCond263) NoFunction
        CFI (cfiCond263) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond263) CFA_SP SP+0
        CFI (cfiCond263) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond264 Using cfiCommon0
        CFI (cfiCond264) NoFunction
        CFI (cfiCond264) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond264) CFA_SP SP+0
        CFI (cfiCond264) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond265 Using cfiCommon0
        CFI (cfiCond265) NoFunction
        CFI (cfiCond265) Conditional ??CrossCallReturnLabel_120
        CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond265) CFA_SP SP+0
        CFI (cfiCond265) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond266 Using cfiCommon0
        CFI (cfiCond266) NoFunction
        CFI (cfiCond266) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond266) CFA_SP SP+0
        CFI (cfiCond266) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond267 Using cfiCommon0
        CFI (cfiCond267) NoFunction
        CFI (cfiCond267) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond267) CFA_SP SP+0
        CFI (cfiCond267) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker268 Using cfiCommon1
        CFI (cfiPicker268) NoFunction
        CFI (cfiPicker268) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond256
        CFI EndBlock cfiCond257
        CFI EndBlock cfiCond258
        CFI EndBlock cfiCond259
        CFI EndBlock cfiCond260
        CFI EndBlock cfiCond261
        CFI EndBlock cfiCond262
        CFI EndBlock cfiCond263
        CFI EndBlock cfiCond264
        CFI EndBlock cfiCond265
        CFI EndBlock cfiCond266
        CFI EndBlock cfiCond267
        CFI EndBlock cfiPicker268

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond269 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond270 Using cfiCommon0
        CFI (cfiCond270) NoFunction
        CFI (cfiCond270) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond270) CFA_SP SP+0
        CFI (cfiCond270) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker271 Using cfiCommon1
        CFI (cfiPicker271) NoFunction
        CFI (cfiPicker271) Picker
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond269
        CFI EndBlock cfiCond270
        CFI EndBlock cfiPicker271
// 2761 
// 2762 
// 2763 /*********************************************************************
// 2764  * @fn      ZDApp_ChangeMatchDescRespPermission()
// 2765  *
// 2766  * @brief   Changes the Match Descriptor Response permission.
// 2767  *
// 2768  * @param   endpoint - endpoint to allow responses
// 2769  * @param   action - true to allow responses, false to not
// 2770  *
// 2771  * @return  none
// 2772  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2773 void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
ZDApp_ChangeMatchDescRespPermission:
        CFI Block cfiBlock272 Using cfiCommon0
        CFI Function ZDApp_ChangeMatchDescRespPermission
        CODE
// 2774 {
        FUNCALL ZDApp_ChangeMatchDescRespPermission, afSetMatch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 2775   // Store the action
// 2776   afSetMatch( endpoint, action );
        ; Setup parameters for call to function afSetMatch
        LCALL   ??afSetMatch?relay
// 2777 }
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock272
// 2778 
// 2779 /*********************************************************************
// 2780  * @fn      ZDApp_NetworkInit()
// 2781  *
// 2782  * @brief   Used to start the network joining process
// 2783  *
// 2784  * @param   delay - mSec delay to wait before starting
// 2785  *
// 2786  * @return  none
// 2787  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2788 void ZDApp_NetworkInit( uint16 delay )
ZDApp_NetworkInit:
        CFI Block cfiBlock273 Using cfiCommon0
        CFI Function ZDApp_NetworkInit
        CODE
// 2789 {
        FUNCALL ZDApp_NetworkInit, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkInit, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2790   if ( delay )
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDApp_NetworkInit_0
// 2791   {
// 2792     // Wait awhile before starting the device
// 2793     osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x1
        LCALL   ?Subroutine22 & 0xFFFF
// 2794   }
??CrossCallReturnLabel_77:
        SJMP    ??CrossCallReturnLabel_60
// 2795   else
// 2796   {
// 2797     osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
??ZDApp_NetworkInit_0:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        LCALL   ??Subroutine37_0 & 0xFFFF
// 2798   }
// 2799 }
??CrossCallReturnLabel_60:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock273
// 2800 
// 2801 /*********************************************************************
// 2802  * @fn      ZDApp_NwkStateUpdateCB()
// 2803  *
// 2804  * @brief   This function notifies that this device's network
// 2805  *          state info has been changed.
// 2806  *
// 2807  * @param   none
// 2808  *
// 2809  * @return  none
// 2810  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2811 void ZDApp_NwkStateUpdateCB( void )
ZDApp_NwkStateUpdateCB:
        CFI Block cfiBlock274 Using cfiCommon0
        CFI Function ZDApp_NwkStateUpdateCB
        CODE
// 2812 {
        FUNCALL ZDApp_NwkStateUpdateCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2813   // Notify to save info into NV
// 2814   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x0
        MOV     R3,#0x2
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_get_timeoutEx?relay
// 2815   {
// 2816     // Trigger to save info into NV
// 2817     ZDApp_NVUpdate();
// 2818   }
// 2819 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock274
// 2820 
// 2821 /*********************************************************************
// 2822  * @fn      ZDApp_NodeProfileSync()
// 2823  *
// 2824  * @brief   Sync node with stack profile.
// 2825  *
// 2826  * @param   stackProfile - stack profile of the network to join
// 2827  *
// 2828  * @return  none
// 2829  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2830 void ZDApp_NodeProfileSync( uint8 stackProfile )
ZDApp_NodeProfileSync:
        CFI Block cfiBlock275 Using cfiCommon0
        CFI Function ZDApp_NodeProfileSync
        CODE
// 2831 {
        FUNCALL ZDApp_NodeProfileSync, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 2832   if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_NodeProfileSync_0
// 2833   {
// 2834     if ( stackProfile != zgStackProfile )
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??ZDApp_NodeProfileSync_0
// 2835     {
// 2836       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,#0x2
        MOVX    @DPTR,A
// 2837       ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOV     A,#0xc
        MOVX    @DPTR,A
// 2838       NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     R1,A
        LCALL   ??NLME_SetBroadcastFilter?relay
// 2839     }
// 2840   }
// 2841 }
??ZDApp_NodeProfileSync_0:
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock275
// 2842 
// 2843 /*********************************************************************
// 2844  * @fn      ZDApp_StartJoiningCycle()
// 2845  *
// 2846  * @brief   Starts the joining cycle of a device.  This will only
// 2847  *          continue an already started (or stopped) joining cycle.
// 2848  *
// 2849  * @param   none
// 2850  *
// 2851  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 2852  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2853 uint8 ZDApp_StartJoiningCycle( void )
ZDApp_StartJoiningCycle:
        CFI Block cfiBlock276 Using cfiCommon0
        CFI Function ZDApp_StartJoiningCycle
        CODE
// 2854 {
        FUNCALL ZDApp_StartJoiningCycle, ZDApp_NetworkInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2855   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StartJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StartJoiningCycle_1
// 2856   {
// 2857     continueJoining = TRUE;
??ZDApp_StartJoiningCycle_0:
        MOV     DPTR,#continueJoining
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2858     ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDApp_NetworkInit?relay
// 2859 
// 2860     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StartJoiningCycle_2
// 2861   }
// 2862   else
// 2863     return ( FALSE );
??ZDApp_StartJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StartJoiningCycle_2:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock276
// 2864 }
// 2865 
// 2866 /*********************************************************************
// 2867  * @fn      ZDApp_StopJoiningCycle()
// 2868  *
// 2869  * @brief   Stops the joining or rejoining process of a device.
// 2870  *
// 2871  * @param   none
// 2872  *
// 2873  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 2874  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2875 uint8 ZDApp_StopJoiningCycle( void )
ZDApp_StopJoiningCycle:
        CFI Block cfiBlock277 Using cfiCommon0
        CFI Function ZDApp_StopJoiningCycle
        CODE
// 2876 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2877   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StopJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StopJoiningCycle_1
// 2878   {
// 2879     continueJoining = FALSE;
??ZDApp_StopJoiningCycle_0:
        MOV     DPTR,#continueJoining
        CLR     A
        MOVX    @DPTR,A
// 2880     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StopJoiningCycle_2
// 2881   }
// 2882   else
// 2883     return ( FALSE );
??ZDApp_StopJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StopJoiningCycle_2:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock277
// 2884 }
// 2885 
// 2886 /*********************************************************************
// 2887  * @fn      ZDApp_AnnounceNewAddress()
// 2888  *
// 2889  * @brief   Send Device Announce and hold all transmissions for
// 2890  *          new address timeout.
// 2891  *
// 2892  * @param   none
// 2893  *
// 2894  * @return  none
// 2895  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2896 void ZDApp_AnnounceNewAddress( void )
ZDApp_AnnounceNewAddress:
        CFI Block cfiBlock278 Using cfiCommon0
        CFI Function ZDApp_AnnounceNewAddress
        CODE
// 2897 {
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2898 #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
// 2899   // Turn off data request hold
// 2900   APSME_HoldDataRequests( 0 );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??APSME_HoldDataRequests?relay
// 2901 #endif
// 2902 
// 2903   ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
// 2904                      ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R4,A
        MOV     R5,?V0 + 1
        LCALL   ??ZDP_DeviceAnnce?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 2905 
// 2906 #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
// 2907   // Setup the timeout
// 2908   APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??APSME_HoldDataRequests?relay
// 2909 #endif
// 2910 }
        LJMP    ??Subroutine45_0 & 0xFFFF
        CFI EndBlock cfiBlock278
// 2911 
// 2912 /*********************************************************************
// 2913  * @fn          ZDApp_NVUpdate
// 2914  *
// 2915  * @brief       Set the NV Update Timer.
// 2916  *
// 2917  * @param       none
// 2918  *
// 2919  * @return      none
// 2920  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2921 void ZDApp_NVUpdate( void )
ZDApp_NVUpdate:
        CFI Block cfiBlock279 Using cfiCommon0
        CFI Function ZDApp_NVUpdate
        CODE
// 2922 {
        ; Saved register size: 0
        ; Auto size: 0
// 2923 #if defined ( NV_RESTORE )
// 2924   osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
// 2925 #endif
// 2926 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock279
// 2927 
// 2928 /*********************************************************************
// 2929  * @fn      ZDApp_CoordStartPANIDConflictCB()
// 2930  *
// 2931  * @brief   Returns a PAN ID for the network layer to use during
// 2932  *          a coordinator start and there is another network with
// 2933  *          the intended PANID.
// 2934  *
// 2935  * @param   panid - the intended PAN ID
// 2936  *
// 2937  * @return  PANID to try
// 2938  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2939 uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
ZDApp_CoordStartPANIDConflictCB:
        CFI Block cfiBlock280 Using cfiCommon0
        CFI Function ZDApp_CoordStartPANIDConflictCB
        CODE
// 2940 {
        ; Saved register size: 0
        ; Auto size: 0
// 2941   return ( panid + 1 );
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        LJMP    ?BRET
        CFI EndBlock cfiBlock280
// 2942 }
// 2943 
// 2944 /*********************************************************************
// 2945  * @fn          ZDO_SrcRtgIndCB
// 2946  *
// 2947  * @brief       This function notifies the ZDO available src route record received.
// 2948  *
// 2949  * @param       srcAddr - source address of the source route
// 2950  * @param       relayCnt - number of devices in the relay list
// 2951  * @param       relayList - relay list of the source route
// 2952  *
// 2953  * @return      none
// 2954  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2955 void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
ZDO_SrcRtgIndCB:
        CFI Block cfiBlock281 Using cfiCommon0
        CFI Function ZDO_SrcRtgIndCB
        CODE
// 2956 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
// 2957   zdoSrcRtg_t srcRtg;
// 2958 
// 2959   srcRtg.srcAddr = srcAddr;
        LCALL   ?Subroutine11 & 0xFFFF
// 2960   srcRtg.relayCnt = relayCnt;
??CrossCallReturnLabel_129:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 2961   srcRtg.pRelayList = pRelayList;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 2962 
// 2963   if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_15:
        JZ      ??ZDO_SrcRtgIndCB_0
// 2964   {
// 2965     zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#zdoCBFunc + 1
        LCALL   ??Subroutine49_0 & 0xFFFF
// 2966   }
??CrossCallReturnLabel_100:
        LCALL   ?CALL_IND
// 2967 }
??ZDO_SrcRtgIndCB_0:
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock281
// 2968 
// 2969 /*********************************************************************
// 2970  * @fn          ZDApp_InitZdoCBFunc
// 2971  *
// 2972  * @brief       Call this function to initialize zdoCBFunc[]
// 2973  *
// 2974  * @param       none
// 2975  *
// 2976  * @return      none
// 2977  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2978 void ZDApp_InitZdoCBFunc( void )
ZDApp_InitZdoCBFunc:
        CFI Block cfiBlock282 Using cfiCommon0
        CFI Function ZDApp_InitZdoCBFunc
        CODE
// 2979 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2980   uint8 i;
// 2981 
// 2982   for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
        MOV     R2,#0x0
// 2983   {
// 2984     zdoCBFunc[i] = NULL;
??ZDApp_InitZdoCBFunc_0:
        LCALL   ?Subroutine27 & 0xFFFF
// 2985   }
??CrossCallReturnLabel_33:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x7
        JC      ??ZDApp_InitZdoCBFunc_0
// 2986 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock282
// 2987 
// 2988 /*********************************************************************
// 2989  * @fn          ZDO_RegisterForZdoCB
// 2990  *
// 2991  * @brief       Call this function to register the higher layer (for
// 2992  *              example, the Application layer or MT layer) with ZDO
// 2993  *              callbacks to get notified of some ZDO indication like
// 2994  *              existence of a concentrator or receipt of a source
// 2995  *              route record.
// 2996  *
// 2997  * @param       indID - ZDO Indication ID
// 2998  * @param       pFn   - Callback function pointer
// 2999  *
// 3000  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3001  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3002 ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
ZDO_RegisterForZdoCB:
        CFI Block cfiBlock283 Using cfiCommon0
        CFI Function ZDO_RegisterForZdoCB
        CODE
// 3003 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
// 3004   // Check the range of the indication ID
// 3005   if ( indID < MAX_ZDO_CB_FUNC )
        CLR     C
        SUBB    A,#0x7
        JNC     ??ZDO_RegisterForZdoCB_0
// 3006   {
// 3007     zdoCBFunc[indID] = pFn;
        MOV     A,R4
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   ??Subroutine54_0 & 0xFFFF
// 3008     return ZSuccess;
??CrossCallReturnLabel_126:
        MOV     R1,#0x0
        SJMP    ??ZDO_RegisterForZdoCB_1
// 3009   }
// 3010 
// 3011   return ZInvalidParameter;
??ZDO_RegisterForZdoCB_0:
        MOV     R1,#0x2
??ZDO_RegisterForZdoCB_1:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock283
// 3012 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond284 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_127
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond285 Using cfiCommon0
        CFI (cfiCond285) NoFunction
        CFI (cfiCond285) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond285) CFA_SP SP+0
        CFI (cfiCond285) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond286 Using cfiCommon0
        CFI (cfiCond286) NoFunction
        CFI (cfiCond286) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond286) CFA_SP SP+0
        CFI (cfiCond286) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker287 Using cfiCommon1
        CFI (cfiPicker287) NoFunction
        CFI (cfiPicker287) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond284
        CFI EndBlock cfiCond285
        CFI EndBlock cfiCond286
        CFI EndBlock cfiPicker287
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine54_0:
        CFI Block cfiCond288 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_123
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond289 Using cfiCommon0
        CFI (cfiCond289) NoFunction
        CFI (cfiCond289) Conditional ??CrossCallReturnLabel_124
        CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond289) CFA_SP SP+0
        CFI (cfiCond289) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond290 Using cfiCommon0
        CFI (cfiCond290) NoFunction
        CFI (cfiCond290) Conditional ??CrossCallReturnLabel_125
        CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond290) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond290) CFA_SP SP+0
        CFI (cfiCond290) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond291 Using cfiCommon0
        CFI (cfiCond291) NoFunction
        CFI (cfiCond291) Conditional ??CrossCallReturnLabel_126
        CFI (cfiCond291) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond291) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond291) CFA_SP SP+-5
        CFI Block cfiCond292 Using cfiCommon0
        CFI (cfiCond292) NoFunction
        CFI (cfiCond292) Conditional ??CrossCallReturnLabel_127
        CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond292) CFA_SP SP+0
        CFI (cfiCond292) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond293 Using cfiCommon0
        CFI (cfiCond293) NoFunction
        CFI (cfiCond293) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond293) CFA_SP SP+0
        CFI (cfiCond293) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond294 Using cfiCommon0
        CFI (cfiCond294) NoFunction
        CFI (cfiCond294) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond294) CFA_SP SP+0
        CFI (cfiCond294) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker295 Using cfiCommon1
        CFI (cfiPicker295) NoFunction
        CFI (cfiPicker295) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond288
        CFI EndBlock cfiCond289
        CFI EndBlock cfiCond290
        CFI EndBlock cfiCond291
        CFI EndBlock cfiCond292
        CFI EndBlock cfiCond293
        CFI EndBlock cfiCond294
        CFI EndBlock cfiPicker295
// 3013 
// 3014 /*********************************************************************
// 3015  * @fn          ZDO_DeregisterForZdoCB
// 3016  *
// 3017  * @brief       Call this function to de-register the higher layer (for
// 3018  *              example, the Application layer or MT layer) with ZDO
// 3019  *              callbacks to get notified of some ZDO indication like
// 3020  *              existence of a concentrator or receipt of a source
// 3021  *              route record.
// 3022  *
// 3023  * @param       indID - ZDO Indication ID
// 3024  *
// 3025  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3026  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3027 ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
ZDO_DeregisterForZdoCB:
        CFI Block cfiBlock296 Using cfiCommon0
        CFI Function ZDO_DeregisterForZdoCB
        CODE
// 3028 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
// 3029   // Check the range of the indication ID
// 3030   if ( indID < MAX_ZDO_CB_FUNC )
        CLR     C
        SUBB    A,#0x7
        JNC     ??ZDO_DeregisterForZdoCB_0
// 3031   {
// 3032     zdoCBFunc[indID] = NULL;
        LCALL   ?Subroutine27 & 0xFFFF
// 3033     return ZSuccess;
??CrossCallReturnLabel_34:
        MOV     R1,A
        SJMP    ??ZDO_DeregisterForZdoCB_1
// 3034   }
// 3035 
// 3036   return ZInvalidParameter;
??ZDO_DeregisterForZdoCB_0:
        MOV     R1,#0x2
??ZDO_DeregisterForZdoCB_1:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock296
// 3037 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond297 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond298 Using cfiCommon0
        CFI (cfiCond298) NoFunction
        CFI (cfiCond298) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond298) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond298) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond298) CFA_SP SP+-5
        CFI Block cfiPicker299 Using cfiCommon1
        CFI (cfiPicker299) NoFunction
        CFI (cfiPicker299) Picker
        MOV     A,R2
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_52:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond297
        CFI EndBlock cfiCond298
        CFI EndBlock cfiPicker299

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond300 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond301 Using cfiCommon0
        CFI (cfiCond301) NoFunction
        CFI (cfiCond301) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_33
        CFI (cfiCond301) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond301) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond301) CFA_SP SP+-5
        CFI Block cfiCond302 Using cfiCommon0
        CFI (cfiCond302) NoFunction
        CFI (cfiCond302) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_34
        CFI (cfiCond302) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond302) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond302) CFA_SP SP+-5
        CFI Block cfiPicker303 Using cfiCommon1
        CFI (cfiPicker303) NoFunction
        CFI (cfiPicker303) Picker
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#zdoCBFunc & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(zdoCBFunc >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond300
        CFI EndBlock cfiCond301
        CFI EndBlock cfiCond302
        CFI EndBlock cfiPicker303

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zdoDiscCounter>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for continueJoining>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for devState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for devStartMode>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_epDesc>`:
        DATA8
        DB 0
        DATA16
        DW ZDAppTaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_SavedPollRate>`:
        DATA16
        DW 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SecInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SecInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_event_loop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessSecEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessSecEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDOInitDevice?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDOInitDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ReadNetworkRestoreState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ReadNetworkRestoreState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDAppDetermineDeviceType?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDAppDetermineDeviceType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NetworkStartEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NetworkStartEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_DeviceAuthEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_DeviceAuthEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SaveNetworkStateEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SaveNetworkStateEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_RestoreNetworkState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_RestoreNetworkState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_InitUserDesc?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_InitUserDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDAppCheckForHoldKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDAppCheckForHoldKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessOSALMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessMsgCBs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_RegisterCBs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_RegisterCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessSecMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessSecMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessNetworkJoin?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessNetworkJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SaveNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SaveNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ResetNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ResetNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_RestoreNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_RestoreNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ResetTimerStart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ResetTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ResetTimerCancel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ResetTimerCancel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlBypass?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlBypass

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlStartup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlStartup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NetworkDiscoveryReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NetworkDiscoveryReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_JoinReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_JoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_DeviceConfigured?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_DeviceConfigured

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SendEventMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SendEventMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SendMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_NetworkDiscoveryConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_NetworkDiscoveryConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NwkDescListProcessing?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NwkDescListProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_NetworkFormationConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_NetworkFormationConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_beaconNotifyIndCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_beaconNotifyIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_StartRouterConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_StartRouterConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_JoinConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_JoinConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_AddrChangeIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_AddrChangeIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_JoinIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_JoinIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_ConcentratorIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_ConcentratorIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_LeaveCnf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_LeaveCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_LeaveInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_LeaveInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_SyncIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_SyncIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_ManytoOneFailureIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_ManytoOneFailureIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_PollConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_PollConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AddrMgrWriteNVRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AddrMgrWriteNVRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_UpdateDeviceIndication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_UpdateDeviceIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_InMsgCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_InMsgCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ChangeMatchDescRespPermission?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ChangeMatchDescRespPermission

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NetworkInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NetworkInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NwkStateUpdateCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NwkStateUpdateCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NodeProfileSync?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NodeProfileSync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_StartJoiningCycle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_StartJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_StopJoiningCycle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_StopJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_AnnounceNewAddress?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_AnnounceNewAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NVUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NVUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_CoordStartPANIDConflictCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_CoordStartPANIDConflictCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_SrcRtgIndCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_SrcRtgIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_InitZdoCBFunc?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_InitZdoCBFunc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_RegisterForZdoCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_RegisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_DeregisterForZdoCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_DeregisterForZdoCB

        END
// 3038 
// 3039 /*********************************************************************
// 3040 *********************************************************************/
// 
// 5 219 bytes in segment BANKED_CODE
//   390 bytes in segment BANK_RELAYS
//    12 bytes in segment XDATA_I
//    12 bytes in segment XDATA_ID
//     8 bytes in segment XDATA_ROM_C
//    54 bytes in segment XDATA_Z
// 
// 5 621 bytes of CODE  memory
//     0 bytes of CONST memory (+ 8 bytes shared)
//    66 bytes of XDATA memory
//
//Errors: none
//Warnings: none
