###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         04/Dec/2019  15:20:34 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Components\stack\nwk\nwk_globals.c              #
#    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO  #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\stack\nwk\nwk #
#                          _globals.c -D ZAPP_P1 -D MT_TASK -D MT_SYS_FUNC    #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\List\ -lA C:\Users\25814\Desktop\2020±œ… #
#                          Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\CoordinatorEB\List\                #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\Obj\ -e --no_code_motion --debug         #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\ -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\Source\ -I                  #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\ZMain\TI2530DB\ -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\hal\ #
#                          include\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô #
#                          _—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\hal\target\CC253 #
#                          0EB\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷ #
#                          Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\include\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\high_level\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\single_c #
#                          hip\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷ #
#                          Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mt\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\osal\include\ -I             #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\saddr\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\sdata\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\af\ -I                 #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\nwk\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sapi\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sec\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sys\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\zdo\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\ -I                     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\f8w\ -Ohz               #
#    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\List\nwk_globals.lst                     #
#    Object file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\Obj\nwk_globals.r51                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29656 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8          
      9            Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "AddrMgr.h"
     47          #include "AssocList.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          #include "nwk_globals.h"
     51          #include "APS.h"
     52          #include "ssp.h"
     53          #include "rtg.h"
     54          #include "ZDConfig.h"
     55          #include "ZGlobals.h"
     56          
     57          #if defined ( LCD_SUPPORTED )
     58            #include "OnBoard.h"
     59          #endif
     60          
     61          /* HAL */
     62          #include "hal_lcd.h"
     63          
     64          /*********************************************************************
     65           * MACROS
     66           */
     67          
     68          /*********************************************************************
     69           * CONSTANTS
     70           */
     71          
     72          // Maximums for the data buffer queue
     73          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     74          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     75          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     76          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     77          
     78          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     79          // A known shortcoming is that when a message is enqueued as "hold" for a
     80          // sleeping device, the timer tick may have counted down to 1, so that msg
     81          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     82          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     83          // So the hold time will vary within this interval:
     84          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     85          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     86          #define NWK_INDIRECT_CNT_RTG_TMR    1
     87          // To hold msg for sleeping end devices for 30 secs:
     88          // #define CNT_RTG_TIMER            1
     89          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     90          // To hold msg for sleeping end devices for 30 mins:
     91          // #define CNT_RTG_TIMER            60
     92          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     93          // To hold msg for sleeping end devices for 30 days:
     94          // #define CNT_RTG_TIMER            60
     95          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     96          // Maximum msgs to hold per associated device.
     97          #define NWK_INDIRECT_MSG_MAX_PER    3
     98          // Maximum total msgs to hold for all associated devices.
     99          #define NWK_INDIRECT_MSG_MAX_ALL    \
    100                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
    101          
    102          /*********************************************************************
    103           * TYPEDEFS
    104           */
    105          
    106          /*********************************************************************
    107           * NWK GLOBAL VARIABLES
    108           */
    109          
    110          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
    111          CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   1500         DW 21
    112          
    113          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
    114          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   0F           DB 15
    115          
    116          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
    117          CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
    118          CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    119          CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    120          CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    121          

   \                                 In  segment CODE_C, align 1
    122          CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
    123          CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    124          CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    125          
    126          // change this if using a different stack profile...
    127          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    129          
    130          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131            uint8 CskipRtrs[1] = {0};
   \                     CskipRtrs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132            uint8 CskipChldrn[1] = {0};
   \                     CskipChldrn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
    134            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
    135            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
    136          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    137            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    138            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    139          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    140            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    141            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    142          #endif // STACK_PROFILE_ID
    143          
    144          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145          uint8 gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
   \                     gMIN_TREE_LINK_COST:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
   \   000001                REQUIRE __INIT_XDATA_I
    146          
    147          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 378
   \   00017A                REQUIRE __INIT_XDATA_Z
    149          
    150          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )

   \                                 In  segment CODE_C, align 1
    151            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = NWK_MIN_ROUTER_CHILDREN;
   \                     gNWK_MIN_ROUTER_CHILDREN:
   \   000000   0000         DW 0

   \                                 In  segment CODE_C, align 1
    152            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = NWK_MIN_ENDDEVICE_CHILDREN;
   \                     gNWK_MIN_ENDDEVICE_CHILDREN:
   \   000000   0000         DW 0
    153          #else
    154            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = 0;
    155            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = 0;
    156          #endif
    157          

   \                                 In  segment CODE_C, align 1
    158          CONST uint16 gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   2800         DW 40

   \                                 In  segment CODE_C, align 1
    159          CONST uint16 gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C00         DW 12

   \                                 In  segment CODE_C, align 1
    160          CONST uint8 gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    161          

   \                                 In  segment CODE_C, align 1
    162          CONST uint8 gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   10           DB 16
    163          
    164           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 368
   \   000170                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment CODE_C, align 1
    167          CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
   \                     gMAX_SOURCE_ROUTE:
   \   000000   0C           DB 12
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
   \                     gMAX_BROADCAST_QUEUED:
   \   000000   0A           DB 10
    170          

   \                                 In  segment CODE_C, align 1
    171          CONST uint8 gLINK_DOWN_TRIGGER = LINK_DOWN_TRIGGER;
   \                     gLINK_DOWN_TRIGGER:
   \   000000   03           DB 3
    172          

   \                                 In  segment CODE_C, align 1
    173          CONST uint8 gMAX_PASSIVE_ACK_CNT = MAX_PASSIVE_ACK_CNT;
   \                     gMAX_PASSIVE_ACK_CNT:
   \   000000   08           DB 8
    174          
    175          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    177          
    178          #if defined ( ZIGBEE_SOURCE_ROUTING )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
   \                     rtgSrcTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180            uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
   \                     rtgSrcRelayList:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
    181          #endif
    182          
    183          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    185          
    186          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    188          
    189          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    192          

   \                                 In  segment CODE_C, align 1
    193          CONST uint8 gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    194          
    195          // For tree addressing, this switch allows the allocation of a
    196          // router address to an end device when end device address are
    197          // all used up.  If this option is enabled, address space
    198          // could be limited.

   \                                 In  segment CODE_C, align 1
    199          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    200          
    201          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    202          // number of link status periods after the last received address conflict report
    203          // (network status command)

   \                                 In  segment CODE_C, align 1
    204          CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
   \                     gNWK_CONFLICTED_ADDR_EXPIRY_TIME:
   \   000000   04           DB 4
    205          #endif
    206          
    207          #if defined ( ZIGBEE_FREQ_AGILITY )

   \                                 In  segment CODE_C, align 1
    208          CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
   \                     gNWK_FREQ_AGILITY_ALL_MAC_ERRS:
   \   000000   00           DB 0
    209          #endif
    210          
    211          // The time limited to one MTO RReq (Concentrator Announce) in milliseconds.

   \                                 In  segment CODE_C, align 1
    212          CONST uint16 gMTO_RREQ_LIMIT_TIME = MTO_RREQ_LIMIT_TIME;
   \                     gMTO_RREQ_LIMIT_TIME:
   \   000000   E803         DW 1000
    213          
    214          // The number of seconds a MTO routing entry will last.

   \                                 In  segment CODE_C, align 1
    215          CONST uint8 gMTO_ROUTE_EXPIRY_TIME = MTO_ROUTE_EXPIRY_TIME;
   \                     gMTO_ROUTE_EXPIRY_TIME:
   \   000000   FF           DB 255
    216          
    217          // Route Discovery Request Default Radius

   \                                 In  segment CODE_C, align 1
    218          CONST uint8 gDEFAULT_ROUTE_REQUEST_RADIUS = DEFAULT_ROUTE_REQUEST_RADIUS;
   \                     gDEFAULT_ROUTE_REQUEST_RADIUS:
   \   000000   1E           DB 30
    219          
    220          // Network message radius

   \                                 In  segment CODE_C, align 1
    221          CONST uint8 gDEF_NWK_RADIUS = DEF_NWK_RADIUS;
   \                     gDEF_NWK_RADIUS:
   \   000000   1E           DB 30
    222          
    223          #if ( ZSTACK_ROUTER_BUILD )

   \                                 In  segment CODE_C, align 1
    224          CONST uint16 gLINK_STATUS_JITTER_MASK = LINK_STATUS_JITTER_MASK;
   \                     gLINK_STATUS_JITTER_MASK:
   \   000000   7F00         DW 127
    225          #endif
    226          
    227          /*********************************************************************
    228           * APS GLOBAL VARIABLES
    229           */
    230          
    231          // The Maximum number of binding records
    232          // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    233          CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   0400         DW 4
    234          
    235          #if defined ( REFLECTOR )
    236            // The Maximum number of cluster IDs in a binding record
    237            // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    238            CONST uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    239          

   \                                 In  segment CODE_C, align 1
    240            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    241          
    242            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    243            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    244          #endif
    245          
    246          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    247          CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    248          
    249          // APS End Device Broadcast Table
    250          #if ( ZG_BUILD_ENDDEVICE_TYPE )
    251            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
    252            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
    253          #endif
    254          
    255          /*********************************************************************
    256           * SECURITY GLOBAL VARIABLES
    257           */
    258          
    259          // This is the default pre-configured key,
    260          // change this to make a unique key
    261          // SEC_KEY_LEN is defined in ssp.h.
    262          
    263          #if defined ( DEFAULT_KEY )

   \                                 In  segment CODE_C, align 1
    264          CONST uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;
   \                     defaultKey:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   05           DB 5
   \   000003   07           DB 7
   \   000004   09           DB 9
   \   000005   0B           DB 11
   \   000006   0D           DB 13
   \   000007   0F           DB 15
   \   000008   00           DB 0
   \   000009   02           DB 2
   \   00000A   04           DB 4
   \   00000B   06           DB 6
   \   00000C   08           DB 8
   \   00000D   0A           DB 10
   \   00000E   0C           DB 12
   \   00000F   0D           DB 13
    265          #else
    266          CONST uint8 defaultKey[SEC_KEY_LEN] =
    267          {
    268          #if defined ( APP_TP ) || defined ( APP_TP2 )
    269            // Key for ZigBee Conformance Testing
    270            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    271            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    272          #else
    273            // Key for In-House Testing
    274            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    275            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    276          #endif
    277          };
    278          #endif
    279          
    280          // This is the default pre-configured Trust Center Link key,
    281          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    282          CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] = DEFAULT_TC_LINK_KEY;
   \                     defaultTCLinkKey:
   \   000000   5A           DB 90
   \   000001   69           DB 105
   \   000002   67           DB 103
   \   000003   42           DB 66
   \   000004   65           DB 101
   \   000005   65           DB 101
   \   000006   41           DB 65
   \   000007   6C           DB 108
   \   000008   6C           DB 108
   \   000009   69           DB 105
   \   00000A   61           DB 97
   \   00000B   6E           DB 110
   \   00000C   63           DB 99
   \   00000D   65           DB 101
   \   00000E   30           DB 48
   \   00000F   39           DB 57
    283          
    284          /*********************************************************************
    285           * GLOBAL VARIABLES - Statistics
    286           */
    287          
    288          #if defined ( PACKET_FILTER_STATS )
    289            uint32 apsInvalidPackets = 0;
    290            uint32 apsSecurityFailures = 0;
    291            uint32 nwkInvalidPackets = 0;
    292            uint32 nwkSecurityFailures = 0;
    293          #endif
    294          
    295          /*********************************************************************
    296           * STATUS STRINGS
    297           */
    298          #if defined ( LCD_SUPPORTED )

   \                                 In  segment XDATA_ROM_C, align 1
    299            const char PingStr[]         = "Ping Rcvd from";
   \                     PingStr:
   \   000000   50696E67     DB "Ping Rcvd from"
   \            20526376
   \            64206672
   \            6F6D00  

   \                                 In  segment XDATA_ROM_C, align 1
    300            const char AssocCnfStr[]     = "Assoc Cnf";
   \                     AssocCnfStr:
   \   000000   4173736F     DB "Assoc Cnf"
   \            6320436E
   \            6600    

   \                                 In  segment XDATA_ROM_C, align 1
    301            const char SuccessStr[]      = "Success";
   \                     SuccessStr:
   \   000000   53756363     DB "Success"
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
    302            const char EndDeviceStr[]    = "EndDevice:";
   \                     EndDeviceStr:
   \   000000   456E6444     DB "EndDevice:"
   \            65766963
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
    303            const char ParentStr[]       = "Parent:";
   \                     ParentStr:
   \   000000   50617265     DB "Parent:"
   \            6E743A00

   \                                 In  segment XDATA_ROM_C, align 1
    304            const char ZigbeeCoordStr[]  = "ZigBee Coord";
   \                     ZigbeeCoordStr:
   \   000000   5A696742     DB "ZigBee Coord"
   \            65652043
   \            6F6F7264
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    305            const char NetworkIDStr[]    = "Network ID:";
   \                     NetworkIDStr:
   \   000000   4E657477     DB "Network ID:"
   \            6F726B20
   \            49443A00

   \                                 In  segment XDATA_ROM_C, align 1
    306            const char RouterStr[]       = "Router:";
   \                     RouterStr:
   \   000000   526F7574     DB "Router:"
   \            65723A00

   \                                 In  segment XDATA_ROM_C, align 1
    307            const char OrphanRspStr[]    = "Orphan Response";
   \                     OrphanRspStr:
   \   000000   4F727068     DB "Orphan Response"
   \            616E2052
   \            6573706F
   \            6E736500

   \                                 In  segment XDATA_ROM_C, align 1
    308            const char SentStr[]         = "Sent";
   \                     SentStr:
   \   000000   53656E74     DB "Sent"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    309            const char FailedStr[]       = "Failed";
   \                     FailedStr:
   \   000000   4661696C     DB "Failed"
   \            656400  

   \                                 In  segment XDATA_ROM_C, align 1
    310            const char AssocRspFailStr[] = "Assoc Rsp fail";
   \                     AssocRspFailStr:
   \   000000   4173736F     DB "Assoc Rsp fail"
   \            63205273
   \            70206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    311            const char AssocIndStr[]     = "Assoc Ind";
   \                     AssocIndStr:
   \   000000   4173736F     DB "Assoc Ind"
   \            6320496E
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
    312            const char AssocCnfFailStr[] = "Assoc Cnf fail";
   \                     AssocCnfFailStr:
   \   000000   4173736F     DB "Assoc Cnf fail"
   \            6320436E
   \            66206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    313            const char EnergyLevelStr[]  = "Energy Level";
   \                     EnergyLevelStr:
   \   000000   456E6572     DB "Energy Level"
   \            6779204C
   \            6576656C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    314            const char ScanFailedStr[]   = "Scan Failed";
   \                     ScanFailedStr:
   \   000000   5363616E     DB "Scan Failed"
   \            20466169
   \            6C656400
    315          #endif
    316          
    317          /*********************************************************************
    318           * @fn       nwk_globals_init()
    319           *
    320           * @brief
    321           *
    322           *   Initialize nwk layer globals.  These are the system defaults and
    323           *   should be changed by the user here.  The default definitions are
    324           *   defined in nwk.h or NLMEDE.h.
    325           *
    326           * @param   none
    327           *
    328           * @return  none
    329           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    330          void nwk_globals_init( void )
   \                     nwk_globals_init:
    331          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    332            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A1A         MOV     R2,#0x1a
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??AddrMgrInit?relay
    333          
    334          #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    335            if ( ZSTACK_ROUTER_BUILD )
    336            {
    337              // Initialize the Cskip Table
    338              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
    339              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
    340            }
    341          #endif
    342          
    343            // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
    344            // to 0 (compiler flag).
    345            if ( ZSTACK_ROUTER_BUILD && NWK_LINK_STATUS_PERIOD )
    346            {
    347              NLME_InitLinkStatus();
   \   00000B                ; Setup parameters for call to function NLME_InitLinkStatus
   \   00000B   12....       LCALL   ??NLME_InitLinkStatus?relay
    348            }
    349          
    350          #if defined ( ZIGBEE_FREQ_AGILITY )
    351            NwkFreqAgilityInit();
   \   00000E                ; Setup parameters for call to function NwkFreqAgilityInit
   \   00000E   12....       LCALL   ??NwkFreqAgilityInit?relay
    352          #endif
    353          }
   \   000011                REQUIRE ?Subroutine0
   \   000011                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    354          
    355          /*********************************************************************
    356           * @fn       NIB_init()
    357           *
    358           * @brief
    359           *
    360           *   Initialize attribute values in NIB
    361           *
    362           * @param   none
    363           *
    364           * @return  none
    365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    366          void NIB_init()
   \                     NIB_init:
    367          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    368            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000004                ; Setup parameters for call to function osal_rand
   \   000004   12....       LCALL   ??osal_rand?relay
   \   000007   EA           MOV     A,R2
   \   000008   90....       MOV     DPTR,#_NIB
   \   00000B   F0           MOVX    @DPTR,A
    369          
    370            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000C   90....       MOV     DPTR,#_NIB + 17
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    371            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000012   90....       MOV     DPTR,#_NIB + 4
   \   000015   7414         MOV     A,#0x14
   \   000017   F0           MOVX    @DPTR,A
    372          
    373          #if ( NWK_MODE == NWK_MODE_MESH )
    374            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000018   90....       MOV     DPTR,#_NIB + 40
   \   00001B   740F         MOV     A,#0xf
   \   00001D   F0           MOVX    @DPTR,A
    375            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
    376          #endif
    377          
    378            // BROADCAST SETTINGS:
    379            // *******************
    380            //   Broadcast Delivery Time
    381            //     - set to multiples of 100ms
    382            //     - should be 500ms more than the retry time
    383            //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    384            //   Passive Ack Timeout
    385            //     - set to multiples of 100ms
    386            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000020   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   000023   E0           MOVX    A,@DPTR
   \   000024   90....       MOV     DPTR,#_NIB + 7
   \   000027   F0           MOVX    @DPTR,A
    387            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   000028   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   90....       MOV     DPTR,#_NIB + 1
   \   00002F   F0           MOVX    @DPTR,A
    388            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000030   90....       MOV     DPTR,#zgMaxBcastRetires
   \   000033   E0           MOVX    A,@DPTR
   \   000034   90....       MOV     DPTR,#_NIB + 2
   \   000037   F0           MOVX    @DPTR,A
    389          
    390            _NIB.ReportConstantCost = 0;
   \   000038   90....       MOV     DPTR,#_NIB + 8
   \   00003B   E4           CLR     A
   \   00003C   F0           MOVX    @DPTR,A
    391            _NIB.RouteDiscRetries = 0;
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
    392            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   00003F   90....       MOV     DPTR,#_NIB + 11
   \   000042   F0           MOVX    @DPTR,A
    393            _NIB.nwkAllFresh = NWK_ALL_FRESH;
   \   000043   90....       MOV     DPTR,#_NIB + 104
   \   000046   04           INC     A
   \   000047   F0           MOVX    @DPTR,A
    394          
    395            if ( ZG_SECURE_ENABLED )
    396            {
    397              _NIB.SecurityLevel = SECURITY_LEVEL;
    398            }
    399            else
    400            {
    401              _NIB.SecurityLevel = 0;
   \   000048   90....       MOV     DPTR,#_NIB + 12
   \   00004B   E4           CLR     A
   \   00004C   F0           MOVX    @DPTR,A
    402            }
    403          
    404          #if defined ( ZIGBEEPRO )
    405            _NIB.SymLink = FALSE;
   \   00004D   A3           INC     DPTR
   \   00004E   F0           MOVX    @DPTR,A
    406          #else
    407            _NIB.SymLink = TRUE;
    408          #endif
    409          
    410            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00004F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000052   E0           MOVX    A,@DPTR
   \   000053   90....       MOV     DPTR,#_NIB + 14
   \   000056   F0           MOVX    @DPTR,A
    411          
    412            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   000057   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   90....       MOV     DPTR,#_NIB + 15
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
    413          
    414            _NIB.RouteDiscoveryTime = zgRouteDiscoveryTime;
   \   000062   90....       MOV     DPTR,#zgRouteDiscoveryTime
   \   000065   E0           MOVX    A,@DPTR
   \   000066   90....       MOV     DPTR,#_NIB + 18
   \   000069   F0           MOVX    @DPTR,A
    415            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   00006A   90....       MOV     DPTR,#zgRouteExpiryTime
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   90....       MOV     DPTR,#_NIB + 19
   \   000071   12....       LCALL   ?Subroutine1 & 0xFFFF
    416          
    417            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
    418            _NIB.nwkLogicalChannel = 0;
   \                     ??CrossCallReturnLabel_0:
   \   000074   A3           INC     DPTR
   \   000075   E4           CLR     A
   \   000076   12....       LCALL   ?Subroutine1 & 0xFFFF
    419            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
    420            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_1:
   \   000079                ; Setup parameters for call to function osal_memset
   \   000079   7C08         MOV     R4,#0x8
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   7A..         MOV     R2,#(_NIB + 25) & 0xff
   \   000081   7B..         MOV     R3,#((_NIB + 25) >> 8) & 0xff
   \   000083   12....       LCALL   ??osal_memset?relay
    421            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   000086   90....       MOV     DPTR,#_NIB + 33
   \   000089   74FE         MOV     A,#-0x2
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   04           INC     A
   \   00008E   F0           MOVX    @DPTR,A
    422          
    423            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   00008F                ; Setup parameters for call to function sAddrExtCpy
   \   00008F   7C..         MOV     R4,#zgExtendedPANID & 0xff
   \   000091   7D..         MOV     R5,#(zgExtendedPANID >> 8) & 0xff
   \   000093   7A..         MOV     R2,#(_NIB + 53) & 0xff
   \   000095   7B..         MOV     R3,#((_NIB + 53) >> 8) & 0xff
   \   000097   12....       LCALL   ??sAddrExtCpy?relay
    424          
    425            _NIB.nwkKeyLoaded = FALSE;
   \   00009A   90....       MOV     DPTR,#_NIB + 61
   \   00009D   E4           CLR     A
   \   00009E   F0           MOVX    @DPTR,A
    426          
    427          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    428            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
   \   00009F   90....       MOV     DPTR,#_NIB + 96
   \   0000A2   7402         MOV     A,#0x2
   \   0000A4   F0           MOVX    @DPTR,A
    429            _NIB.nwkUniqueAddr = FALSE;
   \   0000A5   A3           INC     DPTR
   \   0000A6   E4           CLR     A
   \   0000A7   F0           MOVX    @DPTR,A
    430          #else
    431            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
    432            _NIB.nwkUniqueAddr = TRUE;
    433          #endif
    434          
    435            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD;
   \   0000A8   A3           INC     DPTR
   \   0000A9   740F         MOV     A,#0xf
   \   0000AB   F0           MOVX    @DPTR,A
    436            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000AC   A3           INC     DPTR
   \   0000AD   7403         MOV     A,#0x3
   \   0000AF   F0           MOVX    @DPTR,A
    437          
    438            //MTO and source routing
    439            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000B0   90....       MOV     DPTR,#zgConcentratorDiscoveryTime
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   90....       MOV     DPTR,#_NIB + 102
   \   0000B7   F0           MOVX    @DPTR,A
    440            _NIB.nwkIsConcentrator = zgConcentratorEnable;
   \   0000B8   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   90....       MOV     DPTR,#_NIB + 101
   \   0000BF   F0           MOVX    @DPTR,A
    441            _NIB.nwkConcentratorRadius = zgConcentratorRadius;
   \   0000C0   90....       MOV     DPTR,#zgConcentratorRadius
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   90....       MOV     DPTR,#_NIB + 103
   \   0000C7   F0           MOVX    @DPTR,A
    442          
    443          #if defined ( ZIGBEE_MULTICAST )
    444            _NIB.nwkUseMultiCast = TRUE;
   \   0000C8   90....       MOV     DPTR,#_NIB + 100
   \   0000CB   7401         MOV     A,#0x1
   \   0000CD   F0           MOVX    @DPTR,A
    445          #else
    446            _NIB.nwkUseMultiCast = FALSE;
    447          #endif
    448          
    449          #if defined ( NV_RESTORE )
    450            if ( osal_nv_read( ZCD_NV_NWKMGR_ADDR, 0, sizeof( _NIB.nwkManagerAddr ),
    451                               &_NIB.nwkManagerAddr ) != SUCCESS )
    452          #endif
    453            {
    454              _NIB.nwkManagerAddr = 0x0000;
   \   0000CE   90....       MOV     DPTR,#_NIB + 105
   \   0000D1   E4           CLR     A
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   F0           MOVX    @DPTR,A
    455            }
    456          
    457            _NIB.nwkUpdateId = 0;
   \   0000D5   90....       MOV     DPTR,#_NIB + 109
   \   0000D8   F0           MOVX    @DPTR,A
    458            _NIB.nwkTotalTransmissions = 0;
   \   0000D9   90....       MOV     DPTR,#_NIB + 107
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   F0           MOVX    @DPTR,A
    459          
    460            if ( ZSTACK_ROUTER_BUILD )
    461            {
    462          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    463              NLME_InitStochasticAddressing();
   \   0000DF                ; Setup parameters for call to function NLME_InitStochasticAddressing
   \   0000DF   12....       LCALL   ??NLME_InitStochasticAddressing?relay
    464          #else
    465              NLME_InitTreeAddressing();
    466          #endif
    467            }
    468          }
   \   0000E2   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   74FE         MOV     A,#-0x2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   04           INC     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    469          
    470          /*********************************************************************
    471           * @fn       nwk_Status()
    472           *
    473           * @brief
    474           *
    475           *   Status report.
    476           *
    477           * @param   statusCode
    478           * @param   statusValue
    479           *
    480           * @return  none
    481           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    482          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    483          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
    484          #if defined ( LCD_SUPPORTED )
    485            switch ( statusCode )
   \   000009   8A..         MOV     ?V0 + 2,R2
   \   00000B   8B..         MOV     ?V0 + 3,R3
   \   00000D   78..         MOV     R0,#?V0 + 2
   \   00000F   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for nwk_Status>_0`:
   \   000012   0000         DW        0
   \   000014   0800         DW        8
   \   000016   0200         DW        2
   \   000018   ....         DW        ??nwk_Status_0
   \   00001A   0400         DW        4
   \   00001C   ....         DW        ??nwk_Status_1
   \   00001E   0500         DW        5
   \   000020   ....         DW        ??nwk_Status_2
   \   000022   0600         DW        6
   \   000024   ....         DW        ??nwk_Status_3
   \   000026   0700         DW        7
   \   000028   ....         DW        ??nwk_Status_4
   \   00002A   0110         DW        4097
   \   00002C   ....         DW        ??nwk_Status_5
   \   00002E   0310         DW        4099
   \   000030   ....         DW        ??nwk_Status_6
   \   000032   0410         DW        4100
   \   000034   ....         DW        ??nwk_Status_7
   \   000036   ....         DW        ??nwk_Status_8
    486            {
    487              case NWK_STATUS_COORD_ADDR:
    488                if ( ZSTACK_ROUTER_BUILD )
    489                {
    490                  HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_2:
   \   000038                ; Setup parameters for call to function HalLcdWriteString
   \   000038   7900         MOV     R1,#0x0
   \   00003A   7A..         MOV     R2,#ZigbeeCoordStr & 0xff
   \   00003C   7B..         MOV     R3,#(ZigbeeCoordStr >> 8) & 0xff
   \   00003E   12....       LCALL   ?Subroutine2 & 0xFFFF
    491                  HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
   \                     ??CrossCallReturnLabel_2:
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   7910         MOV     R1,#0x10
   \   000046   AC..         MOV     R4,?V0 + 0
   \   000048   AD..         MOV     R5,?V0 + 1
   \   00004A   7A..         MOV     R2,#NetworkIDStr & 0xff
   \   00004C   7B..         MOV     R3,#(NetworkIDStr >> 8) & 0xff
   \   00004E   12....       LCALL   ??HalLcdWriteStringValue?relay
   \   000051   7401         MOV     A,#0x1
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
    492                  BuzzerControl( BUZZER_BLIP );
   \   000056                ; Setup parameters for call to function BuzzerControl
   \   000056   7902         MOV     R1,#0x2
   \   000058   12....       LCALL   ??BuzzerControl?relay
    493                }
    494                break;
   \   00005B   8074         SJMP    ??nwk_Status_8
    495          
    496              case NWK_STATUS_ROUTER_ADDR:
    497                if ( ZSTACK_ROUTER_BUILD )
    498                {
    499                  HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_3:
   \   00005D                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00005D   75..00       MOV     ?V0 + 2,#0x0
   \   000060   78..         MOV     R0,#?V0 + 2
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000065   7910         MOV     R1,#0x10
   \   000067   7A..         MOV     R2,#RouterStr & 0xff
   \   000069   7B..         MOV     R3,#(RouterStr >> 8) & 0xff
   \                     ??nwk_Status_9:
   \   00006B   12....       LCALL   ??HalLcdWriteStringValue?relay
   \                     ??nwk_Status_10:
   \   00006E   7401         MOV     A,#0x1
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    500                }
    501                break;
   \   000073   805C         SJMP    ??nwk_Status_8
    502          
    503              case NWK_STATUS_ORPHAN_RSP:
    504                if ( ZSTACK_ROUTER_BUILD )
    505                {
    506                  if ( statusValue == ZSuccess )
   \                     ??nwk_Status_4:
   \   000075   EC           MOV     A,R4
   \   000076   45..         ORL     A,?V0 + 1
   \   000078   700A         JNZ     ??nwk_Status_11
    507                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
   \   00007A                ; Setup parameters for call to function HalLcdWriteScreen
   \   00007A   7C..         MOV     R4,#SentStr & 0xff
   \   00007C   7D..         MOV     R5,#(SentStr >> 8) & 0xff
   \                     ??nwk_Status_12:
   \   00007E   7A..         MOV     R2,#OrphanRspStr & 0xff
   \   000080   7B..         MOV     R3,#(OrphanRspStr >> 8) & 0xff
   \   000082   804A         SJMP    ??nwk_Status_13
    508                  else
    509                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
   \                     ??nwk_Status_11:
   \   000084                ; Setup parameters for call to function HalLcdWriteScreen
   \   000084   7C..         MOV     R4,#FailedStr & 0xff
   \   000086   7D..         MOV     R5,#(FailedStr >> 8) & 0xff
   \   000088   80F4         SJMP    ??nwk_Status_12
    510                }
    511                break;
    512          
    513              case NWK_ERROR_ASSOC_RSP:
    514                if ( ZSTACK_ROUTER_BUILD )
    515                {
    516                  HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_5:
   \   00008A                ; Setup parameters for call to function HalLcdWriteString
   \   00008A   7900         MOV     R1,#0x0
   \   00008C   7A..         MOV     R2,#AssocRspFailStr & 0xff
   \   00008E   7B..         MOV     R3,#(AssocRspFailStr >> 8) & 0xff
    517                  HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    518                }
   \                     ??nwk_Status_14:
   \   000090   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000096   7910         MOV     R1,#0x10
   \   000098   AA..         MOV     R2,?V0 + 0
   \   00009A   AB..         MOV     R3,?V0 + 1
   \   00009C   E4           CLR     A
   \   00009D   FC           MOV     R4,A
   \   00009E   FD           MOV     R5,A
   \   00009F   12....       LCALL   ??HalLcdWriteValue?relay
   \   0000A2   80CA         SJMP    ??nwk_Status_10
    519                break;
    520          
    521              case NWK_STATUS_ED_ADDR:
    522                if ( ZSTACK_END_DEVICE_BUILD )
    523                {
    524                  HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
    525                }
    526                break;
    527          
    528              case NWK_STATUS_PARENT_ADDR:
    529                      HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
   \                     ??nwk_Status_1:
   \   0000A4                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000A4   75..01       MOV     ?V0 + 2,#0x1
   \   0000A7   78..         MOV     R0,#?V0 + 2
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AC   7910         MOV     R1,#0x10
   \   0000AE   7A..         MOV     R2,#ParentStr & 0xff
   \   0000B0   7B..         MOV     R3,#(ParentStr >> 8) & 0xff
   \   0000B2   80B7         SJMP    ??nwk_Status_9
    530                break;
    531          
    532              case NWK_STATUS_ASSOC_CNF:
    533                HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
   \                     ??nwk_Status_0:
   \   0000B4                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000B4   7C..         MOV     R4,#SuccessStr & 0xff
   \   0000B6   7D..         MOV     R5,#(SuccessStr >> 8) & 0xff
   \   0000B8   7A..         MOV     R2,#AssocCnfStr & 0xff
   \   0000BA   7B..         MOV     R3,#(AssocCnfStr >> 8) & 0xff
   \   0000BC   8010         SJMP    ??nwk_Status_13
    534                break;
    535          
    536              case NWK_ERROR_ASSOC_CNF_DENIED:
    537                HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_6:
   \   0000BE                ; Setup parameters for call to function HalLcdWriteString
   \   0000BE   7900         MOV     R1,#0x0
   \   0000C0   7A..         MOV     R2,#AssocCnfFailStr & 0xff
   \   0000C2   7B..         MOV     R3,#(AssocCnfFailStr >> 8) & 0xff
   \   0000C4   80CA         SJMP    ??nwk_Status_14
    538                HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    539                break;
    540          
    541              case NWK_ERROR_ENERGY_SCAN_FAILED:
    542                HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
   \                     ??nwk_Status_7:
   \   0000C6                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000C6   7C..         MOV     R4,#ScanFailedStr & 0xff
   \   0000C8   7D..         MOV     R5,#(ScanFailedStr >> 8) & 0xff
   \   0000CA   7A..         MOV     R2,#EnergyLevelStr & 0xff
   \   0000CC   7B..         MOV     R3,#(EnergyLevelStr >> 8) & 0xff
   \                     ??nwk_Status_13:
   \   0000CE   12....       LCALL   ??HalLcdWriteScreen?relay
    543                break;
    544            }
    545          #endif
    546          }
   \                     ??nwk_Status_8:
   \   0000D1   7F04         MOV     R7,#0x4
   \   0000D3   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ??HalLcdWriteString?relay
   \   000003                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000003                ; Setup parameters for call to function HalLcdWriteValue
   \   000003   75..01       MOV     ?V0 + 2,#0x1
   \   000006   78..         MOV     R0,#?V0 + 2
   \   000008   22           RET
    547          
    548          /*********************************************************************
    549           * @fn       nwk_UpdateStatistics()
    550           *
    551           * @brief   Update network layer statistic counters
    552           *
    553           * @param   statisticCode
    554           *
    555           * @return  none
    556           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    557          void nwk_UpdateStatistics( uint8 statisticCode )
   \                     nwk_UpdateStatistics:
    558          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    559          #if defined ( PACKET_FILTER_STATS )
    560            switch ( statisticCode )
    561            {
    562              case STAT_NWK_INVALID_PACKET:
    563                nwkInvalidPackets++;
    564                break;
    565          
    566              case STAT_NWK_SECURITY_FAILURE:
    567                nwkInvalidPackets++;
    568                nwkSecurityFailures++;
    569                break;
    570          
    571              case STAT_APS_INVALID_PACKET:
    572                apsInvalidPackets++;
    573                break;
    574          
    575              case STAT_APS_SECURITY_FAILURE:
    576                apsSecurityFailures++;
    577                break;
    578            }
    579          #endif
    580          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LINK_COST>`:
   \   000000   06           DB 6

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_globals_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NIB_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_Status?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_UpdateStatistics?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_UpdateStatistics
    581          
    582          /*********************************************************************
    583          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     NIB_init                           2      0      0
       -> osal_rand                     4      0      0
       -> osal_memset                   4      0      0
       -> sAddrExtCpy                   4      0      0
       -> NLME_InitStochasticAddressing
                                        4      0      0
     nwk_Status                         0      0     13
       -> HalLcdWriteString             0      0     24
       -> HalLcdWriteStringValue        0      0     26
       -> BuzzerControl                 0      0     24
       -> HalLcdWriteStringValue        0      0     26
       -> HalLcdWriteScreen             0      0     24
       -> HalLcdWriteScreen             0      0     24
       -> HalLcdWriteString             0      0     24
       -> HalLcdWriteValue              0      0     26
       -> HalLcdWriteStringValue        0      0     26
       -> HalLcdWriteScreen             0      0     24
       -> HalLcdWriteString             0      0     24
       -> HalLcdWriteValue              0      0     26
       -> HalLcdWriteScreen             0      0     24
     nwk_UpdateStatistics               0      0      0
     nwk_globals_init                   2      0      0
       -> AddrMgrInit                   4      0      0
       -> NLME_InitLinkStatus           4      0      0
       -> NwkFreqAgilityInit            4      0      0


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     gNWK_MAX_DEVICE_LIST                      2
     gNWK_MAX_SLEEPING_END_DEVICES             1
     gNWK_MAX_DATABUFS_WAITING                 1
     gNWK_MAX_DATABUFS_SCHEDULED               1
     gNWK_MAX_DATABUFS_CONFIRMED               1
     gNWK_MAX_DATABUFS_TOTAL                   1
     gNWK_INDIRECT_CNT_RTG_TMR                 1
     gNWK_INDIRECT_MSG_MAX_PER                 1
     gNWK_INDIRECT_MSG_MAX_ALL                 1
     Cskip                                     2
     CskipRtrs                                 1
     CskipChldrn                               1
     gMIN_TREE_LINK_COST                       1
     AssociatedDevList                       378
     gNWK_MIN_ROUTER_CHILDREN                  2
     gNWK_MIN_ENDDEVICE_CHILDREN               2
     gMAX_RTG_ENTRIES                          2
     gMAX_RTG_SRC_ENTRIES                      2
     gMAX_RREQ_ENTRIES                         1
     gMAX_NEIGHBOR_ENTRIES                     1
     neighborTable                           368
     gMAX_SOURCE_ROUTE                         1
     gMAX_BROADCAST_QUEUED                     1
     gLINK_DOWN_TRIGGER                        1
     gMAX_PASSIVE_ACK_CNT                      1
     rtgTable                                280
     rtgSrcTable                              72
     rtgSrcRelayList                          24
     rtDiscTable                              64
     bcastTable                               72
     bcastHoldHandle                           9
     bcastHoldAckMask                         36
     gMAX_BCAST                                1
     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
                                               1
     gNWK_CONFLICTED_ADDR_EXPIRY_TIME
                                               1
     gNWK_FREQ_AGILITY_ALL_MAC_ERRS            1
     gMTO_RREQ_LIMIT_TIME                      2
     gMTO_ROUTE_EXPIRY_TIME                    1
     gDEFAULT_ROUTE_REQUEST_RADIUS             1
     gDEF_NWK_RADIUS                           1
     gLINK_STATUS_JITTER_MASK                  2
     gNWK_MAX_BINDING_ENTRIES                  2
     gMAX_BINDING_CLUSTER_IDS                  1
     gBIND_REC_SIZE                            2
     BindingTable                             56
     gAPS_MAX_GROUPS                           1
     defaultKey                               16
     defaultTCLinkKey                         16
     PingStr                                  15
     AssocCnfStr                              10
     SuccessStr                                8
     EndDeviceStr                             11
     ParentStr                                 8
     ZigbeeCoordStr                           13
     NetworkIDStr                             12
     RouterStr                                 8
     OrphanRspStr                             16
     SentStr                                   5
     FailedStr                                 7
     AssocRspFailStr                          15
     AssocIndStr                              10
     AssocCnfFailStr                          15
     EnergyLevelStr                           13
     ScanFailedStr                            12
     nwk_globals_init                         17
     ?Subroutine0                              7
     NIB_init                                229
     ?Subroutine1                              9
     nwk_Status                              214
     ?Subroutine2                              9
     nwk_UpdateStatistics                      3
     ?<Initializer for gMIN_TREE_LINK_COST>    1
     ??nwk_globals_init?relay                  6
     ??NIB_init?relay                          6
     ??nwk_Status?relay                        6
     ??nwk_UpdateStatistics?relay              6

 
   488 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    73 bytes in segment CODE_C
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
   178 bytes in segment XDATA_ROM_C
 1 363 bytes in segment XDATA_Z
 
   586 bytes of CODE  memory
   178 bytes of CONST memory
 1 364 bytes of XDATA memory

Errors: none
Warnings: none
