###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         04/Dec/2019  15:20:17 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Components\hal\target\CC2530EB\hal_uart.c       #
#    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º #
#                          ˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO  #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\hal\target\CC #
#                          2530EB\hal_uart.c -D ZAPP_P1 -D MT_TASK -D         #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤ #
#                          º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB\List\ -lA C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\CoordinatorEB\List\            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\Obj\ -e --no_code_motion --debug         #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\ -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\Source\ -I                  #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\ZMain\TI2530DB\ -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\hal\ #
#                          include\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô #
#                          _—¯÷Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\hal\target\CC253 #
#                          0EB\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷ #
#                          Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\include\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\high_level\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\mac\low_level\srf04\single_c #
#                          hip\ -I C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷ #
#                          Ì\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mt\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\osal\include\ -I             #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\saddr\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\services\sdata\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\af\ -I                 #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\nwk\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sapi\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sec\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\sys\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\zdo\ -I                #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\ -I                     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\zmac\f8w\ -Ohz               #
#    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\List\hal_uart.lst                        #
#    Object file        =  C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø #
#                          ∑÷\Projects\zstack\Samples\SampleApp\CC2530DB\Coor #
#                          dinatorEB\Obj\hal_uart.r51                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±œ…Ë\Õı–¬»Ô_—¯÷Ì\”≤º˛≤ø∑÷\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
      4            Revision:       $Revision: 20142 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 526
   \   00020E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL     0xff,#0x3f
   \   000007   85FFFF       MOV     0xff,0xff
   \   00000A   53F1FE       ANL     0xf1,#0xfe
   \   00000D   43F30C       ORL     0xf3,#0xc
   \   000010   53F2F3       ANL     0xf2,#0xf3
   \   000013   758680       MOV     0x86,#-0x80
   \   000016   75C480       MOV     0xc4,#-0x80
   \   000019   90....       MOV     DPTR,#dmaCh1234 + 26
   \   00001C   7470         MOV     A,#0x70
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   74C1         MOV     A,#-0x3f
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   541F         ANL     A,#0x1f
   \   000027   F0           MOVX    @DPTR,A
   \   000028   90....       MOV     DPTR,#dmaCh1234 + 30
   \   00002B   740F         MOV     A,#0xf
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   744A         MOV     A,#0x4a
   \   000031   F0           MOVX    @DPTR,A
   \   000032   90....       MOV     DPTR,#dmaCh1234 + 16
   \   000035   7470         MOV     A,#0x70
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74C1         MOV     A,#-0x3f
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   90....       MOV     DPTR,#dmaCh1234 + 20
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   541F         ANL     A,#0x1f
   \   000042   F0           MOVX    @DPTR,A
   \   000043   90....       MOV     DPTR,#dmaCh1234 + 22
   \   000046   74CE         MOV     A,#-0x32
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   540F         ANL     A,#0xf
   \   00004D   4410         ORL     A,#0x10
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000052   90....       MOV     DPTR,#dmaCh1234 + 18
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   74..         MOV     A,#dmaCfg & 0xff
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   90....       MOV     DPTR,#dmaCh1234 + 21
   \   00005D   7480         MOV     A,#-0x80
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   90....       MOV     DPTR,#dmaCh1234 + 20
   \   000063   E4           CLR     A
   \   000064   F0           MOVX    @DPTR,A
   \   000065   90....       MOV     DPTR,#dmaCh1234 + 23
   \   000068   7412         MOV     A,#0x12
   \   00006A   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00006D                REQUIRE P2DIR
   \   00006D                REQUIRE PERCFG
   \   00006D                REQUIRE P0SEL
   \   00006D                REQUIRE ADCCFG
   \   00006D                REQUIRE U0CSR
   \   00006D                REQUIRE U0UCR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine18_0
   \   000001                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   241B         ADD     A,#0x1b
   \   000007   F582         MOV     DPL,A
   \   000009   EB           MOV     A,R3
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   90....       MOV     DPTR,#dmaCfg + 524
   \   000016   E8           MOV     A,R0
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   E9           MOV     A,R1
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6403         XRL     A,#0x3
   \   000023   600A         JZ      ??HalUARTOpenDMA_0
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6404         XRL     A,#0x4
   \   00002D   7005         JNZ     ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   00002F   75C2D8       MOV     0xc2,#-0x28
   \   000032   8003         SJMP    ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   000034   75C23B       MOV     0xc2,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000037   8A82         MOV     DPL,R2
   \   000039   8B83         MOV     DPH,R3
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   600B         JZ      ??HalUARTOpenDMA_3
   \   00003F   14           DEC     A
   \   000040   6012         JZ      ??HalUARTOpenDMA_4
   \   000042   14           DEC     A
   \   000043   6019         JZ      ??HalUARTOpenDMA_5
   \   000045   14           DEC     A
   \   000046   6020         JZ      ??HalUARTOpenDMA_6
   \   000048   8028         SJMP    ??HalUARTOpenDMA_7
   \                     ??HalUARTOpenDMA_3:
   \   00004A   75C508       MOV     0xc5,#0x8
   \   00004D   90....       MOV     DPTR,#dmaCfg + 520
   \   000050   7423         MOV     A,#0x23
   \   000052   8026         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_4:
   \   000054   75C509       MOV     0xc5,#0x9
   \   000057   90....       MOV     DPTR,#dmaCfg + 520
   \   00005A   7412         MOV     A,#0x12
   \   00005C   801C         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_5:
   \   00005E   75C50A       MOV     0xc5,#0xa
   \   000061   90....       MOV     DPTR,#dmaCfg + 520
   \   000064   7409         MOV     A,#0x9
   \   000066   8012         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_6:
   \   000068   75C50A       MOV     0xc5,#0xa
   \   00006B   90....       MOV     DPTR,#dmaCfg + 520
   \   00006E   7406         MOV     A,#0x6
   \   000070   8008         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_7:
   \   000072   75C50B       MOV     0xc5,#0xb
   \   000075   90....       MOV     DPTR,#dmaCfg + 520
   \   000078   7403         MOV     A,#0x3
   \                     ??HalUARTOpenDMA_8:
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   600D         JZ      ??HalUARTOpenDMA_9
   \   000084   75C442       MOV     0xc4,#0x42
   \   000087   43F310       ORL     0xf3,#0x10
   \   00008A   C285         CLR     0x80.5
   \   00008C   43FD20       ORL     0xfd,#0x20
   \   00008F   8003         SJMP    ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_9:
   \   000091   75C402       MOV     0xc4,#0x2
   \                     ??HalUARTOpenDMA_10:
   \   000094   9070C1       MOV     DPTR,#0x70c1
   \   000097   E0           MOVX    A,@DPTR
   \   000098   90....       MOV     DPTR,#dmaCfg
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   A3           INC     DPTR
   \   00009D   E4           CLR     A
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   75D1F7       MOV     0xd1,#-0x9
   \   0000A2   75D608       MOV     0xd6,#0x8
   \   0000A5                ; Setup parameters for call to function osal_memset
   \   0000A5   FC           MOV     R4,A
   \   0000A6   7D01         MOV     R5,#0x1
   \   0000A8   E5C2         MOV     A,0xc2
   \   0000AA   F4           CPL     A
   \   0000AB   F9           MOV     R1,A
   \   0000AC   7A..         MOV     R2,#dmaCfg & 0xff
   \   0000AE   7B..         MOV     R3,#(dmaCfg >> 8) & 0xff
   \   0000B0   12....       LCALL   ??osal_memset?relay
   \   0000B3   438640       ORL     0x86,#0x40
   \   0000B6   90....       MOV     DPTR,#dmaCfg + 523
   \   0000B9   E4           CLR     A
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   90....       MOV     DPTR,#dmaCfg + 522
   \   0000BE   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000C1                REQUIRE U0BAUD
   \   0000C1                REQUIRE U0GCR
   \   0000C1                REQUIRE U0UCR
   \   0000C1                REQUIRE P0SEL
   \   0000C1                REQUIRE _A_P0
   \   0000C1                REQUIRE P0DIR
   \   0000C1                REQUIRE DMAIRQ
   \   0000C1                REQUIRE DMAARM
   \   0000C1                REQUIRE U0CSR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTReadDMA(unsigned char *, uint16)
   \                     HalUARTReadDMA:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   8031         SJMP    ??HalUARTReadDMA_0
   \                     ??HalUARTReadDMA_1:
   \   00000B   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   E5C2         MOV     A,0xc2
   \   00001B   F4           CPL     A
   \   00001C   F5..         MOV     ?V0 + 1,A
   \   00001E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E5..         MOV     A,?V0 + 1
   \   000026   F0           MOVX    @DPTR,A
   \   000027   90....       MOV     DPTR,#dmaCfg + 256
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   04           INC     A
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   C3           CLR     C
   \   00002E   9480         SUBB    A,#-0x80
   \   000030   4002         JC      ??HalUARTReadDMA_2
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \                     ??HalUARTReadDMA_2:
   \   000034   E8           MOV     A,R0
   \   000035   2401         ADD     A,#0x1
   \   000037   08           INC     R0
   \   000038   E9           MOV     A,R1
   \   000039   3400         ADDC    A,#0x0
   \   00003B   F9           MOV     R1,A
   \                     ??HalUARTReadDMA_0:
   \   00003C   C3           CLR     C
   \   00003D   E8           MOV     A,R0
   \   00003E   9C           SUBB    A,R4
   \   00003F   E9           MOV     A,R1
   \   000040   9D           SUBB    A,R5
   \   000041   5009         JNC     ??HalUARTReadDMA_3
   \   000043   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   65C2         XRL     A,0xc2
   \   00004A   60BF         JZ      ??HalUARTReadDMA_1
   \                     ??HalUARTReadDMA_3:
   \   00004C   C285         CLR     0x80.5
   \   00004E   E8           MOV     A,R0
   \   00004F   FA           MOV     R2,A
   \   000050   E9           MOV     A,R1
   \   000051   FB           MOV     R3,A
   \   000052                REQUIRE ?Subroutine1
   \   000052                REQUIRE U0BAUD
   \   000052                REQUIRE _A_P0
   \   000052                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#dmaCfg + 256
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C3           CLR     C
   \   000005   33           RLC     A
   \   000006   FE           MOV     R6,A
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FF           MOV     R7,A
   \   00000A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   74..         MOV     A,#dmaCfg & 0xff
   \   000002   2E           ADD     A,R6
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(unsigned char *, uint16)
   \                     HalUARTWriteDMA:
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00000C   F8           MOV     R0,A
   \   00000D   EC           MOV     A,R4
   \   00000E   28           ADD     A,R0
   \   00000F   F8           MOV     R0,A
   \   000010   ED           MOV     A,R5
   \   000011   3400         ADDC    A,#0x0
   \   000013   F9           MOV     R1,A
   \   000014   C3           CLR     C
   \   000015   E8           MOV     A,R0
   \   000016   9481         SUBB    A,#-0x7f
   \   000018   E9           MOV     A,R1
   \   000019   9400         SUBB    A,#0x0
   \   00001B   4007         JC      ??HalUARTWriteDMA_0
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   02....       LJMP    ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   000024   E5A8         MOV     A,0xa8
   \   000026   F8           MOV     R0,A
   \   000027   C2AF         CLR     0xa8.7
   \   000029   90....       MOV     DPTR,#dmaCfg + 518
   \   00002C   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00002F   E8           MOV     A,R0
   \   000030   A2E7         MOV     C,0xE0 /* A   */.7
   \   000032   92AF         MOV     0xa8.7,C
   \   000034   7A00         MOV     R2,#0x0
   \   000036   7B00         MOV     R3,#0x0
   \   000038   801A         SJMP    ??CrossCallReturnLabel_4
   \                     ??HalUARTWriteDMA_2:
   \   00003A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00003D   C0E0         PUSH    A
   \   00003F   85....       MOV     ?V0 + 0,?V0 + 5
   \   000042   75..00       MOV     ?V0 + 1,#0x0
   \   000045   7407         MOV     A,#0x7
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?S_SHL
   \   00004C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00004F   D0E0         POP     A
   \   000051   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000054   C3           CLR     C
   \   000055   EA           MOV     A,R2
   \   000056   9C           SUBB    A,R4
   \   000057   EB           MOV     A,R3
   \   000058   9D           SUBB    A,R5
   \   000059   40DF         JC      ??HalUARTWriteDMA_2
   \   00005B   A2AF         MOV     C,0xa8.7
   \   00005D   E4           CLR     A
   \   00005E   33           RLC     A
   \   00005F   F5..         MOV     ?V0 + 0,A
   \   000061   C2AF         CLR     0xa8.7
   \   000063   90....       MOV     DPTR,#dmaCfg + 518
   \   000066   E0           MOVX    A,@DPTR
   \   000067   65..         XRL     A,?V0 + 5
   \   000069   6038         JZ      ??HalUARTWriteDMA_3
   \   00006B   E5..         MOV     A,?V0 + 0
   \   00006D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006F   92AF         MOV     0xa8.7,C
   \   000071   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000074   7A00         MOV     R2,#0x0
   \   000076   7B00         MOV     R3,#0x0
   \   000078   801A         SJMP    ??CrossCallReturnLabel_5
   \                     ??HalUARTWriteDMA_4:
   \   00007A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00007D   C0E0         PUSH    A
   \   00007F   85....       MOV     ?V0 + 0,?V0 + 5
   \   000082   75..00       MOV     ?V0 + 1,#0x0
   \   000085   7407         MOV     A,#0x7
   \   000087   78..         MOV     R0,#?V0 + 0
   \   000089   12....       LCALL   ?S_SHL
   \   00008C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00008F   D0E0         POP     A
   \   000091   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000094   C3           CLR     C
   \   000095   EA           MOV     A,R2
   \   000096   9C           SUBB    A,R4
   \   000097   EB           MOV     A,R3
   \   000098   9D           SUBB    A,R5
   \   000099   40DF         JC      ??HalUARTWriteDMA_4
   \   00009B   A2AF         MOV     C,0xa8.7
   \   00009D   E4           CLR     A
   \   00009E   33           RLC     A
   \   00009F   F5..         MOV     ?V0 + 0,A
   \   0000A1   C2AF         CLR     0xa8.7
   \                     ??HalUARTWriteDMA_3:
   \   0000A3   85..82       MOV     DPL,?V0 + 5
   \   0000A6   A882         MOV     R0,DPL
   \   0000A8   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000AB   E5..         MOV     A,?V0 + 4
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   E8           MOV     A,R0
   \   0000AF   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   7006         JNZ     ??HalUARTWriteDMA_5
   \   0000B5   90....       MOV     DPTR,#dmaCfg + 523
   \   0000B8   7401         MOV     A,#0x1
   \   0000BA   F0           MOVX    @DPTR,A
   \                     ??HalUARTWriteDMA_5:
   \   0000BB   E5..         MOV     A,?V0 + 0
   \   0000BD   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000BF   92AF         MOV     0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   0000C1   7F06         MOV     R7,#0x6
   \   0000C3   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000C6                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV     A,R6
   \   000001   2A           ADD     A,R2
   \   000002   F582         MOV     DPL,A
   \   000004   EF           MOV     A,R7
   \   000005   3B           ADDC    A,R3
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85....       MOV     ?V0 + 2,?V0 + 4
   \   000003   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000005   25..         ADD     A,?V0 + 2
   \   000007   F8           MOV     R0,A
   \   000008   74..         MOV     A,#((dmaCfg + 260) >> 8) & 0xff
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   25..         ADD     A,?V0 + 0
   \   000010   F582         MOV     DPL,A
   \   000012   E9           MOV     A,R1
   \   000013   35..         ADDC    A,?V0 + 1
   \   000015   F583         MOV     DPH,A
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 5,A
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000007   25..         ADD     A,?V0 + 0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#((dmaCfg + 516) >> 8) & 0xff
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   F583         MOV     DPH,A
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 4,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   05..         INC     ?V0 + 4
   \   000003   EA           MOV     A,R2
   \   000004   2401         ADD     A,#0x1
   \   000006   0A           INC     R2
   \   000007   EB           MOV     A,R3
   \   000008   3400         ADDC    A,#0x0
   \   00000A   FB           MOV     R3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   6401         XRL     A,#0x1
   \   000002   F8           MOV     R0,A
   \   000003                REQUIRE ??Subroutine17_0
   \   000003                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#((dmaCfg + 516) >> 8) & 0xff
   \   000007   3400         ADDC    A,#0x0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#dmaCfg + 518
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7E00         MOV     R6,#0x0
   \   000007   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00000A   706B         JNZ     ??HalUARTPollDMA_0
   \   00000C   90....       MOV     DPTR,#dmaCfg + 256
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   \                     ??HalUARTPollDMA_1:
   \   000011   EA           MOV     A,R2
   \   000012   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000015   7010         JNZ     ??HalUARTPollDMA_2
   \   000017   0A           INC     R2
   \   000018   EA           MOV     A,R2
   \   000019   C3           CLR     C
   \   00001A   9480         SUBB    A,#-0x80
   \   00001C   4002         JC      ??HalUARTPollDMA_3
   \   00001E   7A00         MOV     R2,#0x0
   \                     ??HalUARTPollDMA_3:
   \   000020   90....       MOV     DPTR,#dmaCfg + 256
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6A           XRL     A,R2
   \   000025   70EA         JNZ     ??HalUARTPollDMA_1
   \                     ??HalUARTPollDMA_2:
   \   000027   90....       MOV     DPTR,#dmaCfg + 257
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6A           XRL     A,R2
   \   00002C   6011         JZ      ??HalUARTPollDMA_4
   \   00002E   EA           MOV     A,R2
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   7004         JNZ     ??HalUARTPollDMA_5
   \   000034   E595         MOV     A,0x95
   \   000036   A3           INC     DPTR
   \   000037   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_5:
   \   000038   90....       MOV     DPTR,#dmaCfg + 258
   \   00003B   74C6         MOV     A,#-0x3a
   \   00003D   8020         SJMP    ??HalUARTPollDMA_6
   \                     ??HalUARTPollDMA_4:
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   601D         JZ      ??HalUARTPollDMA_7
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   E595         MOV     A,0x95
   \   000048   C3           CLR     C
   \   000049   98           SUBB    A,R0
   \   00004A   F8           MOV     R0,A
   \   00004B   90....       MOV     DPTR,#dmaCfg + 258
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   E8           MOV     A,R0
   \   000051   C3           CLR     C
   \   000052   99           SUBB    A,R1
   \   000053   5009         JNC     ??HalUARTPollDMA_8
   \   000055   E0           MOVX    A,@DPTR
   \   000056   C3           CLR     C
   \   000057   98           SUBB    A,R0
   \   000058   F0           MOVX    @DPTR,A
   \   000059   E595         MOV     A,0x95
   \   00005B   A3           INC     DPTR
   \   00005C   8001         SJMP    ??HalUARTPollDMA_6
   \                     ??HalUARTPollDMA_8:
   \   00005E   E4           CLR     A
   \                     ??HalUARTPollDMA_6:
   \   00005F   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_7:
   \   000060                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000060   12....       LCALL   ??HalUARTRxAvailDMA?relay
   \   000063   8A..         MOV     ?V0 + 0,R2
   \   000065   8B..         MOV     ?V0 + 1,R3
   \   000067   A8..         MOV     R0,?V0 + 0
   \   000069   A9..         MOV     R1,?V0 + 1
   \   00006B   C3           CLR     C
   \   00006C   E8           MOV     A,R0
   \   00006D   9470         SUBB    A,#0x70
   \   00006F   E9           MOV     A,R1
   \   000070   9400         SUBB    A,#0x0
   \   000072   400A         JC      ??HalUARTPollDMA_9
   \   000074   0E           INC     R6
   \   000075   8022         SJMP    ??HalUARTPollDMA_10
   \                     ??HalUARTPollDMA_0:
   \   000077   90....       MOV     DPTR,#dmaCfg + 258
   \   00007A   E4           CLR     A
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   801B         SJMP    ??HalUARTPollDMA_10
   \                     ??HalUARTPollDMA_9:
   \   00007E   C3           CLR     C
   \   00007F   E8           MOV     A,R0
   \   000080   9440         SUBB    A,#0x40
   \   000082   E9           MOV     A,R1
   \   000083   9400         SUBB    A,#0x0
   \   000085   4006         JC      ??HalUARTPollDMA_11
   \   000087   0E           INC     R6
   \   000088   0E           INC     R6
   \   000089   D285         SETB    0x80.5
   \   00008B   800C         SJMP    ??HalUARTPollDMA_10
   \                     ??HalUARTPollDMA_11:
   \   00008D   E8           MOV     A,R0
   \   00008E   49           ORL     A,R1
   \   00008F   6008         JZ      ??HalUARTPollDMA_10
   \   000091   90....       MOV     DPTR,#dmaCfg + 258
   \   000094   E0           MOVX    A,@DPTR
   \   000095   7002         JNZ     ??HalUARTPollDMA_10
   \   000097   7E04         MOV     R6,#0x4
   \                     ??HalUARTPollDMA_10:
   \   000099   90....       MOV     DPTR,#dmaCfg + 519
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   6006         JZ      ??HalUARTPollDMA_12
   \   00009F   E4           CLR     A
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   EE           MOV     A,R6
   \   0000A2   D2E4         SETB    0xE0 /* A   */.4
   \   0000A4   FE           MOV     R6,A
   \                     ??HalUARTPollDMA_12:
   \   0000A5   90....       MOV     DPTR,#dmaCfg + 522
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   6019         JZ      ??HalUARTPollDMA_13
   \   0000AB   E595         MOV     A,0x95
   \   0000AD   F9           MOV     R1,A
   \   0000AE   90....       MOV     DPTR,#dmaCfg + 521
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F8           MOV     R0,A
   \   0000B3   E9           MOV     A,R1
   \   0000B4   C3           CLR     C
   \   0000B5   98           SUBB    A,R0
   \   0000B6   F8           MOV     R0,A
   \   0000B7   90....       MOV     DPTR,#dmaCfg + 520
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   C3           CLR     C
   \   0000BC   98           SUBB    A,R0
   \   0000BD   5005         JNC     ??HalUARTPollDMA_13
   \   0000BF   90....       MOV     DPTR,#dmaCfg + 522
   \   0000C2   E4           CLR     A
   \   0000C3   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_13:
   \   0000C4   90....       MOV     DPTR,#dmaCfg + 523
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   6056         JZ      ??HalUARTPollDMA_14
   \   0000CA   90....       MOV     DPTR,#dmaCfg + 522
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   7050         JNZ     ??HalUARTPollDMA_14
   \   0000D0   A3           INC     DPTR
   \   0000D1   E4           CLR     A
   \   0000D2   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000D5   12....       LCALL   ?S_SHL
   \   0000D8   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000DA   25..         ADD     A,?V0 + 0
   \   0000DC   74..         MOV     A,#((dmaCfg + 260) >> 8) & 0xff
   \   0000DE   35..         ADDC    A,?V0 + 1
   \   0000E0   90....       MOV     DPTR,#dmaCh1234 + 24
   \   0000E3   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000E6   12....       LCALL   ?S_SHL
   \   0000E9   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000EB   25..         ADD     A,?V0 + 0
   \   0000ED   90....       MOV     DPTR,#dmaCh1234 + 25
   \   0000F0   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000F3   90....       MOV     DPTR,#dmaCh1234 + 29
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   90....       MOV     DPTR,#dmaCh1234 + 28
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   54E0         ANL     A,#0xe0
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   90....       MOV     DPTR,#dmaCfg + 518
   \   000101   E0           MOVX    A,@DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   6401         XRL     A,#0x1
   \   000105   F0           MOVX    @DPTR,A
   \   000106   A2AF         MOV     C,0xa8.7
   \   000108   E4           CLR     A
   \   000109   33           RLC     A
   \   00010A   F8           MOV     R0,A
   \   00010B   C2AF         CLR     0xa8.7
   \   00010D   75D610       MOV     0xd6,#0x10
   \                     ??HalUARTPollDMA_15:
   \   000110   00           NOP
   \   000111   E5D6         MOV     A,0xd6
   \   000113   A2E4         MOV     C,0xE0 /* A   */.4
   \   000115   50F9         JNC     ??HalUARTPollDMA_15
   \   000117   75D1EF       MOV     0xd1,#-0x11
   \   00011A   75D710       MOV     0xd7,#0x10
   \   00011D   E8           MOV     A,R0
   \   00011E   8023         SJMP    ??HalUARTPollDMA_16
   \                     ??HalUARTPollDMA_14:
   \   000120   A2AF         MOV     C,0xa8.7
   \   000122   E4           CLR     A
   \   000123   33           RLC     A
   \   000124   FA           MOV     R2,A
   \   000125   C2AF         CLR     0xa8.7
   \   000127   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00012A   6016         JZ      ??HalUARTPollDMA_17
   \   00012C   E5D6         MOV     A,0xd6
   \   00012E   A2E4         MOV     C,0xE0 /* A   */.4
   \   000130   4010         JC      ??HalUARTPollDMA_17
   \   000132   E5D1         MOV     A,0xd1
   \   000134   A2E4         MOV     C,0xE0 /* A   */.4
   \   000136   400A         JC      ??HalUARTPollDMA_17
   \   000138   EA           MOV     A,R2
   \   000139   A2E0         MOV     C,0xE0 /* A   */.0
   \   00013B   92AF         MOV     0xa8.7,C
   \   00013D                ; Setup parameters for call to function HalUARTIsrDMA
   \   00013D   12....       LCALL   ??HalUARTIsrDMA?relay
   \   000140   8005         SJMP    ??HalUARTPollDMA_18
   \                     ??HalUARTPollDMA_17:
   \   000142   EA           MOV     A,R2
   \                     ??HalUARTPollDMA_16:
   \   000143   A2E0         MOV     C,0xE0 /* A   */.0
   \   000145   92AF         MOV     0xa8.7,C
   \                     ??HalUARTPollDMA_18:
   \   000147   EE           MOV     A,R6
   \   000148   6018         JZ      ??HalUARTPollDMA_19
   \   00014A   90....       MOV     DPTR,#dmaCfg + 524
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   F8           MOV     R0,A
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   F9           MOV     R1,A
   \   000152   E8           MOV     A,R0
   \   000153   49           ORL     A,R1
   \   000154   600C         JZ      ??HalUARTPollDMA_19
   \   000156                ; Setup parameters for indirect call
   \   000156   EE           MOV     A,R6
   \   000157   FA           MOV     R2,A
   \   000158   7900         MOV     R1,#0x0
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F583         MOV     DPH,A
   \   00015D   8882         MOV     DPL,R0
   \   00015F   12....       LCALL   ?CALL_IND
   \                     ??HalUARTPollDMA_19:
   \   000162   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000165                REQUIRE U0BAUD
   \   000165                REQUIRE ST0
   \   000165                REQUIRE _A_P0
   \   000165                REQUIRE _A_IEN0
   \   000165                REQUIRE DMAARM
   \   000165                REQUIRE DMAIRQ
   \   000165                REQUIRE DMAREQ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#dmaCfg + 518
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 0,A
   \   000007   75..00       MOV     ?V0 + 1,#0x0
   \   00000A   7407         MOV     A,#0x7
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#dmaCfg + 256
   \   000003   E0           MOVX    A,@DPTR
   \   000004   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#dmaCfg & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   65C2         XRL     A,0xc2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00000B   7038         JNZ     ??HalUARTRxAvailDMA_0
   \   00000D   7800         MOV     R0,#0x0
   \   00000F   7900         MOV     R1,#0x0
   \                     ??HalUARTRxAvailDMA_1:
   \   000011   E8           MOV     A,R0
   \   000012   FC           MOV     R4,A
   \   000013   E9           MOV     A,R1
   \   000014   FD           MOV     R5,A
   \   000015   EC           MOV     A,R4
   \   000016   C3           CLR     C
   \   000017   33           RLC     A
   \   000018   FC           MOV     R4,A
   \   000019   ED           MOV     A,R5
   \   00001A   33           RLC     A
   \   00001B   FD           MOV     R5,A
   \   00001C   74..         MOV     A,#dmaCfg & 0xff
   \   00001E   2C           ADD     A,R4
   \   00001F   F582         MOV     DPL,A
   \   000021   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000023   3D           ADDC    A,R5
   \   000024   F583         MOV     DPH,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   65C2         XRL     A,0xc2
   \   00002A   7008         JNZ     ??HalUARTRxAvailDMA_2
   \   00002C   EA           MOV     A,R2
   \   00002D   2401         ADD     A,#0x1
   \   00002F   0A           INC     R2
   \   000030   EB           MOV     A,R3
   \   000031   3400         ADDC    A,#0x0
   \   000033   FB           MOV     R3,A
   \                     ??HalUARTRxAvailDMA_2:
   \   000034   E8           MOV     A,R0
   \   000035   2401         ADD     A,#0x1
   \   000037   08           INC     R0
   \   000038   E9           MOV     A,R1
   \   000039   3400         ADDC    A,#0x0
   \   00003B   F9           MOV     R1,A
   \   00003C   C3           CLR     C
   \   00003D   E8           MOV     A,R0
   \   00003E   9480         SUBB    A,#-0x80
   \   000040   E9           MOV     A,R1
   \   000041   9400         SUBB    A,#0x0
   \   000043   40CC         JC      ??HalUARTRxAvailDMA_1
   \                     ??HalUARTRxAvailDMA_0:
   \   000045   80..         SJMP    ??Subroutine18_0
   \   000047                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   75D1EF       MOV     0xd1,#-0x11
   \   000007   90....       MOV     DPTR,#dmaCfg + 518
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   90....       MOV     DPTR,#dmaCfg + 519
   \   000013   04           INC     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   E595         MOV     A,0x95
   \   000017   90....       MOV     DPTR,#dmaCfg + 521
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   7401         MOV     A,#0x1
   \   00001E   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000021   6006         JZ      ??HalUARTIsrDMA_0
   \   000023   90....       MOV     DPTR,#dmaCfg + 523
   \   000026   7401         MOV     A,#0x1
   \   000028   F0           MOVX    @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   000029   80..         SJMP    ??Subroutine18_0
   \   00002B                REQUIRE DMAIRQ
   \   00002B                REQUIRE ST0
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"
     82          #endif
     83          #if HAL_UART_USB
     84          #include "_hal_uart_usb.c"
     85          #endif
     86          
     87          /******************************************************************************
     88           * @fn      HalUARTInit
     89           *
     90           * @brief   Initialize the UART
     91           *
     92           * @param   none
     93           *
     94           * @return  none
     95           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          void HalUARTInit(void)
   \                     HalUARTInit:
     97          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     98          #if HAL_UART_DMA
     99            HalUARTInitDMA();
   \   000004                ; Setup parameters for call to function HalUARTInitDMA
   \   000004   12....       LCALL   ??HalUARTInitDMA?relay
    100          #endif
    101          #if HAL_UART_ISR
    102            HalUARTInitISR();
    103          #endif
    104          #if HAL_UART_USB
    105            HalUARTInitUSB();
    106          #endif
    107          }
   \   000007   80..         SJMP    ??Subroutine18_0
    108          
    109          /******************************************************************************
    110           * @fn      HalUARTOpen
    111           *
    112           * @brief   Open a port according tp the configuration specified by parameter.
    113           *
    114           * @param   port   - UART port
    115           *          config - contains configuration information
    116           *
    117           * @return  Status of the function call
    118           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    120          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    121            (void)port;
    122            (void)config;
    123          
    124          #if (HAL_UART_DMA == 1)
    125            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
   \   000006   7003         JNZ     ??HalUARTOpen_0
   \   000008                ; Setup parameters for call to function HalUARTOpenDMA
   \   000008   12....       LCALL   ??HalUARTOpenDMA?relay
    126          #endif
    127          #if (HAL_UART_DMA == 2)
    128            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    129          #endif
    130          #if (HAL_UART_ISR == 1)
    131            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    132          #endif
    133          #if (HAL_UART_ISR == 2)
    134            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    135          #endif
    136          #if (HAL_UART_USB)
    137            HalUARTOpenUSB(config);
    138          #endif
    139            
    140            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   80..         SJMP    ?Subroutine2
    141          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    142          
    143          /*****************************************************************************
    144           * @fn      HalUARTRead
    145           *
    146           * @brief   Read a buffer from the UART
    147           *
    148           * @param   port - USART module designation
    149           *          buf  - valid data buffer at least 'len' bytes in size
    150           *          len  - max length number of bytes to copy to 'buf'
    151           *
    152           * @return  length of buffer that was read
    153           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    154          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    155          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    156            (void)port;
    157            (void)buf;
    158            (void)len;
    159          
    160          #if (HAL_UART_DMA == 1)
    161            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTRead_0
   \   000008                ; Setup parameters for call to function HalUARTReadDMA
   \   000008   12....       LCALL   ??HalUARTReadDMA?relay
   \   00000B   8004         SJMP    ??HalUARTRead_1
    162          #endif
    163          #if (HAL_UART_DMA == 2)
    164            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    165          #endif
    166          #if (HAL_UART_ISR == 1)
    167            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    168          #endif
    169          #if (HAL_UART_ISR == 2)
    170            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    171          #endif
    172          
    173          #if HAL_UART_USB
    174            return HalUARTRx(buf, len);
    175          #else
    176            return 0;
   \                     ??HalUARTRead_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTRead_1:
   \   000011   80..         SJMP    ?Subroutine2
    177          #endif
    178          }
    179          
    180          /******************************************************************************
    181           * @fn      HalUARTWrite
    182           *
    183           * @brief   Write a buffer to the UART.
    184           *
    185           * @param   port - UART port
    186           *          buf  - pointer to the buffer that will be written, not freed
    187           *          len  - length of
    188           *
    189           * @return  length of the buffer that was sent
    190           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    192          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    193            (void)port;
    194            (void)buf;
    195            (void)len;
    196          
    197          #if (HAL_UART_DMA == 1)
    198            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteDMA
   \   000008   12....       LCALL   ??HalUARTWriteDMA?relay
   \   00000B   8004         SJMP    ??HalUARTWrite_1
    199          #endif
    200          #if (HAL_UART_DMA == 2)
    201            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    202          #endif
    203          #if (HAL_UART_ISR == 1)
    204            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    205          #endif
    206          #if (HAL_UART_ISR == 2)
    207            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    208          #endif
    209          
    210          #if HAL_UART_USB
    211            HalUARTTx(buf, len);
    212            return len;
    213          #else
    214            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011                REQUIRE ?Subroutine2
   \   000011                ; // Fall through to label ?Subroutine2
    215          #endif
    216          }
    217          
    218          /******************************************************************************
    219           * @fn      HalUARTSuspend
    220           *
    221           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    222           *
    223           * @param   None
    224           *
    225           * @return  None
    226           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    228          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    229          #if HAL_UART_DMA
    230            HalUARTSuspendDMA();
   \   000000   D285         SETB    0x80.5
   \   000002   5386BF       ANL     0x86,#0xbf
   \   000005   43AB10       ORL     0xab,#0x10
    231          #endif
    232          #if HAL_UART_ISR
    233            HalUARTSuspendISR();
    234          #endif
    235          }
   \   000008   02....       LJMP    ?BRET
   \   00000B                REQUIRE _A_P0
   \   00000B                REQUIRE U0CSR
   \   00000B                REQUIRE P0IEN
    236          
    237          /******************************************************************************
    238           * @fn      HalUARTResume
    239           *
    240           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    241           *
    242           * @param   None
    243           *
    244           * @return  None
    245           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void HalUARTResume( void )
   \                     HalUARTResume:
    247          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    248          #if HAL_UART_DMA
    249            HalUARTResumeDMA();
   \   000000   53ABEF       ANL     0xab,#0xef
   \   000003   43C480       ORL     0xc4,#0x80
   \   000006   438640       ORL     0x86,#0x40
   \   000009   C285         CLR     0x80.5
    250          #endif
    251          #if HAL_UART_ISR
    252            HalUARTResumeISR();
    253          #endif
    254          }
   \   00000B   02....       LJMP    ?BRET
   \   00000E                REQUIRE P0IEN
   \   00000E                REQUIRE U0UCR
   \   00000E                REQUIRE U0CSR
   \   00000E                REQUIRE _A_P0
    255          
    256          /***************************************************************************************************
    257           * @fn      HalUARTPoll
    258           *
    259           * @brief   Poll the UART.
    260           *
    261           * @param   none
    262           *
    263           * @return  none
    264           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void HalUARTPoll(void)
   \                     HalUARTPoll:
    266          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    267          #if HAL_UART_DMA
    268            HalUARTPollDMA();
   \   000004                ; Setup parameters for call to function HalUARTPollDMA
   \   000004   12....       LCALL   ??HalUARTPollDMA?relay
    269          #endif
    270          #if HAL_UART_ISR
    271            HalUARTPollISR();
    272          #endif
    273          #if HAL_UART_USB
    274            HalUARTPollUSB();
    275          #endif
    276          }
   \   000007   80..         SJMP    ??Subroutine18_0
    277          
    278          /**************************************************************************************************
    279           * @fn      Hal_UART_RxBufLen()
    280           *
    281           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    282           *
    283           * @param   port - UART port
    284           *
    285           * @return  length of current Rx Buffer
    286           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    288          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    289            (void)port;
    290          
    291          #if (HAL_UART_DMA == 1)
    292            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
   \   000006   7005         JNZ     ??Hal_UART_RxBufLen_0
   \   000008                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000008   12....       LCALL   ??HalUARTRxAvailDMA?relay
   \   00000B   8004         SJMP    ??Hal_UART_RxBufLen_1
    293          #endif
    294          #if (HAL_UART_DMA == 2)
    295            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    296          #endif
    297          #if (HAL_UART_ISR == 1)
    298            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    299          #endif
    300          #if (HAL_UART_ISR == 2)
    301            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    302          #endif
    303          #if HAL_UART_USB
    304            return HalUARTRxAvailUSB();
    305          #else
    306            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   000011   80..         SJMP    ?Subroutine2
    307          #endif
    308          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTInitDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInitDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTOpenDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpenDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTReadDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTReadDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTWriteDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTPollDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTRxAvailDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTIsrDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTIsrDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTOpen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTWrite?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTSuspend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTResume?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTPoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Hal_UART_RxBufLen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen
    309          
    310          /******************************************************************************
    311          ******************************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     HalUARTInit                2      0      0
       -> HalUARTInitDMA        4      0      0
     HalUARTInitDMA             2      0      0
     HalUARTIsrDMA              2      0     10
     HalUARTOpen                0      0      9
       -> HalUARTOpenDMA        0      0     18
     HalUARTOpenDMA             2      0      9
       -> osal_memset           4      0      0
     HalUARTPoll                2      0      0
       -> HalUARTPollDMA        4      0      0
     HalUARTPollDMA             0      0     10
       -> HalUARTRxAvailDMA     0      0     20
       -> HalUARTIsrDMA         0      0     20
     HalUARTRead                0      0      9
       -> HalUARTReadDMA        0      0     18
     HalUARTReadDMA             1      0     19
     HalUARTResume              0      0      0
     HalUARTRxAvailDMA          2      0     10
     HalUARTSuspend             0      0      0
     HalUARTWrite               0      0      9
       -> HalUARTWriteDMA       0      0     18
     HalUARTWriteDMA            1      0     23
     Hal_UART_RxBufLen          0      0      9
       -> HalUARTRxAvailDMA     0      0     18


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     _A_P0                        1
     U0CSR                        1
     ST0                          1
     _A_IEN0                      1
     P0IEN                        1
     U0BAUD                       1
     U0UCR                        1
     U0GCR                        1
     DMAIRQ                       1
     DMAARM                       1
     DMAREQ                       1
     PERCFG                       1
     ADCCFG                       1
     P0SEL                        1
     P0DIR                        1
     P2DIR                        1
     dmaCfg                     526
     HalUARTInitDMA             109
     ?Subroutine0                 1
     ??Subroutine18_0             7
     HalUARTOpenDMA             193
     HalUARTReadDMA              82
     ?Subroutine1                 5
     ?Subroutine8                14
     ?Subroutine15               11
     HalUARTWriteDMA            198
     ?Subroutine12               10
     ?Subroutine10               24
     ?Subroutine7                21
     ?Subroutine5                12
     ?Subroutine9                 4
     ?Subroutine11                3
     ??Subroutine17_0             4
     ?Subroutine16               12
     ?Subroutine13               10
     HalUARTPollDMA             357
     ?Subroutine4                15
     ?Subroutine6                 8
     ?Subroutine14               21
     ?Subroutine3                 5
     HalUARTRxAvailDMA           71
     HalUARTIsrDMA               43
     HalUARTInit                  9
     HalUARTOpen                 15
     ?Subroutine2                 5
     HalUARTRead                 19
     HalUARTWrite                17
     HalUARTSuspend              11
     HalUARTResume               14
     HalUARTPoll                  9
     Hal_UART_RxBufLen           19
     ??HalUARTInitDMA?relay       6
     ??HalUARTOpenDMA?relay       6
     ??HalUARTReadDMA?relay       6
     ??HalUARTWriteDMA?relay      6
     ??HalUARTPollDMA?relay       6
     ??HalUARTRxAvailDMA?relay    6
     ??HalUARTIsrDMA?relay        6
     ??HalUARTInit?relay          6
     ??HalUARTOpen?relay          6
     ??HalUARTRead?relay          6
     ??HalUARTWrite?relay         6
     ??HalUARTSuspend?relay       6
     ??HalUARTResume?relay        6
     ??HalUARTPoll?relay          6
     ??Hal_UART_RxBufLen?relay    6

 
 1 358 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
    16 bytes in segment SFR_AN
   526 bytes in segment XDATA_Z
 
 1 448 bytes of CODE  memory
     0 bytes of DATA  memory (+ 16 bytes shared)
   526 bytes of XDATA memory

Errors: none
Warnings: none
