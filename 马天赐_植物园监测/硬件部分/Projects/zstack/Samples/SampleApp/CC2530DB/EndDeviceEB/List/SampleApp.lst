###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         11/Dec/2019  10:26:12 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\ #
#                          SampleApp.c                                        #
#    Command line       =  -f C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡ #
#                          ≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg          #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f C:\Users\25814\Desktop\2020 #
#                          ±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\”≤º˛≤ø∑÷\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f #
#                          8wConfig.cfg (-DZIGBEEPRO -DSECURE=0               #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\”≤º˛≤ø∑÷\Projects\zstack\Sa #
#                          mples\SampleApp\Source\SampleApp.c -D              #
#                          NWK_AUTO_POLL -D ZAPP_P1 -D MT_TASK -D             #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º #
#                          ‡≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\EndDeviceEB\List\ -lA                        #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\List\ --diag_suppress Pe001,Pa010    #
#                          -o C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡ #
#                          ≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\EndDeviceEB\Obj\ -e --no_code_motion --debug  #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\25814\Desktop\202 #
#                          0±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\”≤º˛≤ø∑÷\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\ -I                      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\Source\ -I C:\Users\25814\Desktop\2020±œ…Ë\¬Ì #
#                          ÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\ -I      #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\include\ -I        #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\target\CC2530EB\   #
#                          -I C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡ #
#                          ≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\include\ -I     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\high_level\ -I     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\low_level\srf04\   #
#                          -I C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡ #
#                          ≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\low_level\srf04 #
#                          \single_chip\ -I C:\Users\25814\Desktop\2020±œ…Ë\¬ #
#                          ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\mt\   #
#                          -I C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡ #
#                          ≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\osal\include\ -I    #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\saddr\ -I     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\sdata\ -I     #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\af\ -I           #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\nwk\ -I          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sapi\ -I         #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sec\ -I          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sys\ -I          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\zdo\ -I          #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\ -I               #
#                          C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\f8w\ -Ohz         #
#    List file          =  C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\List\SampleApp.lst                   #
#    Object file        =  C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\ #
#                          ”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\EndDeviceEB\Obj\SampleApp.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          #include <stdio.h>
     79          #include <string.h>
     80          
     81          //MY DEVICE
     82          #include "DHT11.h"
     83          #include "gy30.h"
     84          
     85          /*********************************************************************
     86           * MACROS
     87           */
     88           
     89          
     90          #define LED P1_1
     91          #define PUMP P1_3
     92          /*********************************************************************
     93           * CONSTANTS
     94           */
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          /*********************************************************************
    101           * GLOBAL VARIABLES
    102           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    103          uint8 AppTitle[] = "ALD2530 Example"; //”¶”√≥Ã–Ú√˚≥∆ 
   \                     AppTitle:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for AppTitle>`
   \   000010                REQUIRE __INIT_XDATA_I
    104          uint16 ReadGasData(void);
    105          uint16 ReadHumidityData(void);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          void myDelay(){
   \                     myDelay:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    107            for(int j =0;j<100;j++)
   \   000000   7A64         MOV     R2,#0x64
    108              for(int i = 0;i<0xffff;i++)
   \                     ??myDelay_0:
   \   000002   7800         MOV     R0,#0x0
   \   000004   7900         MOV     R1,#0x0
   \                     ??myDelay_1:
   \   000006   E8           MOV     A,R0
   \   000007   2401         ADD     A,#0x1
   \   000009   08           INC     R0
   \   00000A   E9           MOV     A,R1
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   68           XRL     A,R0
   \   000011   7003         JNZ     ??myDelay_2
   \   000013   74FF         MOV     A,#-0x1
   \   000015   69           XRL     A,R1
   \                     ??myDelay_2:
   \   000016   70EE         JNZ     ??myDelay_1
    109              {}
   \   000018   1A           DEC     R2
   \   000019   EA           MOV     A,R2
   \   00001A   70E6         JNZ     ??myDelay_0
    110          }
   \   00001C   02....       LJMP    ?BRET
    111          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    112          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    113          {
    114            SAMPLEAPP_PERIODIC_CLUSTERID,
    115            SAMPLEAPP_FLASH_CLUSTERID
    116          };
    117          

   \                                 In  segment XDATA_ROM_C, align 1
    118          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    119          {
    120            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    121            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    122            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    123            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    124            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    125            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    126            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    127            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    128            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    129          };
    130          
    131          // This is the Endpoint/Interface description.  It is defined here, but
    132          // filled-in in SampleApp_Init().  Another way to go would be to fill
    133          // in the structure here and make it a "const" (in code space).  The
    134          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    136          
    137          /*********************************************************************
    138           * EXTERNAL VARIABLES
    139           */
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL VARIABLES
    147           */
    148          
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151                                    // This variable will be received when
    152                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    164          
    165           
    166          /*********************************************************************
    167           * LOCAL FUNCTIONS
    168           */
    169          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    170          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    171          void SampleApp_SendPeriodicMessage( void );
    172          void SampleApp_SendFlashMessage( uint16 flashTime );
    173          void SampleApp_Send_P2P_Message(void);
    174          /*********************************************************************
    175           * NETWORK LAYER CALLBACKS
    176           */
    177          
    178          /*********************************************************************
    179           * PUBLIC FUNCTIONS
    180           */
    181           
    182          /*********************************************************************
    183           * @fn      SampleApp_Init
    184           *
    185           * @brief   Initialization function for the Generic App Task.
    186           *          This is called during initialization and should contain
    187           *          any application specific initialization (ie. hardware
    188           *          initialization/setup, table initialization, power up
    189           *          notificaiton ... ).
    190           *
    191           * @param   task_id - the ID assigned by OSAL.  This ID should be
    192           *                    used to send messages and set timers.
    193           *
    194           * @return  none
    195           */
    196          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    198          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    199            
    200           
    201            SampleApp_TaskID = task_id;   //osal∑÷≈‰µƒ»ŒŒÒIDÀÊ◊≈”√ªßÃÌº”»ŒŒÒµƒ‘ˆ∂‡∂¯∏ƒ±‰
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    202            SampleApp_NwkState = DEV_INIT;//…Ë±∏◊¥Ã¨…Ë∂®Œ™ZDO≤„÷–∂®“Âµƒ≥ı ºªØ◊¥Ã¨
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    203            SampleApp_TransID = 0;        //œ˚œ¢∑¢ÀÕID£®∂‡œ˚œ¢ ±”–À≥–Ú÷Æ∑÷£©
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    204            //ƒ£øÈ≥ı ºªØ
    205            P0SEL &= ~0x40;                 //…Ë÷√P0.6Œ™∆’Õ®IOø⁄ Õ¡»¿ ™∂»
   \   000016   53F3BF       ANL     0xf3,#0xbf
    206            P0DIR &= ~0x40;                 //P0.6∂®“ÂŒ™ ‰»Îø⁄
   \   000019   53FDBF       ANL     0xfd,#0xbf
    207            P1DIR |=0X02;//LED
   \   00001C   43FE02       ORL     0xfe,#0x2
    208            P1DIR |=0X08;//ÀÆ±√ºÃµÁ∆˜
   \   00001F   43FE08       ORL     0xfe,#0x8
    209            LIGHT_INIT();
   \   000022   53F3CF       ANL     0xf3,#0xcf
   \   000025   43FD30       ORL     0xfd,#0x30
   \   000028   D285         SETB    0x80.5
   \   00002A   D284         SETB    0x80.4
    210            //¥Æø⁄≈‰÷√
    211            MT_UartInit();
   \   00002C                ; Setup parameters for call to function MT_UartInit
   \   00002C   12....       LCALL   ??MT_UartInit?relay
    212            MT_UartRegisterTaskID(task_id);  
   \   00002F                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00002F   EE           MOV     A,R6
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   ??MT_UartRegisterTaskID?relay
    213            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n")); 
   \   000034                ; Setup parameters for call to function HalUARTWrite
   \   000034   7C0D         MOV     R4,#0xd
   \   000036   7D00         MOV     R5,#0x0
   \   000038   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   00003A   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   12....       LCALL   ??HalUARTWrite?relay
    214            
    215          
    216            // Device hardware initialization can be added here or in main() (Zmain.c).
    217            // If the hardware is application specific - add it here.
    218            // If the hardware is other parts of the device add it in main().
    219          
    220          #if defined ( BUILD_ALL_DEVICES )
    221            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    222            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    223            // together - if they are - we will start up a coordinator. Otherwise,
    224            // the device will start as a router.
    225            if ( readCoordinatorJumper() )
    226              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    227            else
    228              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    229          #endif // BUILD_ALL_DEVICES
    230          
    231          //∏√∂Œµƒ“‚Àº «£¨»Áπ˚…Ë÷√¡ÀHOLD_AUTO_START∫Í∂®“Â£¨Ω´ª·‘⁄∆Ù∂Ø–æ∆¨µƒ ±∫Úª·‘›Õ£∆Ù∂Ø
    232          //¡˜≥Ã£¨÷ª”–Õ‚≤ø¥•∑¢“‘∫Û≤≈ª·∆Ù∂Ø–æ∆¨°£∆‰ µæÕ «–Ë“™“ª∏ˆ∞¥≈•¥•∑¢À¸µƒ∆Ù∂Ø¡˜≥Ã°£  
    233          #if defined ( HOLD_AUTO_START )
    234            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    235            //  from starting the device and wait for the application to
    236            //  start the device.
    237            ZDOInitDevice(0);
    238          #endif
    239          
    240            // Setup for the periodic message's destination address …Ë÷√∑¢ÀÕ ˝æ›µƒ∑Ω Ω∫Õƒøµƒµÿ÷∑—∞÷∑ƒ£ Ω
    241            // Broadcast to everyone ∑¢ÀÕƒ£ Ω:π„≤•∑¢ÀÕ
    242            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//π„≤•
   \   000041   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000044   740F         MOV     A,#0xf
   \   000046   F0           MOVX    @DPTR,A
    243            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000047   A3           INC     DPTR
   \   000048   7414         MOV     A,#0x14
   \   00004A   F0           MOVX    @DPTR,A
    244            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//÷∏∂®ƒøµƒÕ¯¬Áµÿ÷∑Œ™π„≤•µÿ÷∑
   \   00004B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00004E   74FF         MOV     A,#-0x1
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   F0           MOVX    @DPTR,A
    245          
    246            // Setup for the flash command's destination address - Group 1 ◊È≤•∑¢ÀÕ
    247            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //◊È—∞÷∑
   \   000053   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000056   7401         MOV     A,#0x1
   \   000058   F0           MOVX    @DPTR,A
    248            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000059   A3           INC     DPTR
   \   00005A   7414         MOV     A,#0x14
   \   00005C   F0           MOVX    @DPTR,A
    249            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//◊È∫≈0x0001
   \   00005D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000060   7401         MOV     A,#0x1
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
    250          
    251            // Fill out the endpoint description. ∂®“Â±æ…Ë±∏”√¿¥Õ®–≈µƒAPS≤„∂Àµ„√Ë ˆ∑˚
    252            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //÷∏∂®∂Àµ„∫≈
   \   000066   90....       MOV     DPTR,#SampleApp_epDesc
   \   000069   7414         MOV     A,#0x14
   \   00006B   F0           MOVX    @DPTR,A
    253            SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp √Ë ˆ∑˚µƒ»ŒŒÒID
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000073   F0           MOVX    @DPTR,A
    254            SampleApp_epDesc.simpleDesc
    255                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleAppºÚµ•√Ë ˆ∑˚
   \   000074   A3           INC     DPTR
   \   000075   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00007B   F0           MOVX    @DPTR,A
    256            SampleApp_epDesc.latencyReq = noLatencyReqs;    //—” ±≤ﬂ¬‘
   \   00007C   A3           INC     DPTR
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
    257          
    258            // Register the endpoint description with the AF
    259            afRegister( &SampleApp_epDesc );    //œÚAF≤„µ«º«√Ë ˆ∑˚
   \   00007F                ; Setup parameters for call to function afRegister
   \   00007F   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000081   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000083   12....       LCALL   ??afRegister?relay
    260          
    261            // Register for all key events - This app will handle all key events
    262            RegisterForKeys( SampleApp_TaskID ); // µ«º«À˘”–µƒ∞¥º¸ ¬º˛
   \   000086                ; Setup parameters for call to function RegisterForKeys
   \   000086   90....       MOV     DPTR,#SampleApp_TaskID
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   ??RegisterForKeys?relay
    263          
    264            // By default, all devices start out in Group 1
    265            SampleApp_Group.ID = 0x0001;//◊È∫≈
   \   00008E   90....       MOV     DPTR,#SampleApp_Group
   \   000091   7401         MOV     A,#0x1
   \   000093   F0           MOVX    @DPTR,A
   \   000094   A3           INC     DPTR
   \   000095   E4           CLR     A
   \   000096   F0           MOVX    @DPTR,A
    266            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//…Ë∂®◊È√˚
   \   000097                ; Setup parameters for call to function osal_memcpy
   \   000097   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00009A   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00009D   F5..         MOV     ?V0 + 2,A
   \   00009F   78..         MOV     R0,#?V0 + 0
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A4   7C07         MOV     R4,#0x7
   \   0000A6   7D00         MOV     R5,#0x0
   \   0000A8   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000AA   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000AC   12....       LCALL   ??osal_memcpy?relay
   \   0000AF   7403         MOV     A,#0x3
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
    267            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//∞—∏√◊Èµ«º«ÃÌº”µΩAPS÷–
   \   0000B4                ; Setup parameters for call to function aps_AddGroup
   \   0000B4   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B6   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B8   7914         MOV     R1,#0x14
   \   0000BA   12....       LCALL   ??aps_AddGroup?relay
    268          
    269          #if defined ( LCD_SUPPORTED )
    270            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //»Áπ˚÷ß≥÷LCD£¨œ‘ æÃ· æ–≈œ¢
   \   0000BD                ; Setup parameters for call to function HalLcdWriteString
   \   0000BD   7900         MOV     R1,#0x0
   \   0000BF   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000C1   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000C3   12....       LCALL   ??HalLcdWriteString?relay
    271          #endif
    272          }
   \   0000C6                REQUIRE ?Subroutine1
   \   0000C6                REQUIRE P0SEL
   \   0000C6                REQUIRE P0DIR
   \   0000C6                REQUIRE P1DIR
   \   0000C6                REQUIRE _A_P0
   \   0000C6                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    273          
    274          /*********************************************************************
    275           * @fn      SampleApp_ProcessEvent
    276           *
    277           * @brief   Generic Application Task event processor.  This function
    278           *          is called to process all events for the task.  Events
    279           *          include timers, messages and any other user defined events.
    280           *
    281           * @param   task_id  - The OSAL assigned task ID.
    282           * @param   events - events to process.  This is a bit map and can
    283           *                   contain more than one event.
    284           *
    285           * @return  none
    286           */
    287          //”√ªß”¶”√»ŒŒÒµƒ ¬º˛¥¶¿Ì∫Ø ˝

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    288          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    289          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    290            afIncomingMSGPacket_t *MSGpkt;
    291            (void)task_id;  // Intentionally unreferenced parameter
    292          
    293            if ( events & SYS_EVENT_MSG ) //Ω” ’œµÕ≥œ˚œ¢‘ŸΩ¯––≈–∂œ
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    294            {
    295              //Ω” ’ Ù”⁄±æ”¶”√»ŒŒÒSampleAppµƒœ˚œ¢£¨“‘SampleApp_TaskID±Íº«
    296              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    297              while ( MSGpkt )
    298              {
    299                switch ( MSGpkt->hdr.event )
    300                {
    301                  // Received when a key is pressed
    302                  case KEY_CHANGE://∞¥º¸ ¬º˛
    303                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    304                    break;
    305          
    306                  // Received when a messages is received (OTA) for this endpoint
    307                case AF_INCOMING_MSG_CMD://Ω” ’ ˝æ› ¬º˛,µ˜”√∫Ø ˝AF_DataRequest()Ω” ’ ˝æ›
    308                    SampleApp_MessageMSGCB( MSGpkt );//µ˜”√ªÿµ˜∫Ø ˝∂‘ ’µΩµƒ ˝æ›Ω¯––¥¶¿Ì
    309                    break;
    310          
    311                  // Received whenever the device changes state in the network
    312                  case ZDO_STATE_CHANGE:
    313                    //÷ª“™Õ¯¬Á◊¥Ã¨∑¢…˙∏ƒ±‰£¨æÕÕ®π˝ZDO_STATE_CHANGE ¬º˛Õ®÷™À˘”–µƒ»ŒŒÒ°£
    314                    //Õ¨ ±ÕÍ≥…∂‘–≠µ˜∆˜£¨¬∑”…∆˜£¨÷’∂Àµƒ…Ë÷√
    315                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    316                    //if ( (SampleApp_NwkState == DEV_ZB_COORD)// µ—È÷––≠µ˜∆˜÷ªΩ” ’ ˝æ›À˘“‘»°œ˚∑¢ÀÕ ¬º˛
    317                    if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    318                    {
    319                      // Start sending the periodic message in a regular interval.
    320                      //’‚∏ˆ∂® ±∆˜÷ª «Œ™∑¢ÀÕ÷‹∆⁄–≈œ¢ø™∆Ùµƒ£¨…Ë±∏∆Ù∂Ø≥ı ºªØ∫Û¥”’‚¿Ôø™ º
    321                      //¥•∑¢µ⁄“ª∏ˆ÷‹∆⁄–≈œ¢µƒ∑¢ÀÕ£¨»ª∫Û÷‹∂¯∏¥ ºœ¬»•
    322                      osal_start_timerEx( SampleApp_TaskID,
    323                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    324                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    325                     
    326                    }
    327                    else
    328                    {
    329                        
    330                    }
    331                    break;
    332          
    333                  default:
    334                    break;
    335                }
    336          
    337                // Release the memory  ¬º˛¥¶¿ÌÕÍ¡À£¨ Õ∑≈œ˚œ¢’º”√µƒƒ⁄¥Ê
    338                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    339             
    340                // Next - if one is available ÷∏’Î÷∏œÚœ¬“ª∏ˆ∑≈‘⁄ª∫≥Â«¯µƒ¥˝¥¶¿Ìµƒ ¬º˛£¨
    341                //∑µªÿwhile ( MSGpkt )÷ÿ–¬¥¶¿Ì ¬º˛£¨÷±µΩª∫≥Â«¯√ª”–µ»¥˝¥¶¿Ì ¬º˛Œ™÷π
    342                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    343              }
    344          
    345              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    346              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    347            }
    348          
    349            // Send a message out - This event is generated by a timer
    350            //  (setup in SampleApp_Init()).
    351            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    352            {
    353              // Send the periodic message ¥¶¿Ì÷‹∆⁄–‘ ¬º˛£¨
    354              //¿˚”√SampleApp_SendPeriodicMessage()¥¶¿ÌÕÍµ±«∞µƒ÷‹∆⁄–‘ ¬º˛£¨»ª∫Û∆Ù∂Ø∂® ±∆˜
    355              //ø™∆Ùœ¬“ª∏ˆ÷‹∆⁄–‘ ¬«È£¨’‚—˘“ª÷÷—≠ª∑œ¬»•£¨“≤º¥ «…œ√ÊÀµµƒ÷‹∆⁄–‘ ¬º˛¡À£¨
    356              //ø…“‘◊ˆŒ™¥´∏–∆˜∂® ±≤…ºØ°¢…œ¥´»ŒŒÒ
    357              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    358              
    359              // Setup to send message again in normal period (+ a little jitter)
    360              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    361                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24E8         ADD     A,#-0x18
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3403         ADDC    A,#0x3
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    362          
    363              // return unprocessed events ∑µªÿŒ¥¥¶¿Ìµƒ ¬º˛
    364              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    365            }
    366          
    367            // Discard unknown events
    368            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    369          }
    370          
    371          /*********************************************************************
    372           * Event Generation Functions
    373           */
    374          /*********************************************************************
    375           * @fn      SampleApp_HandleKeys
    376           *
    377           * @brief   Handles all key events for this device.
    378           *
    379           * @param   shift - true if in shift/alt.
    380           * @param   keys - bit field for key events. Valid entries:
    381           *                 HAL_KEY_SW_2
    382           *                 HAL_KEY_SW_1
    383           *
    384           * @return  none
    385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    386          void SampleApp_HandleKeys( uint8 shift, uint8 keys )  
   \                     SampleApp_HandleKeys:
    387          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    388            (void)shift;  // Intentionally unreferenced parameter
    389            
    390            if ( keys & HAL_KEY_SW_1 )
   \   000006   A2E0         MOV     C,0xE0 /* A   */.0
   \   000008   5007         JNC     ??SampleApp_HandleKeys_0
    391            {
    392              /* This key sends the Flash Command is sent to Group 1.
    393               * This device will not receive the Flash Command from this
    394               * device (even if it belongs to group 1).
    395               */
    396             SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000A                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000A   7AE8         MOV     R2,#-0x18
   \   00000C   7B03         MOV     R3,#0x3
   \   00000E   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    397             
    398              
    399            
    400            }
    401          
    402            if ( keys & HAL_KEY_SW_6 )
    403            {
    404              /* The Flashr Command is sent to Group 1.
    405               * This key toggles this device in and out of group 1.
    406               * If this device doesn't belong to group 1, this application
    407               * will not receive the Flash command sent to group 1.
    408               */
    409            
    410             /*
    411              aps_Group_t *grp;
    412              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    413              if ( grp )
    414              {
    415                // Remove from the group
    416                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    417              }
    418              else
    419              {
    420                // Add to the flash group
    421                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    422              }
    423             */
    424            }
    425          }
   \                     ??SampleApp_HandleKeys_0:
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
    426          
    427          /*********************************************************************
    428           * LOCAL FUNCTIONS
    429           */
    430          
    431          /*********************************************************************
    432           * @fn      SampleApp_MessageMSGCB
    433           *
    434           * @brief   Data message processor callback.  This function processes
    435           *          any incoming data - probably from other devices.  So, based
    436           *          on cluster ID, perform the intended action.
    437           *
    438           * @param   none
    439           *
    440           * @return  none
    441           */
    442          //Ω” ’ ˝æ›£¨≤Œ ˝Œ™Ω” ’µΩµƒ ˝æ›

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    443          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    444          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    445            uint16 flashTime;
    446            unsigned short len = 6+3+4+1;
    447            byte buf[6+3+4+1]={0}; 
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00001E   740E         MOV     A,#0xe
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    448            
    449            switch ( pkt->clusterId ) //≈–∂œ¥ÿID
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 1,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000037   0100         DW        1
   \   000039   01           DB        1
   \   00003A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00003C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00003E   ....         DW        ??SampleApp_MessageMSGCB_2
    450            {
    451              case SAMPLEAPP_PERIODIC_CLUSTERID: // ’µΩπ„≤• ˝æ›
    452                osal_memset(buf, 0 , len);
   \                     ??SampleApp_MessageMSGCB_1:
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C0E         MOV     R4,#0xe
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7900         MOV     R1,#0x0
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??osal_memset?relay
    453                osal_memcpy(buf, pkt->cmd.Data, len);
   \   000053                ; Setup parameters for call to function osal_memcpy
   \   000053   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000056   F5..         MOV     ?V0 + 0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V0 + 1,A
   \   00005C   75..00       MOV     ?V0 + 2,#0x0
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000064   7C0E         MOV     R4,#0xe
   \   000066   7D00         MOV     R5,#0x0
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   \   000071   12....       LCALL   ??osal_memcpy?relay
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    454                HalUARTWrite(0,buf, len);
   \   000079                ; Setup parameters for call to function HalUARTWrite
   \   000079   7C0E         MOV     R4,#0xe
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   7900         MOV     R1,#0x0
   \   000089   12....       LCALL   ??HalUARTWrite?relay
    455                break;
   \   00008C   8033         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   00008E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000091   F8           MOV     R0,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095                ; Setup parameters for call to function HalLedBlink
   \   000095   8882         MOV     DPL,R0
   \   000097   8983         MOV     DPH,R1
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FA           MOV     R2,A
   \   00009C   8882         MOV     DPL,R0
   \   00009E   8983         MOV     DPH,R1
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   EA           MOV     A,R2
   \   0000A5   2400         ADD     A,#0x0
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   E4           CLR     A
   \   0000AA   39           ADDC    A,R1
   \   0000AB   F5..         MOV     ?V0 + 1,A
   \   0000AD   7402         MOV     A,#0x2
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?US_SHR
   \   0000B4   AC..         MOV     R4,?V0 + 0
   \   0000B6   AD..         MOV     R5,?V0 + 1
   \   0000B8   7B32         MOV     R3,#0x32
   \   0000BA   7A04         MOV     R2,#0x4
   \   0000BC   7908         MOV     R1,#0x8
    456          
    457              case SAMPLEAPP_FLASH_CLUSTERID: // ’µΩ◊È≤• ˝æ›  
    458                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    459                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   0000BE   12....       LCALL   ??HalLedBlink?relay
    460                break;
    461            case SAMPLEAPP_P2P_CLUSTERID:
    462           
    463              break;
    464            }
    465          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000C1   740E         MOV     A,#0xe
   \   0000C3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C6   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    466          
    467          /*********************************************************************
    468           * @fn      SampleApp_SendPeriodicMessage
    469           *
    470           * @brief   Send the periodic message.
    471           *
    472           * @param   none
    473           *
    474           * @return  none
    475           */
    476          //∑÷Œˆ∑¢ÀÕ÷‹∆⁄–≈œ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    478          { 
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    479            
    480          #ifndef ZDO_COORDINATOR 
    481            //ªÒµ√µƒ ˝æ›Õ®π˝¥Æø⁄ ‰≥ˆµΩµÁƒ‘œ‘ æ  
    482            char str[6+3+4+1]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>_1`
   \   00000D   C082         PUSH    DPL
   \   00000F   7406         MOV     A,#0x6
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   00001B   D082         POP     DPL
   \   00001D   740E         MOV     A,#0xe
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    483            //ªÒ»°Œ¬ ™∂»
    484            unsigned char temp_humi[6]={0};
   \   000022   90....       MOV     DPTR,#`?<Constant {0}>_2`
   \   000025   C082         PUSH    DPL
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AC82         MOV     R4,DPL
   \   00002F   AD83         MOV     R5,DPH
   \   000031   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   000034   D082         POP     DPL
   \   000036   7406         MOV     A,#0x6
   \   000038   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    485            strcpy(temp_humi,DHT11());
                          ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

    strcpy(temp_humi,DHT11());
                     ^
"C:\Users\25814\Desktop\2020±œ…Ë\¬ÌÃÏ¥Õ_÷≤ŒÔ‘∞º‡≤‚\”≤º˛≤ø∑÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",485  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   00003B                ; Setup parameters for call to function strcpy
   \   00003B                ; Setup parameters for call to function DHT11
   \   00003B   12....       LCALL   ??DHT11?relay
   \   00003E   EA           MOV     A,R2
   \   00003F   FC           MOV     R4,A
   \   000040   EB           MOV     A,R3
   \   000041   FD           MOV     R5,A
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   12....       LCALL   ??strcpy?relay
    486           //ªÒ»°Õ¡»¿ ™∂»
    487            uint16 humi = ReadHumidityData();
   \   00004F                ; Setup parameters for call to function ReadHumidityData
   \   00004F   12....       LCALL   ??ReadHumidityData?relay
   \   000052   8A..         MOV     ?V0 + 0,R2
   \   000054   8B..         MOV     ?V0 + 1,R3
    488            //ªÒ»°π‚«ø
    489            uint16 lt = get_light();
   \   000056                ; Setup parameters for call to function get_light
   \   000056   12....       LCALL   ??get_light?relay
   \   000059   8A..         MOV     ?V0 + 2,R2
   \   00005B   8B..         MOV     ?V0 + 3,R3
    490            
    491            LED = lt<400?1:0;
   \   00005D   C3           CLR     C
   \   00005E   EA           MOV     A,R2
   \   00005F   9490         SUBB    A,#-0x70
   \   000061   EB           MOV     A,R3
   \   000062   9401         SUBB    A,#0x1
   \   000064   5004         JNC     ??SampleApp_SendPeriodicMessage_0
   \   000066   7401         MOV     A,#0x1
   \   000068   8001         SJMP    ??SampleApp_SendPeriodicMessage_1
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   00006A   E4           CLR     A
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   00006B   C3           CLR     C
   \   00006C   33           RLC     A
   \   00006D   F8           MOV     R0,A
   \   00006E   E590         MOV     A,0x90
   \   000070   54FD         ANL     A,#0xfd
   \   000072   48           ORL     A,R0
   \   000073   F590         MOV     0x90,A
    492            PUMP = humi>110?1:0;
   \   000075   C3           CLR     C
   \   000076   E5..         MOV     A,?V0 + 0
   \   000078   946F         SUBB    A,#0x6f
   \   00007A   E5..         MOV     A,?V0 + 1
   \   00007C   9400         SUBB    A,#0x0
   \   00007E   4004         JC      ??SampleApp_SendPeriodicMessage_2
   \   000080   7401         MOV     A,#0x1
   \   000082   8001         SJMP    ??SampleApp_SendPeriodicMessage_3
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   000084   E4           CLR     A
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   000085   33           RLC     A
   \   000086   33           RLC     A
   \   000087   33           RLC     A
   \   000088   54F8         ANL     A,#0xf8
   \   00008A   F8           MOV     R0,A
   \   00008B   E590         MOV     A,0x90
   \   00008D   54F7         ANL     A,#0xf7
   \   00008F   48           ORL     A,R0
   \   000090   F590         MOV     0x90,A
    493            sprintf(str,"%s%3d%4d\n",temp_humi,humi,lt);
   \   000092                ; Setup parameters for call to function sprintf
   \   000092   78..         MOV     R0,#?V0 + 2
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000097   78..         MOV     R0,#?V0 + 0
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   7404         MOV     A,#0x4
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   8582..       MOV     ?V0 + 0,DPL
   \   0000A4   8583..       MOV     ?V0 + 1,DPH
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   7C..         MOV     R4,#`?<Constant "%s%3d%4d\\n">` & 0xff
   \   0000AE   7D..         MOV     R5,#(`?<Constant "%s%3d%4d\\n">` >> 8) & 0xff
   \   0000B0   740C         MOV     A,#0xc
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   AA82         MOV     R2,DPL
   \   0000B7   AB83         MOV     R3,DPH
   \   0000B9   12....       LCALL   ??sprintf?relay
   \   0000BC   7406         MOV     A,#0x6
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
    494            HalUARTWrite(0,str,sizeof(str));
                                  ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000C1                ; Setup parameters for call to function HalUARTWrite
   \   0000C1   7C0E         MOV     R4,#0xe
   \   0000C3   7D00         MOV     R5,#0x0
   \   0000C5   7406         MOV     A,#0x6
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   AA82         MOV     R2,DPL
   \   0000CC   AB83         MOV     R3,DPH
   \   0000CE   7900         MOV     R1,#0x0
   \   0000D0   12....       LCALL   ??HalUARTWrite?relay
    495          
    496             // µ˜”√AF_DataRequestΩ´ ˝æ›Œﬁœﬂπ„≤•≥ˆ»•
    497            if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//∑¢ÀÕƒøµƒµÿ÷∑£´∂Àµ„µÿ÷∑∫Õ¥´ÀÕƒ£ Ω
    498                                 &SampleApp_epDesc,//‘¥(¥∏¥ªÚ»∑»œ)÷’∂Àµƒ√Ë ˆ£®±»»Á≤Ÿ◊˜œµÕ≥÷–»ŒŒÒIDµ»£©‘¥EP
    499                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±ªProfile÷∏∂®µƒ”––ßµƒºØ»∫∫≈
    500                                 sizeof(str),       //∑¢ÀÕ ˝æ›≥§∂»
    501                                 (uchar*)str,// ∑¢ÀÕ ˝æ›ª∫≥Â«¯
    502                                 &SampleApp_TransID,     // »ŒŒÒID∫≈
    503                                 AF_DISCV_ROUTE,      // ”––ßŒª—⁄¬Îµƒ∑¢ÀÕ—°œÓ
    504                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //¥´ÀÕÃ¯ ˝£¨Õ®≥£…Ë÷√Œ™AF_DEFAULT_RADIUS
   \   0000D3                ; Setup parameters for call to function AF_DataRequest
   \   0000D3   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000D6   78..         MOV     R0,#?V0 + 0
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DB   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0000DE   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0000E1   78..         MOV     R0,#?V0 + 0
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   7409         MOV     A,#0x9
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   8582..       MOV     ?V0 + 0,DPL
   \   0000EE   8583..       MOV     ?V0 + 1,DPH
   \   0000F1   78..         MOV     R0,#?V0 + 0
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F6   75..0E       MOV     ?V0 + 0,#0xe
   \   0000F9   75..00       MOV     ?V0 + 1,#0x0
   \   0000FC   78..         MOV     R0,#?V0 + 0
   \   0000FE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000101   75..01       MOV     ?V0 + 0,#0x1
   \   000104   78..         MOV     R0,#?V0 + 0
   \   000106   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000109   7920         MOV     R1,#0x20
   \   00010B   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00010D   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00010F   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000111   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000113   12....       LCALL   ??AF_DataRequest?relay
   \   000116   7409         MOV     A,#0x9
   \   000118   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011B   E9           MOV     A,R1
   \   00011C   6007         JZ      ??SampleApp_SendPeriodicMessage_4
    505            {
    506            }
    507            else
    508            {
    509              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   00011E                ; Setup parameters for call to function HalLedSet
   \   00011E   7A01         MOV     R2,#0x1
   \   000120   7901         MOV     R1,#0x1
   \   000122   12....       LCALL   ??HalLedSet?relay
    510              // Error occurred in request to send.
    511            }
    512          #elif defined ZDO_COORDINATOR
    513            //–≠µ˜∆˜∑¢ÀÕ
    514            
    515              
    516            
    517          
    518          #endif 
    519            
    520           
    521          }
   \                     ??SampleApp_SendPeriodicMessage_4:
   \   000125   7414         MOV     A,#0x14
   \   000127   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012A   7F06         MOV     R7,#0x6
   \   00012C   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00012F                REQUIRE _A_P1
    522          
    523          /*********************************************************************
    524           * @fn      SampleApp_SendFlashMessage
    525           *
    526           * @brief   Send the flash message to group 1.
    527           *
    528           * @param   flashTime - in milliseconds
    529           *
    530           * @return  none
    531           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    532          void SampleApp_SendFlashMessage( uint16 flashTime )  
   \                     SampleApp_SendFlashMessage:
    533          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    534            uint8 buffer[3];
    535            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    536            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    537            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    538          
    539            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    540                                 SAMPLEAPP_FLASH_CLUSTERID,
    541                                 3,
    542                                 buffer,
    543                                 &SampleApp_TransID,
    544                                 AF_DISCV_ROUTE,
    545                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    546            {
    547            }
    548            else
    549            {
    550              // Error occurred in request to send.
    551            }
    552          }
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   7F02         MOV     R7,#0x2
   \   000078   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    553          void SampleApp_Send_P2P_Message(void){
   \                     SampleApp_Send_P2P_Message:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    554             
    555          }
   \   000000   02....       LJMP    ?BRET
    556          /*********************************************************************
    557          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    558           uint16 ReadGasData( void )
   \                     ReadGasData:
    559          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    560            uint16 reading = 0;
    561            
    562            /* Enable channel */
    563            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    564            
    565            /* writing to this register starts the extra conversion */
    566            ADCCON3 = 0x86;// AVDD5 “˝Ω≈  00£∫ 64 ≥È»°¬ (7 ŒªENOB)  0110£∫ AIN6
   \   000003   75B686       MOV     0xb6,#-0x7a
    567            
    568            /* Wait for the conversion to be done */
    569            while (!(ADCCON1 & 0x80));
   \                     ??ReadGasData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadGasData_0
    570            
    571            /* Disable channel after done conversion */
    572            ADCCFG &= (0x40 ^ 0xFF); //∞¥Œª“ÏªÚ°£»Á1010^1111=0101£®∂˛Ω¯÷∆£©
   \   00000C   53F2BF       ANL     0xf2,#0xbf
    573            
    574            /* Read the result */
    575            reading = ADCL;
   \   00000F                REQUIRE ?Subroutine0
   \   00000F                REQUIRE ADCCFG
   \   00000F                REQUIRE ADCCON3
   \   00000F                REQUIRE ADCCON1
   \   00000F                REQUIRE ADCL
   \   00000F                REQUIRE ADCH
   \   00000F                ; // Fall through to label ?Subroutine0
    576            reading |= (int16) (ADCH << 8); 
    577            
    578            reading >>= 8;
    579            
    580            return (reading);
    581          } 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E5BA         MOV     A,0xba
   \   000002   E5BB         MOV     A,0xbb
   \   000004   FA           MOV     R2,A
   \   000005   E4           CLR     A
   \   000006   FB           MOV     R3,A
   \   000007   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    582          uint16 ReadHumidityData( void )
   \                     ReadHumidityData:
    583          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    584            uint16 reading = 0;
    585            
    586            P0DIR &= ~0x40;  // …Ë÷√P0.6Œ™ ‰»Î∑Ω Ω
   \   000000   53FDBF       ANL     0xfd,#0xbf
    587            asm("NOP");asm("NOP");
   \   000003   00           NOP
   \   000004   00           NOP
    588            
    589            /* Clear ADC interrupt flag */
    590            ADCIF = 0;
   \   000005   C28D         CLR     0x88.5
    591            
    592            //ADCCON3 = (0x80 | HAL_ADC_DEC_064 | HAL_ADC_CHANNEL_5);
    593            ADCCON3 = (0x80 | 0x00 | 0x06);
   \   000007   75B686       MOV     0xb6,#-0x7a
    594            /* Wait for the conversion to finish */
    595            while ( !ADCIF );
   \                     ??ReadHumidityData_0:
   \   00000A   A28D         MOV     C,0x88.5
   \   00000C   50FC         JNC     ??ReadHumidityData_0
    596            
    597            asm("NOP");asm("NOP");
   \   00000E   00           NOP
   \   00000F   00           NOP
    598            
    599            /* Read the result */
    600            reading = ADCL;
   \   000010   80..         SJMP    ?Subroutine0
   \   000012                REQUIRE P0DIR
   \   000012                REQUIRE _A_TCON
   \   000012                REQUIRE ADCCON3
   \   000012                REQUIRE ADCL
   \   000012                REQUIRE ADCH
    601            reading |= (int16) (ADCH << 8);
    602            reading >>= 8;
    603            
    604            return reading;
    605          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 Example"
   \            35333020
   \            4578616D
   \            706C6500

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??myDelay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    myDelay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadHumidityData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadHumidityData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s%3d%4d\\n">`:
   \   000000   25732533     DB "%s%3d%4d\012"
   \            64253464
   \            0A00    

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadGasData                        0      0      0
     ReadHumidityData                   0      0     34
     SampleApp_HandleKeys               0      0     21
       -> SampleApp_SendFlashMessage
                                        0      0     18
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0     40
       -> osal_memset                   0      0     50
       -> osal_memcpy                   0      0     56
       -> HalUARTWrite                  0      0     50
       -> HalLedBlink                   0      0     50
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     31
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     55
       -> DHT11                         0      0     68
       -> strcpy                        0      0     68
       -> ReadHumidityData              0      0     68
       -> get_light                     0      0     68
       -> sprintf                       0      0     80
       -> HalUARTWrite                  0      0     68
       -> AF_DataRequest                0      0     86
       -> HalLedSet                     0      0     68
     SampleApp_Send_P2P_Message         0      0      0
     myDelay                            0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_TCON                                  1
     _A_P1                                    1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     P0DIR                                    1
     P1DIR                                    1
     AppTitle                                16
     myDelay                                 31
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         198
     ?Subroutine1                             5
     SampleApp_ProcessEvent                 176
     SampleApp_HandleKeys                    22
     SampleApp_MessageMSGCB                 201
     ?Subroutine2                            12
     SampleApp_SendPeriodicMessage          303
     SampleApp_SendFlashMessage             123
     SampleApp_Send_P2P_Message               3
     ReadGasData                             15
     ?Subroutine0                            10
     ReadHumidityData                        18
     ?<Initializer for AppTitle>             16
     ??myDelay?relay                          6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??ReadGasData?relay                      6
     ??ReadHumidityData?relay                 6
     ?<Constant "UartInit OK\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant {0}>                         14
     ?<Constant {0}>_1                       14
     ?<Constant {0}>_2                        6
     ?<Constant "%s%3d%4d\n">                10

 
 1 117 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    11 bytes in segment SFR_AN
    16 bytes in segment XDATA_I
    16 bytes in segment XDATA_ID
    91 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
 1 193 bytes of CODE  memory
    91 bytes of CONST memory
     0 bytes of DATA  memory (+ 11 bytes shared)
    69 bytes of XDATA memory

Errors: none
Warnings: 3
