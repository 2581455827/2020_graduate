###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         09/Dec/2019  20:27:45 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\Source\ #
#                          SampleApp.c                                        #
#    Command line       =  -f C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg          #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg         #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Sa #
#                          mples\SampleApp\Source\SampleApp.c -D ZAPP_P1 -D   #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\25814\Desktop\202 #
#                          0±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\CoordinatorEB\List\ -lA  #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\CoordinatorEB\List\ --diag_suppress Pe001,Pa010  #
#                          -o C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\CoordinatorEB\Obj\ -e --no_code_motion        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\ -I C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö² #
#                          ÎïÔ°¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\Source\ -I                           #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\ZMain\TI2530DB\ -I                      #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\include\ -I        #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\target\CC2530EB\   #
#                          -I C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\include\ -I     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\high_level\ -I     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\low_level\srf04\   #
#                          -I C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\low_level\srf04 #
#                          \single_chip\ -I C:\Users\25814\Desktop\2020±ÏÉè\Â #
#                          íÌì´Í_Ö²ÎïÔ°¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\mt\   #
#                          -I C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\osal\include\ -I    #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\saddr\ -I     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\sdata\ -I     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\af\ -I           #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\nwk\ -I          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sapi\ -I         #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sec\ -I          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sys\ -I          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\zdo\ -I          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\ -I               #
#                          C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\f8w\ -Ohz         #
#    List file          =  C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\CoordinatorEB\List\SampleApp.lst                 #
#    Object file        =  C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\CoordinatorEB\Obj\SampleApp.r51                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±ÏÉè\ÂíÌì´Í_Ö²ÎïÔ°¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          #include <stdio.h>
     79          #include <string.h>
     80          
     81          //MY DEVICE
     82          #include "DHT11.h"
     83          #include "gy30.h"
     84          
     85          /*********************************************************************
     86           * MACROS
     87           */
     88           
     89          #define GAS P0_6
     90          #define FIRE P1_1
     91          
     92          /*********************************************************************
     93           * CONSTANTS
     94           */
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          /*********************************************************************
    101           * GLOBAL VARIABLES
    102           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    103          uint8 AppTitle[] = "ALD2530 Example"; //Ó¦ÓÃ³ÌÐòÃû³Æ 
   \                     AppTitle:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for AppTitle>`
   \   000010                REQUIRE __INIT_XDATA_I
    104          uint16 ReadGasData(void);
    105          uint16 ReadHumidityData(void);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          void myDelay(){
   \                     myDelay:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    107            for(int j =0;j<100;j++)
   \   000000   7A64         MOV     R2,#0x64
    108              for(int i = 0;i<0xffff;i++)
   \                     ??myDelay_0:
   \   000002   7800         MOV     R0,#0x0
   \   000004   7900         MOV     R1,#0x0
   \                     ??myDelay_1:
   \   000006   E8           MOV     A,R0
   \   000007   2401         ADD     A,#0x1
   \   000009   08           INC     R0
   \   00000A   E9           MOV     A,R1
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   68           XRL     A,R0
   \   000011   7003         JNZ     ??myDelay_2
   \   000013   74FF         MOV     A,#-0x1
   \   000015   69           XRL     A,R1
   \                     ??myDelay_2:
   \   000016   70EE         JNZ     ??myDelay_1
    109              {}
   \   000018   1A           DEC     R2
   \   000019   EA           MOV     A,R2
   \   00001A   70E6         JNZ     ??myDelay_0
    110          }
   \   00001C   02....       LJMP    ?BRET
    111          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    112          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    113          {
    114            SAMPLEAPP_PERIODIC_CLUSTERID,
    115            SAMPLEAPP_FLASH_CLUSTERID
    116          };
    117          

   \                                 In  segment XDATA_ROM_C, align 1
    118          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    119          {
    120            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    121            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    122            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    123            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    124            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    125            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    126            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    127            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    128            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    129          };
    130          
    131          // This is the Endpoint/Interface description.  It is defined here, but
    132          // filled-in in SampleApp_Init().  Another way to go would be to fill
    133          // in the structure here and make it a "const" (in code space).  The
    134          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    136          
    137          /*********************************************************************
    138           * EXTERNAL VARIABLES
    139           */
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL VARIABLES
    147           */
    148          
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151                                    // This variable will be received when
    152                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    164          
    165           
    166          /*********************************************************************
    167           * LOCAL FUNCTIONS
    168           */
    169          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    170          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    171          void SampleApp_SendPeriodicMessage( void );
    172          void SampleApp_SendFlashMessage( uint16 flashTime );
    173          void SampleApp_Send_P2P_Message(void);
    174          /*********************************************************************
    175           * NETWORK LAYER CALLBACKS
    176           */
    177          
    178          /*********************************************************************
    179           * PUBLIC FUNCTIONS
    180           */
    181           
    182          /*********************************************************************
    183           * @fn      SampleApp_Init
    184           *
    185           * @brief   Initialization function for the Generic App Task.
    186           *          This is called during initialization and should contain
    187           *          any application specific initialization (ie. hardware
    188           *          initialization/setup, table initialization, power up
    189           *          notificaiton ... ).
    190           *
    191           * @param   task_id - the ID assigned by OSAL.  This ID should be
    192           *                    used to send messages and set timers.
    193           *
    194           * @return  none
    195           */
    196          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    198          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    199            
    200           
    201            SampleApp_TaskID = task_id;   //osal·ÖÅäµÄÈÎÎñIDËæ×ÅÓÃ»§Ìí¼ÓÈÎÎñµÄÔö¶à¶ø¸Ä±ä
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    202            SampleApp_NwkState = DEV_INIT;//Éè±¸×´Ì¬Éè¶¨ÎªZDO²ãÖÐ¶¨ÒåµÄ³õÊ¼»¯×´Ì¬
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    203            SampleApp_TransID = 0;        //ÏûÏ¢·¢ËÍID£¨¶àÏûÏ¢Ê±ÓÐË³ÐòÖ®·Ö£©
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    204            //Ä£¿é³õÊ¼»¯
    205            P0SEL &= ~0x20;                 //ÉèÖÃP0.5ÎªÆÕÍ¨IO¿Ú ÍÁÈÀÊª¶È
   \   000016   53F3DF       ANL     0xf3,#0xdf
    206            P0DIR &= ~0x20;                 //P0.5¶¨ÒåÎªÊäÈë¿Ú
   \   000019   53FDDF       ANL     0xfd,#0xdf
    207            
    208            LIGHT_INIT();
   \   00001C   53F3CF       ANL     0xf3,#0xcf
   \   00001F   43FD30       ORL     0xfd,#0x30
   \   000022   D285         SETB    0x80.5
   \   000024   D284         SETB    0x80.4
    209            //´®¿ÚÅäÖÃ
    210            MT_UartInit();
   \   000026                ; Setup parameters for call to function MT_UartInit
   \   000026   12....       LCALL   ??MT_UartInit?relay
    211            MT_UartRegisterTaskID(task_id);  
   \   000029                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000029   EE           MOV     A,R6
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    212            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n")); 
   \   00002E                ; Setup parameters for call to function HalUARTWrite
   \   00002E   7C0D         MOV     R4,#0xd
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   000034   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   000036   7900         MOV     R1,#0x0
   \   000038   12....       LCALL   ??HalUARTWrite?relay
    213            
    214          
    215            // Device hardware initialization can be added here or in main() (Zmain.c).
    216            // If the hardware is application specific - add it here.
    217            // If the hardware is other parts of the device add it in main().
    218          
    219          #if defined ( BUILD_ALL_DEVICES )
    220            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    221            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    222            // together - if they are - we will start up a coordinator. Otherwise,
    223            // the device will start as a router.
    224            if ( readCoordinatorJumper() )
    225              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    226            else
    227              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    228          #endif // BUILD_ALL_DEVICES
    229          
    230          //¸Ã¶ÎµÄÒâË¼ÊÇ£¬Èç¹ûÉèÖÃÁËHOLD_AUTO_STARTºê¶¨Òå£¬½«»áÔÚÆô¶¯Ð¾Æ¬µÄÊ±ºò»áÔÝÍ£Æô¶¯
    231          //Á÷³Ì£¬Ö»ÓÐÍâ²¿´¥·¢ÒÔºó²Å»áÆô¶¯Ð¾Æ¬¡£ÆäÊµ¾ÍÊÇÐèÒªÒ»¸ö°´Å¥´¥·¢ËüµÄÆô¶¯Á÷³Ì¡£  
    232          #if defined ( HOLD_AUTO_START )
    233            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    234            //  from starting the device and wait for the application to
    235            //  start the device.
    236            ZDOInitDevice(0);
    237          #endif
    238          
    239            // Setup for the periodic message's destination address ÉèÖÃ·¢ËÍÊý¾ÝµÄ·½Ê½ºÍÄ¿µÄµØÖ·Ñ°Ö·Ä£Ê½
    240            // Broadcast to everyone ·¢ËÍÄ£Ê½:¹ã²¥·¢ËÍ
    241            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥
   \   00003B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00003E   740F         MOV     A,#0xf
   \   000040   F0           MOVX    @DPTR,A
    242            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000041   A3           INC     DPTR
   \   000042   7414         MOV     A,#0x14
   \   000044   F0           MOVX    @DPTR,A
    243            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//Ö¸¶¨Ä¿µÄÍøÂçµØÖ·Îª¹ã²¥µØÖ·
   \   000045   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000048   74FF         MOV     A,#-0x1
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   F0           MOVX    @DPTR,A
    244          
    245            // Setup for the flash command's destination address - Group 1 ×é²¥·¢ËÍ
    246            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //×éÑ°Ö·
   \   00004D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
    247            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000053   A3           INC     DPTR
   \   000054   7414         MOV     A,#0x14
   \   000056   F0           MOVX    @DPTR,A
    248            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×éºÅ0x0001
   \   000057   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00005A   7401         MOV     A,#0x1
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E4           CLR     A
   \   00005F   F0           MOVX    @DPTR,A
    249          
    250            // Fill out the endpoint description. ¶¨Òå±¾Éè±¸ÓÃÀ´Í¨ÐÅµÄAPS²ã¶ËµãÃèÊö·û
    251            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000060   90....       MOV     DPTR,#SampleApp_epDesc
   \   000063   7414         MOV     A,#0x14
   \   000065   F0           MOVX    @DPTR,A
    252            SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp ÃèÊö·ûµÄÈÎÎñID
   \   000066   A3           INC     DPTR
   \   000067   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00006D   F0           MOVX    @DPTR,A
    253            SampleApp_epDesc.simpleDesc
    254                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleApp¼òµ¥ÃèÊö·û
   \   00006E   A3           INC     DPTR
   \   00006F   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000075   F0           MOVX    @DPTR,A
    255            SampleApp_epDesc.latencyReq = noLatencyReqs;    //ÑÓÊ±²ßÂÔ
   \   000076   A3           INC     DPTR
   \   000077   E4           CLR     A
   \   000078   F0           MOVX    @DPTR,A
    256          
    257            // Register the endpoint description with the AF
    258            afRegister( &SampleApp_epDesc );    //ÏòAF²ãµÇ¼ÇÃèÊö·û
   \   000079                ; Setup parameters for call to function afRegister
   \   000079   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007B   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00007D   12....       LCALL   ??afRegister?relay
    259          
    260            // Register for all key events - This app will handle all key events
    261            RegisterForKeys( SampleApp_TaskID ); // µÇ¼ÇËùÓÐµÄ°´¼üÊÂ¼þ
   \   000080                ; Setup parameters for call to function RegisterForKeys
   \   000080   90....       MOV     DPTR,#SampleApp_TaskID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??RegisterForKeys?relay
    262          
    263            // By default, all devices start out in Group 1
    264            SampleApp_Group.ID = 0x0001;//×éºÅ
   \   000088   90....       MOV     DPTR,#SampleApp_Group
   \   00008B   7401         MOV     A,#0x1
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   E4           CLR     A
   \   000090   F0           MOVX    @DPTR,A
    265            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//Éè¶¨×éÃû
   \   000091                ; Setup parameters for call to function osal_memcpy
   \   000091   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000094   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000097   F5..         MOV     ?V0 + 2,A
   \   000099   78..         MOV     R0,#?V0 + 0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009E   7C07         MOV     R4,#0x7
   \   0000A0   7D00         MOV     R5,#0x0
   \   0000A2   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A4   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A6   12....       LCALL   ??osal_memcpy?relay
   \   0000A9   7403         MOV     A,#0x3
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
    266            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//°Ñ¸Ã×éµÇ¼ÇÌí¼Óµ½APSÖÐ
   \   0000AE                ; Setup parameters for call to function aps_AddGroup
   \   0000AE   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B0   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B2   7914         MOV     R1,#0x14
   \   0000B4   12....       LCALL   ??aps_AddGroup?relay
    267          
    268          #if defined ( LCD_SUPPORTED )
    269            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //Èç¹ûÖ§³ÖLCD£¬ÏÔÊ¾ÌáÊ¾ÐÅÏ¢
   \   0000B7                ; Setup parameters for call to function HalLcdWriteString
   \   0000B7   7900         MOV     R1,#0x0
   \   0000B9   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000BB   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000BD   12....       LCALL   ??HalLcdWriteString?relay
    270          #endif
    271          }
   \   0000C0                REQUIRE ?Subroutine1
   \   0000C0                REQUIRE P0SEL
   \   0000C0                REQUIRE P0DIR
   \   0000C0                REQUIRE _A_P0
   \   0000C0                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    272          
    273          /*********************************************************************
    274           * @fn      SampleApp_ProcessEvent
    275           *
    276           * @brief   Generic Application Task event processor.  This function
    277           *          is called to process all events for the task.  Events
    278           *          include timers, messages and any other user defined events.
    279           *
    280           * @param   task_id  - The OSAL assigned task ID.
    281           * @param   events - events to process.  This is a bit map and can
    282           *                   contain more than one event.
    283           *
    284           * @return  none
    285           */
    286          //ÓÃ»§Ó¦ÓÃÈÎÎñµÄÊÂ¼þ´¦Àíº¯Êý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    288          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    289            afIncomingMSGPacket_t *MSGpkt;
    290            (void)task_id;  // Intentionally unreferenced parameter
    291          
    292            if ( events & SYS_EVENT_MSG ) //½ÓÊÕÏµÍ³ÏûÏ¢ÔÙ½øÐÐÅÐ¶Ï
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    293            {
    294              //½ÓÊÕÊôÓÚ±¾Ó¦ÓÃÈÎÎñSampleAppµÄÏûÏ¢£¬ÒÔSampleApp_TaskID±ê¼Ç
    295              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    296              while ( MSGpkt )
    297              {
    298                switch ( MSGpkt->hdr.event )
    299                {
    300                  // Received when a key is pressed
    301                  case KEY_CHANGE://°´¼üÊÂ¼þ
    302                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    303                    break;
    304          
    305                  // Received when a messages is received (OTA) for this endpoint
    306                case AF_INCOMING_MSG_CMD://½ÓÊÕÊý¾ÝÊÂ¼þ,µ÷ÓÃº¯ÊýAF_DataRequest()½ÓÊÕÊý¾Ý
    307                    SampleApp_MessageMSGCB( MSGpkt );//µ÷ÓÃ»Øµ÷º¯Êý¶ÔÊÕµ½µÄÊý¾Ý½øÐÐ´¦Àí
    308                    break;
    309          
    310                  // Received whenever the device changes state in the network
    311                  case ZDO_STATE_CHANGE:
    312                    //Ö»ÒªÍøÂç×´Ì¬·¢Éú¸Ä±ä£¬¾ÍÍ¨¹ýZDO_STATE_CHANGEÊÂ¼þÍ¨ÖªËùÓÐµÄÈÎÎñ¡£
    313                    //Í¬Ê±Íê³É¶ÔÐ­µ÷Æ÷£¬Â·ÓÉÆ÷£¬ÖÕ¶ËµÄÉèÖÃ
    314                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    315                    //if ( (SampleApp_NwkState == DEV_ZB_COORD)//ÊµÑéÖÐÐ­µ÷Æ÷Ö»½ÓÊÕÊý¾ÝËùÒÔÈ¡Ïû·¢ËÍÊÂ¼þ
    316                    if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    317                    {
    318                      // Start sending the periodic message in a regular interval.
    319                      //Õâ¸ö¶¨Ê±Æ÷Ö»ÊÇÎª·¢ËÍÖÜÆÚÐÅÏ¢¿ªÆôµÄ£¬Éè±¸Æô¶¯³õÊ¼»¯ºó´ÓÕâÀï¿ªÊ¼
    320                      //´¥·¢µÚÒ»¸öÖÜÆÚÐÅÏ¢µÄ·¢ËÍ£¬È»ºóÖÜ¶ø¸´Ê¼ÏÂÈ¥
    321                      osal_start_timerEx( SampleApp_TaskID,
    322                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    323                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    324                     
    325                    }
    326                    else
    327                    {
    328                        
    329                    }
    330                    break;
    331          
    332                  default:
    333                    break;
    334                }
    335          
    336                // Release the memory ÊÂ¼þ´¦ÀíÍêÁË£¬ÊÍ·ÅÏûÏ¢Õ¼ÓÃµÄÄÚ´æ
    337                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    338             
    339                // Next - if one is available Ö¸ÕëÖ¸ÏòÏÂÒ»¸ö·ÅÔÚ»º³åÇøµÄ´ý´¦ÀíµÄÊÂ¼þ£¬
    340                //·µ»Øwhile ( MSGpkt )ÖØÐÂ´¦ÀíÊÂ¼þ£¬Ö±µ½»º³åÇøÃ»ÓÐµÈ´ý´¦ÀíÊÂ¼þÎªÖ¹
    341                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    342              }
    343          
    344              // return unprocessed events ·µ»ØÎ´´¦ÀíµÄÊÂ¼þ
    345              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   8027         SJMP    ??SampleApp_ProcessEvent_9
    346            }
    347          
    348            // Send a message out - This event is generated by a timer
    349            //  (setup in SampleApp_Init()).
    350            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   501E         JNC     ??SampleApp_ProcessEvent_10
    351            {
    352              // Send the periodic message ´¦ÀíÖÜÆÚÐÔÊÂ¼þ£¬
    353              //ÀûÓÃSampleApp_SendPeriodicMessage()´¦ÀíÍêµ±Ç°µÄÖÜÆÚÐÔÊÂ¼þ£¬È»ºóÆô¶¯¶¨Ê±Æ÷
    354              //¿ªÆôÏÂÒ»¸öÖÜÆÚÐÔÊÂÇé£¬ÕâÑùÒ»ÖÖÑ­»·ÏÂÈ¥£¬Ò²¼´ÊÇÉÏÃæËµµÄÖÜÆÚÐÔÊÂ¼þÁË£¬
    355              //¿ÉÒÔ×öÎª´«¸ÐÆ÷¶¨Ê±²É¼¯¡¢ÉÏ´«ÈÎÎñ
    356              SampleApp_SendPeriodicMessage();
    357              
    358              // Setup to send message again in normal period (+ a little jitter)
    359              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    360                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000086                ; Setup parameters for call to function osal_rand
   \   000086   12....       LCALL   ??osal_rand?relay
   \   000089                ; Setup parameters for call to function osal_start_timerEx
   \   000089   EA           MOV     A,R2
   \   00008A   24E8         ADD     A,#-0x18
   \   00008C   FC           MOV     R4,A
   \   00008D   E4           CLR     A
   \   00008E   3403         ADDC    A,#0x3
   \   000090   FD           MOV     R5,A
   \   000091   7A01         MOV     R2,#0x1
   \   000093   7B00         MOV     R3,#0x0
   \   000095   90....       MOV     DPTR,#SampleApp_TaskID
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   12....       LCALL   ??osal_start_timerEx?relay
    361          
    362              // return unprocessed events ·µ»ØÎ´´¦ÀíµÄÊÂ¼þ
    363              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   00009D   EE           MOV     A,R6
   \   00009E   6401         XRL     A,#0x1
   \   0000A0   FA           MOV     R2,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   80DA         SJMP    ??SampleApp_ProcessEvent_8
    364            }
    365          
    366            // Discard unknown events
    367            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A4   7A00         MOV     R2,#0x0
   \   0000A6   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000A8   7F04         MOV     R7,#0x4
   \   0000AA   02....       LJMP    ?BANKED_LEAVE_XDATA
    368          }
    369          
    370          /*********************************************************************
    371           * Event Generation Functions
    372           */
    373          /*********************************************************************
    374           * @fn      SampleApp_HandleKeys
    375           *
    376           * @brief   Handles all key events for this device.
    377           *
    378           * @param   shift - true if in shift/alt.
    379           * @param   keys - bit field for key events. Valid entries:
    380           *                 HAL_KEY_SW_2
    381           *                 HAL_KEY_SW_1
    382           *
    383           * @return  none
    384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    385          void SampleApp_HandleKeys( uint8 shift, uint8 keys )  
   \                     SampleApp_HandleKeys:
    386          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    387            (void)shift;  // Intentionally unreferenced parameter
    388            
    389            if ( keys & HAL_KEY_SW_1 )
   \   000006   A2E0         MOV     C,0xE0 /* A   */.0
   \   000008   5007         JNC     ??SampleApp_HandleKeys_0
    390            {
    391              /* This key sends the Flash Command is sent to Group 1.
    392               * This device will not receive the Flash Command from this
    393               * device (even if it belongs to group 1).
    394               */
    395             SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000A                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000A   7AE8         MOV     R2,#-0x18
   \   00000C   7B03         MOV     R3,#0x3
   \   00000E   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    396             
    397              
    398            
    399            }
    400          
    401            if ( keys & HAL_KEY_SW_6 )
    402            {
    403              /* The Flashr Command is sent to Group 1.
    404               * This key toggles this device in and out of group 1.
    405               * If this device doesn't belong to group 1, this application
    406               * will not receive the Flash command sent to group 1.
    407               */
    408            
    409             /*
    410              aps_Group_t *grp;
    411              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    412              if ( grp )
    413              {
    414                // Remove from the group
    415                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    416              }
    417              else
    418              {
    419                // Add to the flash group
    420                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    421              }
    422             */
    423            }
    424          }
   \                     ??SampleApp_HandleKeys_0:
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
    425          
    426          /*********************************************************************
    427           * LOCAL FUNCTIONS
    428           */
    429          
    430          /*********************************************************************
    431           * @fn      SampleApp_MessageMSGCB
    432           *
    433           * @brief   Data message processor callback.  This function processes
    434           *          any incoming data - probably from other devices.  So, based
    435           *          on cluster ID, perform the intended action.
    436           *
    437           * @param   none
    438           *
    439           * @return  none
    440           */
    441          //½ÓÊÕÊý¾Ý£¬²ÎÊýÎª½ÓÊÕµ½µÄÊý¾Ý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    442          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    443          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    444            uint16 flashTime;
    445            unsigned short len = 6+3+4+1;
    446            byte buf[6+3+4+1]={0}; 
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00001E   740E         MOV     A,#0xe
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    447            
    448            switch ( pkt->clusterId ) //ÅÐ¶Ï´ØID
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 1,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000037   0100         DW        1
   \   000039   01           DB        1
   \   00003A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00003C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00003E   ....         DW        ??SampleApp_MessageMSGCB_2
    449            {
    450              case SAMPLEAPP_PERIODIC_CLUSTERID: //ÊÕµ½¹ã²¥Êý¾Ý
    451                osal_memset(buf, 0 , len);
   \                     ??SampleApp_MessageMSGCB_1:
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C0E         MOV     R4,#0xe
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7900         MOV     R1,#0x0
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??osal_memset?relay
    452                osal_memcpy(buf, pkt->cmd.Data, len);
   \   000053                ; Setup parameters for call to function osal_memcpy
   \   000053   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000056   F5..         MOV     ?V0 + 0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V0 + 1,A
   \   00005C   75..00       MOV     ?V0 + 2,#0x0
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000064   7C0E         MOV     R4,#0xe
   \   000066   7D00         MOV     R5,#0x0
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   \   000071   12....       LCALL   ??osal_memcpy?relay
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    453                HalUARTWrite(0,buf, len);
   \   000079                ; Setup parameters for call to function HalUARTWrite
   \   000079   7C0E         MOV     R4,#0xe
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   7900         MOV     R1,#0x0
   \   000089   12....       LCALL   ??HalUARTWrite?relay
    454                break;
   \   00008C   8033         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   00008E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000091   F8           MOV     R0,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095                ; Setup parameters for call to function HalLedBlink
   \   000095   8882         MOV     DPL,R0
   \   000097   8983         MOV     DPH,R1
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FA           MOV     R2,A
   \   00009C   8882         MOV     DPL,R0
   \   00009E   8983         MOV     DPH,R1
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   EA           MOV     A,R2
   \   0000A5   2400         ADD     A,#0x0
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   E4           CLR     A
   \   0000AA   39           ADDC    A,R1
   \   0000AB   F5..         MOV     ?V0 + 1,A
   \   0000AD   7402         MOV     A,#0x2
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?US_SHR
   \   0000B4   AC..         MOV     R4,?V0 + 0
   \   0000B6   AD..         MOV     R5,?V0 + 1
   \   0000B8   7B32         MOV     R3,#0x32
   \   0000BA   7A04         MOV     R2,#0x4
   \   0000BC   7908         MOV     R1,#0x8
    455          
    456              case SAMPLEAPP_FLASH_CLUSTERID: //ÊÕµ½×é²¥Êý¾Ý  
    457                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    458                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   0000BE   12....       LCALL   ??HalLedBlink?relay
    459                break;
    460            case SAMPLEAPP_P2P_CLUSTERID:
    461           
    462              break;
    463            }
    464          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000C1   740E         MOV     A,#0xe
   \   0000C3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C6   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    465          
    466          /*********************************************************************
    467           * @fn      SampleApp_SendPeriodicMessage
    468           *
    469           * @brief   Send the periodic message.
    470           *
    471           * @param   none
    472           *
    473           * @return  none
    474           */
    475          //·ÖÎö·¢ËÍÖÜÆÚÐÅÏ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    476          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    477          { 
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    478          #ifndef ZDO_COORDINATOR 
    479            //»ñµÃµÄÊý¾ÝÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾  
    480            char str[6+3+4+1]={0};
    481            //»ñÈ¡ÎÂÊª¶È
    482            unsigned char temp_humi[6]={0};
    483            strcpy(temp_humi,DHT11());
    484           //»ñÈ¡ÍÁÈÀÊª¶È
    485            uint16 humi = ReadHumidityData();
    486            //»ñÈ¡¹âÇ¿
    487            uint16 lt = get_light();
    488            
    489            sprintf(str,"%s%3d%4d\n",temp_humi,humi,lt);
    490            HalUARTWrite(0,str,sizeof(str));
    491          
    492             // µ÷ÓÃAF_DataRequest½«Êý¾ÝÎÞÏß¹ã²¥³öÈ¥
    493            if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    494                                 &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    495                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    496                                 sizeof(str),       //·¢ËÍÊý¾Ý³¤¶È
    497                                 (uchar*)str,// ·¢ËÍÊý¾Ý»º³åÇø
    498                                 &SampleApp_TransID,     // ÈÎÎñIDºÅ
    499                                 AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    500                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
    501            {
    502            }
    503            else
    504            {
    505              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
    506              // Error occurred in request to send.
    507            }
    508          #elif defined ZDO_COORDINATOR
    509            //Ð­µ÷Æ÷·¢ËÍ
    510            
    511              
    512            
    513          
    514          #endif 
    515            
    516           
    517          }
   \   000000   02....       LJMP    ?BRET
    518          
    519          /*********************************************************************
    520           * @fn      SampleApp_SendFlashMessage
    521           *
    522           * @brief   Send the flash message to group 1.
    523           *
    524           * @param   flashTime - in milliseconds
    525           *
    526           * @return  none
    527           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    528          void SampleApp_SendFlashMessage( uint16 flashTime )  
   \                     SampleApp_SendFlashMessage:
    529          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    530            uint8 buffer[3];
    531            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    532            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    533            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    534          
    535            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    536                                 SAMPLEAPP_FLASH_CLUSTERID,
    537                                 3,
    538                                 buffer,
    539                                 &SampleApp_TransID,
    540                                 AF_DISCV_ROUTE,
    541                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    542            {
    543            }
    544            else
    545            {
    546              // Error occurred in request to send.
    547            }
    548          }
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   7F02         MOV     R7,#0x2
   \   000078   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    549          void SampleApp_Send_P2P_Message(void){
   \                     SampleApp_Send_P2P_Message:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    550             
    551          }
   \   000000   02....       LJMP    ?BRET
    552          /*********************************************************************
    553          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554           uint16 ReadGasData( void )
   \                     ReadGasData:
    555          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    556            uint16 reading = 0;
    557            
    558            /* Enable channel */
    559            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    560            
    561            /* writing to this register starts the extra conversion */
    562            ADCCON3 = 0x86;// AVDD5 Òý½Å  00£º 64 ³éÈ¡ÂÊ(7 Î»ENOB)  0110£º AIN6
   \   000003   75B686       MOV     0xb6,#-0x7a
    563            
    564            /* Wait for the conversion to be done */
    565            while (!(ADCCON1 & 0x80));
   \                     ??ReadGasData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadGasData_0
    566            
    567            /* Disable channel after done conversion */
    568            ADCCFG &= (0x40 ^ 0xFF); //°´Î»Òì»ò¡£Èç1010^1111=0101£¨¶þ½øÖÆ£©
   \   00000C   53F2BF       ANL     0xf2,#0xbf
    569            
    570            /* Read the result */
    571            reading = ADCL;
   \   00000F                REQUIRE ?Subroutine0
   \   00000F                REQUIRE ADCCFG
   \   00000F                REQUIRE ADCCON3
   \   00000F                REQUIRE ADCCON1
   \   00000F                REQUIRE ADCL
   \   00000F                REQUIRE ADCH
   \   00000F                ; // Fall through to label ?Subroutine0
    572            reading |= (int16) (ADCH << 8); 
    573            
    574            reading >>= 8;
    575            
    576            return (reading);
    577          } 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E5BA         MOV     A,0xba
   \   000002   E5BB         MOV     A,0xbb
   \   000004   FA           MOV     R2,A
   \   000005   E4           CLR     A
   \   000006   FB           MOV     R3,A
   \   000007   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    578          uint16 ReadHumidityData( void )
   \                     ReadHumidityData:
    579          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    580            uint16 reading = 0;
    581            
    582            P0DIR &= ~0x20;  // ÉèÖÃP0.5ÎªÊäÈë·½Ê½
   \   000000   53FDDF       ANL     0xfd,#0xdf
    583            asm("NOP");asm("NOP");
   \   000003   00           NOP
   \   000004   00           NOP
    584            
    585            /* Clear ADC interrupt flag */
    586            ADCIF = 0;
   \   000005   C28D         CLR     0x88.5
    587            
    588            //ADCCON3 = (0x80 | HAL_ADC_DEC_064 | HAL_ADC_CHANNEL_5);
    589            ADCCON3 = (0x80 | 0x00 | 0x05);
   \   000007   75B685       MOV     0xb6,#-0x7b
    590            /* Wait for the conversion to finish */
    591            while ( !ADCIF );
   \                     ??ReadHumidityData_0:
   \   00000A   A28D         MOV     C,0x88.5
   \   00000C   50FC         JNC     ??ReadHumidityData_0
    592            
    593            asm("NOP");asm("NOP");
   \   00000E   00           NOP
   \   00000F   00           NOP
    594            
    595            /* Read the result */
    596            reading = ADCL;
   \   000010   80..         SJMP    ?Subroutine0
   \   000012                REQUIRE P0DIR
   \   000012                REQUIRE _A_TCON
   \   000012                REQUIRE ADCCON3
   \   000012                REQUIRE ADCL
   \   000012                REQUIRE ADCH
    597            reading |= (int16) (ADCH << 8);
    598            reading >>= 8;
    599            
    600            return reading;
    601          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 Example"
   \            35333020
   \            4578616D
   \            706C6500

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??myDelay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    myDelay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadHumidityData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadHumidityData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0
   \            00      

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadGasData                        0      0      0
     ReadHumidityData                   0      0      0
     SampleApp_HandleKeys               0      0     21
       -> SampleApp_SendFlashMessage
                                        0      0     18
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0     40
       -> osal_memset                   0      0     50
       -> osal_memcpy                   0      0     56
       -> HalUARTWrite                  0      0     50
       -> HalLedBlink                   0      0     50
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     31
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0      0
     SampleApp_Send_P2P_Message         0      0      0
     myDelay                            0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_TCON                                  1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     P0DIR                                    1
     AppTitle                                16
     myDelay                                 31
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         192
     ?Subroutine1                             5
     SampleApp_ProcessEvent                 173
     SampleApp_HandleKeys                    22
     SampleApp_MessageMSGCB                 201
     ?Subroutine2                            12
     SampleApp_SendPeriodicMessage            3
     SampleApp_SendFlashMessage             123
     SampleApp_Send_P2P_Message               3
     ReadGasData                             15
     ?Subroutine0                            10
     ReadHumidityData                        18
     ?<Initializer for AppTitle>             16
     ??myDelay?relay                          6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??ReadGasData?relay                      6
     ??ReadHumidityData?relay                 6
     ?<Constant "UartInit OK\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant {0}>                         14

 
 808 bytes in segment BANKED_CODE
  60 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
  16 bytes in segment XDATA_I
  16 bytes in segment XDATA_ID
  61 bytes in segment XDATA_ROM_C
  53 bytes in segment XDATA_Z
 
 884 bytes of CODE  memory
  61 bytes of CONST memory
   0 bytes of DATA  memory (+ 9 bytes shared)
  69 bytes of XDATA memory

Errors: none
Warnings: none
