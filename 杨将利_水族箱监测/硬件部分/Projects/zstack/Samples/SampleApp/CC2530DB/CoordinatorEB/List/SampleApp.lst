###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         13/Dec/2019  20:16:34 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\Source\ #
#                          SampleApp.c                                        #
#    Command line       =  -f C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg          #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg         #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\25814\Desktop\2020 #
#                          ±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Sa #
#                          mples\SampleApp\Source\SampleApp.c -D ZAPP_P1 -D   #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\25814\Desktop\202 #
#                          0±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\CoordinatorEB\List\ -lA  #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\CoordinatorEB\List\ --diag_suppress Pe001,Pa010  #
#                          -o C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\CoordinatorEB\Obj\ -e --no_code_motion        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\ -I C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë® #
#                          ×åÏä¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\Source\ -I                           #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\ZMain\TI2530DB\ -I                      #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\include\ -I        #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\target\CC2530EB\   #
#                          -I C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\include\ -I     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\high_level\ -I     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\low_level\srf04\   #
#                          -I C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\low_level\srf04 #
#                          \single_chip\ -I C:\Users\25814\Desktop\2020±ÏÉè\Ñ #
#                          î½«Àû_Ë®×åÏä¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\mt\   #
#                          -I C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à #
#                          ²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\osal\include\ -I    #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\saddr\ -I     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\sdata\ -I     #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\af\ -I           #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\nwk\ -I          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sapi\ -I         #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sec\ -I          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sys\ -I          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\zdo\ -I          #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\ -I               #
#                          C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\f8w\ -Ohz         #
#    List file          =  C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\CoordinatorEB\List\SampleApp.lst                 #
#    Object file        =  C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\ #
#                          Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\CoordinatorEB\Obj\SampleApp.r51                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25814\Desktop\2020±ÏÉè\Ñî½«Àû_Ë®×åÏä¼à²â\Ó²¼þ²¿·Ö\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          #include <stdio.h>
     79          #include <string.h>
     80          
     81          //MY DEVICE
     82          #include "DHT11.h"
     83          #include "rc522.h"
     84          #include "IC.h"
     85          
     86          /*********************************************************************
     87           * MACROS
     88           */
     89           
     90          #define TURBIDITY P1_1
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          uint8 AppTitle[] = "ALD2530 Example"; //Ó¦ÓÃ³ÌÐòÃû³Æ 
   \                     AppTitle:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for AppTitle>`
   \   000010                REQUIRE __INIT_XDATA_I
    103          uint16 ReadTurData(void);
    104          uint16 ReadPhData(void);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          void myDelay(){
   \                     myDelay:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    106            for(int j =0;j<100;j++)
   \   000000   7A64         MOV     R2,#0x64
    107              for(int i = 0;i<0xffff;i++)
   \                     ??myDelay_0:
   \   000002   7800         MOV     R0,#0x0
   \   000004   7900         MOV     R1,#0x0
   \                     ??myDelay_1:
   \   000006   E8           MOV     A,R0
   \   000007   2401         ADD     A,#0x1
   \   000009   08           INC     R0
   \   00000A   E9           MOV     A,R1
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   68           XRL     A,R0
   \   000011   7003         JNZ     ??myDelay_2
   \   000013   74FF         MOV     A,#-0x1
   \   000015   69           XRL     A,R1
   \                     ??myDelay_2:
   \   000016   70EE         JNZ     ??myDelay_1
    108              {}
   \   000018   1A           DEC     R2
   \   000019   EA           MOV     A,R2
   \   00001A   70E6         JNZ     ??myDelay_0
    109          }
   \   00001C   02....       LJMP    ?BRET
    110          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    111          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    112          {
    113            SAMPLEAPP_PERIODIC_CLUSTERID,
    114            SAMPLEAPP_FLASH_CLUSTERID
    115          };
    116          

   \                                 In  segment XDATA_ROM_C, align 1
    117          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    118          {
    119            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    120            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    121            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    122            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    123            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    124            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    125            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    126            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    127            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    128          };
    129          
    130          // This is the Endpoint/Interface description.  It is defined here, but
    131          // filled-in in SampleApp_Init().  Another way to go would be to fill
    132          // in the structure here and make it a "const" (in code space).  The
    133          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    135          
    136          /*********************************************************************
    137           * EXTERNAL VARIABLES
    138           */
    139          
    140          /*********************************************************************
    141           * EXTERNAL FUNCTIONS
    142           */
    143          
    144          /*********************************************************************
    145           * LOCAL VARIABLES
    146           */
    147          
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    150                                    // This variable will be received when
    151                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    155          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    160          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    163          
    164          #ifndef ZDO_COORDINATOR
    165            byte state_fan = 1;
    166            byte state_beep = 1;
    167            byte recv_fan = 0;
    168            byte recv_beep = 0;
    169          #endif
    170          /*********************************************************************
    171           * LOCAL FUNCTIONS
    172           */
    173          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    174          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    175          void SampleApp_SendPeriodicMessage( void );
    176          void SampleApp_SendFlashMessage( uint16 flashTime );
    177          void SampleApp_Send_P2P_Message(void);
    178          /*********************************************************************
    179           * NETWORK LAYER CALLBACKS
    180           */
    181          
    182          /*********************************************************************
    183           * PUBLIC FUNCTIONS
    184           */
    185           
    186          /*********************************************************************
    187           * @fn      SampleApp_Init
    188           *
    189           * @brief   Initialization function for the Generic App Task.
    190           *          This is called during initialization and should contain
    191           *          any application specific initialization (ie. hardware
    192           *          initialization/setup, table initialization, power up
    193           *          notificaiton ... ).
    194           *
    195           * @param   task_id - the ID assigned by OSAL.  This ID should be
    196           *                    used to send messages and set timers.
    197           *
    198           * @return  none
    199           */
    200          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    201          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    202          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    203            
    204           
    205            SampleApp_TaskID = task_id;   //osal·ÖÅäµÄÈÎÎñIDËæ×ÅÓÃ»§Ìí¼ÓÈÎÎñµÄÔö¶à¶ø¸Ä±ä
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    206            SampleApp_NwkState = DEV_INIT;//Éè±¸×´Ì¬Éè¶¨ÎªZDO²ãÖÐ¶¨ÒåµÄ³õÊ¼»¯×´Ì¬
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    207            SampleApp_TransID = 0;        //ÏûÏ¢·¢ËÍID£¨¶àÏûÏ¢Ê±ÓÐË³ÐòÖ®·Ö£©
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    208            //Ä£¿é³õÊ¼»¯
    209            P0SEL &=~0X40;
   \   000016   53F3BF       ANL     0xf3,#0xbf
    210            P0DIR &=~0x40;//×Ç¶ÈÄ£¿é
   \   000019   53FDBF       ANL     0xfd,#0xbf
    211           
    212           
    213            //´®¿ÚÅäÖÃ
    214            MT_UartInit();
   \   00001C                ; Setup parameters for call to function MT_UartInit
   \   00001C   12....       LCALL   ??MT_UartInit?relay
    215            MT_UartRegisterTaskID(task_id);  
   \   00001F                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00001F   EE           MOV     A,R6
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   ??MT_UartRegisterTaskID?relay
    216            HalUARTWrite(0,"stop",4);
   \   000024                ; Setup parameters for call to function HalUARTWrite
   \   000024   7C04         MOV     R4,#0x4
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A..         MOV     R2,#`?<Constant "stop">` & 0xff
   \   00002A   7B..         MOV     R3,#(`?<Constant "stop">` >> 8) & 0xff
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   12....       LCALL   ??HalUARTWrite?relay
    217            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n")); 
   \   000031                ; Setup parameters for call to function HalUARTWrite
   \   000031   7C0D         MOV     R4,#0xd
   \   000033   7D00         MOV     R5,#0x0
   \   000035   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   000037   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   000039   7900         MOV     R1,#0x0
   \   00003B   12....       LCALL   ??HalUARTWrite?relay
    218           
    219          
    220            // Device hardware initialization can be added here or in main() (Zmain.c).
    221            // If the hardware is application specific - add it here.
    222            // If the hardware is other parts of the device add it in main().
    223          
    224          #if defined ( BUILD_ALL_DEVICES )
    225            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    226            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    227            // together - if they are - we will start up a coordinator. Otherwise,
    228            // the device will start as a router.
    229            if ( readCoordinatorJumper() )
    230              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    231            else
    232              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    233          #endif // BUILD_ALL_DEVICES
    234          
    235          //¸Ã¶ÎµÄÒâË¼ÊÇ£¬Èç¹ûÉèÖÃÁËHOLD_AUTO_STARTºê¶¨Òå£¬½«»áÔÚÆô¶¯Ð¾Æ¬µÄÊ±ºò»áÔÝÍ£Æô¶¯
    236          //Á÷³Ì£¬Ö»ÓÐÍâ²¿´¥·¢ÒÔºó²Å»áÆô¶¯Ð¾Æ¬¡£ÆäÊµ¾ÍÊÇÐèÒªÒ»¸ö°´Å¥´¥·¢ËüµÄÆô¶¯Á÷³Ì¡£  
    237          #if defined ( HOLD_AUTO_START )
    238            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    239            //  from starting the device and wait for the application to
    240            //  start the device.
    241            ZDOInitDevice(0);
    242          #endif
    243          
    244            // Setup for the periodic message's destination address ÉèÖÃ·¢ËÍÊý¾ÝµÄ·½Ê½ºÍÄ¿µÄµØÖ·Ñ°Ö·Ä£Ê½
    245            // Broadcast to everyone ·¢ËÍÄ£Ê½:¹ã²¥·¢ËÍ
    246            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥
   \   00003E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000041   740F         MOV     A,#0xf
   \   000043   F0           MOVX    @DPTR,A
    247            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000044   A3           INC     DPTR
   \   000045   7414         MOV     A,#0x14
   \   000047   F0           MOVX    @DPTR,A
    248            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//Ö¸¶¨Ä¿µÄÍøÂçµØÖ·Îª¹ã²¥µØÖ·
   \   000048   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00004B   74FF         MOV     A,#-0x1
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   F0           MOVX    @DPTR,A
    249          
    250            // Setup for the flash command's destination address - Group 1 ×é²¥·¢ËÍ
    251            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //×éÑ°Ö·
   \   000050   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000053   7401         MOV     A,#0x1
   \   000055   F0           MOVX    @DPTR,A
    252            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000056   A3           INC     DPTR
   \   000057   7414         MOV     A,#0x14
   \   000059   F0           MOVX    @DPTR,A
    253            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×éºÅ0x0001
   \   00005A   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00005D   7401         MOV     A,#0x1
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
    254          
    255            // Fill out the endpoint description. ¶¨Òå±¾Éè±¸ÓÃÀ´Í¨ÐÅµÄAPS²ã¶ËµãÃèÊö·û
    256            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   000063   90....       MOV     DPTR,#SampleApp_epDesc
   \   000066   7414         MOV     A,#0x14
   \   000068   F0           MOVX    @DPTR,A
    257            SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp ÃèÊö·ûµÄÈÎÎñID
   \   000069   A3           INC     DPTR
   \   00006A   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000070   F0           MOVX    @DPTR,A
    258            SampleApp_epDesc.simpleDesc
    259                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleApp¼òµ¥ÃèÊö·û
   \   000071   A3           INC     DPTR
   \   000072   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000078   F0           MOVX    @DPTR,A
    260            SampleApp_epDesc.latencyReq = noLatencyReqs;    //ÑÓÊ±²ßÂÔ
   \   000079   A3           INC     DPTR
   \   00007A   E4           CLR     A
   \   00007B   F0           MOVX    @DPTR,A
    261          
    262            // Register the endpoint description with the AF
    263            afRegister( &SampleApp_epDesc );    //ÏòAF²ãµÇ¼ÇÃèÊö·û
   \   00007C                ; Setup parameters for call to function afRegister
   \   00007C   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007E   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000080   12....       LCALL   ??afRegister?relay
    264          
    265            // Register for all key events - This app will handle all key events
    266            RegisterForKeys( SampleApp_TaskID ); // µÇ¼ÇËùÓÐµÄ°´¼üÊÂ¼þ
   \   000083                ; Setup parameters for call to function RegisterForKeys
   \   000083   90....       MOV     DPTR,#SampleApp_TaskID
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   12....       LCALL   ??RegisterForKeys?relay
    267          
    268            // By default, all devices start out in Group 1
    269            SampleApp_Group.ID = 0x0001;//×éºÅ
   \   00008B   90....       MOV     DPTR,#SampleApp_Group
   \   00008E   7401         MOV     A,#0x1
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   E4           CLR     A
   \   000093   F0           MOVX    @DPTR,A
    270            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//Éè¶¨×éÃû
   \   000094                ; Setup parameters for call to function osal_memcpy
   \   000094   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000097   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00009A   F5..         MOV     ?V0 + 2,A
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A1   7C07         MOV     R4,#0x7
   \   0000A3   7D00         MOV     R5,#0x0
   \   0000A5   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A7   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A9   12....       LCALL   ??osal_memcpy?relay
   \   0000AC   7403         MOV     A,#0x3
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
    271            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//°Ñ¸Ã×éµÇ¼ÇÌí¼Óµ½APSÖÐ
   \   0000B1                ; Setup parameters for call to function aps_AddGroup
   \   0000B1   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B3   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B5   7914         MOV     R1,#0x14
   \   0000B7   12....       LCALL   ??aps_AddGroup?relay
    272          
    273          #if defined ( LCD_SUPPORTED )
    274            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //Èç¹ûÖ§³ÖLCD£¬ÏÔÊ¾ÌáÊ¾ÐÅÏ¢
   \   0000BA                ; Setup parameters for call to function HalLcdWriteString
   \   0000BA   7900         MOV     R1,#0x0
   \   0000BC   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000BE   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000C0   12....       LCALL   ??HalLcdWriteString?relay
    275          #endif
    276          }
   \   0000C3                REQUIRE ?Subroutine1
   \   0000C3                REQUIRE P0SEL
   \   0000C3                REQUIRE P0DIR
   \   0000C3                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    277          
    278          /*********************************************************************
    279           * @fn      SampleApp_ProcessEvent
    280           *
    281           * @brief   Generic Application Task event processor.  This function
    282           *          is called to process all events for the task.  Events
    283           *          include timers, messages and any other user defined events.
    284           *
    285           * @param   task_id  - The OSAL assigned task ID.
    286           * @param   events - events to process.  This is a bit map and can
    287           *                   contain more than one event.
    288           *
    289           * @return  none
    290           */
    291          //ÓÃ»§Ó¦ÓÃÈÎÎñµÄÊÂ¼þ´¦Àíº¯Êý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    292          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    293          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    294            afIncomingMSGPacket_t *MSGpkt;
    295            (void)task_id;  // Intentionally unreferenced parameter
    296          
    297            if ( events & SYS_EVENT_MSG ) //½ÓÊÕÏµÍ³ÏûÏ¢ÔÙ½øÐÐÅÐ¶Ï
   \   000009   5480         ANL     A,#0x80
   \   00000B   605C         JZ      ??SampleApp_ProcessEvent_0
    298            {
    299              //½ÓÊÕÊôÓÚ±¾Ó¦ÓÃÈÎÎñSampleAppµÄÏûÏ¢£¬ÒÔSampleApp_TaskID±ê¼Ç
    300              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    301              while ( MSGpkt )
    302              {
    303                switch ( MSGpkt->hdr.event )
    304                {
    305                  // Received when a key is pressed
    306                  case KEY_CHANGE://°´¼üÊÂ¼þ
    307                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    308                    break;
    309          
    310                  // Received when a messages is received (OTA) for this endpoint
    311                case AF_INCOMING_MSG_CMD://½ÓÊÕÊý¾ÝÊÂ¼þ,µ÷ÓÃº¯ÊýAF_DataRequest()½ÓÊÕÊý¾Ý
    312                    SampleApp_MessageMSGCB( MSGpkt );//µ÷ÓÃ»Øµ÷º¯Êý¶ÔÊÕµ½µÄÊý¾Ý½øÐÐ´¦Àí
    313                    break;
    314          
    315                  // Received whenever the device changes state in the network
    316                  case ZDO_STATE_CHANGE:
    317                    //Ö»ÒªÍøÂç×´Ì¬·¢Éú¸Ä±ä£¬¾ÍÍ¨¹ýZDO_STATE_CHANGEÊÂ¼þÍ¨ÖªËùÓÐµÄÈÎÎñ¡£
    318                    //Í¬Ê±Íê³É¶ÔÐ­µ÷Æ÷£¬Â·ÓÉÆ÷£¬ÖÕ¶ËµÄÉèÖÃ
    319                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    320                    //if ( (SampleApp_NwkState == DEV_ZB_COORD)//ÊµÑéÖÐÐ­µ÷Æ÷Ö»½ÓÊÕÊý¾ÝËùÒÔÈ¡Ïû·¢ËÍÊÂ¼þ
    321                    if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    322                    {
    323                      // Start sending the periodic message in a regular interval.
    324                      //Õâ¸ö¶¨Ê±Æ÷Ö»ÊÇÎª·¢ËÍÖÜÆÚÐÅÏ¢¿ªÆôµÄ£¬Éè±¸Æô¶¯³õÊ¼»¯ºó´ÓÕâÀï¿ªÊ¼
    325                      //´¥·¢µÚÒ»¸öÖÜÆÚÐÅÏ¢µÄ·¢ËÍ£¬È»ºóÖÜ¶ø¸´Ê¼ÏÂÈ¥
    326                      osal_start_timerEx( SampleApp_TaskID,
    327                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    328                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    329                     
    330                    }
    331                    else
    332                    {
    333                        
    334                    }
    335                    break;
    336          
    337                  default:
    338                    break;
    339                }
    340          
    341                // Release the memory ÊÂ¼þ´¦ÀíÍêÁË£¬ÊÍ·ÅÏûÏ¢Õ¼ÓÃµÄÄÚ´æ
    342                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    343             
    344                // Next - if one is available Ö¸ÕëÖ¸ÏòÏÂÒ»¸ö·ÅÔÚ»º³åÇøµÄ´ý´¦ÀíµÄÊÂ¼þ£¬
    345                //·µ»Øwhile ( MSGpkt )ÖØÐÂ´¦ÀíÊÂ¼þ£¬Ö±µ½»º³åÇøÃ»ÓÐµÈ´ý´¦ÀíÊÂ¼þÎªÖ¹
    346                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   601A         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000052   2449         ADD     A,#0x49
   \   000054   60B9         JZ      ??SampleApp_ProcessEvent_2
   \   000056   80D6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000058                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000058   AA..         MOV     R2,?V0 + 0
   \   00005A   AB..         MOV     R3,?V0 + 1
   \   00005C   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00005F   80CD         SJMP    ??SampleApp_ProcessEvent_4
    347              }
    348          
    349              // return unprocessed events ·µ»ØÎ´´¦ÀíµÄÊÂ¼þ
    350              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   000066   FB           MOV     R3,A
   \   000067   8027         SJMP    ??SampleApp_ProcessEvent_8
    351            }
    352          
    353            // Send a message out - This event is generated by a timer
    354            //  (setup in SampleApp_Init()).
    355            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000069   EE           MOV     A,R6
   \   00006A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006C   501E         JNC     ??SampleApp_ProcessEvent_9
    356            {
    357              // Send the periodic message ´¦ÀíÖÜÆÚÐÔÊÂ¼þ£¬
    358              //ÀûÓÃSampleApp_SendPeriodicMessage()´¦ÀíÍêµ±Ç°µÄÖÜÆÚÐÔÊÂ¼þ£¬È»ºóÆô¶¯¶¨Ê±Æ÷
    359              //¿ªÆôÏÂÒ»¸öÖÜÆÚÐÔÊÂÇé£¬ÕâÑùÒ»ÖÖÑ­»·ÏÂÈ¥£¬Ò²¼´ÊÇÉÏÃæËµµÄÖÜÆÚÐÔÊÂ¼þÁË£¬
    360              //¿ÉÒÔ×öÎª´«¸ÐÆ÷¶¨Ê±²É¼¯¡¢ÉÏ´«ÈÎÎñ
    361              SampleApp_SendPeriodicMessage();
    362              
    363              // Setup to send message again in normal period (+ a little jitter)
    364              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    365                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00006E                ; Setup parameters for call to function osal_rand
   \   00006E   12....       LCALL   ??osal_rand?relay
   \   000071                ; Setup parameters for call to function osal_start_timerEx
   \   000071   EA           MOV     A,R2
   \   000072   24E8         ADD     A,#-0x18
   \   000074   FC           MOV     R4,A
   \   000075   E4           CLR     A
   \   000076   3403         ADDC    A,#0x3
   \   000078   FD           MOV     R5,A
   \   000079   7A01         MOV     R2,#0x1
   \   00007B   7B00         MOV     R3,#0x0
   \   00007D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   12....       LCALL   ??osal_start_timerEx?relay
    366          
    367              // return unprocessed events ·µ»ØÎ´´¦ÀíµÄÊÂ¼þ
    368              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000085   EE           MOV     A,R6
   \   000086   6401         XRL     A,#0x1
   \   000088   FA           MOV     R2,A
   \   000089   EF           MOV     A,R7
   \   00008A   80DA         SJMP    ??SampleApp_ProcessEvent_7
    369            }
    370          
    371            // Discard unknown events
    372            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   00008C   7A00         MOV     R2,#0x0
   \   00008E   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   000090   7F04         MOV     R7,#0x4
   \   000092   02....       LJMP    ?BANKED_LEAVE_XDATA
    373          }
    374          
    375          /*********************************************************************
    376           * Event Generation Functions
    377           */
    378          /*********************************************************************
    379           * @fn      SampleApp_HandleKeys
    380           *
    381           * @brief   Handles all key events for this device.
    382           *
    383           * @param   shift - true if in shift/alt.
    384           * @param   keys - bit field for key events. Valid entries:
    385           *                 HAL_KEY_SW_2
    386           *                 HAL_KEY_SW_1
    387           *
    388           * @return  none
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          void SampleApp_HandleKeys( uint8 shift, uint8 keys )  
   \                     SampleApp_HandleKeys:
    391          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    392            (void)shift;  // Intentionally unreferenced parameter
    393            
    394            if ( keys & HAL_KEY_SW_1 )
    395            {
    396              /* This key sends the Flash Command is sent to Group 1.
    397               * This device will not receive the Flash Command from this
    398               * device (even if it belongs to group 1).
    399               */
    400          #ifndef ZDO_COORDINATOR
    401             char str[] = "key";
    402             if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    403                                 &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    404                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    405                                 sizeof(str),       //·¢ËÍÊý¾Ý³¤¶È
    406                                 (uchar*)str,// ·¢ËÍÊý¾Ý»º³åÇø
    407                                 &SampleApp_TransID,     // ÈÎÎñIDºÅ
    408                                 AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    409                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
    410            {
    411            }
    412          #else
    413            
    414          #endif
    415            
    416            // SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
    417          
    418            }
    419          
    420            if ( keys & HAL_KEY_SW_6 )
    421            {
    422              /* The Flashr Command is sent to Group 1.
    423               * This key toggles this device in and out of group 1.
    424               * If this device doesn't belong to group 1, this application
    425               * will not receive the Flash command sent to group 1.
    426               */
    427            
    428             /*
    429              aps_Group_t *grp;
    430              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    431              if ( grp )
    432              {
    433                // Remove from the group
    434                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    435              }
    436              else
    437              {
    438                // Add to the flash group
    439                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    440              }
    441             */
    442            }
    443          }
   \   000000   02....       LJMP    ?BRET
    444          
    445          /*********************************************************************
    446           * LOCAL FUNCTIONS
    447           */
    448          
    449          /*********************************************************************
    450           * @fn      SampleApp_MessageMSGCB
    451           *
    452           * @brief   Data message processor callback.  This function processes
    453           *          any incoming data - probably from other devices.  So, based
    454           *          on cluster ID, perform the intended action.
    455           *
    456           * @param   none
    457           *
    458           * @return  none
    459           */
    460          //½ÓÊÕÊý¾Ý£¬²ÎÊýÎª½ÓÊÕµ½µÄÊý¾Ý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    462          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    463            uint16 flashTime;
    464            unsigned short len = 4+3+2+1;
    465            byte buf[4+3+2+1]={0}; 
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00001E   740A         MOV     A,#0xa
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    466            
    467            switch ( pkt->clusterId ) //ÅÐ¶Ï´ØID
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 1,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000037   0100         DW        1
   \   000039   01           DB        1
   \   00003A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00003C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00003E   ....         DW        ??SampleApp_MessageMSGCB_2
    468            {
    469              case SAMPLEAPP_PERIODIC_CLUSTERID: //ÊÕµ½¹ã²¥Êý¾Ý
    470               
    471          #ifndef ZDO_COORDINATOR 
    472                //½Úµã
    473          #else
    474                //Ð­µ÷Æ÷
    475                
    476                osal_memset(buf,0,len);
   \                     ??SampleApp_MessageMSGCB_1:
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C0A         MOV     R4,#0xa
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7900         MOV     R1,#0x0
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??osal_memset?relay
    477                osal_memcpy(buf, pkt->cmd.Data, len); //¸´ÖÆÊý¾Ýµ½»º³åÇøÖÐ
   \   000053                ; Setup parameters for call to function osal_memcpy
   \   000053   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000056   F5..         MOV     ?V0 + 0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V0 + 1,A
   \   00005C   75..00       MOV     ?V0 + 2,#0x0
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000064   7C0A         MOV     R4,#0xa
   \   000066   7D00         MOV     R5,#0x0
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   \   000071   12....       LCALL   ??osal_memcpy?relay
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    478                HalUARTWrite(0,buf,sizeof(buf));
   \   000079                ; Setup parameters for call to function HalUARTWrite
   \   000079   7C0A         MOV     R4,#0xa
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   7900         MOV     R1,#0x0
   \   000089   12....       LCALL   ??HalUARTWrite?relay
    479            
    480          #endif
    481                break;
   \   00008C   8033         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   00008E   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000091   F8           MOV     R0,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095                ; Setup parameters for call to function HalLedBlink
   \   000095   8882         MOV     DPL,R0
   \   000097   8983         MOV     DPH,R1
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FA           MOV     R2,A
   \   00009C   8882         MOV     DPL,R0
   \   00009E   8983         MOV     DPH,R1
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   EA           MOV     A,R2
   \   0000A5   2400         ADD     A,#0x0
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   E4           CLR     A
   \   0000AA   39           ADDC    A,R1
   \   0000AB   F5..         MOV     ?V0 + 1,A
   \   0000AD   7402         MOV     A,#0x2
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?US_SHR
   \   0000B4   AC..         MOV     R4,?V0 + 0
   \   0000B6   AD..         MOV     R5,?V0 + 1
   \   0000B8   7B32         MOV     R3,#0x32
   \   0000BA   7A04         MOV     R2,#0x4
   \   0000BC   7908         MOV     R1,#0x8
    482          
    483              case SAMPLEAPP_FLASH_CLUSTERID: //ÊÕµ½×é²¥Êý¾Ý  
    484                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    485                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   0000BE   12....       LCALL   ??HalLedBlink?relay
    486                break;
    487            case SAMPLEAPP_P2P_CLUSTERID:
    488           
    489              break;
    490            }
    491          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000C1   740A         MOV     A,#0xa
   \   0000C3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C6   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    492          
    493          /*********************************************************************
    494           * @fn      SampleApp_SendPeriodicMessage
    495           *
    496           * @brief   Send the periodic message.
    497           *
    498           * @param   none
    499           *
    500           * @return  none
    501           */
    502          //·ÖÎö·¢ËÍÖÜÆÚÐÅÏ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    503          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    504          { 
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    505          #ifndef ZDO_COORDINATOR 
    506            //»ñµÃµÄÊý¾ÝÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾  
    507            char str[4+3+2+1]={0};
    508           //»ñÈ¡ÎÂ¶È
    509            char tempStr[64]={0};
    510            char tempData[6]={0};
    511            HalUARTWrite(0,"read",sizeof("read"));
    512            HalUARTWrite(0,"\n",1);
    513            HalUARTRead(0,tempStr,64);
    514            
    515            int i = 0;
    516            while(tempStr[i]!=0xA1&&tempStr[i+1]!=0xE6){
    517              ++i;
    518            };
    519            if(i==63){
    520              osal_memcpy(tempData,"00.0",4);
    521          //     HalUARTWrite(0,"00.0",4);
    522            }
    523            else{
    524                int j;
    525                i-=4;    
    526                for(j= 0;j<4;j++){
    527                  //Êý¾Ý½âÎö¼°¼ìÑé
    528                  /*
    529                  if(tempStr[i+j]<'0'||tempStr[i+j]>'9'||tempStr[i+j]!='.')
    530                    break;
    531                  */
    532                 tempData[j] = tempStr[i+j];
    533                }
    534                if(j<4){
    535                  //Èç¹û²¶»ñµÄÊý¾ÝÊÇÂÒÂë,Ôò½«Êý¾ÝÉèÖÃÎª00000
    536                  osal_memset(tempData, 0 ,5);
    537                }
    538                tempData[4]='\0';
    539                //HalUARTWrite(0,tempData,5);
    540            }
    541           // HalUARTWrite(0,tempStr,64); 
    542            //HalUARTWrite(0,"\n",1); 
    543            //×Ç¶È
    544            uint16 turbidity = ReadTurData();
    545            // sprintf(str,"%4d",turbidity);
    546            //HalUARTWrite(0,str,4);  
    547            //phÖµ
    548            int ph = ReadPhData();
    549            ph = (ph-86)/2+7;
    550            sprintf(str,"%4s%3d%2d",tempData,turbidity,ph);
    551            HalUARTWrite(0,str,sizeof(str));
    552             // µ÷ÓÃAF_DataRequest½«Êý¾ÝÎÞÏß¹ã²¥³öÈ¥
    553            if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    554                                 &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    555                                 SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    556                                 sizeof(str),       //·¢ËÍÊý¾Ý³¤¶È
    557                                 (uchar*)str,// ·¢ËÍÊý¾Ý»º³åÇø
    558                                 &SampleApp_TransID,     // ÈÎÎñIDºÅ
    559                                 AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    560                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
    561            {
    562            }
    563            else
    564            {
    565              HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
    566              // Error occurred in request to send.
    567            }
    568          #elif defined ZDO_COORDINATOR
    569          
    570            
    571          
    572          #endif 
    573            
    574           
    575          }
   \   000000   02....       LJMP    ?BRET
    576          
    577          /*********************************************************************
    578           * @fn      SampleApp_SendFlashMessage
    579           *
    580           * @brief   Send the flash message to group 1.
    581           *
    582           * @param   flashTime - in milliseconds
    583           *
    584           * @return  none
    585           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    586          void SampleApp_SendFlashMessage( uint16 flashTime )  
   \                     SampleApp_SendFlashMessage:
    587          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    588            uint8 buffer[3];
    589            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    590            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    591            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    592          
    593            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    594                                 SAMPLEAPP_FLASH_CLUSTERID,
    595                                 3,
    596                                 buffer,
    597                                 &SampleApp_TransID,
    598                                 AF_DISCV_ROUTE,
    599                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029                REQUIRE ?Subroutine2
   \   000029                ; // Fall through to label ?Subroutine2
    600            {
    601            }
    602            else
    603            {
    604              // Error occurred in request to send.
    605            }
    606          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75..1E       MOV     ?V0 + 0,#0x1e
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000008   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00000B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000013   7403         MOV     A,#0x3
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   8582..       MOV     ?V0 + 0,DPL
   \   00001B   8583..       MOV     ?V0 + 1,DPH
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..03       MOV     ?V0 + 0,#0x3
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..02       MOV     ?V0 + 0,#0x2
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7920         MOV     R1,#0x20
   \   000038   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00003A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003C   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   00003E   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000040   12....       LCALL   ??AF_DataRequest?relay
   \   000043   7409         MOV     A,#0x9
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004D   7F02         MOV     R7,#0x2
   \   00004F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    607          void SampleApp_Send_P2P_Message(void){
   \                     SampleApp_Send_P2P_Message:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    608            uchar cmd[3] ="LED";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "LED">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "LED">` & 0xff
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    609            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    610                                 SAMPLEAPP_FLASH_CLUSTERID,
    611                                 3,
    612                                 cmd,
    613                                 &SampleApp_TransID,
    614                                 AF_DISCV_ROUTE,
    615                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   80..         SJMP    ?Subroutine2
    616            {
    617            }
    618          }
    619          /*********************************************************************
    620          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    621           uint16 ReadTurData( void )
   \                     ReadTurData:
    622          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    623            uint16 reading = 0;
    624            
    625            /* Enable channel */
    626            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    627            
    628            /* writing to this register starts the extra conversion */
    629            ADCCON3 = 0x86;// AVDD5 Òý½Å  00£º 64 ³éÈ¡ÂÊ(7 Î»ENOB)  0110£º AIN6
   \   000003   75B686       MOV     0xb6,#-0x7a
    630            
    631            /* Wait for the conversion to be done */
    632            while (!(ADCCON1 & 0x80));
   \                     ??ReadTurData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadTurData_0
    633            
    634            /* Disable channel after done conversion */
    635            ADCCFG &= (0x40 ^ 0xFF); //°´Î»Òì»ò¡£Èç1010^1111=0101£¨¶þ½øÖÆ£©
   \   00000C   53F2BF       ANL     0xf2,#0xbf
    636            
    637            /* Read the result */
    638            reading = ADCL;
   \   00000F                REQUIRE ?Subroutine0
   \   00000F                REQUIRE ADCCFG
   \   00000F                REQUIRE ADCCON3
   \   00000F                REQUIRE ADCCON1
   \   00000F                REQUIRE ADCL
   \   00000F                REQUIRE ADCH
   \   00000F                ; // Fall through to label ?Subroutine0
    639            reading |= (int16) (ADCH << 8); 
    640            
    641            reading >>= 8;
    642            
    643            return (reading);
    644          } 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E5BA         MOV     A,0xba
   \   000002   E5BB         MOV     A,0xbb
   \   000004   FA           MOV     R2,A
   \   000005   E4           CLR     A
   \   000006   FB           MOV     R3,A
   \   000007   02....       LJMP    ?BRET
    645          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    646          uint16 ReadPhData( void )
   \                     ReadPhData:
    647          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    648            uint16 reading = 0;
    649            
    650            P0DIR &= ~0x20;  // ÉèÖÃP0.5ÎªÊäÈë·½Ê½
   \   000000   53FDDF       ANL     0xfd,#0xdf
    651            asm("NOP");asm("NOP");
   \   000003   00           NOP
   \   000004   00           NOP
    652            
    653            /* Clear ADC interrupt flag */
    654            ADCIF = 0;
   \   000005   C28D         CLR     0x88.5
    655            
    656            //ADCCON3 = (0x80 | HAL_ADC_DEC_064 | HAL_ADC_CHANNEL_5);
    657            ADCCON3 = (0x80 | 0x00 | 0x05);
   \   000007   75B685       MOV     0xb6,#-0x7b
    658            /* Wait for the conversion to finish */
    659            while ( !ADCIF );
   \                     ??ReadPhData_0:
   \   00000A   A28D         MOV     C,0x88.5
   \   00000C   50FC         JNC     ??ReadPhData_0
    660            
    661            asm("NOP");asm("NOP");
   \   00000E   00           NOP
   \   00000F   00           NOP
    662            
    663            /* Read the result */
    664            reading = ADCL;
   \   000010   80..         SJMP    ?Subroutine0
   \   000012                REQUIRE P0DIR
   \   000012                REQUIRE _A_TCON
   \   000012                REQUIRE ADCCON3
   \   000012                REQUIRE ADCL
   \   000012                REQUIRE ADCH
    665            reading |= (int16) (ADCH << 8);
    666            reading >>= 8;
    667            
    668            return reading;
    669          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 Example"
   \            35333020
   \            4578616D
   \            706C6500

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??myDelay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    myDelay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadTurData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadTurData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadPhData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadPhData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "stop">`:
   \   000000   73746F70     DB "stop"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED">`:
   \   000000   4C4544       DB 4CH, 45H, 44H

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     ReadPhData                        0      0      0
     ReadTurData                       0      0      0
     SampleApp_HandleKeys              0      0      0
     SampleApp_Init                    0      0     14
       -> MT_UartInit                  0      0     22
       -> MT_UartRegisterTaskID        0      0     22
       -> HalUARTWrite                 0      0     22
       -> HalUARTWrite                 0      0     22
       -> afRegister                   0      0     22
       -> RegisterForKeys              0      0     22
       -> osal_memcpy                  0      0     28
       -> aps_AddGroup                 0      0     22
       -> HalLcdWriteString            0      0     22
     SampleApp_MessageMSGCB            2      0     36
       -> osal_memset                  0      0     42
       -> osal_memcpy                  0      0     48
       -> HalUARTWrite                 0      0     42
       -> HalLedBlink                  0      0     42
     SampleApp_ProcessEvent            0      0     12
       -> osal_msg_receive             0      0     24
       -> osal_start_timerEx           0      0     24
       -> osal_msg_deallocate          0      0     24
       -> osal_msg_receive             0      0     24
       -> SampleApp_MessageMSGCB       0      0     24
       -> osal_rand                    0      0     24
       -> osal_start_timerEx           0      0     24
     SampleApp_SendFlashMessage        1      0     22
       -> AF_DataRequest               0      0     44
     SampleApp_SendPeriodicMessage     0      0      0
     SampleApp_Send_P2P_Message        2      0     22
       -> AF_DataRequest               0      0     44
     myDelay                           0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_TCON                                  1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     P0DIR                                    1
     AppTitle                                16
     myDelay                                 31
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         195
     ?Subroutine1                             5
     SampleApp_ProcessEvent                 149
     SampleApp_HandleKeys                     3
     SampleApp_MessageMSGCB                 201
     ?Subroutine3                            12
     SampleApp_SendPeriodicMessage            3
     SampleApp_SendFlashMessage              41
     ?Subroutine2                            82
     SampleApp_Send_P2P_Message              33
     ReadTurData                             15
     ?Subroutine0                            10
     ReadPhData                              18
     ?<Initializer for AppTitle>             16
     ??myDelay?relay                          6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??ReadTurData?relay                      6
     ??ReadPhData?relay                       6
     ?<Constant "stop">                       5
     ?<Constant "UartInit OK\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant {0}>                         10
     ?<Constant "LED">                        3

 
 798 bytes in segment BANKED_CODE
  60 bytes in segment BANK_RELAYS
   8 bytes in segment SFR_AN
  16 bytes in segment XDATA_I
  16 bytes in segment XDATA_ID
  65 bytes in segment XDATA_ROM_C
  53 bytes in segment XDATA_Z
 
 874 bytes of CODE  memory
  65 bytes of CONST memory
   0 bytes of DATA  memory (+ 8 bytes shared)
  69 bytes of XDATA memory

Errors: none
Warnings: none
